---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/8.5
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Sat, 16 Jul 2022 15:49:31 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="google-site-verification" content="pCJOncrPbFAcrD5F-MHMv6LeACWDKF7ioMI5AGhBH1o" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=7sdLsP-6aQOfzQENdG68fizcss0Nfv6ByddRS2mIdfU1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=G1q-2aYfE_AZOMkvKzK2sihII6pAme99SwqvhmGRcac1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="UXFc8pL/6YIhRFQtcK6XdtIIzzGPNkDqE0ot5hHeiTBXial15KGQmt/AtW4srzKYDwA6oHj3Aj2KbCJskrmRnF91OJ3E82xswpk6cKGdt6HHiIjtfDk99EDNrwuTG85apYRklMmqKg1SY7lWys5u8vvlLcNYzfHOIqYMSqrvZBPOAbzMLak3eIa9KdZSTo9vprhpxyte69kfQeowoutxADaxH6CnKifTwkuvl7/5tTqlyotPuQfbFXbltW5qitFhm7YD7zc/lk2beIquqWS7p2TuCq1BWCD8husnrMIN8LBHh3g/C8n09KV/7rmoRlTT7DO7oVPkIXhUcxLdRq/7gl+DP/2qq+j2jxW1E3o6BcMuLnLxCLOlX/T4e1NqiyPzVHdA362BHCWntgNlHaRjqsugrLw9h0sE2YihlIXL96HIaroG705aVw12pMKCjMxhRK7dk7L4SbGFOmuwxZX9tj7UfJUXNd5BbobVBSpE7FedmPu1erOS0TXJFcFCrGwK+ggJoDSnJAL6K64nFU08zMyGtQ/7+e/o4HwguBlRkD3KsfEaJzKIf5tzhLi2n1PaViwnXMnR2HPZxzsVO4yDTgBf7uaV1QlGQWC0Gb7Y7r3DYNOlvAQykslOS0cWZWlbodY0mtCyCqjY2Zi+64e04JRRvVNWe/wOMy/UBfzVQ8Kdo5s7X9hJxBf/UgHQoW0jNTNltrqcueDsletHFVg/cI9WK/f2X4I+9bs3IbAZnCz8ZpP3xaOd+QmxXEUXSKqQ+gva2yxXfEbXKchCqT6mbvmZfrU4K1abuDpELzvQe7VgWt4d2B7vpndYSB5g2WsjA+O00bsDRRznWRNC7whJOyale5+tQmEk35d1wewIcKHjIF3WtQr+xJhnz9HO1H8f0RqYcwMIVRWAL4/FmtuXZzwJm9L5Y3MEWgC/rikp4+ZOR6Pmi9llZlBz0hqzLZhKyBMJe4t0pTBkjYbhRqkKwlNiAAvEO5cg64pLi0FP95Kq4/4vM/ncMYE+IVusnu7h9zB8La19smYeQjHpDGCdRtFMkR9/rg1dlR5fvaYzGD59fIU4G+Kyu5d0TLm8+ZAcSwmCwQmo/U7sY7LB/ChPVL3PLc+5MnM2Ujpcx5dIuYJnRgxP60+6KPKTzUAaytjVwFfYLH1QVQZma5HAeOJ4j2Q4GTu0t+8JY0YCj9pc3Y5+yGmrETxueKbkDkwARA4AoXD7Q59Co22cX9rFI2oH7cKjZYocwpM2xpk8w8uQpodoC5uc9g6GVBDK2tnEYbeVmLPmQV/CdQrrMcOAoDyH1ANH8dd+MiN9c4nldXYFEBq2jxwDo51ebRNAGF3k7cvjqAyXisnb9N6tgURVKJi85McMtQx1VoWIqiI7TuSEWVxkqZfTmdVncsfZ3gJ6eEhUwHDrBZVIEHsQKsGNxXAxjvFEAi/hPc0C01QgolHxPfwFJMjREl/cqbwAlFQ9rD7QW7yqb7FPNOlEsO9Iw+k1g7HfCm7a2ZDOcRtIED8Ee23G1IxX6o6DPwFurizUXq3mH5EQZkyNpc1dW4rrUHPsPSdJepFqlJRSWaaYkOV76skubo30wD3Sx2TxSvkUQGcq63CZgybiIVoSU/e/Zo2moQ==" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
   
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden; 
           overflow-x: hidden; 
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }       
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-24-24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Board of Health</option>
	<option value="63*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-3-63*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="65*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-5-65*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="33*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-33*ef58236b-fce9-45cc-becf-c31c7a95d20f">Information Technology Sub-Committee</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="126*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-126*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting - Planning Committee and Built Heritage Sub-committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="35*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-35*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="112*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-112*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Community and Protective Services Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="39*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-39*ef58236b-fce9-45cc-becf-c31c7a95d20f">Nominating Committee</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Board of Health</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="5*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-5-5*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Ottawa City Council</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="45*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-45*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="52*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-52*ef58236b-fce9-45cc-becf-c31c7a95d20f">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        
                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>
   
    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 05 July 2022' href='VideoStream.aspx?MeetingId=d52bdd86-1f73-4e14-ba7f-53c7a36aac76' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 20, 2022 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd52bdd86-1f73-4e14-ba7f-53c7a36aac76' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, July 20, 2022 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 05 July 2022' href='VideoStream.aspx?MeetingId=d52bdd86-1f73-4e14-ba7f-53c7a36aac76' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75349' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Committee of Adjustment - Panel 3 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 20 July 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75348' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=d52bdd86-1f73-4e14-ba7f-53c7a36aac76&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 20 juillet 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 05 July 2022' href='VideoStream.aspx?MeetingId=f5465f2a-fcd6-4282-8139-0136409cf6ed' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 20, 2022 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df5465f2a-fcd6-4282-8139-0136409cf6ed' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f5465f2a-fcd6-4282-8139-0136409cf6ed&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, July 20, 2022 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 05 July 2022' href='VideoStream.aspx?MeetingId=f5465f2a-fcd6-4282-8139-0136409cf6ed' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 20 July 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=89320' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=f5465f2a-fcd6-4282-8139-0136409cf6ed&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 20 juillet 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 05 July 2022' href='VideoStream.aspx?MeetingId=1656f1c6-ce4a-40f6-8421-955833ef6595' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 20, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1656f1c6-ce4a-40f6-8421-955833ef6595' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1656f1c6-ce4a-40f6-8421-955833ef6595&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, July 20, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 05 July 2022' href='VideoStream.aspx?MeetingId=1656f1c6-ce4a-40f6-8421-955833ef6595' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75290' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Committee of Adjustment - Panel 2 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 20 July 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=75289' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 20 July 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=1656f1c6-ce4a-40f6-8421-955833ef6595&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 20 juillet 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 July 2022' href='VideoStream.aspx?MeetingId=28635548-80bb-4230-877d-1b2df0fa816b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 09, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D28635548-80bb-4230-877d-1b2df0fa816b' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" href='Meeting.aspx?Id=28635548-80bb-4230-877d-1b2df0fa816b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" href='Meeting.aspx?Id=28635548-80bb-4230-877d-1b2df0fa816b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=28635548-80bb-4230-877d-1b2df0fa816b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 09, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 July 2022' href='VideoStream.aspx?MeetingId=28635548-80bb-4230-877d-1b2df0fa816b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-4-64"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM'>Community and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=667a3326-7d82-455d-a3d0-e2054d08c1be' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 18, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D667a3326-7d82-455d-a3d0-e2054d08c1be' aria-hidden='true' aria-label='Share Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" href='Meeting.aspx?Id=667a3326-7d82-455d-a3d0-e2054d08c1be&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" href='Meeting.aspx?Id=667a3326-7d82-455d-a3d0-e2054d08c1be&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=667a3326-7d82-455d-a3d0-e2054d08c1be&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, August 18, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=667a3326-7d82-455d-a3d0-e2054d08c1be' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=a22bd85e-5d2f-459f-9601-28d291e358b6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 23, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da22bd85e-5d2f-459f-9601-28d291e358b6' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" href='Meeting.aspx?Id=a22bd85e-5d2f-459f-9601-28d291e358b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" href='Meeting.aspx?Id=a22bd85e-5d2f-459f-9601-28d291e358b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a22bd85e-5d2f-459f-9601-28d291e358b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, August 23, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=a22bd85e-5d2f-459f-9601-28d291e358b6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, August 25, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=352101d4-8aac-456a-acc6-7ede0771df38' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 25, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D352101d4-8aac-456a-acc6-7ede0771df38' aria-hidden='true' aria-label='Share Planning Committee Thursday, August 25, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" href='Meeting.aspx?Id=352101d4-8aac-456a-acc6-7ede0771df38&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" href='Meeting.aspx?Id=352101d4-8aac-456a-acc6-7ede0771df38&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=352101d4-8aac-456a-acc6-7ede0771df38&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, August 25, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=352101d4-8aac-456a-acc6-7ede0771df38' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM'>Ottawa City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=59a74d3a-4563-4269-9196-ab3bea684571' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 31, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59a74d3a-4563-4269-9196-ab3bea684571' aria-hidden='true' aria-label='Share Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=59a74d3a-4563-4269-9196-ab3bea684571' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 13 July 2022' href='VideoStream.aspx?MeetingId=4f806962-c059-4605-b48c-751daee8bd85' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 01, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4f806962-c059-4605-b48c-751daee8bd85' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 13 July 2022' href='VideoStream.aspx?MeetingId=4f806962-c059-4605-b48c-751daee8bd85' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, September 08, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 08, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Deff4bac2-da9f-4dc7-8ad3-a9fecf3192c1' aria-hidden='true' aria-label='Share Planning Committee Thursday, September 08, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='Meeting.aspx?Id=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='Meeting.aspx?Id=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=eff4bac2-da9f-4dc7-8ad3-a9fecf3192c1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=c4686e53-1c90-4603-b619-9a4cccfe26d5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 13, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc4686e53-1c90-4603-b619-9a4cccfe26d5' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c4686e53-1c90-4603-b619-9a4cccfe26d5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c4686e53-1c90-4603-b619-9a4cccfe26d5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c4686e53-1c90-4603-b619-9a4cccfe26d5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=c4686e53-1c90-4603-b619-9a4cccfe26d5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=7810ff59-75b5-4788-ac72-26924fde542e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7810ff59-75b5-4788-ac72-26924fde542e' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=7810ff59-75b5-4788-ac72-26924fde542e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Transit Commission Wednesday, September 14, 2022 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 11 April 2022' href='VideoStream.aspx?MeetingId=b70b429d-2d3e-4caf-b4bc-39593ff1b222' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 14, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db70b429d-2d3e-4caf-b4bc-39593ff1b222' aria-hidden='true' aria-label='Share Transit Commission Wednesday, September 14, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='Meeting.aspx?Id=b70b429d-2d3e-4caf-b4bc-39593ff1b222&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='Meeting.aspx?Id=b70b429d-2d3e-4caf-b4bc-39593ff1b222&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b70b429d-2d3e-4caf-b4bc-39593ff1b222&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 11 April 2022' href='VideoStream.aspx?MeetingId=b70b429d-2d3e-4caf-b4bc-39593ff1b222' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-4-64"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM'>Community and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=ca84d9b4-1046-45d4-8991-3fa60e8de947' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 15, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dca84d9b4-1046-45d4-8991-3fa60e8de947' aria-hidden='true' aria-label='Share Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='Meeting.aspx?Id=ca84d9b4-1046-45d4-8991-3fa60e8de947&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='Meeting.aspx?Id=ca84d9b4-1046-45d4-8991-3fa60e8de947&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ca84d9b4-1046-45d4-8991-3fa60e8de947&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 11 July 2022' href='VideoStream.aspx?MeetingId=ca84d9b4-1046-45d4-8991-3fa60e8de947' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Board of Health Monday, September 19, 2022 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 21 June 2022' href='VideoStream.aspx?MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 19, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8ec6c6bd-ee92-4763-b77e-c354f535e67d' aria-hidden='true' aria-label='Share Board of Health Monday, September 19, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='Meeting.aspx?Id=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='Meeting.aspx?Id=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 21 June 2022' href='VideoStream.aspx?MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-69"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM'>Standing Committee on Environmental Protection, Water and Waste Management</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Standing Committee on Environmental Protection, Water and Waste Management 15 June 2022' href='VideoStream.aspx?MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 20, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' aria-hidden='true' aria-label='Share Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='Meeting.aspx?Id=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='Meeting.aspx?Id=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Standing Committee on Environmental Protection, Water and Waste Management 15 June 2022' href='VideoStream.aspx?MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM'>Ottawa City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 21, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D74e2acb7-eaa9-4c2d-9c67-b03e1311e957' aria-hidden='true' aria-label='Share Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" href='Meeting.aspx?Id=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" href='Meeting.aspx?Id=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, September 22, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=c8420025-2d1e-40f2-b63c-a934c067f863' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 22, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc8420025-2d1e-40f2-b63c-a934c067f863' aria-hidden='true' aria-label='Share Planning Committee Thursday, September 22, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c8420025-2d1e-40f2-b63c-a934c067f863&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c8420025-2d1e-40f2-b63c-a934c067f863&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c8420025-2d1e-40f2-b63c-a934c067f863&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=c8420025-2d1e-40f2-b63c-a934c067f863' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-123"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM'>Arts, Culture and Recreation Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Arts, Culture and Recreation Advisory Committee 11 July 2022' href='VideoStream.aspx?MeetingId=14bbc851-dae9-403a-83d2-e154ff74036a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 27, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D14bbc851-dae9-403a-83d2-e154ff74036a' aria-hidden='true' aria-label='Share Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='Meeting.aspx?Id=14bbc851-dae9-403a-83d2-e154ff74036a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='Meeting.aspx?Id=14bbc851-dae9-403a-83d2-e154ff74036a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=14bbc851-dae9-403a-83d2-e154ff74036a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Arts, Culture and Recreation Advisory Committee 11 July 2022' href='VideoStream.aspx?MeetingId=14bbc851-dae9-403a-83d2-e154ff74036a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM'>Ottawa City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 05, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D68fadf4b-ed94-4cff-ba9f-3d6efaed5666' aria-hidden='true' aria-label='Share Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" href='Meeting.aspx?Id=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" href='Meeting.aspx?Id=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa City Council 13 July 2022' href='VideoStream.aspx?MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 11, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D115babc3-5b80-4387-880c-8f15c68b4d28' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='Meeting.aspx?Id=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='Meeting.aspx?Id=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 11, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df50e0a04-106d-4cdd-a952-8856f5c11894' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 27, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9a7f9fcb-ae12-4780-8af1-cc508f663001' aria-hidden='true' aria-label='Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 08, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df6b436fb-9943-452c-b2c3-60a12ded6901' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D62b62418-df38-42f6-ae9d-8bc3079ef9f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>
                                
                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2147)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(220)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(261)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(211)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(167)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>52</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>101</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>14</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>95</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>205</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>145</span><span class='Year Year2016'>22</span><span class='Year Year2017'>23</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>16</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>144</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>142</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>88</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>14</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>115</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+-+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Joint meeting - Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting - Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Planning and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Ottawa Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>51</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Ottawa City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2022'>7</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>105</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>90</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>204</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>25</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2017'>1</span><span class='Year Year2018'>1</span><span class='Year Year2019'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>28</span><span class='Year Year2016'>3</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>23</span><span class='Year Year2016'>3</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>16</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>98</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>11</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>93</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>                          
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>
    
    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>
       
        var mincount = 20;
        var maxcount = 40;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();
            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    document.getElementById(btnShowMoreId).click();
                    //comment out fake lazy loading code
                    //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                    //mincount = mincount + 20;
                    //maxcount = maxcount + 20;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }
            
            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();                    
                }
                else {
                    mt.show();                    
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded") && !container.hasClass("Loading")) {
                container.addClass("Loading");

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered");
                            SelectYearOption();
                        }

                        container.addClass("Loaded");
                        container.removeClass("Loading");
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered")) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered");
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });
        
        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = "?";
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">       
        function postbackButtonClick() { 
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            
            
            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();
            
            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            
            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {                          
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();
                
                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }
        
    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {   
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);
                
            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }
            
            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
        });


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'  
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'  
            };
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }
        
        function loadCalendarMeetings() { 
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();
            
            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: { 
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    } 
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");
                    
                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){ 
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300); 
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });
                    
                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");
            
        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) { 
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);
            
            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();    
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();
        
        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }
                    
                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){ 
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){ 
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus(); 
                        }, 100); 
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict'); 
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType'); 
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate'); 
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem'); 
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict'); 
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });
            
            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });        
        function closeDateRangeFilter()
        {    
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();  
            closeDateRangeFilter();
        });

        
    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();                    

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();
                            
                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }
                    
                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){
            
            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){ 
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){ 
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {
               
                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }
                
               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();
                
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);
        

        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/

       
        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();
            
        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({                   
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });
                    },
                  
                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                } 
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) { 
                if (event.keyCode == 27) { 
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');   
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');      
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL; 
                }
               
            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });
        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
           
            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                   
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {
                
                
                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {
                    
                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {
                   
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
              
                $("#btnNextMonth").click(function () {
                  
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }
                        
                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50241300</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Sat, 16 Jul 2022 15:49:32 GMT
recorded_with: VCR 6.1.0
