---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/Meeting.aspx?Agenda=Agenda&Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jan 2024 03:34:33 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=j0pbe2indandzas03h2r4mf2; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 845b10448b633972-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 15 Jan 2024 03:34:33 GMT
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/Meeting.aspx?Agenda=Agenda&Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jan 2024 03:34:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=tmtraqu2twmsquabhnh0bpii; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 845b104c581439e7-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQoNCg0KDQoNCjxodG1sIGxhbmc9ImVuIj4NCjxoZWFkPjxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPjxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZTtjaHJvbWU9MSIgLz48bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIgLz48dGl0bGU+DQoJQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIC0gU2VwdGVtYmVyIDAxLCAyMDIyDQo8L3RpdGxlPjxzY3JpcHQgc3JjPSIvYnVuZGxlcy9tb2Rlcm5penI/dj1pbkNWdUVGZTZKNFEwN0EwQWNSc2JKaWNfVUU1TXdwUk1OR2NPdGs5NFRFMSI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2J1bmRsZXMvanF1ZXJ5P3Y9OE9vczBhdkRaeVBnLWNieVZ6dmtJZkVSSUUxREdTZTNzUlFkQ1NZcmdFUTEiPjwvc2NyaXB0Pg0KPHNjcmlwdCBzcmM9Ii9idW5kbGVzL01lZXRpbmc/dj1BVnBXQnBocGR4eUFzOEVuVnFJZ2ZHUGNJeTk2NHlDR0hFOFBCUjVXN3lZMSI+PC9zY3JpcHQ+DQoNCiAgICAgICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vcG9wcGVyLmpzQDEuMTYuMC9kaXN0L3VtZC9wb3BwZXIubWluLmpzIiBpbnRlZ3JpdHk9InNoYTM4NC1RNkU5Ukh2Ykl5WkZKb2Z0KzJtSmJIYUVXbGRsdkk5SU9ZeTVuM3pWOXp6VHRtSTNVa3NkUVJWdm94TWZvb0FvIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4NCiAgICA8bGluayBocmVmPSIvQ29udGVudC9jc3M/dj11VERhZEFWTjJrWGd2X0lsS2EzOElvTEJKRURoSnlxQkRfMFNPNmhPV1RnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayByZWw9J3N0eWxlc2hlZXQnIHR5cGU9J3RleHQvY3NzJyBocmVmPScuL0ZpbGVTdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjQzJz48bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4c3QuaWNvbnM4LmNvbS92dWUtc3RhdGljL2xhbmRpbmdzL2xpbmUtYXdlc29tZS9saW5lLWF3ZXNvbWUvMS4zLjAvY3NzL2xpbmUtYXdlc29tZS5taW4uY3NzIiAvPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iQ29udGVudC9DdXN0b21pemF0aW9ucy5jc3MiIC8+PGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJDb250ZW50L01lZXRpbmcuY3NzIiAvPjxsaW5rIGhyZWY9IkNvbnRlbnQvQ2FsZW5kZXJWaWV3U3R5bGUtdXBkYXRlZC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz48bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3BlbitTYW5zIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiAvPjxsaW5rIGhyZWY9ImZhdmljb24uaWNvIiByZWw9InNob3J0Y3V0IGljb24iIHR5cGU9ImltYWdlL3gtaWNvbiIgLz4NCg0KICAgIDwhLS0gVGhpcyBmaWxlIG11c3QgZXhpc3QsIG90aGVyd2lzZSB3ZSdsbCBnZXQgc2VydmVyIHNpZGUgZXJyb3IgLS0+DQogICAgPCEtLSBlU0NSSUJFIEdsb2JhbCBzaXRlIHRhZyAoZ3RhZy5qcykgLSBHb29nbGUgQW5hbHl0aWNzIC0tPiANCg0KPHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMTc4NDExMzk3LTQ5Ij48L3NjcmlwdD4gDQoNCjxzY3JpcHQ+IA0KDQogIHdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdOyANCg0KICBmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9IA0KDQogIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7IA0KDQogIA0KDQogIGd0YWcoJ2NvbmZpZycsICdVQS0xNzg0MTEzOTctNDknKTsgDQoNCjwvc2NyaXB0PiANCg0KICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQoNCiAgICAgICAgYm9keSB7DQogICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsNCiAgICAgICAgfQ0KDQogICAgICAgIGEsIEE6bGluaywgQTp2aXNpdGVkIHsNCiAgICAgICAgICAgIGNvbG9yOiAjMDA1OUI4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmNvbW1lbnQtbGluayB7DQogICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOw0KICAgICAgICB9DQoNCiAgICAgICAgLmNvbW1lbnQtbGluazpob3ZlciB7DQogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5lbWJlZC1yZXNwb25zaXZlIHsNCiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICBwYWRkaW5nOiAwOw0KICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICAgICAgfQ0KDQogICAgICAgICAgICAuZW1iZWQtcmVzcG9uc2l2ZTo6YmVmb3JlIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jazsNCiAgICAgICAgICAgICAgICBjb250ZW50OiAiIjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmUgLmVtYmVkLXJlc3BvbnNpdmUtaXRlbSwgLmVtYmVkLXJlc3BvbnNpdmUgaWZyYW1lLCAuZW1iZWQtcmVzcG9uc2l2ZSBlbWJlZCwgLmVtYmVkLXJlc3BvbnNpdmUgb2JqZWN0LCAuZW1iZWQtcmVzcG9uc2l2ZSB2aWRlbyB7DQogICAgICAgICAgICAgICAgLypwb3NpdGlvbjogYWJzb2x1dGU7Ki8NCiAgICAgICAgICAgICAgICB0b3A6IDA7DQogICAgICAgICAgICAgICAgYm90dG9tOiAwOw0KICAgICAgICAgICAgICAgIGxlZnQ6IDA7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICAgICAgICAgIGJvcmRlcjogMDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAuZW1iZWQtcmVzcG9uc2l2ZS0yMWJ5OTo6YmVmb3JlIHsNCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA0Mi44NTcxNDMlOw0KICAgICAgICB9DQoNCiAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmUtMTZieTk6OmJlZm9yZSB7DQogICAgICAgICAgICBwYWRkaW5nLXRvcDogNTYuMjUlOw0KICAgICAgICB9DQoNCiAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmUtNGJ5Mzo6YmVmb3JlIHsNCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA3NSU7DQogICAgICAgIH0NCg0KICAgICAgICAuZW1iZWQtcmVzcG9uc2l2ZS0xYnkxOjpiZWZvcmUgew0KICAgICAgICAgICAgcGFkZGluZy10b3A6IDEwMCU7DQogICAgICAgIH0NCg0KDQogICAgICAgIGh0bWwsIGJvZHksIGZvcm0gew0KICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICAgICAgfQ0KDQogICAgICAgICNBZ2VuZGFkcm9wZG93bm1lbnUuZHJvcGRvd24tbWVudSB7DQogICAgICAgICAgICByaWdodDogMHB4Ow0KICAgICAgICAgICAgbGVmdDogMHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLkZvbnRJbmNyZWFzZSAqIHsNCiAgICAgICAgICAgIGZvbnQtc2l6ZTogMWVtOw0KICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgICAgIH0NCg0KICAgICAgICAuRm9udERlY3JlYXNlICogew0KICAgICAgICAgICAgZm9udC1zaXplOiAwLjg1ZW07DQogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5wYW5lbCB7DQogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMnB4Ow0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsNCiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50Ow0KICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgICAgICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDFweCAxcHggcmdiYSgwLDAsMCwuMDUpOw0KICAgICAgICAgICAgYm94LXNoYWRvdzogMCAxcHggMXB4IHJnYmEoMCwwLDAsLjA1KTsNCiAgICAgICAgfQ0KDQogICAgICAgIC5wYW5lbC1kZWZhdWx0IHsNCiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2RkZDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5wYW5lbC1oZWFkaW5nIHsNCiAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMTVweDsNCiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB0cmFuc3BhcmVudDsNCiAgICAgICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAzcHg7DQogICAgICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzcHg7DQogICAgICAgIH0NCg0KICAgICAgICAucGFuZWwtZGVmYXVsdCA+IC5wYW5lbC1oZWFkaW5nIHsNCiAgICAgICAgICAgIGNvbG9yOiAjMDAwOw0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsNCiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2RkZDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5wYW5lbC1ib2R5IHsNCiAgICAgICAgICAgIHBhZGRpbmc6IDE1cHg7DQogICAgICAgIH0NCg0KICAgICAgICAvKnVsLm5hdmJhci1uYXYgPiBsaSB7DQogICAgICAgICAgICAgICAgZGlzcGxheTppbmxpbmUtYmxvY2s7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5uYXZiYXItbmF2ID4gbGkgPiBhIHsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDo1cHggIWltcG9ydGFudDsgcGFkZGluZy1ib3R0b206NXB4ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAubmF2YmFyIHsNCiAgICAgICAgICAgICAgICBtaW4taGVpZ2h0OjMycHggIWltcG9ydGFudA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLm5hdmJhci10b2dnbGUgew0KICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6NHB4Ow0KICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206NHB4Ow0KICAgICAgICAgICAgICAgIHBhZGRpbmctdG9wOjRweDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTo0cHg7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5hZmZpeCB7IA0KICAgICAgICAgICAgICAgIHJpZ2h0OjBweDsNCiAgICAgICAgICAgICAgICB0b3A6MzJweDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLmFmZml4LXRvcCB7DQogICAgICAgICAgICAgICAgcmlnaHQ6MHB4Ow0KICAgICAgICAgICAgICAgIHBvc2l0aW9uOmZpeGVkOw0KICAgICAgICAgICAgICAgIHRvcDozMnB4Ow0KICAgICAgICAgICAgfSovDQoNCiAgICAgICAgLkRldGFpbHMgPiBkaXYgew0KICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMHB4ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDIlOw0KICAgICAgICB9DQoNCiAgICAgICAgYS5kcm9wZG93bi10b2dnbGU6Zm9jdXMgew0KICAgICAgICAgICAgb3V0bGluZTogc29saWQgMXB4ICNGRkZGRkY7DQogICAgICAgIH0NCg0KICAgICAgICAjbG5rUG93ZXJlZEJ5OmZvY3VzIHsNCiAgICAgICAgICAgIG91dGxpbmU6IHNvbGlkIDFweCAjRkZGRkZGOw0KICAgICAgICAgICAgcGFkZGluZzogNHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLypAbWVkaWEgKG1heC1oZWlnaHQ6IDc2MHB4KSB7DQogICAgICAgICAgICAgICAgLm5hdmJhci1maXhlZC1ib3R0b20gew0KICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Om5vbmU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgQG1lZGlhIChtaW4taGVpZ2h0OiA3NjBweCkgew0KICAgICAgICAgICAgICAgIGJvZHkgew0KICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMzJweDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkgew0KICAgICAgICAgICAgICAgICAuQWdlbmRhSXRlbUNvbnRhaW5lciA+IC5BZ2VuZGFJdGVtQ29udGFpbmVyIHsNCiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6NGVtICFpbXBvcnRhbnQ7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSovDQoNCiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSB7DQogICAgICAgICAgICAuQWdlbmRhSXRlbUNvbnRhaW5lciA+IC5BZ2VuZGFJdGVtQ29udGFpbmVyIHsNCiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMmVtICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNDAwcHgpIHsNCiAgICAgICAgICAgIC5BZ2VuZGFJdGVtQ29udGFpbmVyID4gLkFnZW5kYUl0ZW1Db250YWluZXIgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxZW0gIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAzMDBweCkgew0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1Db250YWluZXIgPiAuQWdlbmRhSXRlbUNvbnRhaW5lciB7DQogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDBlbSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6NzY4cHgpIGFuZCAobWF4LXdpZHRoOjk5MXB4KSB7DQogICAgICAgICAgICAuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlscyB7ZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OyB9DQoNCiAgICAgICAgICAgIC52aXNpYmxlLXNtLnNoYXJpbmcuU29jaWFsSWNvbnMgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+ICogPiAuQWdlbmRhSXRlbU5hdmlnYXRlLmluZGVudCA+IC5BZ2VuZGFJdGVtSWNvbnMsDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+IC5BZ2VuZGFJdGVtSWNvbnN7DQogICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQoNCiAgICAgICAgICAgIC5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZS5oYXNQdWJsaWNDb21tZW50QnV0dG9uIHsNCiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEzNXB4Ow0KICAgICAgICAgICAgICAgIHdpZHRoOiBhdXRvICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvKi5BZ2VuZGFJdGVtSWNvbnMgew0KICAgICAgICAgICAgd2lkdGg6IDIyJSAhaW1wb3J0YW50Ow0KICAgICAgICB9Ki8NCg0KICAgICAgICAudmlzaWJsZS14cyB2aXNpYmxlLXNtIHNoYXJpbmcgU29jaWFsSWNvbnMgew0KICAgICAgICAgICAgd2lkdGg6IDEwJTsNCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1cHg7DQogICAgICAgICAgICBmbG9hdDogcmlnaHQ7DQogICAgICAgIH0NCg0KICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHsNCiAgICAgICAgICAgIC52aXNpYmxlLXhzLnNoYXJpbmcuU29jaWFsSWNvbnMgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jayAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIGZsb2F0OiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+ICogPiAuQWdlbmRhSXRlbU5hdmlnYXRlLmluZGVudCA+IC5BZ2VuZGFJdGVtSWNvbnMsDQogICAgICAgICAgICAuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+IC5BZ2VuZGFJdGVtSWNvbnMgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlLmhhc1B1YmxpY0NvbW1lbnRCdXR0b24gew0KICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNjVweDsNCiAgICAgICAgICAgICAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoZGV2aWNlLXdpZHRoOiA3NjhweCkgew0KDQogICAgICAgICAgICAubmF2YmFyLW5hdiAuZHJvcGRvd24tbWVudSB7DQogICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogLTVweCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuZHJvcGRvd24sIC5kcm9wbGVmdCwgLmRyb3ByaWdodCwgLmRyb3B1cCB7DQogICAgICAgICAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC5jb2xsYXBzZTpub3QoLnNob3cpIHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAubmF2YmFyLWxpZ2h0IC5uYXZiYXItdG9nZ2xlciB7DQogICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0Ow0KICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2RkZCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLm5hdmJhci1uYXYgLmRyb3Bkb3duLW1lbnUgew0KICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zIHsNCiAgICAgICAgICAgIC8qd2lkdGg6IDEwJTsNCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiA1cHg7DQogICAgICAgICAgICBmbG9hdDogcmlnaHQ7DQogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgICAgICAgICByaWdodDogLThweDsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6IC0yMnB4OyovDQogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgICAgICAgICByaWdodDogMTBweDsNCiAgICAgICAgICAgIG1hcmdpbjogMDsNCiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgIHRvcDogNTAlOw0KICAgICAgICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpOw0KICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7DQogICAgICAgIH0NCg0KICAgICAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zID4gKiA+IHNwYW4uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1zbSB7DQogICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDVweCAwcHggNXB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAudmlzaWJsZS14cy52aXNpYmxlLXNtLnNoYXJpbmcuU29jaWFsSWNvbnMsDQogICAgICAgICAgICAudmlzaWJsZS14cy52aXNpYmxlLXNtLnNoYXJpbmcuU29jaWFsSWNvbnMgPiAqLA0KICAgICAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zID4gKiA+IHNwYW4gew0KICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWwgIWltcG9ydGFudDsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAuU29jaWFsSWNvbnMgew0KICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0Ow0KICAgICAgICB9DQoNCg0KICAgICAgICAucG93ZXJlZEJ5LCAucG93ZXJlZEJ5IGEgew0KICAgICAgICAgICAgY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7DQogICAgICAgIH0NCg0KICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXdpZHRoOiA3NjhweCkgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMDI0cHgpIGFuZCAob3JpZW50YXRpb24gOiBwb3J0cmFpdCkgew0KICAgICAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcmlnaHQ6IC04cHggIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICBwYWRkaW5nLXRvcDogNHB4ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAoZGV2aWNlLXdpZHRoOiAyODBweCkgYW5kIChkZXZpY2UtaGVpZ2h0OiA2NTNweCkgew0KICAgICAgICAgICAgLnZpc2libGUteHMudmlzaWJsZS1zbS5zaGFyaW5nLlNvY2lhbEljb25zDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgcG9zaXRpb246IHVuc2V0Ow0KICAgICAgICAgICAgICAgIHJpZ2h0OiB1bnNldDsNCiAgICAgICAgICAgICAgICBtYXJnaW46IHVuc2V0Ow0KICAgICAgICAgICAgICAgIHRvcDogdW5zZXQ7DQogICAgICAgICAgICAgICAgLW1zLXRyYW5zZm9ybTogdW5zZXQ7DQogICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB1bnNldDsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAucGFja2FnZU5hdiB7DQogICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDsNCiAgICAgICAgfQ0KDQogICAgPC9zdHlsZT4NCjwvaGVhZD4NCjxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTVlNWU1Ij4NCiAgICA8Zm9ybSBuYW1lPSJmb3JtMSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii4vTWVldGluZy5hc3B4P0lkPTRmODA2OTYyLWMwNTktNDYwNS1iNDhjLTc1MWRhZWU4YmQ4NSZhbXA7QWdlbmRhPUFnZW5kYSZhbXA7bGFuZz1FbmdsaXNoIiBpZD0iZm9ybTEiPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19WSUVXU1RBVEUiIGlkPSJfX1ZJRVdTVEFURSIgdmFsdWU9IkpTTlpCRWJUYmdUWWFHKzljM3QwVk5sL3k0bCt3QmZORnRib1BPcHNDTWRIVnFwamZZY1ZnYm5vSTRmeTY0eDJSMFhUa0lmdFYrMk90K29JWU1xeWZJVnJST1ZyakFxZzZnTnRVbmlpZjJ6ZzIwK2pLVFYrYkpGa1Fnb2VPb2Y1MU1hM2IvTXBYZDdPY3pZa0VZN0JZenlUQ2ZtcEtBZzVRTGxjVGdkeW95SC9xVWdCTGxDc21vTHJzczhXZXdqcHBvZ1RNTGY0OGVmSTV5TDdYcjdxL3pnRFF5dFNNSlAwUytUZ3hjTnc4K29ObHJsVTJ3WDRPanpHZEpWeStwUVVxbkNJM3hXdlNLM1RaNVhOaTJnbjk1cnF1ekFJL0ZhaWlkbENzZFg3eGdLdmFYeXhNV3pPWTI2SHcyUysxUU1vQkR0MndRbk9ITnMzVmo0SXAvQzR4ekFVWjZqb0hiV2tZVDVYNUZoQ1FGdjFDRVdWNkdMdW54TklzWHBHeDZBSmFuekJSZ2dIb09KOVJ0cFYvbXlLR1R5MzhBNHVFQ29BcDNHczMrMkQzUkEyUmZuZzNmK0d0VjkrMXZuU285ak42bklmSHhUS2U5RkFnaFlEODZ4Ulp4dFVyTndsSWVzSVZsWXBXMGhvekhmK09ZVERyM2x4bVZJdWpFUlRuVVoyZnpFUHhCcnVWeFgxU0hoa2w0UnpZbitqbnRaYlVkU01ac3NIUlBhQVhUU2t5WTNMLzRDZkdaYXNrbjlaZ1l5eVAyRHBmRmlwaUYrRS9oc1BCdGJOZXBRV1hnMWkwTmhINEkwSU1VYXRwTVpzM0tBS1dxM2tmYmFYRDZyNGE4Ris4bk9GNjJLeE9LN0FoS2tmeG51T1piV3htblJqRmpSRHNZK2pzNGRBK1NXK1VMZmY3SVlVTk1Ua0UyUHJGY2dyTFN2ZEpQNTB5UkM0Tk14YUwvZnlRODlKa1NyMjJMamlTWld1S01wdHo4WEVjM0J4TTA4VnlhT3NPZHYyV2daMXVKOU9ia2ZXaDVHcGE0T0I4TXp3VDhUaWN3WmltbzJvcWxNWkY2ZTFGYmhpQlluMXpzWGJqU0wxdXpFeGhUU3pjRjltUXhUSHd6d0FDMzE4RXVQNjlKR2tXa3pPNVBvZ0UveEVCU3NDSkFZT0JjYUU5U1JYQkVtK3VpU3dqQVpFaVU0ZmllK296YlFMTFZqRDQ5eXRpd1RQcWJWdVg0MW1oUkZYbTIwWHdORzJZeVdxdkdkYWFZNzJPNTh0NUtmdkFHRFlJdVp4RlNoL0paRFJuZkR6SGZyTFhTWlBkOXUrdW9BaEhXaFNtd2kyNEQ0UWl0TGhZV1pKaWMxQjhWS1EwaWZXMHlERU4vMCtBcGlWZTd1cHg2TXV3WDk4clFUVW1FdVR5a0MwYU9scWZscVU0cTZsU255WUZnTTMreUpNWUgzTVh4Y3FaUEhDVWtxSVIwOEtZaHlaQW9OeGxyV0Q3WGM5ckMya0JCSmNVeEN0NHRDeGZsUkFDNktJNjZnYVpxdFpWdkoyMFpVbHRjT3dvZkxuSnc9PSIgLz4NCg0KDQo8c2NyaXB0IHNyYz0iL2J1bmRsZXMvTXNBamF4SnM/dj1ENlZOMGZIbHdGU0lXamJWemk2bVp5RTlMcy00TE5yU1NZVkdSVTQ2WEY4MSIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSJTY3JpcHRzL2Jvb3RzdHJhcC5taW4uanMiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iU2NyaXB0cy9yZXNwb25kLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvYnVuZGxlcy9XZWJGb3Jtc0pzP3Y9Tjh0eW1MOUtyYU1MR0FNRnVQeWNmSDNwWGU2dVVsUlhkaHRZdjhBX2pVVTEiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfX1ZJRVdTVEFURUdFTkVSQVRPUiIgaWQ9Il9fVklFV1NUQVRFR0VORVJBVE9SIiB2YWx1ZT0iNDkzNkRCQjciIC8+DQo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfX1ZJRVdTVEFURUVOQ1JZUFRFRCIgaWQ9Il9fVklFV1NUQVRFRU5DUllQVEVEIiB2YWx1ZT0iIiAvPg0KICAgICAgICANCg0KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICAgICBmdW5jdGlvbiBpZnJhbWVMb2FkZWQoaWZyYW1lSGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIHdpbmRvd0hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTsNCg0KICAgICAgICAgICAgICAgIGlmIChpZnJhbWVIZWlnaHQgPiB3aW5kb3dIZWlnaHQpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9ICh3aW5kb3dIZWlnaHQgLSAxODUpICsgInB4IjsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2Jvb3RzdHJhcE1vZGFsQm9keScpLmhlaWdodChuZXdIZWlnaHQpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjbW9kYWxJZnJhbWVEaXYnKS5oZWlnaHQobmV3SGVpZ2h0KTsNCg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnI21vZGFsSWZyYW1lRGl2JykuaGVpZ2h0KCkgLSA4NTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSBpZnJhbWVIZWlnaHQgKyAicHgiOw0KICAgICAgICAgICAgICAgICAgICAkKCcjYm9vdHN0cmFwTW9kYWxCb2R5JykuaGVpZ2h0KG5ld0hlaWdodCk7DQogICAgICAgICAgICAgICAgICAgICQoJyNtb2RhbElmcmFtZURpdicpLmhlaWdodChuZXdIZWlnaHQpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gIjAiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJChkb2N1bWVudCkua2V5ZG93bihmdW5jdGlvbihldmVudCkgeyANCiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAyNykgeyANCiAgICAgICAgICAgICAgICAgICAgY2xvc2VCb290c3RyYXBNb2RhbCgpOw0KICAgICAgICAgICAgICAgICAgICAkKCIuQ29tbWVudEljb24iKS5mb2N1cygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBmdW5jdGlvbiBjbG9zZUJvb3RzdHJhcE1vZGFsKCkgew0KICAgICAgICAgICAgICAgICQoJyNib290c3RyYXBNb2RhbCcpLm1vZGFsKCdoaWRlJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpOyANCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgIHZhciB3aW5kb3dXaWR0aCA9ICQod2luZG93KS53aWR0aCgpOw0KICAgICAgICAgICAgICAgIHZhciBzdGFuZGFyZEhlaWdodCA9ICQoJy5TZWxlY3RlZEl0ZW1Db3VudGVyJykuaGVpZ2h0KCk7DQogICAgICAgICAgICAgICAgdmFyIHRpdGxlSGVpZ2h0ID0gJCgnLlNlbGVjdGVkSXRlbVRpdGxlJykuaGVpZ2h0KCk7DQoNCiAgICAgICAgICAgICAgICAvL2lmIChXaW5kb3dfT25SZXNpemUpIHsNCiAgICAgICAgICAgICAgICAvLyAgICBXaW5kb3dfT25SZXNpemUoKTsNCiAgICAgICAgICAgICAgICAvL30NCg0KICAgICAgICAgICAgICAgIGlmKHRpdGxlSGVpZ2h0ID4gc3RhbmRhcmRIZWlnaHQpIHsNCiAgICAgICAgICAgICAgICAgICAgJCgnLnBhbmVsLWhlYWRpbmcuY2xlYXJmaXggPi5zaGFyaW5nLlNvY2lhbEljb25zID4gYS5Db21tZW50SWNvbiA+IHNwYW4nKS5jc3MoIm1hcmdpbi10b3AiLCAiNHB4Iik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy9SZXBsYWNlIHRoZSBMZWF2ZSBDb21tZW50IGJ1dHRvbiB0byBpY29uDQogICAgICAgICAgICAgICAgJCgnI25hcnJvdy1sZWF2ZS1jb21tZW50LWJ1dHRvbicpLmh0bWwoIjxzcGFuIGNsYXNzPSdsYXMgbGEtY29tbWVudC1hbHQnIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlJyB0aXRsZT0nTGVhdmUgQ29tbWVudCc+PC9zcGFuPiIpOw0KDQogICAgICAgICAgICAgICAgaWYod2luZG93V2lkdGggPD0gNTM5KXsNCiAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYSIpLmNzcygicGFkZGluZy10b3AiLCAkKCIuYWZmaXgtdG9wIikuaGVpZ2h0KCkrNSk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYSIpLmNzcygicGFkZGluZy10b3AiLCAiMThweCIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBmdW5jdGlvbiBDaGVja2lPU0RldmljZSgpIHsNCiAgICAgICAgICAgICAgICB2YXIgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7DQogICAgICAgICAgICAgICAgaWYgKHVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSkgew0KICAgICAgICAgICAgICAgICAgICAvLyBpUGFkIG9yIGlQaG9uZQ0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCJvdmVyZmxvdyIpOyAgDQogICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCJjaGVja0lPU0RldmljZSBjYWxsZWQiKTsNCiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KA0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOw0KICAgICAgICAgICAgICAgICAgICBpZih1cmwuaW5kZXhPZigicHViLW90dGF3YSIpICE9IC0xIHx8IHVybC5pbmRleE9mKCJwdWItc3VwcG9ydCIpICE9IC0xKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcuQWdlbmRhSGVhZGVyRGV0YWlsc1RhYmxlJykuZmluZCgnLkxhYmVsOmNvbnRhaW5zKCJQw6lyaW9kZToiKScpLnRleHQoJ0RhdGUgOicpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUhlYWRlckRldGFpbHNUYWJsZScpLmZpbmQoJy5MYWJlbDpjb250YWlucygiTGlldToiKScpLnRleHQoJ0VuZHJvaXQgOicpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgJCgiLkRldGFpbHMiKS5hZGRDbGFzcygiZC1zbS1ibG9jayIpOw0KICAgICAgICAgICAgICAgICAgICAkKCIuRGV0YWlscyIpLmF0dHIoImFyaWEtbGl2ZSIsICJwb2xpdGUiKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiLnBhbmVsLWhlYWRpbmciKS5wcmVwZW5kKCI8c3BhbiBjbGFzcz0ndmlzdWFsbHloaWRkZW4nPkFnZW5kYSBpdGVtIGRldGFpbHMgcG9wdXA8L3NwYW4+Iik7DQogICAgICAgICAgICAgICAgICAgICQoIi5hZmZpeC10b3AiKS5hcHBlbmQoIjxkaXYgY2xhc3M9J2NvbGxhcHNlLXN0cmVhbSc+PGkgY2xhc3M9J2xhcyBsYS12aWRlbyBvcGVuLXBsYXllcic+PC9pPjwvZGl2PiIpOw0KDQogICAgICAgICAgICAgICAgICAgICQoIi5jb2xsYXBzZS1zdHJlYW0iKS5vbigiY2xpY2siLCBmdW5jdGlvbihpLHYpew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCgiLlZpZGVvUGxheWVyQ29udGFpbmVyIikuY3NzKCJkaXNwbGF5IikgPT0gIm5vbmUiKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuVmlkZW9QbGF5ZXJDb250YWluZXIiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmxhLXZpZGVvIikuYWRkQ2xhc3MoIm9wZW4tcGxheWVyIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYSIpLmNzcygicGFkZGluZy10b3AiLCAkKCIuYWZmaXgtdG9wIikuaGVpZ2h0KCkrNSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmKCkucGF1c2UoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIubGEtdmlkZW8iKS5yZW1vdmVDbGFzcygib3Blbi1wbGF5ZXIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuVmlkZW9QbGF5ZXJDb250YWluZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYSIpLmNzcygicGFkZGluZy10b3AiLCAiMThweCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICQoJy5WaWRlb1BsYXllcicpLmFwcGVuZCgkKCcjVmlkZW9QbGF5ZXJDb250cm9sJykuZGV0YWNoKCkpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmKCQod2luZG93KS53aWR0aCgpIDw9IDUzOSl7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCIuQWdlbmRhIikuY3NzKCJwYWRkaW5nLXRvcCIsICQoIi5hZmZpeC10b3AiKS5oZWlnaHQoKSoxLjA1KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIG1pbnV0ZXMgc2hvdyBpZiB0aGUgbWVldGluZyBzdGFydHMgb3IgZW5kcyBwYXJ0aWFsbHkgdGhyb3VnaCBhbiBob3VyIC8vDQogICAgICAgICAgICAgICAgICAgICQoIi5UaW1lID4gLk1pbnV0ZXMiKS5lYWNoKA0KICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkudGV4dCgpICE9ICI6MDAiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlbWVudCkuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCJbZGF0YS10b2dnbGU9J3Rvb2x0aXAnXSIpLnRvb2x0aXAoe3BsYWNlbWVudDondG9wJywgYm91bmRhcnk6ICd3aW5kb3cnLCB0cmlnZ2VyIDogJ2hvdmVyJ30pOw0KDQogICAgICAgICAgICAgICAgICAgIC8vQWRkL1JlbW92ZSBwdWJsaWMgY29tbWVudCBpY29ucyBmb3IgZWFjaCBhZ2VuZGEgaXRlbSAocmVhbCB0aW1lKQ0KICAgICAgICAgICAgICAgICAgICB2YXIgYWdlbmRhSXRlbSA9ICQoJy5BZ2VuZGFJdGVtJyk7DQoNCiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGFnZW5kYUl0ZW0ubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPWFnZW5kYUl0ZW1baV0uY2xhc3NOYW1lLm1hdGNoKC9BZ2VuZGFJdGVtXGQrLyk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihjbGFzc05hbWUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBjbGFzc05hbWVbMF0ucmVwbGFjZSgiQWdlbmRhSXRlbSIsICIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpZCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvYWRQdWJsaWNDb21tZW50SWNvbnMoaWQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIENoZWNraU9TRGV2aWNlKCk7DQogICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFRhYiA9IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UobmV3IFJlZ0V4cCgiXig/Oi4qWyZcXD9dIiArIGVuY29kZVVSSUNvbXBvbmVudCgiVGFiIikucmVwbGFjZSgvW1wuXCtcKl0vZywgIlxcJCYiKSArICIoPzpcXD0oW14mXSopKT8pPy4qJCIsICJpIiksICIkMSIpKTsNCiAgICAgICAgICAgICAgICAgICAgU2VsZWN0SXRlbShnZXRQYXJhbWV0ZXJCeU5hbWUoIkl0ZW0iKSB8fCAoKHdpbmRvdy5sb2NhdGlvbi5oYXNoIHx8ICIiKS5yZXBsYWNlKC8jL2csICcnKSksIHRydWUsIHNlbGVjdGVkVGFiKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICQoIiNwYWNrYWdlLWNvbnRhaW5lciIpLm9uKCJzY3JvbGwiLCBmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoIiNwYWNrYWdlLWNvbnRhaW5lciIpLnNjcm9sbFRvcCgpID49IDQ4KXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuYWZmaXgtdG9wIikuY3NzKCJ0b3AiLCAiNXB4Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5hZmZpeC10b3AiKS5jc3MoInRvcCIsICI0OHB4Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgICAgICQoIlt0YWJpbmRleF0iKS5maWx0ZXIoZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5hdHRyKCJ0YWJpbmRleCIpID4gMCl7ICQodGhpcykuYXR0cigidGFiaW5kZXgiLCAiMCIpfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtVGl0bGUiKS5vbigiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4TG9vcChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlsc0NvbnRhaW5lciIpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIi5EZXRhaWxzIik7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcgPSAnYVtocmVmXSwgYXJlYVtocmVmXSwgaW5wdXQ6bm90KFtkaXNhYmxlZF0sIFt0eXBlPWhpZGRlbl0pLCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLCB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSksIGlmcmFtZSwgb2JqZWN0LCBlbWJlZCwgW3RhYmluZGV4PSIwIl0sIFtjb250ZW50ZWRpdGFibGVdJzsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50cyA9IG1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZvY3VzYWJsZUVsZW1lbnRzKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50c1swXS5mb2N1cygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCIuQWdlbmRhSXRlbUNvbnRhaW5lciIpLmVhY2goZnVuY3Rpb24oaSx2KXsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50SWNvbiA9ICQodikuZmluZCgiLkFnZW5kYUl0ZW1JY29ucyIpLmZpbmQoIi5sYS1jb21tZW50LWFsdCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29tbWVudEljb24ubGVuZ3RoID4gMCl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudEljb24uYXBwZW5kKCI8c3BhbiBjbGFzcz0nc3Itb25seSc+UHVibGljIENvbW1lbnRzOjwvc3Bhbj4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLy8vLyQoZG9jdW1lbnQpLm9uKCJpdGVtOnNlbGVjdGVkIiwgZnVuY3Rpb24gKGUsIGlkKSB7DQogICAgICAgICAgICAvLy8vICAgIGhpbGlnaHRJdGVtKGlkKTsNCiAgICAgICAgICAgIC8vLy99KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZnVuY3Rpb24gU2VsZWN0SXRlbShpZCwgc2Nyb2xsLCB0YWIpIHsNCiAgICAgICAgICAgICAgICBpZih0YWIgPT09IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgICAgICB0YWIgPSAnYXR0YWNobWVudHMnDQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgLy9UaGUgZnVuY3Rpb24gdW5kZXIgZVNjcmliZS5BZ2VuZGEgb25seSB0YWtlIHR3byBwYXJhbWV0ZXIuIEluIG9yZGVyIHRvIG1ha2UgdGhlIGljb24gbGluayB3b3JrcywgSSBoYXZlIHRvIGRvIGEgd29yayBhcm91bmQgZm9yIHRoaXMgKHJldXNlIHRoZSBzY3JvbGwgcGFyYW1ldGVyKS4NCiAgICAgICAgICAgICAgICAvL1RoaXMgc2hvdWxkIG5vdCBhZmZlY3QgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHNjcm9sbC4NCiAgICAgICAgICAgICAgICBpZihzY3JvbGwgPT0gJ2F0dGFjaG1lbnRzJyB8fCBzY3JvbGwgPT0gJ2NvbW1lbnRzJykgew0KICAgICAgICAgICAgICAgICAgICB0YWIgPSBzY3JvbGw7DQogICAgICAgICAgICAgICAgICAgIHNjcm9sbCA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB1cmwgLy8NCiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsICcnLCBVcGRhdGVRdWVyeSgiSXRlbSIsIGlkLnRvU3RyaW5nKCkpKTsgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSgnJywgJycsIFVwZGF0ZVF1ZXJ5KCJUYWIiLCB0YWIpKTsNCg0KICAgICAgICAgICAgICAgIC8vVXBkYXRlIHRoZSBDaXRpemVuIENvbW1lbnQgdXNpbmcgYWpheC4NCiAgICAgICAgICAgICAgICBMb2FkUHVibGljQ29tbWVudChpZCwgc2Nyb2xsKTsNCg0KICAgICAgICAgICAgICAgIGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgKSB7DQogICAgICAgICAgICAgICAgICAgIExvYWRQdWJsaWNDb21tZW50SWNvbnMoaWQpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIC8vLy8gdHJpZ2dlciBldmVudCAvLw0KICAgICAgICAgICAgICAgIC8vJChkb2N1bWVudCkudHJpZ2dlcigiaXRlbTpzZWxlY3RlZCIsIFtpZCwgc2Nyb2xsXSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIExvYWRQdWJsaWNDb21tZW50KGlkLCBzY3JvbGwpIHsNCiAgICAgICAgICAgICAgICBpZihpZCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVldGluZ0lkID0gZGVjb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gucmVwbGFjZShuZXcgUmVnRXhwKCJeKD86LipbJlxcP10iICsgZW5jb2RlVVJJQ29tcG9uZW50KCJJZCIpLnJlcGxhY2UoL1tcLlwrXCpdL2csICJcXCQmIikgKyAiKD86XFw9KFteJl0qKSk/KT8uKiQiLCAiaSIpLCAiJDEiKSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UobmV3IFJlZ0V4cCgiXig/Oi4qWyZcXD9dIiArIGVuY29kZVVSSUNvbXBvbmVudCgibGFuZyIpLnJlcGxhY2UoL1tcLlwrXCpdL2csICJcXCQmIikgKyAiKD86XFw9KFteJl0qKSk/KT8uKiQiLCAiaSIpLCAiJDEiKSk7DQogICAgICAgICAgICAgICAgICAgIHZhciB0YWJpbmRleCA9ICQoJyNBZ2VuZGFJdGVtQWdlbmRhSXRlbScgKyBpZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUgPiAuQWdlbmRhSXRlbVRpdGxlID4gQScpLmF0dHIoInRhYmluZGV4Iik7DQoNCiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogIk1lZXRpbmcuYXNweC9HZW5lcmF0ZVB1YmxpY0NvbW1lbnQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogIntpZDogJyIgKyBpZCArICInLCBtZWV0aW5nSWQ6ICciICsgbWVldGluZ0lkICsgIicsIGxhbmc6ICciICsgbGFuZ3VhZ2UgKyAiJywgdGFiaW5kZXg6ICciICsgdGFiaW5kZXggKyAiJ30iLA0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsDQogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAobXNnKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdBZ2VuZGFJdGVtUHVibGljQ29tbWVudCcgKyBpZCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwIDsgaS0tKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gaXRlbXNbaV07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKG1zZy5kKS5hcHBlbmRUbygiLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50TGlzdCIpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50TGlzdEluZGVudCcgKyBpZCkuY2hpbGRyZW4oJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudEhlYWRlcicpLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9IkFnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1QdWJsaWNDb21tZW50SGVhZGVyIiBzdHlsZT0iZGlzcGxheTogYmxvY2s7Ij48L2Rpdj4nKS5hcHBlbmRUbygiLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50TGlzdEluZGVudCIgKyBpZCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQobXNnLmQpLmFwcGVuZFRvKCIuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0SW5kZW50IiArIGlkKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgZXZlbnQgLy8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCJpdGVtOnNlbGVjdGVkIiwgW2lkLCBzY3JvbGxdKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBMb2FkUHVibGljQ29tbWVudEljb25zKGlkKSB7DQogICAgICAgICAgICAgICAgaWYoaWQpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG1lZXRpbmdJZCA9IGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UobmV3IFJlZ0V4cCgiXig/Oi4qWyZcXD9dIiArIGVuY29kZVVSSUNvbXBvbmVudCgiSWQiKS5yZXBsYWNlKC9bXC5cK1wqXS9nLCAiXFwkJiIpICsgIig/OlxcPShbXiZdKikpPyk/LiokIiwgImkiKSwgIiQxIikpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgYWdlbmRhSXRlbSA9ICQoJyNBZ2VuZGFJdGVtQWdlbmRhSXRlbScgKyBpZCArJ1RpdGxlSGVhZGVyICcgKyAnPiAuQWdlbmRhSXRlbU5hdmlnYXRlID4gJyArICcuQWdlbmRhSXRlbUljb25zJyk7DQogICAgICAgICAgICAgICAgICAgIGlmKGFnZW5kYUl0ZW0ubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5kYUl0ZW0gPSAkKCcjQWdlbmRhSXRlbUFnZW5kYUl0ZW0nICsgaWQgKydUaXRsZUhlYWRlciAnKS5wYXJlbnQoKS5maW5kKCIuQWdlbmRhSXRlbUljb25zIik7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICB2YXIgaXNFeGlzdCA9IGFnZW5kYUl0ZW0uY2hpbGRyZW4oJy5sYXMubGEtY29tbWVudC1hbHQnKS5sZW5ndGg7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAkLmFqYXgoew0KICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLA0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAiTWVldGluZy5hc3B4L0dlbmVyYXRlUHVibGljQ29tbWVudEljb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogIntpZDogJyIgKyBpZCArICInLCBtZWV0aW5nSWQ6ICciICsgbWVldGluZ0lkICsgIid9IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIsDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKG1zZykgew0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobXNnLmQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNFeGlzdCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKG1zZy5kKS5hcHBlbmRUbyhhZ2VuZGFJdGVtKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNFeGlzdCA+IDApew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlbmRhSXRlbS5jaGlsZHJlbignLmxhcy5sYS1jb21tZW50LWFsdCcpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICBmdW5jdGlvbiBVcGRhdGVRdWVyeShwYXJhbWV0ZXIsIHZhbHVlKSB7DQogICAgICAgICAgICAgICAgdmFyIGxvYyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7DQoNCiAgICAgICAgICAgICAgICBpZiAobG9jLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIG5vIHF1ZXJ5IHN0cmluZyAvLw0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHBhcmFtZXRlciBkaXJlY3RseSB0byB1cmwgLy8NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZiArICI/IiArIHBhcmFtZXRlciArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICBpZiAobG9jWzBdID09ICc/Jykgew0KICAgICAgICAgICAgICAgICAgICAgICAgbG9jID0gbG9jLnN1YnN0cmluZygxKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gbG9jLnNwbGl0KCcmJyk7DQoNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbaV0udG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHBhcmFtZXRlci50b0xvd2VyQ2FzZSgpICsgJz0nKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBuZXcgdmFsdWUgLy8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2ldID0gcGFyYW1ldGVyICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBleGlzdGluZyB2YWx1ZSAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbaV0gPSAnJzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kID09IGZhbHNlICYmIHZhbHVlLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtZXRlciArICc9JyArIHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHZhciBxcyA9ICcnOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tpXS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFzLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzID0gIj8iICsgcGFyYW1zW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXMgKz0gIiYiICsgcGFyYW1zW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKCI/IiArIGxvYywgcXMpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIHRhYkluZGV4TG9vcChtb2RhbENvbnRhaW5lcikgew0KICAgICAgICAgICAgICAgIG1vZGFsQ29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCB0cmFwVGFiS2V5KTsNCg0KICAgICAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50c1N0cmluZyA9ICdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSwgW3R5cGU9aGlkZGVuXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCBbdGFiaW5kZXg9IjAiXSwgW2NvbnRlbnRlZGl0YWJsZV0nOw0KICAgICAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50cyA9IG1vZGFsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcpOw0KICAgICAgICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZm9jdXNhYmxlRWxlbWVudHMpOw0KICAgICAgICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzID0gZm9jdXNhYmxlRWxlbWVudHMuZmlsdGVyKGVsZW1lbnQgPT4gJChlbGVtZW50KS5pcygnOnZpc2libGUnKSk7DQoJCQkJDQogICAgICAgICAgICAgICAgdmFyIGZpcnN0VGFiU3RvcCA9IGZvY3VzYWJsZUVsZW1lbnRzWzBdOw0KICAgICAgICAgICAgICAgIHZhciBsYXN0VGFiU3RvcCA9IGZvY3VzYWJsZUVsZW1lbnRzW2ZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCAtIDFdOw0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvY3VzYWJsZUVsZW1lbnRzKTsNCg0KICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRyYXBUYWJLZXkoZSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHNTdHJpbmcgPSAnYVtocmVmXSwgYXJlYVtocmVmXSwgaW5wdXQ6bm90KFtkaXNhYmxlZF0sIFt0eXBlPWhpZGRlbl0pLCBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLCB0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSksIGlmcmFtZSwgb2JqZWN0LCBlbWJlZCwgW3RhYmluZGV4PSIwIl0sIFtjb250ZW50ZWRpdGFibGVdJzsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzID0gbW9kYWxDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChmb2N1c2FibGVFbGVtZW50c1N0cmluZyk7DQogICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZm9jdXNhYmxlRWxlbWVudHMpOw0KICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50cyA9IGZvY3VzYWJsZUVsZW1lbnRzLmZpbHRlcihlbGVtZW50ID0+ICQoZWxlbWVudCkuaXMoJzp2aXNpYmxlJykpOw0KCQkJCQkNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0VGFiU3RvcCA9IGZvY3VzYWJsZUVsZW1lbnRzWzBdOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFRhYlN0b3AgPSBmb2N1c2FibGVFbGVtZW50c1tmb2N1c2FibGVFbGVtZW50cy5sZW5ndGggLSAxXTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGxhc3RUYWJTdG9wKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5oaWxpZ2h0ZWQgLkFnZW5kYUl0ZW1UaXRsZSBhJykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0JCQkJCQkJDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIDwvc2NyaXB0Pg0KDQogICAgICAgIA0KDQo8c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+DQogICAgJChkb2N1bWVudCkucmVhZHkoDQogICAgICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQoJy5EZXRhaWxzJykuYWRkQ2xhc3MoJ2hpZGRlbi14cycpLmFkZENsYXNzKCdoaWRkZW4tc20nKTsNCiAgICAgICAgICAgICQoJy5WaWRlb1BsYXllckNvbnRhaW5lcicpLmRldGFjaCgpOw0KDQogICAgICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIFdpbmRvd19PblJlc2l6ZSk7DQogICAgICAgIH0NCiAgICApOw0KDQogICAgZnVuY3Rpb24gVmlkZW9fTG9hZEJvb2ttYXJrKCkgeyB9DQoNCiAgICBmdW5jdGlvbiBXaW5kb3dfT25SZXNpemUoKSB7DQogICAgICAgIHNldFRpbWVvdXQoDQogICAgICAgICAgICBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG1heGhlaWdodCA9IDA7DQogICAgICAgICAgICAgICAgICAgIGlmICgkKCIubmF2YmFyLWZpeGVkLWJvdHRvbSIpLmlzKCI6dmlzaWJsZSIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBtYXhoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLSAkKCIubmF2YmFyLW5hdiIpLmhlaWdodCgpIC0gJCgiLm5hdmJhci1maXhlZC1ib3R0b20iKS5oZWlnaHQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG1heGhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSAtICQoIi5uYXZiYXItbmF2IikuaGVpZ2h0KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAkKCIuQWdlbmRhSXRlbUF0dGFjaG1lbnRzQXJlYSIpLmNzcygibWF4LWhlaWdodCIsICIiKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWlsc2hlaWdodCgpID4gbWF4aGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gc3Vic3RyYWN0IHRoZSBwYW5lbCBoZWFkaW5nIGhlaWdodCAoZHluYW1pYyBkZXBlbmRpbmcgb24gdXNlciBpbnB1dCkgYW5kIGFsc28gbmVlZCB0byBzdWJzdHJhY3QgNTUgZm9yIG90aGVyIHN0YXRpYyBjb21wb25lbnRzIChzcGFjZSBiZXR3ZWVuIHBhbmVsIGVsZW1lbnRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRNYXhIZWlnaHQgPSBtYXhoZWlnaHQgLSAkKCcuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlscyA+IGRpdi5wYW5lbC1oZWFkaW5nJykuaGVpZ2h0KCkgLSA1NTsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtQXR0YWNobWVudHNBcmVhIikuY3NzKCJtYXgtaGVpZ2h0IiwgY29udGVudE1heEhlaWdodCArICJweCIpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvL1RoaXMgd2lsbCBuZXZlciBydW4gLi4uIG5vdCBzdXJlIHdoeSBpdCBpcyBoZXJlDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGV0YWlsc2hlaWdodCgpIDw9IG1heGhlaWdodCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtQXR0YWNobWVudHNBcmVhIikuY3NzKCJtYXgtaGVpZ2h0IiwgKCQoIi5BZ2VuZGFJdGVtQXR0YWNobWVudHNBcmVhIikuaGVpZ2h0KCkgLSAoZGV0YWlsc2hlaWdodCgpIC0gbWF4aGVpZ2h0KSkgKyAicHgiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAxDQogICAgICAgICk7DQogICAgfQ0KPC9zY3JpcHQ+DQoNCiAgICAgICAgPGRpdiBpZD0icGFja2FnZS1jb250YWluZXIiIHN0eWxlPSJvdmVyZmxvdzogYXV0bzsgaGVpZ2h0OiAxMDAlIj4NCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBuYXZiYXItZml4ZWQtdG9wIG5hdmJhcmJnIiByb2xlPSJuYXZpZ2F0aW9uIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBuYXJiYXItbGVmdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGlkPSJuYXZiYXJEcm9wZG93biIgY2xhc3M9Im5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIgcm9sZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBzdHlsZT0iY29sb3I6IHdoaXRlIiB0YWJpbmRleD0iMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZ2VuZGENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2FyZXQiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkcm9wZG93bi1tZW51IHBhY2thZ2VOYXYiIHJvbGU9Im1lbnUiIGlkPSJBZ2VuZGFkcm9wZG93bm1lbnUiIGFyaWEtbGFiZWxsZWRieT0ibmF2YmFyRHJvcGRvd24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9J2h0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tL01lZXRpbmcuYXNweD9JZD00ZjgwNjk2Mi1jMDU5LTQ2MDUtYjQ4Yy03NTFkYWVlOGJkODUmQWdlbmRhPUFnZW5kYSZsYW5nPUVuZ2xpc2gnIHRhYmluZGV4PScxJyBsYW5nPSdlbic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWdlbmRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIiByb2xlPSJtZW51aXRlbSIgaHJlZj0naHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20vTWVldGluZy5hc3B4P0lkPTRmODA2OTYyLWMwNTktNDYwNS1iNDhjLTc1MWRhZWU4YmQ4NSZBZ2VuZGE9QWdlbmRhJmxhbmc9RnJlbmNoJyB0YWJpbmRleD0nMScgbGFuZz0nZnInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9yZHJlIGR1IGpvdXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIHJvbGU9Im1lbnVpdGVtIiBocmVmPSdodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbS9NZWV0aW5nLmFzcHg/SWQ9NGY4MDY5NjItYzA1OS00NjA1LWI0OGMtNzUxZGFlZThiZDg1JkFnZW5kYT1Qb3N0TWludXRlcyZsYW5nPUVuZ2xpc2gnIHRhYmluZGV4PScxJyBsYW5nPSdlbic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWludXRlcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSIgcm9sZT0ibWVudWl0ZW0iIGhyZWY9J2h0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tL01lZXRpbmcuYXNweD9JZD00ZjgwNjk2Mi1jMDU5LTQ2MDUtYjQ4Yy03NTFkYWVlOGJkODUmQWdlbmRhPVBvc3RNaW51dGVzJmxhbmc9RnJlbmNoJyB0YWJpbmRleD0nMScgbGFuZz0nZnInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2PDqHMtdmVyYmF1eA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSdkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJWaWRlb0xpbmsgZHJvcGRvd24taXRlbSIgaHJlZj0nJyB0aXRsZT0nT3BlbiBWaWRlbyBpbiBuZXcgV2luZG93JyB0YXJnZXQ9Il9ibGFuayIgdGFiaW5kZXg9IjYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iSGlkZGVuQW5jaG9yRGVzY3JpcHRpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3BlbiBWaWRlbyBpbiBuZXcgV2luZG93PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWRlbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L25hdj4NCg0KICAgICAgICAgICAgPG1haW4gY2xhc3M9ImNvbnRhaW5lciBib2R5LWNvbnRlbnQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmIj4NCiAgICAgICAgICAgICAgICA8QVJUSUNMRSBjbGFzcz0nTWVldGluZyByb3cnID48U0VDVElPTiBjbGFzcz0nQWdlbmRhIGNvbC14cy0xMiBjb2wtc20tMTIgY29sLW1kLTggY29sLWxnLTgnID48RElWIHN0eWxlPSJwYWRkaW5nOjFlbTsgd2lkdGg6YXV0bzsiID48SEVBREVSIGNsYXNzPSdBZ2VuZGFIZWFkZXInIHN0eWxlPSJwYWRkaW5nOjBweCA0cHgiID48RElWIGNsYXNzPSdBZ2VuZGFIZWFkZXJMb2dvJyA+PGltZyAgc3JjPSdmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05MzI0MScgYWx0PSdDaXR5IG9mIE90dGF3YSBMb2dvJyAgLz48L0RJVj48SDEgSWQ9J0FnZW5kYUhlYWRlclRpdGxlJyBjbGFzcz0nQWdlbmRhSGVhZGVyVGl0bGUnID5BZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWU8YnIvPjxici8+QWdlbmRhPGJyLz48L0gxPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlckRldGFpbHMnID48RElWIGNsYXNzPSdBZ2VuZGFIZWFkZXJEZXRhaWxzVGFibGUnID48RElWIGNsYXNzPSdBZ2VuZGFNZWV0aW5nTnVtYmVyJyA+PERJViBjbGFzcz0nQWdlbmRhSGVhZGVyRGV0YWlscyBMYWJlbCcgPjxUSCBzY29wZT0nUm93JyA+TWVldGluZyAjOjwvVEg+PC9ESVY+PERJViBjbGFzcz0nVmFsdWUgQWdlbmRhTWVldGluZ051bWJlclRleHQnID4zNDwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYVRpbWVDb250YWluZXInID48VFIgPjxESVYgY2xhc3M9J0xhYmVsJyA+PFRIIHNjb3BlPSdSb3cnID5EYXRlOjwvVEg+PC9ESVY+PFREIGNsYXNzPSdWYWx1ZScgY29sc3Bhbj0nMCcgaGVhZGVycz0nJyA+PERJViBjbGFzcz0nQWdlbmRhTWVldGluZ1RpbWUgVmFsdWUnID48VElNRSBkYXRldGltZT0nMjAyMi0wOS0wMScgPjxTUEFOIGNsYXNzPSdEYXRlJyA+PFNQQU4gY2xhc3M9J0RheU9mV2VlaycgPlRodXJzZGF5LCA8L1NQQU4+U2VwdGVtYmVyIDAxLCAyMDIyPFNQQU4gY2xhc3M9J0RheU9mV2VlaycgPjwvU1BBTj48L1NQQU4+PC9USU1FPjwvRElWPjwvVEQ+PC9UUj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFUaW1lQ29udGFpbmVyJyA+PERJViBjbGFzcz0nTGFiZWwnID5UaW1lOjwvRElWPjxESVYgPjxESVYgY2xhc3M9J0FnZW5kYU1lZXRpbmdUaW1lIFZhbHVlJyA+PFNQQU4gY2xhc3M9J0FnZW5kYU1lZXRpbmdUaW1lU3RhcnQnID48VElNRSBkYXRldGltZT0nMTA6MDAnID48U1BBTiBjbGFzcz0nVGltZScgPiAxMDxTUEFOIGNsYXNzPSdNaW51dGVzJyA+OjAwPC9TUEFOPjxTUEFOIGNsYXNzPSdNZXJpZGlhbicgPiBBPC9TUEFOPjxTUEFOIGNsYXNzPSdNZXJpZGlhbiBQZXJpb2QnID4uPC9TUEFOPjxTUEFOIGNsYXNzPSdNZXJpZGlhbicgPm08L1NQQU4+PFNQQU4gY2xhc3M9J01lcmlkaWFuIFBlcmlvZCcgPi48L1NQQU4+PC9TUEFOPjwvVElNRT48L1NQQU4+PFNQQU4gY2xhc3M9J0FnZW5kYU1lZXRpbmdUaW1lRW5kJyA+IC0gPFRJTUUgZGF0ZXRpbWU9JzEyOjAwJyA+PFNQQU4gY2xhc3M9J1RpbWUnID4gMTI8U1BBTiBjbGFzcz0nTWludXRlcycgPjowMDwvU1BBTj48U1BBTiBjbGFzcz0nTWVyaWRpYW4nID4gUDwvU1BBTj48U1BBTiBjbGFzcz0nTWVyaWRpYW4gUGVyaW9kJyA+LjwvU1BBTj48U1BBTiBjbGFzcz0nTWVyaWRpYW4nID5tPC9TUEFOPjxTUEFOIGNsYXNzPSdNZXJpZGlhbiBQZXJpb2QnID4uPC9TUEFOPjwvU1BBTj48L1RJTUU+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYU1lZXRpbmdMb2NhdGlvbicgPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlckRldGFpbHMgTGFiZWwnID48VEggc2NvcGU9J1JvdycgPkxvY2F0aW9uOjwvVEg+PC9ESVY+PERJViBjbGFzcz0nVmFsdWUgTG9jYXRpb25WYWx1ZScgPjxESVYgY2xhc3M9J0xvY2F0aW9uJyA+RWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uPC9ESVY+PERJViBjbGFzcz0nQWRkcmVzczEnID48L0RJVj48RElWIGNsYXNzPSdBZGRyZXNzMicgPjwvRElWPjxESVYgY2xhc3M9J0FkZHJlc3MzJyA+PC9ESVY+PC9ESVY+PC9ESVY+PERJViA+PERJViA+PERJViBzdHlsZT0iaGVpZ2h0OjVweCIgPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlckF0dGVuZGFuY2UnID48RElWIGNsYXNzPSdBZ2VuZGFIZWFkZXJBdHRlbmRhbmNlVGFibGUnID48RElWID48RElWIGNsYXNzPSdMYWJlbCcgPkNvdW5jaWxsb3JzOjwvRElWPjxESVYgY2xhc3M9J1ZhbHVlJyA+PFVMID48TEkgPkNoYWlyOiBDb3VuY2lsbG9yIEVsaSBFbC1DaGFudGlyeSwmbmJzcDs8L0xJPjxMSSA+VmljZS1DaGFpcjogQ2F0aGVyaW5lIEtpdHRzLCZuYnNwOzwvTEk+PExJID5Db3VuY2lsbG9yIEdlb3JnZSBEYXJvdXplLCZuYnNwOzwvTEk+PExJID5Db3VuY2lsbG9yIEdsZW4gR293ZXIsJm5ic3A7PC9MST48TEkgPkNvdW5jaWxsb3IgQ2Fyb2wgQW5uZSBNZWVoYW4sJm5ic3A7PC9MST48TEkgPiBhbmQgQ291bmNpbGxvciBTY290dCBNb2ZmYXR0PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUhlYWRlclNwZWNpYWxDb21tZW50cycgPjxwIHN0eWxlPSJ0ZXh0LWFsaWduJiM1ODtjZW50ZXI7Ij48c3Bhbj48c3Ryb25nPktlbGx5IENyb3ppZXIsPGJyPjwvc3Ryb25nPjwvc3Bhbj48c3Ryb25nPkNvbW1pdHRlZSBDb29yZGluYXRvcjxicj48L3N0cm9uZz48c3Bhbj48c3Ryb25nPig2MTMpIDU4MC0yNDI0LCBleHQuIDE2ODc1PC9zdHJvbmc+PGJyPjxzdHJvbmc+PGEgaHJlZj0iL2Nkbi1jZ2kvbC9lbWFpbC1wcm90ZWN0aW9uIiBjbGFzcz0iX19jZl9lbWFpbF9fIiBkYXRhLWNmZW1haWw9IjcyMzkxNzFlMWUwYjVjMzEwMDFkMDgxYjE3MDAzMjFkMDYwNjEzMDUxMzVjMTExMyI+W2VtYWlsJiMxNjA7cHJvdGVjdGVkXTwvYT48L3N0cm9uZz48YnI+PC9zcGFuPjwvcD48L0RJVj48RElWIHN0eWxlPSJmbG9hdDpub25lO2NsZWFyOmJvdGgiID48L0RJVj48SFIgY2xhc3M9J0FnZW5kYUhlYWRlclNlcGFyYXRvcicgLz48L0hFQURFUj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtcycgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTEnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTFUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjEuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxKTsiID5Ob3RpY2VzIGFuZCBtZWV0aW5nIGluZm9ybWF0aW9uIGZvciBtZWV0aW5nIHBhcnRpY2lwYW50cyBhbmQgdGhlIHB1YmxpYzwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PGEgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDEsICdhdHRhY2htZW50cycpIiB0YWJJbmRleD0nLTEnID48aW1nIFRpdGxlPSdBdHRhY2htZW50cycgIHNyYz0nLi9fbGF5b3V0cy9pbWFnZXMvZVNjcmliZS9hdHRhY2htZW50LnN2ZycgYWx0PSdUaGlzIGl0ZW0gaGFzIGF0dGFjaG1lbnRzLicgIHJvbGU9J3ByZXNlbnRhdGlvbicgLz48L2E+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48RElWIGNsYXNzPSd2aXNpYmxlLXhzIHZpc2libGUtc20nIHN0eWxlPSIgcGFkZGluZzoxcHggIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnRzTGlzdCBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDEnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjMxIiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nUHVibGljIE5vdGljZXMgRW5nbGlzaCAtIFN0YW5kaW5nIENvbW1pdHRlZS5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5QdWJsaWMgTm90aWNlcyBFbmdsaXNoIC0gU3RhbmRpbmcgQ29tbWl0dGVlLnBkZjwvU1BBTj48L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQxJyA+PFNQQU4gY2xhc3M9J1NlcXVlbmNlJyA+Mi48L1NQQU4+PGEgY2xhc3M9J0xpbmsnIHRhYmluZGV4PScwJyBocmVmPSJmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05MzIzMiIgZGF0YS10b2dnbGU9J3Rvb2x0aXAnIGRhdGEtaHRtbD0ndHJ1ZScgZGF0YS1jb250YWluZXI9J2JvZHknIGRhdGEtb3JpZ2luYWwtdGl0bGU9J1B1YmxpYyBOb3RpY2VzIEZyZW5jaCAtIFN0YW5kaW5nIENvbW1pdHRlZS5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5QdWJsaWMgTm90aWNlcyBGcmVuY2ggLSBTdGFuZGluZyBDb21taXR0ZWUucGRmPC9TUEFOPjwvYT48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtRGVzY3JpcHRpb24gUmljaFRleHQnID48RElWID48RElWID48cD5Ob3RpY2VzIGFuZCBtZWV0aW5nIGluZm9ybWF0aW9uIGFyZSBhdHRhY2hlZCB0byB0aGUgYWdlbmRhIGFuZCBtaW51dGVzLCBpbmNsdWRpbmcmIzU4OyBhdmFpbGFiaWxpdHkgb2Ygc2ltdWx0YW5lb3VzIGludGVycHJldGF0aW9uIGFuZCBhY2Nlc3NpYmlsaXR5IGFjY29tbW9kYXRpb25zOzxlbT4gaW4gY2FtZXJhPC9lbT4gbWVldGluZyBwcm9jZWR1cmVzOyBpbmZvcm1hdGlvbiBpdGVtcyBub3Qgc3ViamVjdCB0byBkaXNjdXNzaW9uOyBwZXJzb25hbCBpbmZvcm1hdGlvbiBkaXNjbGFpbWVyIGZvciBjb3JyZXNwb25kZW50cyBhbmQgcHVibGljIHNwZWFrZXJzOyBub3RpY2VzIHJlZ2FyZGluZyBtaW51dGVzOyBhbmQgcmVtb3RlIHBhcnRpY2lwYXRpb24gZGV0YWlscy48L3A+PGJyPjxwPkFjY2Vzc2libGUgZm9ybWF0cyBhbmQgY29tbXVuaWNhdGlvbiBzdXBwb3J0cyBhcmUgYXZhaWxhYmxlLCB1cG9uIHJlcXVlc3QuPC9wPjxicj48cD5FeGNlcHQgd2hlcmUgb3RoZXJ3aXNlIGluZGljYXRlZCwgcmVwb3J0cyByZXF1aXJpbmcgQ291bmNpbCBjb25zaWRlcmF0aW9uIHdpbGwgYmUgcHJlc2VudGVkIHRvIENvdW5jaWwgb24gU2VwdGVtYmVyIDIxLCAyMDIyIGluIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBSZXBvcnQgMzMuPC9wPjxicj48cD5UaGUgZGVhZGxpbmUgdG8gcmVnaXN0ZXIgYnkgcGhvbmUgdG8gc3BlYWssIG9yIHN1Ym1pdCB3cml0dGVuIGNvbW1lbnRzIG9yIHZpc3VhbCBwcmVzZW50YXRpb25zIGlzIDQgcG0gb24gV2VkbmVzZGF5LCBBdWd1c3QgMzEsIGFuZCB0aGUgZGVhZGxpbmUgdG8gcmVnaXN0ZXIgdG8gc3BlYWsgYnkgZW1haWwgaXMgOSYjNTg7MDAgYW0gb24gVGh1cnNkYXksIFNlcHRlbWJlciAxLjwvcD48L0RJVj48L0RJVj48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGFpbmVyIGluZGVudCcgc3R5bGU9IndpZHRoOmF1dG8iID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtIEFnZW5kYUl0ZW0yJyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMiBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0yVGl0bGVIZWFkZXInIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvdW50ZXInIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsiID4yLjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1OYXZpZ2F0ZSBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGUnIHN0eWxlPSJ3aWR0aDphdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxhIHRhYmluZGV4PScwJyBocmVmPSJqYXZhc2NyaXB0OlNlbGVjdEl0ZW0oMik7IiA+RGVjbGFyYXRpb25zIG9mIEludGVyZXN0PC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1DYXRlZ29yeScgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbVNwb25zb3JzJyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7IiA+PC9ESVY+PC9ESVY+PC9ESVY+PC9IMj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtSWNvbnMnIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jazsiID48RElWIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtMycgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDIgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtM1RpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+My48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDMpOyIgPkNvbmZpcm1hdGlvbiBvZiBNaW51dGVzPC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1DYXRlZ29yeScgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbVNwb25zb3JzJyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7IiA+PC9ESVY+PC9ESVY+PC9ESVY+PC9IMj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtSWNvbnMnIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jazsiID48RElWIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PC9ESVY+PC9ESVY+PERJViA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtNCcgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDMgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtNFRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+My4xPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSg0KTsiID5BUkFDIE1pbnV0ZXMgMzPCoCAtwqAgSnVuZSAzMCwgMjAyMjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDM+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PGEgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDQsICdhdHRhY2htZW50cycpIiB0YWJJbmRleD0nLTEnID48aW1nIFRpdGxlPSdBdHRhY2htZW50cycgIHNyYz0nLi9fbGF5b3V0cy9pbWFnZXMvZVNjcmliZS9hdHRhY2htZW50LnN2ZycgYWx0PSdUaGlzIGl0ZW0gaGFzIGF0dGFjaG1lbnRzLicgIHJvbGU9J3ByZXNlbnRhdGlvbicgLz48L2E+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48RElWIGNsYXNzPSd2aXNpYmxlLXhzIHZpc2libGUtc20nIHN0eWxlPSIgcGFkZGluZzoxcHggIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnRzTGlzdCBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDQnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjM2IiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nQVJBQyBEcmFmdCBNaW51dGVzIDMzIEVOLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPkFSQUMgRHJhZnQgTWludXRlcyAzMyBFTi5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxVTCBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbnMnID48TEkgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb24nID48RElWIGNsYXNzPSdOdW1iZXInID48L0RJVj48RElWIGNsYXNzPSdNb3Rpb25UZXh0IFJpY2hUZXh0JyA+PC9ESVY+PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTYnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTZUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjQuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSg2KTsiID5QbGFubmluZywgUmVhbCBFc3RhdGUgYW5kIEVjb25vbWljIERldmVsb3BtZW50IERlcGFydG1lbnQ8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gyPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48L0RJVj48L0RJVj48RElWID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGFpbmVyIGluZGVudCcgc3R5bGU9IndpZHRoOmF1dG8iID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtIEFnZW5kYUl0ZW0xOCcgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDMgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtMThUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjQuMTwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1OYXZpZ2F0ZSBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGUnIHN0eWxlPSJ3aWR0aDphdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxhIHRhYmluZGV4PScwJyBocmVmPSJqYXZhc2NyaXB0OlNlbGVjdEl0ZW0oMTgpOyIgPlpvbmluZyBCeS1sYXcgQW1lbmRtZW50IOKAkyBQYXJ0IG9mIDMxMzUgYW5kIDMxOTEgU2Fyc2ZpZWxkIFJvYWQ8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gzPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxhIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxOCwgJ2F0dGFjaG1lbnRzJykiIHRhYkluZGV4PSctMScgPjxpbWcgVGl0bGU9J0F0dGFjaG1lbnRzJyAgc3JjPScuL19sYXlvdXRzL2ltYWdlcy9lU2NyaWJlL2F0dGFjaG1lbnQuc3ZnJyBhbHQ9J1RoaXMgaXRlbSBoYXMgYXR0YWNobWVudHMuJyAgcm9sZT0ncHJlc2VudGF0aW9uJyAvPjwvYT4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjxESVYgY2xhc3M9J3Zpc2libGUteHMgdmlzaWJsZS1zbScgc3R5bGU9IiBwYWRkaW5nOjFweCAiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudHNMaXN0IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MTgnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjMzIiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nWkJMQSDigJMgUGFydCBvZiAzMTM1IGFuZCAzMTkxIFNhcnNmaWVsZCBSb2FkLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlpCTEEg4oCTIFBhcnQgb2YgMzEzNSBhbmQgMzE5MSBTYXJzZmllbGQgUm9hZC5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1EZXNjcmlwdGlvbiBSaWNoVGV4dCcgPjxESVYgPjxESVYgPjxwPkFDUzIwMjItUElFLVBTLTAxMTQgLSBDdW1iZXJsYW5kICgxOSkmIzE2MDs8L3A+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRlbnRSb3cgaW5kZW50JyA+PFVMIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9ucycgPjxMSSBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbicgPjxESVYgY2xhc3M9J051bWJlcicgPjwvRElWPjxESVYgY2xhc3M9J01vdGlvblRleHQgUmljaFRleHQnID48cD48c3Ryb25nPlJlcG9ydCByZWNvbW1lbmRhdGlvbnM8L3N0cm9uZz48L3A+CjxvbD4KPGxpPjxzdHJvbmc+VGhhdCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgcmVjb21tZW5kIENvdW5jaWwgYXBwcm92ZSBhbiBhbWVuZG1lbnQgdG8gWm9uaW5nIEJ5LWxhdyAyMDA4LTI1MCBmb3IgUGFydCBvZiAzMTM1IGFuZCAzMTkxIFNhcnNmaWVsZCBSb2FkLCBhcyBzaG93biBpbiBEb2N1bWVudCAxLCB0byBwcm9oaWJpdCByZXNpZGVudGlhbCBkZXZlbG9wbWVudCBvbiB0aGUgcmV0YWluZWQgYWdyaWN1bHR1cmFsIGxhbmRzLCBhcyBkZXRhaWxlZCBpbiBEb2N1bWVudCAyLjwvc3Ryb25nPjwvbGk+CjxsaT48c3Ryb25nPlRoYXQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIGFwcHJvdmUgdGhlIENvbnN1bHRhdGlvbiBEZXRhaWxzIFNlY3Rpb24gb2YgdGhpcyByZXBvcnQgYmUgaW5jbHVkZWQgYXMgcGFydCBvZiB0aGUg4oCYYnJpZWYgZXhwbGFuYXRpb27igJkgaW4gdGhlIFN1bW1hcnkgb2YgV3JpdHRlbiBhbmQgT3JhbCBQdWJsaWMgU3VibWlzc2lvbnMsIHRvIGJlIHByZXBhcmVkIGJ5IHRoZSBPZmZpY2Ugb2YgdGhlIENpdHkgQ2xlcmsgYW5kIHN1Ym1pdHRlZCB0byBDb3VuY2lsIGluIHRoZSByZXBvcnQgdGl0bGVkLCDigJxTdW1tYXJ5IG9mIE9yYWwgYW5kIFdyaXR0ZW4gUHVibGljIFN1Ym1pc3Npb25zIGZvciBJdGVtcyBTdWJqZWN0IHRvIHRoZSA8ZW0+UGxhbm5pbmcgQWN0PC9lbT4g4oCYRXhwbGFuYXRpb24gUmVxdWlyZW1lbnRz4oCZIGF0IHRoZSBDaXR5IENvdW5jaWwgTWVldGluZyBvZiBTZXB0ZW1iZXIgMjEsIDIwMjIs4oCdIHN1YmplY3QgdG8gc3VibWlzc2lvbnMgcmVjZWl2ZWQgYmV0d2VlbiB0aGUgcHVibGljYXRpb24gb2YgdGhpcyByZXBvcnQgYW5kIHRoZSB0aW1lIG9mIENvdW5jaWzigJlzIGRlY2lzaW9uLjwvc3Ryb25nPjwvbGk+Cjwvb2w+PC9ESVY+PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTE5JyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMyBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0xOVRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+NC4yPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxOSk7IiA+Wm9uaW5nIEJ5LWxhdyBBbWVuZG1lbnQg4oCTIDYwNjAgYW5kIDYwODYgRnJvbnRpZXIgUm9hZMKgIDwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDM+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PGEgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDE5LCAnYXR0YWNobWVudHMnKSIgdGFiSW5kZXg9Jy0xJyA+PGltZyBUaXRsZT0nQXR0YWNobWVudHMnICBzcmM9Jy4vX2xheW91dHMvaW1hZ2VzL2VTY3JpYmUvYXR0YWNobWVudC5zdmcnIGFsdD0nVGhpcyBpdGVtIGhhcyBhdHRhY2htZW50cy4nICByb2xlPSdwcmVzZW50YXRpb24nIC8+PC9hPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PERJViBjbGFzcz0ndmlzaWJsZS14cyB2aXNpYmxlLXNtJyBzdHlsZT0iIHBhZGRpbmc6MXB4ICIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50c0xpc3QgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQxOScgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzQiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdaQkxBIOKAkyA2MDYwIGFuZCA2MDg2IEZyb250aWVyIFJvYWQgLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlpCTEEg4oCTIDYwNjAgYW5kIDYwODYgRnJvbnRpZXIgUm9hZCAucGRmPC9TUEFOPjwvYT48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtRGVzY3JpcHRpb24gUmljaFRleHQnID48RElWID48RElWID48cD5BQ1MyMDIyLVBJRS1QUy0wMTE2IC0gQ3VtYmVybGFuZCAoMTkpJiMxNjA7PC9wPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxVTCBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbnMnID48TEkgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb24nID48RElWIGNsYXNzPSdOdW1iZXInID48L0RJVj48RElWIGNsYXNzPSdNb3Rpb25UZXh0IFJpY2hUZXh0JyA+PHA+PHN0cm9uZz5SZXBvcnQgcmVjb21tZW5kYXRpb25zPC9zdHJvbmc+PC9wPgo8b2w+CjxsaT48c3Ryb25nPlRoYXQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIHJlY29tbWVuZCBDb3VuY2lsIGFwcHJvdmUgYW4gYW1lbmRtZW50IHRvIFpvbmluZyBCeS1sYXcgMjAwOC0yNTAgZm9yIDYwODYgYW5kIDYwNjAgRnJvbnRpZXIgUm9hZCB0byBwcm9oaWJpdCByZXNpZGVudGlhbCBkZXZlbG9wbWVudCBvbiB0aGUgcmV0YWluZWQgZmFybWxhbmQgYW5kIHBlcm1pdCBhIGRlY3JlYXNlZCBsb3Qgd2lkdGggb24gdGhlIHNldmVyZWQgc3VycGx1cyBmYXJtaG91c2UsIGFzIGRldGFpbGVkIGluIERvY3VtZW50IDIuPC9zdHJvbmc+PC9saT4KPGxpPjxzdHJvbmc+VGhhdCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgYXBwcm92ZSB0aGUgQ29uc3VsdGF0aW9uIERldGFpbHMgU2VjdGlvbiBvZiB0aGlzIHJlcG9ydCBiZSBpbmNsdWRlZCBhcyBwYXJ0IG9mIHRoZSDigJhicmllZiBleHBsYW5hdGlvbuKAmSBpbiB0aGUgU3VtbWFyeSBvZiBXcml0dGVuIGFuZCBPcmFsIFB1YmxpYyBTdWJtaXNzaW9ucywgdG8gYmUgcHJlcGFyZWQgYnkgdGhlIE9mZmljZSBvZiB0aGUgQ2l0eSBDbGVyayBhbmQgc3VibWl0dGVkIHRvIENvdW5jaWwgaW4gdGhlIHJlcG9ydCB0aXRsZWQsIOKAnFN1bW1hcnkgb2YgT3JhbCBhbmQgV3JpdHRlbiBQdWJsaWMgU3VibWlzc2lvbnMgZm9yIEl0ZW1zIFN1YmplY3QgdG8gdGhlIDxlbT5QbGFubmluZyBBY3Q8L2VtPiDigJhFeHBsYW5hdGlvbiBSZXF1aXJlbWVudHPigJkgYXQgdGhlIENpdHkgQ291bmNpbCBNZWV0aW5nIG9mIFNlcHRlbWJlciAyMSwgMjAyMiBzdWJqZWN0IHRvIHN1Ym1pc3Npb25zIHJlY2VpdmVkIGJldHdlZW4gdGhlIHB1YmxpY2F0aW9uIG9mIHRoaXMgcmVwb3J0IGFuZCB0aGUgdGltZSBvZiBDb3VuY2ls4oCZcyBkZWNpc2lvbi48L3N0cm9uZz48L2xpPgo8L29sPjwvRElWPjwvTEk+PC9VTD48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGFpbmVyIGluZGVudCcgc3R5bGU9IndpZHRoOmF1dG8iID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtIEFnZW5kYUl0ZW0yMCcgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDMgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtMjBUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjQuMzwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1OYXZpZ2F0ZSBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGUnIHN0eWxlPSJ3aWR0aDphdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxhIHRhYmluZGV4PScwJyBocmVmPSJqYXZhc2NyaXB0OlNlbGVjdEl0ZW0oMjApOyIgPlpvbmluZyBCeS1sYXcgQW1lbmRtZW50IOKAkyBQYXJ0IG9mIDQ5MDAgRnJhbmsgS2VubnkgUm9hZDwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDM+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PGEgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDIwLCAnYXR0YWNobWVudHMnKSIgdGFiSW5kZXg9Jy0xJyA+PGltZyBUaXRsZT0nQXR0YWNobWVudHMnICBzcmM9Jy4vX2xheW91dHMvaW1hZ2VzL2VTY3JpYmUvYXR0YWNobWVudC5zdmcnIGFsdD0nVGhpcyBpdGVtIGhhcyBhdHRhY2htZW50cy4nICByb2xlPSdwcmVzZW50YXRpb24nIC8+PC9hPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PERJViBjbGFzcz0ndmlzaWJsZS14cyB2aXNpYmxlLXNtJyBzdHlsZT0iIHBhZGRpbmc6MXB4ICIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50c0xpc3QgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQyMCcgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzUiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdaQkxBIOKAkyBQYXJ0IG9mIDQ5MDAgRnJhbmsgS2VubnkgUm9hZC5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5aQkxBIOKAkyBQYXJ0IG9mIDQ5MDAgRnJhbmsgS2VubnkgUm9hZC5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1EZXNjcmlwdGlvbiBSaWNoVGV4dCcgPjxESVYgPjxESVYgPjxwPkFDUzIwMjItUElFLVBTLTAxMTMgLSBDdW1iZXJsYW5kICgxOSkmIzE2MDs8L3A+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRlbnRSb3cgaW5kZW50JyA+PFVMIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9ucycgPjxMSSBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbicgPjxESVYgY2xhc3M9J051bWJlcicgPjwvRElWPjxESVYgY2xhc3M9J01vdGlvblRleHQgUmljaFRleHQnID48cD48c3Ryb25nPlJlcG9ydCByZWNvbW1lbmRhdGlvbnM8L3N0cm9uZz48L3A+CjxvbD4KPGxpPjxzdHJvbmc+VGhhdCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgcmVjb21tZW5kIENvdW5jaWwgYXBwcm92ZSBhbiBhbWVuZG1lbnQgdG8gWm9uaW5nIEJ5LWxhdyAyMDA4LTI1MCBmb3IgUGFydCBvZiA0OTAwIEZyYW5rIEtlbm55IFJvYWQsIGFzIHNob3duIGluIERvY3VtZW50IDEsIHRvIHByb2hpYml0IHJlc2lkZW50aWFsIGRldmVsb3BtZW50IG9uIHRoZSByZXRhaW5lZCBhZ3JpY3VsdHVyYWwgbGFuZHMsIGFzIGRldGFpbGVkIGluIERvY3VtZW50IDIuPC9zdHJvbmc+PC9saT4KPGxpPjxzdHJvbmc+VGhhdCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgYXBwcm92ZSB0aGUgQ29uc3VsdGF0aW9uIERldGFpbHMgU2VjdGlvbiBvZiB0aGlzIHJlcG9ydCBiZSBpbmNsdWRlZCBhcyBwYXJ0IG9mIHRoZSDigJhicmllZiBleHBsYW5hdGlvbuKAmSBpbiB0aGUgU3VtbWFyeSBvZiBXcml0dGVuIGFuZCBPcmFsIFB1YmxpYyBTdWJtaXNzaW9ucywgdG8gYmUgcHJlcGFyZWQgYnkgdGhlIE9mZmljZSBvZiB0aGUgQ2l0eSBDbGVyayBhbmQgc3VibWl0dGVkIHRvIENvdW5jaWwgaW4gdGhlIHJlcG9ydCB0aXRsZWQsIOKAnFN1bW1hcnkgb2YgT3JhbCBhbmQgV3JpdHRlbiBQdWJsaWMgU3VibWlzc2lvbnMgZm9yIEl0ZW1zIFN1YmplY3QgdG8gdGhlIDxlbT5QbGFubmluZyBBY3Q8L2VtPiDigJhFeHBsYW5hdGlvbiBSZXF1aXJlbWVudHPigJkgYXQgdGhlIENpdHkgQ291bmNpbCBNZWV0aW5nIG9mIFNlcHRlbWJlciAyMSwgMjAyMizigJ0gc3ViamVjdCB0byBzdWJtaXNzaW9ucyByZWNlaXZlZCBiZXR3ZWVuIHRoZSBwdWJsaWNhdGlvbiBvZiB0aGlzIHJlcG9ydCBhbmQgdGhlIHRpbWUgb2YgQ291bmNpbOKAmXMgZGVjaXNpb24uPC9zdHJvbmc+PC9saT4KPC9vbD48L0RJVj48L0xJPjwvVUw+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtMjEnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgzIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTIxVGl0bGVIZWFkZXInIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvdW50ZXInIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsiID40LjQ8L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDIxKTsiID5ab25pbmcgQnktbGF3IEFtZW5kbWVudCDigJMgUGFydCBvZiAzODk2IDh0aCBMaW5lIFJvYWQgYW5kIDc5NjggTWFydmVsdmlsbGUgUm9hZDwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDM+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PGEgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDIxLCAnYXR0YWNobWVudHMnKSIgdGFiSW5kZXg9Jy0xJyA+PGltZyBUaXRsZT0nQXR0YWNobWVudHMnICBzcmM9Jy4vX2xheW91dHMvaW1hZ2VzL2VTY3JpYmUvYXR0YWNobWVudC5zdmcnIGFsdD0nVGhpcyBpdGVtIGhhcyBhdHRhY2htZW50cy4nICByb2xlPSdwcmVzZW50YXRpb24nIC8+PC9hPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PERJViBjbGFzcz0ndmlzaWJsZS14cyB2aXNpYmxlLXNtJyBzdHlsZT0iIHBhZGRpbmc6MXB4ICIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50c0xpc3QgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQyMScgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzciIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdaQkxBIOKAkyBQYXJ0IG9mIDM4OTYgOHRoIExpbmUgUm9hZCBhbmQgNzk2OCBNYXJ2ZWx2aWxsZSBSb2FkLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlpCTEEg4oCTIFBhcnQgb2YgMzg5NiA4dGggTGluZSBSb2FkIGFuZCA3OTY4IE1hcnZlbHZpbGxlIFJvYWQucGRmPC9TUEFOPjwvYT48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtRGVzY3JpcHRpb24gUmljaFRleHQnID48RElWID48RElWID48cD5BQ1MyMDIyLVBJRS1QUy0wMTE1IC0gT3Nnb29kZSAoMjApJiMxNjA7PC9wPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxVTCBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbnMnID48TEkgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb24nID48RElWIGNsYXNzPSdOdW1iZXInID48L0RJVj48RElWIGNsYXNzPSdNb3Rpb25UZXh0IFJpY2hUZXh0JyA+PHA+PHN0cm9uZz5SZXBvcnQgcmVjb21tZW5kYXRpb25zPC9zdHJvbmc+PC9wPgo8b2w+CjxsaT48c3Ryb25nPlRoYXQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIHJlY29tbWVuZCBDb3VuY2lsIGFwcHJvdmUgYW4gYW1lbmRtZW50IHRvIFpvbmluZyBCeS1sYXcgMjAwOC0yNTAgZm9yIFBhcnQgb2YgMzg5NiA4dGggTGluZSBSb2FkIGFuZCA3OTY4IE1hcnZlbHZpbGxlIFJvYWQsIGFzIHNob3duIGluIERvY3VtZW50IDEsIHRvIHByb2hpYml0IHJlc2lkZW50aWFsIGRldmVsb3BtZW50IG9uIHRoZSByZXRhaW5lZCBhZ3JpY3VsdHVyYWwgbGFuZHMsIGFuZCBwZXJtaXQgYW4gaW5jcmVhc2UgaW4gbWF4aW11bSBhY2Nlc3NvcnkgYnVpbGRpbmcgYW5kIGFuIGVxdWVzdHJpYW4gZXN0YWJsaXNobWVudCBhcyBhbiBhY2Nlc3NvcnkgdXNlLCBhcyBkZXRhaWxlZCBpbiBEb2N1bWVudCAyLjwvc3Ryb25nPjwvbGk+CjxsaT48c3Ryb25nPlRoYXQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIGFwcHJvdmUgdGhlIENvbnN1bHRhdGlvbiBEZXRhaWxzIFNlY3Rpb24gb2YgdGhpcyByZXBvcnQgYmUgaW5jbHVkZWQgYXMgcGFydCBvZiB0aGUg4oCYYnJpZWYgZXhwbGFuYXRpb27igJkgaW4gdGhlIFN1bW1hcnkgb2YgV3JpdHRlbiBhbmQgT3JhbCBQdWJsaWMgU3VibWlzc2lvbnMsIHRvIGJlIHByZXBhcmVkIGJ5IHRoZSBPZmZpY2Ugb2YgdGhlIENpdHkgQ2xlcmsgYW5kIHN1Ym1pdHRlZCB0byBDb3VuY2lsIGluIHRoZSByZXBvcnQgdGl0bGVkLCDigJxTdW1tYXJ5IG9mIE9yYWwgYW5kIFdyaXR0ZW4gUHVibGljIFN1Ym1pc3Npb25zIGZvciBJdGVtcyBTdWJqZWN0IHRvIHRoZSA8ZW0+UGxhbm5pbmcgQWN0PC9lbT4g4oCYRXhwbGFuYXRpb24gUmVxdWlyZW1lbnRz4oCZIGF0IHRoZSBDaXR5IENvdW5jaWwgTWVldGluZyBvZiBTZXB0ZW1iZXIgMjEsIDIwMjIs4oCdIHN1YmplY3QgdG8gc3VibWlzc2lvbnMgcmVjZWl2ZWQgYmV0d2VlbiB0aGUgcHVibGljYXRpb24gb2YgdGhpcyByZXBvcnQgYW5kIHRoZSB0aW1lIG9mIENvdW5jaWzigJlzIGRlY2lzaW9uLjwvc3Ryb25nPjwvbGk+Cjwvb2w+PC9ESVY+PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTIyJyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMyBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0yMlRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+NC41PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgyMik7IiA+RGV2ZWxvcG1lbnQgQ2hhcmdlIENvbXBsYWludCAtIDM0MjAgQmFza2lucyBCZWFjaCBSb2FkPC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1DYXRlZ29yeScgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbVNwb25zb3JzJyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7IiA+PC9ESVY+PC9ESVY+PC9ESVY+PC9IMz48RElWIGNsYXNzPSdBZ2VuZGFJdGVtSWNvbnMnIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jazsiID48RElWIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48YSBocmVmPSJqYXZhc2NyaXB0OlNlbGVjdEl0ZW0oMjIsICdhdHRhY2htZW50cycpIiB0YWJJbmRleD0nLTEnID48aW1nIFRpdGxlPSdBdHRhY2htZW50cycgIHNyYz0nLi9fbGF5b3V0cy9pbWFnZXMvZVNjcmliZS9hdHRhY2htZW50LnN2ZycgYWx0PSdUaGlzIGl0ZW0gaGFzIGF0dGFjaG1lbnRzLicgIHJvbGU9J3ByZXNlbnRhdGlvbicgLz48L2E+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48RElWIGNsYXNzPSd2aXNpYmxlLXhzIHZpc2libGUtc20nIHN0eWxlPSIgcGFkZGluZzoxcHggIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnRzTGlzdCBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDIyJyA+PFNQQU4gY2xhc3M9J1NlcXVlbmNlJyA+MS48L1NQQU4+PGEgY2xhc3M9J0xpbmsnIHRhYmluZGV4PScwJyBocmVmPSJmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05MzIzOCIgZGF0YS10b2dnbGU9J3Rvb2x0aXAnIGRhdGEtaHRtbD0ndHJ1ZScgZGF0YS1jb250YWluZXI9J2JvZHknIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0RldmVsb3BtZW50IENoYXJnZSBDb21wbGFpbnQgLSAzNDIwIEJhc2tpbnMgQmVhY2ggUm9hZC5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5EZXZlbG9wbWVudCBDaGFyZ2UgQ29tcGxhaW50IC0gMzQyMCBCYXNraW5zIEJlYWNoIFJvYWQucGRmPC9TUEFOPjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDIyJyA+PFNQQU4gY2xhc3M9J1NlcXVlbmNlJyA+Mi48L1NQQU4+PGEgY2xhc3M9J0xpbmsnIHRhYmluZGV4PScwJyBocmVmPSJmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05MzIzOSIgZGF0YS10b2dnbGU9J3Rvb2x0aXAnIGRhdGEtaHRtbD0ndHJ1ZScgZGF0YS1jb250YWluZXI9J2JvZHknIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0RvY3VtZW50IDEucGRmJyB0YXJnZXQ9J19ibGFuaycgPjxTUEFOIGNsYXNzPSdMaW5rJyA+RG9jdW1lbnQgMS5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1EZXNjcmlwdGlvbiBSaWNoVGV4dCcgPjxESVYgPjxESVYgPjxwPkFDUzIwMjItUElFLUJDUy0wMDAzIC0gV2VzdCBDYXJsZXRvbi1NYXJjaCg1KTwvcD48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48VUwgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb25zJyA+PExJIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9uJyA+PERJViBjbGFzcz0nTnVtYmVyJyA+PC9ESVY+PERJViBjbGFzcz0nTW90aW9uVGV4dCBSaWNoVGV4dCcgPjxwPjxzdHJvbmc+UmVwb3J0IHJlY29tbWVuZGF0aW9uPC9zdHJvbmc+PC9wPgo8cD48c3Ryb25nPlRoYXQgdGhlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSByZWNvbW1lbmQgdGhhdCBDb3VuY2lsIGRpc21pc3MgdGhlIGRldmVsb3BtZW50IGNoYXJnZSBjb21wbGFpbnQgaW4gcmVzcGVjdCBvZiAzNDIwIEJhc2tpbnMgQmVhY2ggUm9hZC48L3N0cm9uZz48L3A+PC9ESVY+PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTIzJyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMyBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0yM1RpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+NC42PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgyMyk7IiA+T3Nnb29kZSBHYXJkZW5zIENlZGFyIEFjcmVzIE11bmljaXBhbCBEcmFpbiDigJMgQXBwb2ludG1lbnQgb2YgRW5naW5lZXI8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gzPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxhIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgyMywgJ2F0dGFjaG1lbnRzJykiIHRhYkluZGV4PSctMScgPjxpbWcgVGl0bGU9J0F0dGFjaG1lbnRzJyAgc3JjPScuL19sYXlvdXRzL2ltYWdlcy9lU2NyaWJlL2F0dGFjaG1lbnQuc3ZnJyBhbHQ9J1RoaXMgaXRlbSBoYXMgYXR0YWNobWVudHMuJyAgcm9sZT0ncHJlc2VudGF0aW9uJyAvPjwvYT4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjxESVYgY2xhc3M9J3Zpc2libGUteHMgdmlzaWJsZS1zbScgc3R5bGU9IiBwYWRkaW5nOjFweCAiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudHNMaXN0IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MjMnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjQwIiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nT3Nnb29kZSBHYXJkZW5zIENlZGFyIEFjcmVzIE1ELnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPk9zZ29vZGUgR2FyZGVucyBDZWRhciBBY3JlcyBNRC5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1EZXNjcmlwdGlvbiBSaWNoVGV4dCcgPjxESVYgPjxESVYgPjxwPkFDUzIwMjItSVdTLVdTLTAwMDcgLSBPc2dvb2RlICgyMCk8L3A+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRlbnRSb3cgaW5kZW50JyA+PFVMIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9ucycgPjxMSSBjbGFzcz0nQWdlbmRhSXRlbU1vdGlvbicgPjxESVYgY2xhc3M9J051bWJlcicgPjwvRElWPjxESVYgY2xhc3M9J01vdGlvblRleHQgUmljaFRleHQnID48cD48c3Ryb25nPlJlcG9ydCByZWNvbW1lbmRhdGlvbjwvc3Ryb25nPjwvcD4KPHA+PHN0cm9uZz5UaGF0IHRoZSBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgcmVjb21tZW5kIENvdW5jaWwgYXBwb2ludCBNY0ludG9zaCBQZXJyeSBDb25zdWx0aW5nIEVuZ2luZWVycyBMdGQuIGFzIHRoZSBFbmdpbmVlciBvZiByZWNvcmQgdG8gcHJlcGFyZSBhIHJlcG9ydCB0aGF0IGFkZHJlc3NlcyB0aGUgc3Vic2VxdWVudCBkaXNjb25uZWN0aW9uIHRvIHRoZSBPc2dvb2RlIEdhcmRlbnMgQ2VkYXIgQWNyZXMgTXVuaWNpcGFsIERyYWluLCBmb3IgQ291bmNpbOKAmXMgY29uc2lkZXJhdGlvbiBwcmlvciB0byBDb3VuY2lsIGFwcHJvdmluZyBvciBkaXNhcHByb3ZpbmcgdGhlIGRpc2Nvbm5lY3Rpb24sIHVuZGVyIFN1YnNlY3Rpb24gNjUoNCkgb2YgdGhlIDxlbT5EcmFpbmFnZSBBY3Q8L2VtPi48L3N0cm9uZz48L3A+PC9ESVY+PC9MST48L1VMPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTgnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbThUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjUuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSg4KTsiID5JbiBDYW1lcmEgSXRlbXM8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gyPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGVudFJvdyBpbmRlbnQnID48VUwgY2xhc3M9J0FnZW5kYUl0ZW1Nb3Rpb25zJyA+PExJIGNsYXNzPSdBZ2VuZGFJdGVtTW90aW9uJyA+PERJViBjbGFzcz0nTnVtYmVyJyA+PC9ESVY+PERJViBjbGFzcz0nTW90aW9uVGV4dCBSaWNoVGV4dCcgPjwvRElWPjwvTEk+PC9VTD48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGFpbmVyIGluZGVudCcgc3R5bGU9IndpZHRoOmF1dG8iID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtIEFnZW5kYUl0ZW0xMCcgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDIgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtMTBUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjYuPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxMCk7IiA+T3BlbiBNaWMgU2Vzc2lvbjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250YWluZXIgaW5kZW50JyBzdHlsZT0id2lkdGg6YXV0byIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW0gQWdlbmRhSXRlbTEyJyBzdHlsZT0id2lkdGg6MTAwJSIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZVJvdycgPjxIMiBJZD0nQWdlbmRhSXRlbUFnZW5kYUl0ZW0xMlRpdGxlSGVhZGVyJyBzdHlsZT0iZGlzcGxheTogaW5saW5lLWJsb2NrOyIgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db3VudGVyJyBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+Ny48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDEyKTsiID5Ob3RpY2VzIG9mIE1vdGlvbnMgKEZvciBDb25zaWRlcmF0aW9uIGF0IFN1YnNlcXVlbnQgTWVldGluZyk8L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNhdGVnb3J5JyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtU3BvbnNvcnMnID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTsiID48L0RJVj48L0RJVj48L0RJVj48L0gyPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1JY29ucycgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxESVYgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyB0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+Jm5ic3A7PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj48L0RJVj48L0RJVj48L0RJVj48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ29udGFpbmVyIGluZGVudCcgc3R5bGU9IndpZHRoOmF1dG8iID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtIEFnZW5kYUl0ZW0xMycgc3R5bGU9IndpZHRoOjEwMCUiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGVSb3cnID48SDIgSWQ9J0FnZW5kYUl0ZW1BZ2VuZGFJdGVtMTNUaXRsZUhlYWRlcicgc3R5bGU9ImRpc3BsYXk6IGlubGluZS1ibG9jazsiID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ291bnRlcicgc3R5bGU9ImRpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjguPC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbU5hdmlnYXRlIGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1UaXRsZScgc3R5bGU9IndpZHRoOmF1dG87ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PGEgdGFiaW5kZXg9JzAnIGhyZWY9ImphdmFzY3JpcHQ6U2VsZWN0SXRlbSgxMyk7IiA+SW5xdWlyaWVzPC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1DYXRlZ29yeScgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbVNwb25zb3JzJyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7IiA+PC9ESVY+PC9ESVY+PC9ESVY+PC9IMj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtSWNvbnMnIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jazsiID48RElWIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtMTQnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTE0VGl0bGVIZWFkZXInIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvdW50ZXInIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsiID45LjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1OYXZpZ2F0ZSBpbmRlbnQnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtVGl0bGUnIHN0eWxlPSJ3aWR0aDphdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrOyIgPjxhIHRhYmluZGV4PScwJyBocmVmPSJqYXZhc2NyaXB0OlNlbGVjdEl0ZW0oMTQpOyIgPk90aGVyIEJ1c2luZXNzPC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1DYXRlZ29yeScgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbVNwb25zb3JzJyA+PERJViBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7IiA+PC9ESVY+PC9ESVY+PC9ESVY+PC9IMj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtSWNvbnMnIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZTtkaXNwbGF5OmlubGluZS1ibG9jazsiID48RElWIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsgdGV4dC1kZWNvcmF0aW9uOm5vbmUiID48L0RJVj48U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPiZuYnNwOzxTUEFOIHN0eWxlPSJ3aWR0aDo4cHgiID48L1NQQU4+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvbnRhaW5lciBpbmRlbnQnIHN0eWxlPSJ3aWR0aDphdXRvIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbSBBZ2VuZGFJdGVtMTYnIHN0eWxlPSJ3aWR0aDoxMDAlIiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlUm93JyA+PEgyIElkPSdBZ2VuZGFJdGVtQWdlbmRhSXRlbTE2VGl0bGVIZWFkZXInIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IiA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUNvdW50ZXInIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazsiID4xMC48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtTmF2aWdhdGUgaW5kZW50JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbVRpdGxlJyBzdHlsZT0id2lkdGg6YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazsiID48YSB0YWJpbmRleD0nMCcgaHJlZj0iamF2YXNjcmlwdDpTZWxlY3RJdGVtKDE2KTsiID5BZGpvdXJubWVudDwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQ2F0ZWdvcnknID48RElWIHN0eWxlPSJ0ZXh0LWRlY29yYXRpb246bm9uZSIgPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1TcG9uc29ycycgPjxESVYgc3R5bGU9InRleHQtZGVjb3JhdGlvbjpub25lOyIgPjwvRElWPjwvRElWPjwvRElWPjwvSDI+PERJViBjbGFzcz0nQWdlbmRhSXRlbUljb25zJyBzdHlsZT0idGV4dC1kZWNvcmF0aW9uOm5vbmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7IiA+PERJViBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7IHRleHQtZGVjb3JhdGlvbjpub25lIiA+PC9ESVY+PFNQQU4gc3R5bGU9IndpZHRoOjhweCIgPjwvU1BBTj4mbmJzcDs8U1BBTiBzdHlsZT0id2lkdGg6OHB4IiA+PC9TUEFOPjwvRElWPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1Db250ZW50Um93IGluZGVudCcgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1EZXNjcmlwdGlvbiBSaWNoVGV4dCcgPjxESVYgPjxESVYgPjxwPk5leHQgTWVldGluZzwvcD48YnI+PHA+VG8gYmUgZGV0ZXJtaW5lZC48L3A+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PC9ESVY+PC9TRUNUSU9OPjxTRUNUSU9OIGNsYXNzPSdEZXRhaWxzIGNvbC14cy0zIGNvbC1zbS0zIGNvbC1tZC00IGNvbC1sZy00IGNvbC14cy1vZmZzZXQtOSBjb2wtc20tb2Zmc2V0LTknID48RElWIGNsYXNzPSdhZmZpeCBhZmZpeC10b3AgY29sLXhzLTMgY29sLXNtLTMgY29sLW1kLTQgY29sLWxnLTQgY29sLXhzLW9mZnNldC05IGNvbC1zbS1vZmZzZXQtOSBkLXNtLWJsb2NrJyBzdHlsZT0id2lkdGg6aW5oZXJpdDsgcGFkZGluZy1yaWdodDo1JTsiID48RElWIGNsYXNzPSdwYW5lbCBwYW5lbC1kZWZhdWx0JyBzdHlsZT0id2lkdGg6YXV0bztib3gtc2hhZG93OjNweCAzcHggM3B4IHJnYmEoMCwwLDAsLjMzKTsiID48RElWIGNsYXNzPSdWaWRlb1BsYXllckNvbnRhaW5lciBwYW5lbCBwYW5lbC1kZWZhdWx0JyA+PERJViBjbGFzcz0nVmlkZW9QbGF5ZXInID48L0RJVj48L0RJVj48RElWIGNsYXNzPSd2aXNpYmxlLW1kIHZpc2libGUtbGcgQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlsc0NvbnRhaW5lcicgPjxESVYgY2xhc3M9J3BhbmVsLWJvZHkgQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnROb3RTZWxlY3RlZCcgPk5vIEl0ZW0gU2VsZWN0ZWQ8L0RJVj48RElWIGNsYXNzPSdwYW5lbCBwYW5lbC1kZWZhdWx0IEFnZW5kYUl0ZW1TZWxlY3RlZERldGFpbHMnIHN0eWxlPSJkaXNwbGF5Om5vbmUiID48RElWIGNsYXNzPSdwYW5lbC1oZWFkaW5nJyA+PFNQQU4gY2xhc3M9J1NlbGVjdGVkSXRlbUNvdW50ZXInID48L1NQQU4+ICZuYnNwOyA8U1BBTiBjbGFzcz0nU2VsZWN0ZWRJdGVtVGl0bGUnID48L1NQQU4+PC9ESVY+PERJViBjbGFzcz0ncGFuZWwtYm9keScgPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50c0FyZWEnID48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudHNMaXN0JyA+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnROb25lJyA+VGhpcyBpdGVtIGhhcyBubyBhdHRhY2htZW50czwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MScgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzEiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdQdWJsaWMgTm90aWNlcyBFbmdsaXNoIC0gU3RhbmRpbmcgQ29tbWl0dGVlLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlB1YmxpYyBOb3RpY2VzIEVuZ2xpc2ggLSBTdGFuZGluZyBDb21taXR0ZWUucGRmPC9TUEFOPjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDEnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4yLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjMyIiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nUHVibGljIE5vdGljZXMgRnJlbmNoIC0gU3RhbmRpbmcgQ29tbWl0dGVlLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlB1YmxpYyBOb3RpY2VzIEZyZW5jaCAtIFN0YW5kaW5nIENvbW1pdHRlZS5wZGY8L1NQQU4+PC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MTgnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjMzIiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nWkJMQSDigJMgUGFydCBvZiAzMTM1IGFuZCAzMTkxIFNhcnNmaWVsZCBSb2FkLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlpCTEEg4oCTIFBhcnQgb2YgMzEzNSBhbmQgMzE5MSBTYXJzZmllbGQgUm9hZC5wZGY8L1NQQU4+PC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MTknID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjM0IiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nWkJMQSDigJMgNjA2MCBhbmQgNjA4NiBGcm9udGllciBSb2FkIC5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5aQkxBIOKAkyA2MDYwIGFuZCA2MDg2IEZyb250aWVyIFJvYWQgLnBkZjwvU1BBTj48L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQyMCcgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzUiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdaQkxBIOKAkyBQYXJ0IG9mIDQ5MDAgRnJhbmsgS2VubnkgUm9hZC5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5aQkxBIOKAkyBQYXJ0IG9mIDQ5MDAgRnJhbmsgS2VubnkgUm9hZC5wZGY8L1NQQU4+PC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50NCcgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzYiIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBUkFDIERyYWZ0IE1pbnV0ZXMgMzMgRU4ucGRmJyB0YXJnZXQ9J19ibGFuaycgPjxTUEFOIGNsYXNzPSdMaW5rJyA+QVJBQyBEcmFmdCBNaW51dGVzIDMzIEVOLnBkZjwvU1BBTj48L2E+PC9ESVY+PERJViBjbGFzcz0nQWdlbmRhSXRlbUF0dGFjaG1lbnQgQWdlbmRhSXRlbUF0dGFjaG1lbnQyMScgPjxTUEFOIGNsYXNzPSdTZXF1ZW5jZScgPjEuPC9TUEFOPjxhIGNsYXNzPSdMaW5rJyB0YWJpbmRleD0nMCcgaHJlZj0iZmlsZXN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9OTMyMzciIGRhdGEtdG9nZ2xlPSd0b29sdGlwJyBkYXRhLWh0bWw9J3RydWUnIGRhdGEtY29udGFpbmVyPSdib2R5JyBkYXRhLW9yaWdpbmFsLXRpdGxlPSdaQkxBIOKAkyBQYXJ0IG9mIDM4OTYgOHRoIExpbmUgUm9hZCBhbmQgNzk2OCBNYXJ2ZWx2aWxsZSBSb2FkLnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPlpCTEEg4oCTIFBhcnQgb2YgMzg5NiA4dGggTGluZSBSb2FkIGFuZCA3OTY4IE1hcnZlbHZpbGxlIFJvYWQucGRmPC9TUEFOPjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDIyJyA+PFNQQU4gY2xhc3M9J1NlcXVlbmNlJyA+MS48L1NQQU4+PGEgY2xhc3M9J0xpbmsnIHRhYmluZGV4PScwJyBocmVmPSJmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05MzIzOCIgZGF0YS10b2dnbGU9J3Rvb2x0aXAnIGRhdGEtaHRtbD0ndHJ1ZScgZGF0YS1jb250YWluZXI9J2JvZHknIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0RldmVsb3BtZW50IENoYXJnZSBDb21wbGFpbnQgLSAzNDIwIEJhc2tpbnMgQmVhY2ggUm9hZC5wZGYnIHRhcmdldD0nX2JsYW5rJyA+PFNQQU4gY2xhc3M9J0xpbmsnID5EZXZlbG9wbWVudCBDaGFyZ2UgQ29tcGxhaW50IC0gMzQyMCBCYXNraW5zIEJlYWNoIFJvYWQucGRmPC9TUEFOPjwvYT48L0RJVj48RElWIGNsYXNzPSdBZ2VuZGFJdGVtQXR0YWNobWVudCBBZ2VuZGFJdGVtQXR0YWNobWVudDIyJyA+PFNQQU4gY2xhc3M9J1NlcXVlbmNlJyA+Mi48L1NQQU4+PGEgY2xhc3M9J0xpbmsnIHRhYmluZGV4PScwJyBocmVmPSJmaWxlc3RyZWFtLmFzaHg/RG9jdW1lbnRJZD05MzIzOSIgZGF0YS10b2dnbGU9J3Rvb2x0aXAnIGRhdGEtaHRtbD0ndHJ1ZScgZGF0YS1jb250YWluZXI9J2JvZHknIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0RvY3VtZW50IDEucGRmJyB0YXJnZXQ9J19ibGFuaycgPjxTUEFOIGNsYXNzPSdMaW5rJyA+RG9jdW1lbnQgMS5wZGY8L1NQQU4+PC9hPjwvRElWPjxESVYgY2xhc3M9J0FnZW5kYUl0ZW1BdHRhY2htZW50IEFnZW5kYUl0ZW1BdHRhY2htZW50MjMnID48U1BBTiBjbGFzcz0nU2VxdWVuY2UnID4xLjwvU1BBTj48YSBjbGFzcz0nTGluaycgdGFiaW5kZXg9JzAnIGhyZWY9ImZpbGVzdHJlYW0uYXNoeD9Eb2N1bWVudElkPTkzMjQwIiBkYXRhLXRvZ2dsZT0ndG9vbHRpcCcgZGF0YS1odG1sPSd0cnVlJyBkYXRhLWNvbnRhaW5lcj0nYm9keScgZGF0YS1vcmlnaW5hbC10aXRsZT0nT3Nnb29kZSBHYXJkZW5zIENlZGFyIEFjcmVzIE1ELnBkZicgdGFyZ2V0PSdfYmxhbmsnID48U1BBTiBjbGFzcz0nTGluaycgPk9zZ29vZGUgR2FyZGVucyBDZWRhciBBY3JlcyBNRC5wZGY8L1NQQU4+PC9hPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvRElWPjwvU0VDVElPTj48L0FSVElDTEU+PHNjcmlwdCBkYXRhLWNmYXN5bmM9ImZhbHNlIiBzcmM9Ii9jZG4tY2dpL3NjcmlwdHMvNWM1ZGQ3MjgvY2xvdWRmbGFyZS1zdGF0aWMvZW1haWwtZGVjb2RlLm1pbi5qcyI+PC9zY3JpcHQ+PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPg0KZnVuY3Rpb24gdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKEl0ZW1JZCwgdGFiKSB7DQogICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKCcnLCAnJywgVXBkYXRlUXVlcnkoJ1RhYicsIHRhYikpOw0KDQogICAgaWYgKHRhYiA9PSAnY29tbWVudHMnKSB7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuY3NzKHsnZm9udC13ZWlnaHQnOidib2xkJywgJ2NvbG9yJzonYmxhY2snfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOid0cnVlJ30pOw0KICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JykuY3NzKHsnZm9udC13ZWlnaHQnOidub3JtYWwnLCAnY29sb3InOiAnIzU5NTk1OSd9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzonZmFsc2UnfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuY3NzKHsnZm9udC13ZWlnaHQnOiAnYm9sZCcsICdjb2xvcic6ICdibGFjayd9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnICsgSXRlbUlkKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J3RydWUnfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnQnICsgSXRlbUlkKS5jc3Moeydmb250LXdlaWdodCc6ICdub3JtYWwnLCdjb2xvcic6ICcjNTk1OTU5JyB9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcgKyBJdGVtSWQpLmF0dHIoeydhcmlhLXNlbGVjdGVkJzonZmFsc2UnfSk7DQoNCiAgICAgICAgaWYgKCQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudCcgKyBJdGVtSWQpLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnROb25lJykuaGlkZSgpOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkuaGlkZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudCcgKyBJdGVtSWQpLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnROb25lJykuc2hvdygpOw0KICAgICAgICB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkuc2hvdygpOw0KICAgICAgICB9DQogICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpOw0KICAgIH0NCiAgICBlbHNlIHsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmNzcyh7J2ZvbnQtd2VpZ2h0JzonYm9sZCcsICdjb2xvcic6J2JsYWNrJ30pOw0KICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOid0cnVlJ30pOw0KICAgICAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50cycpLmNzcyh7J2ZvbnQtd2VpZ2h0Jzonbm9ybWFsJywgJ2NvbG9yJzogJyM1OTU5NTknfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJykuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOidmYWxzZSd9KTsNCiAgICAgICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcgKyBJdGVtSWQpLmNzcyh7J2ZvbnQtd2VpZ2h0JzogJ2JvbGQnLCAnY29sb3InOiAnYmxhY2snfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnQnICsgSXRlbUlkKS5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6J3RydWUnfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuY3NzKHsnZm9udC13ZWlnaHQnOiAnbm9ybWFsJywnY29sb3InOiAnIzU5NTk1OScgfSk7DQogICAgICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUNvbW1lbnRzJyArIEl0ZW1JZCkuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOidmYWxzZSd9KTsNCg0KICAgICAgICBpZiAoJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudE5vbmUnKS5oaWRlKCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5oaWRlKCk7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JyArIEl0ZW1JZCkubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICB2YXIgYXR0YWNobWVudENvdW50cyA9ICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudExpc3QgPiAuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5sZW5ndGg7DQogICAgdmFyIGNvbW1lbnRDb3VudHMgPSAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnRMaXN0ID4gLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50JyArIEl0ZW1JZCkubGVuZ3RoOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50Q291bnQnKS5maXJzdCgpLnRleHQoJyAoJyArIGF0dGFjaG1lbnRDb3VudHMgKyAnKSAnKTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50c0NvdW50JykuZmlyc3QoKS50ZXh0KCcgKCcgKyBjb21tZW50Q291bnRzICsgJyknKTsNCiAgICANCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50Q291bnQnICsgSXRlbUlkKS5maXJzdCgpLnRleHQoJyAoJyArIGF0dGFjaG1lbnRDb3VudHMgKyAnKSAnKTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50c0NvdW50JyArIEl0ZW1JZCkuZmlyc3QoKS50ZXh0KCcgKCcgKyBjb21tZW50Q291bnRzICsgJyknKTsNCn0NCg0KZnVuY3Rpb24gaGlsaWdodEl0ZW0oSXRlbUlkKSB7DQogICAgdmFyIHRhYmluZGV4ID0gJCgnI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIEl0ZW1JZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUgPiAuQWdlbmRhSXRlbVRpdGxlID4gQScpLmF0dHIoJ3RhYmluZGV4Jyk7DQogICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQXR0YWNobWVudCcpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImF0dGFoY21lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50Q291bnQnKS5hdHRyKHsnaHJlZic6ICdqYXZhc2NyaXB0OiB0b2dnbGVTZWxlY3RlZERldGFpbHMoJyArIEl0ZW1JZCArICcsICJhdHRhaGNtZW50cyIpJywgJ3RhYmluZGV4JzogdGFiaW5kZXggfSk7DQogICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHMnKS5hdHRyKHsnaHJlZic6ICdqYXZhc2NyaXB0OiB0b2dnbGVTZWxlY3RlZERldGFpbHMoJyArIEl0ZW1JZCArICcsICJjb21tZW50cyIpJywgJ3RhYmluZGV4JzogdGFiaW5kZXggfSk7DQogICAgJCgnI3NlbGVjdGVkVGFiQWdlbmRhQ29tbWVudHNDb3VudCcpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImNvbW1lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFBdHRhY2htZW50JyArIEl0ZW1JZCkuYXR0cih7J2hyZWYnOiAnamF2YXNjcmlwdDogdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKCcgKyBJdGVtSWQgKyAnLCAiYXR0YWhjbWVudHMiKScsICd0YWJpbmRleCc6IHRhYmluZGV4IH0pOw0KICAgICQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnRDb3VudCcgKyBJdGVtSWQpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImF0dGFoY21lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50cycgKyBJdGVtSWQpLmF0dHIoeydocmVmJzogJ2phdmFzY3JpcHQ6IHRvZ2dsZVNlbGVjdGVkRGV0YWlscygnICsgSXRlbUlkICsgJywgImNvbW1lbnRzIiknLCAndGFiaW5kZXgnOiB0YWJpbmRleCB9KTsNCiAgICAkKCcjc2VsZWN0ZWRUYWJBZ2VuZGFDb21tZW50c0NvdW50JyArIEl0ZW1JZCkuYXR0cih7J2hyZWYnOiAnamF2YXNjcmlwdDogdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKCcgKyBJdGVtSWQgKyAnLCAiY29tbWVudHMiKScsICd0YWJpbmRleCc6IHRhYmluZGV4IH0pOw0KDQogICAgJCgnLmhpbGlnaHRlZCcpLnJlbW92ZUNsYXNzKCdoaWxpZ2h0ZWQnKTsNCiAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnKS5oaWRlKCk7DQogICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50JykucGFyZW50KCkuaGlkZSgpOw0KICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudCcpLmhpZGUoKTsNCg0KICAgIGlmIChJdGVtSWQgIT0gJycpIHsNCiAgICAgICAgdmFyIGl0ZW0gPSAnLkFnZW5kYUl0ZW0nICsgSXRlbUlkOw0KDQogICAgICAgICQoaXRlbSArICcgLkFnZW5kYUl0ZW1UaXRsZVJvdycpLmFkZENsYXNzKCdoaWxpZ2h0ZWQnKTsNCiAgICAgICAgJChpdGVtICsgJyAuTGF0ZUNsb3NlZEFnZW5kYUl0ZW1UaXRsZVJvdycpLmFkZENsYXNzKCdoaWxpZ2h0ZWQnKTsNCiAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2hlbWVudHNIZWFkZXInKS5zaG93KCk7DQogICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudEhlYWRlcicpLnNob3coKTsNCg0KICAgICAgICAkKCcuQWdlbmRhSXRlbVNlbGVjdGVkRGV0YWlscycpLnNob3coKTsNCiAgICAgICAgJCgnLlNlbGVjdGVkSXRlbUNvdW50ZXInKS50ZXh0KCQoaXRlbSArICcgLkFnZW5kYUl0ZW1Db3VudGVyJykudGV4dCgpKTsNCiAgICAgICAgJCgnLlNlbGVjdGVkSXRlbVRpdGxlJykudGV4dCgkKGl0ZW0gKyAnIC5BZ2VuZGFJdGVtVGl0bGUnKS50ZXh0KCkpOw0KDQogICAgICAgIGlmICgkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1BdHRhY2htZW50Tm9uZScpLnNob3coKTsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vbmUnKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgSXRlbUlkKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgDQogICAgICAgIGlmICgkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1QdWJsaWNDb21tZW50Tm9uZScpLnNob3coKTsNCiAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudE5vbmUnKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5zaG93KCk7DQogICAgICAgICAgICAkKCcuQWdlbmRhSXRlbVB1YmxpY0NvbW1lbnQnICsgSXRlbUlkKS5wYXJlbnQoKS5zaG93KCk7DQogICAgICAgIH0NCiAgICB9DQogICAgZWxzZSB7ICANCiAgICAgICAgJCgnLkFnZW5kYUl0ZW1TZWxlY3RlZERldGFpbHMnKS5oaWRlKCk7DQogICAgICAgICQoJy5BZ2VuZGFJdGVtQXR0YWNobWVudE5vdFNlbGVjdGVkJykuc2hvdygpOw0KICAgIH0NCn08L3NjcmlwdD48c2NyaXB0IHR5cGU9J3RleHQvamF2YXNjcmlwdCc+PC9zY3JpcHQ+DQogICAgICAgICAgICA8L21haW4+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8IS0tIEJvb3RzdHJhcCBNb2RhbCAtLT4NCiAgICAgICAgPGRpdiBpZD0nYm9vdHN0cmFwTW9kYWwnIGFyaWEtbGl2ZT0icG9saXRlIiBhcmlhLWhpZGRlbj0idHJ1ZSIgY2xhc3M9J21vZGFsIGZhZGUgaW4nIHN0eWxlPSdkaXNwbGF5OiBub25lOyc+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLXNjcm9sbGFibGUnPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J21vZGFsLWNvbnRlbnQnPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1oZWFkZXInPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGlkPSdib290c3RyYXBNb2RhbFRpdGxlJyBjbGFzcz0nbW9kYWwtdGl0bGUnIHN0eWxlPSdmb250LXNpemU6IDE3cHgnPlRpdGxlPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0nYnV0dG9uJyBjbGFzcz0nY2xvc2UnIGRhdGEtZGlzbWlzcz0nbW9kYWwnPjxzcGFuIGFyaWEtaGlkZGVuPSd0cnVlJz7Dlzwvc3Bhbj4gPHNwYW4gY2xhc3M9J3NyLW9ubHknPmNsb3NlPC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0nYm9vdHN0cmFwTW9kYWxCb2R5JyBjbGFzcz0nbW9kYWwtYm9keScgc3R5bGU9InBhZGRpbmc6IDBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdlbWJlZC1yZXNwb25zaXZlIHotZGVwdGgtMS1oYWxmJyBpZD0ibW9kYWxJZnJhbWVEaXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgaWQ9Im1vZGFsSWZyYW1lIiB0aXRsZT0iU2hhcmUgQ29udGVudCBPcHRpb25zIiBjbGFzcz0nZW1iZWQtcmVzcG9uc2l2ZS1pdGVtJyBzcmM9JycgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInIGlkPSJib290c3RyYXBNb2RhbEZvb3RlciIgc3R5bGU9J21hcmdpbi10b3A6IDA7IG1pbi1oZWlnaHQ6IDU1cHg7Jz4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPGZvb3RlciBjbGFzcz0ibmF2YmFyIG5hdmJhci1kZWZhdWx0IG5hdmJhci1maXhlZC1ib3R0b20gbmF2YmFyYmciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHRleHQtcmlnaHQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1pbm5lciBuYXZiYXItY29udGVudC1jZW50ZXIgZm9vdGVyYWxpZ24iPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbG9hdC1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIDxjb3B5cmlnaHQgY2xhc3M9InBvd2VyZWRCeSI+PGEgaHJlZj0iaHR0cHM6Ly9lc2NyaWJlbWVldGluZ3MuY29tIiB0YXJnZXQ9Il9ibGFuayIgaWQ9Imxua1Bvd2VyZWRCeSI+UG93ZXJlZCBieSBlU0NSSUJFIFNvZnR3YXJlIEx0ZC48L2E+PC9jb3B5cmlnaHQ+DQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9mb290ZXI+DQoNCiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAgICAgdmFyIEFnZW5kYVNpemUgPSBwYXJzZUZsb2F0KCQoIi5BZ2VuZGEgKiIpLmNzcygnZm9udC1zaXplJykpOw0KICAgICAgICAgICAgdmFyIFRpdGxlU2l6ZSA9IHBhcnNlRmxvYXQoJCgiLkFnZW5kYUhlYWRlclRpdGxlIikuY3NzKCdmb250LXNpemUnKSk7DQogICAgICAgICAgICB2YXIgTWVldGluZ1RpdGxlID0gIkFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAtIFNlcHRlbWJlciAwMSwgMjAyMiI7DQogICAgICAgICAgICB2YXIgaXRlbVRpdGxlcyA9IHsgfTsNCiAgICAgICAgICAgIHZhciBTaGFyaW5nID0gZmFsc2U7DQogICAgICAgICAgICB2YXIgQWxsb3dDb21tZW50ID0gIkZhbHNlIjsNCiAgICAgICAgICAgIHZhciBQdWJsaWNDb21tZW50U2V0dGluZ3MgPSBbeyJJZCI6MSwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MiwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MywiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6NCwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6NiwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6OCwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MTAsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjEyLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxMywiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MTQsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjE2LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxOCwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MTksIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjIwLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoyMSwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MjIsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjIzLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoyLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjozLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjo0LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjo2LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjo4LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxMCwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MTIsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjEzLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxNCwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MTYsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjE4LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoxOSwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MjAsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjIxLCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfSx7IklkIjoyMiwiQWxsb3dQdWJsaWNDb21tZW50IjpmYWxzZX0seyJJZCI6MjMsIkFsbG93UHVibGljQ29tbWVudCI6ZmFsc2V9LHsiSWQiOjI0LCJBbGxvd1B1YmxpY0NvbW1lbnQiOmZhbHNlfV07DQogICAgICAgICAgICB2YXIgTGVhdmVDb21tZW50ID0gIkxlYXZlIGNvbW1lbnQiOw0KDQogICAgICAgICAgICBmdW5jdGlvbiBQcmludEFnZW5kYSgpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICQoIi5WaWRlb0xpbmsiKS5jbGljayhmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICRmKCkucGF1c2UoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgZnVuY3Rpb24gZGV0YWlsc2hlaWdodCgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJCgiLkRldGFpbHMgPiBkaXYiKS5oZWlnaHQoKTsNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIFNldERldGFpbHNIZWlnaHQoQWdlbmRhSXRlbUlkKSB7DQogICAgICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKFdpbmRvd19PblJlc2l6ZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgV2luZG93X09uUmVzaXplKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAvL0ZvciBwdWJsaWMgY29tbWVudCBuYXJyb3cgYW5kIHdpZGUgdmlldyB3aGVuIHJlc2l6ZSB3aW5kb3cNCiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ3Jlc2l6ZScpOw0KDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVTb2NpYWxMaW5rKEFnZW5kYUl0ZW1JZCkgew0KICAgICAgICAgICAgICAgIHZhciBtZWV0aW5nSWQgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoIklkIikucmVwbGFjZSgvW1wuXCtcKl0vZywgIlxcJCYiKSArICIoPzpcXD0oW14mXSopKT8pPy4qJCIsICJpIiksICIkMSIpKTsNCiAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoImxhbmciKS5yZXBsYWNlKC9bXC5cK1wqXS9nLCAiXFwkJiIpICsgIig/OlxcPShbXiZdKikpPyk/LiokIiwgImkiKSwgIiQxIikpOw0KICAgICAgICAgICAgICAgIHZhciBwdWJsaWNDb21tZW50VXJsID0gIlB1YmxpY0NvbW1lbnQuYXNweD9hZ2VuZGFJZD0iICsgQWdlbmRhSXRlbUlkICsgIiZtZWV0aW5nSWQ9IiArIG1lZXRpbmdJZCArICImbGFuZz0iICsgbGFuZ3VhZ2U7DQogICAgICAgICAgICAgICAgdmFyIGFsbG93Q29tbWVudCA9IEFsbG93Q29tbWVudCA9PSAiVHJ1ZSIgPyB0cnVlIDogZmFsc2U7ICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYoYWxsb3dDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IFB1YmxpY0NvbW1lbnRTZXR0aW5ncy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmcgPSBQdWJsaWNDb21tZW50U2V0dGluZ3NbaV07DQogICAgICAgICAgICAgICAgICAgICAgICBpZihzZXR0aW5nLklkID09IEFnZW5kYUl0ZW1JZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93Q29tbWVudCA9IHNldHRpbmcuQWxsb3dQdWJsaWNDb21tZW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmFyIFNvY2lhbEl0ZW1zID0gc2V0U2VsZWN0ZWRJdGVtSWNvbnMoYWxsb3dDb21tZW50LCBTaGFyaW5nLCBwdWJsaWNDb21tZW50VXJsLCBmYWxzZSk7DQoNCiAgICAgICAgICAgICAgICAkKCcuU29jaWFsSWNvbnMnKS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICAkKCIuaGlsaWdodGVkIC5BZ2VuZGFJdGVtTmF2aWdhdGUiKS5hcHBlbmQoJCgiPGRpdiBjbGFzcz0nU29jaWFsSWNvbnMgdmlzaWJsZS14cyB2aXNpYmxlLXNtJz4iKS5hcHBlbmQoU29jaWFsSXRlbXMpKTsNCiAgICAgICAgICAgICAgICAkKCcuU2VsZWN0ZWRJdGVtVGl0bGUnKS5wYXJlbnQoKS5hcHBlbmQoU29jaWFsSXRlbXMpOw0KICAgICAgICAgICAgICAgICQoJy5TZWxlY3RlZEl0ZW1UaXRsZScpLnBhcmVudCgpLmFkZENsYXNzKCJjbGVhcmZpeCIpOw0KDQogICAgICAgICAgICAgICAgLy92aXNpYmxlLXhzIHZpc2libGUtc20NCiAgICAgICAgICAgICAgICAvL2FkZCB0aGUgaWNvbnMgdW5kZXIgbmFycm93IHZpZXcgaWYgbm90IGV4aXN0DQogICAgICAgICAgICAgICAgdmFyIGljb25EaXYgPSAkKCcuQWdlbmRhSXRlbVRpdGxlUm93LmhpbGlnaHRlZCA+ICNBZ2VuZGFJdGVtQWdlbmRhSXRlbScgKyBBZ2VuZGFJdGVtSWQgKyAnVGl0bGVIZWFkZXIgPiAuQWdlbmRhSXRlbU5hdmlnYXRlLmluZGVudCA+IC5BZ2VuZGFJdGVtSWNvbnMnKTsNCg0KICAgICAgICAgICAgICAgIGlmKGljb25EaXYubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgaWNvbkRpdiA9ICQoJy5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIEFnZW5kYUl0ZW1JZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICQoc2V0U2VsZWN0ZWRJdGVtSWNvbnMoYWxsb3dDb21tZW50LCBTaGFyaW5nLCBwdWJsaWNDb21tZW50VXJsLCB0cnVlKSkuaW5zZXJ0QWZ0ZXIoaWNvbkRpdik7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdmFyIGNsb3NlZEljb25EaXYgPSAkKCcuTGF0ZUNsb3NlZEFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAjQWdlbmRhSXRlbUFnZW5kYUl0ZW0nICsgQWdlbmRhSXRlbUlkICsgJ1RpdGxlSGVhZGVyID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbUljb25zJyk7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYoY2xvc2VkSWNvbkRpdi5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICBjbG9zZWRJY29uRGl2ID0gJCgnLkxhdGVDbG9zZWRBZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gI0FnZW5kYUl0ZW1BZ2VuZGFJdGVtJyArIEFnZW5kYUl0ZW1JZCArICdUaXRsZUhlYWRlciA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkKHNldFNlbGVjdGVkSXRlbUljb25zKGFsbG93Q29tbWVudCwgU2hhcmluZywgcHVibGljQ29tbWVudFVybCwgdHJ1ZSkpLmluc2VydEFmdGVyKGNsb3NlZEljb25EaXYpOw0KICAgICAgICAgICAgICAgIFNldERldGFpbHNIZWlnaHQoQWdlbmRhSXRlbUlkKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZnVuY3Rpb24gc2V0U2VsZWN0ZWRJdGVtSWNvbnMoYWxsb3dDb21tZW50LCBTaGFyaW5nLCBwdWJsaWNDb21tZW50VXJsLCBpc05hcnJvdykgew0KICAgICAgICAgICAgICAgIHZhciBjc3NDbGFzcyA9IGlzTmFycm93ID8gIiBjbGFzcz0ndmlzaWJsZS14cyB2aXNpYmxlLXNtJyAiIDogIiI7DQogICAgICAgICAgICAgICAgdmFyIHBhZGRpbmcgPSBpc05hcnJvdyA/ICJzdHlsZT0ncGFkZGluZy10b3A6IDVweDsnIiA6ICIiOw0KICAgICAgICAgICAgICAgIHZhciBidG5JZCA9IGlzTmFycm93ID8gImlkPSduYXJyb3ctbGVhdmUtY29tbWVudC1idXR0b24nIiA6ICIiOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZihhbGxvd0NvbW1lbnQgJiYgIVNoYXJpbmcpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIFNvY2lhbEl0ZW1zID0gJCgiPGRpdiIgKyBjc3NDbGFzcyArICI+IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygic2hhcmluZyBTb2NpYWxJY29ucyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAuY3NzKCJmbG9hdCIsICJyaWdodCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIjxhIGNsYXNzPSdDb21tZW50SWNvbicgYXJpYS1sYWJlbD0nc3VibWl0IHB1YmxpYyBjb21tZW50Jz4iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiaHJlZiIsIHB1YmxpY0NvbW1lbnRVcmwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoIjxzcGFuIGNsYXNzPSdidG4gYnRuLXByaW1hcnkgYnRuLXNtJyBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlOycgIiArIGJ0bklkICsgIj4iICsgTGVhdmVDb21tZW50ICsgIjxzcGFuPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICApOw0KDQogICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpLnJlbW92ZUNsYXNzKCJoYXNQdWJsaWNDb21tZW50QnV0dG9uIik7DQogICAgICAgICAgICAgICAgICAgICQoJy5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpLmFkZENsYXNzKCJoYXNQdWJsaWNDb21tZW50QnV0dG9uIik7DQoNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoU2hhcmluZyAmJiAhYWxsb3dDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBTb2NpYWxJdGVtcyA9DQogICAgICAgICAgICAgICAgICAgICAgICAkKCI8ZGl2IiArIGNzc0NsYXNzICsgcGFkZGluZyArICI+IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoInNoYXJpbmcgU29jaWFsSWNvbnMiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoImZsb2F0IiwgInJpZ2h0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCI8YSBzdHlsZT0ncGFkZGluZy1yaWdodDogMTNweDsnPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiaHJlZiIsICdTaGFyaW5nLmFzcHg/dT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJzxpbWcgc3JjPSJJbWFnZXMvc2hhcmUuUE5HIiBzdHlsZT0iaGVpZ2h0OjFlbTsiIGFsdD0iVGhpcyBjYW4gYmUgc2hhcmVkLCBjbGljayB0byBvcGVuIHRoZSBzaGFyaW5nIHBvcHVwLiIgdGl0bGU9IlNoYXJlIj4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKFNoYXJpbmcgJiYgYWxsb3dDb21tZW50KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBTb2NpYWxJdGVtcyA9ICQoIjxkaXYiICsgY3NzQ2xhc3MgKyAiPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygic2hhcmluZyBTb2NpYWxJY29ucyIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoImZsb2F0IiwgInJpZ2h0IikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiPGEgY2xhc3M9J0NvbW1lbnRJY29uJyBhcmlhLWxhYmVsPSdzdWJtaXQgcHVibGljIGNvbW1lbnQnPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiaHJlZiIsIHB1YmxpY0NvbW1lbnRVcmwpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCI8c3BhbiBjbGFzcz0nYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbScgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOm1pZGRsZTsnICIgKyBidG5JZCArICI+IiArIExlYXZlQ29tbWVudCArICI8c3Bhbj4iKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCI8YSBzdHlsZT0ncGFkZGluZy1yaWdodDogMTlweDt3aWR0aDogNiU7cGFkZGluZy10b3A6IDVweDtwYWRkaW5nLWxlZnQ6IDVweDsnPiIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoImhyZWYiLCAnU2hhcmluZy5hc3B4P3U9JyArIGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uaHJlZikpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgnPGltZyBzcmM9IkltYWdlcy9zaGFyZS5QTkciIHN0eWxlPSJoZWlnaHQ6MWVtOyIgYWx0PSJUaGlzIGNhbiBiZSBzaGFyZWQsIGNsaWNrIHRvIG9wZW4gdGhlIHNoYXJpbmcgcG9wdXAuIiB0aXRsZT0iU2hhcmUiPicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7DQoNCiAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlJykucmVtb3ZlQ2xhc3MoImhhc1B1YmxpY0NvbW1lbnRCdXR0b24iKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLkFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlJykuYWRkQ2xhc3MoImhhc1B1YmxpY0NvbW1lbnRCdXR0b24iKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCcuTGF0ZUNsb3NlZEFnZW5kYUl0ZW1UaXRsZVJvdy5oaWxpZ2h0ZWQgPiAqID4gLkFnZW5kYUl0ZW1OYXZpZ2F0ZS5pbmRlbnQgPiAuQWdlbmRhSXRlbVRpdGxlJykucmVtb3ZlQ2xhc3MoImhhc1B1YmxpY0NvbW1lbnRCdXR0b24iKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLkxhdGVDbG9zZWRBZ2VuZGFJdGVtVGl0bGVSb3cgaGlsaWdodGVkID4gKiA+IC5BZ2VuZGFJdGVtTmF2aWdhdGUuaW5kZW50ID4gLkFnZW5kYUl0ZW1UaXRsZScpLmFkZENsYXNzKCJoYXNQdWJsaWNDb21tZW50QnV0dG9uIik7DQoNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gU29jaWFsSXRlbXM7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lKSB7DQogICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xbXS8sICdcXFsnKS5yZXBsYWNlKC9bXF1dLywgJ1xcXScpOw0KICAgICAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ1tcXD8mXScgKyBuYW1lICsgJz0oW14mI10qKScpLA0KICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZWdleC5leGVjKGxvY2F0aW9uLnNlYXJjaCk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMgPT0gbnVsbCA/ICcnIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMV0ucmVwbGFjZSgvXCsvZywgJyAnKSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVRpdGxlKEFnZW5kYUl0ZW1JZCkgew0KICAgICAgICAgICAgICAgIGlmIChpdGVtVGl0bGVzW0FnZW5kYUl0ZW1JZF0gIT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGl0ZW1UaXRsZXNbQWdlbmRhSXRlbUlkXSArICcgLSAnICsgTWVldGluZ1RpdGxlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUgPSBNZWV0aW5nVGl0bGU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLyB3aGVuIHNlbGVjdGVkIGl0ZW0gaGFzIGNoYW5nZWQgdXBkYXRlIHBhZ2UgLy8NCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJpdGVtOnNlbGVjdGVkIiwgZnVuY3Rpb24gKGUsIGlkLCBzY3JvbGwpIHsNCiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRUYWIgPSBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLnNlYXJjaC5yZXBsYWNlKG5ldyBSZWdFeHAoIl4oPzouKlsmXFw/XSIgKyBlbmNvZGVVUklDb21wb25lbnQoIlRhYiIpLnJlcGxhY2UoL1tcLlwrXCpdL2csICJcXCQmIikgKyAiKD86XFw9KFteJl0qKSk/KT8uKiQiLCAiaSIpLCAiJDEiKSk7DQogICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBoaWxpZ2h0SXRlbShpZCk7DQogICAgICAgICAgICAgICAgQ3JlYXRlU29jaWFsTGluayhpZCk7DQogICAgICAgICAgICAgICAgVXBkYXRlVGl0bGUoaWQpOw0KDQogICAgICAgICAgICAgICAgLy9SZXBsYWNlIHRoZSBMZWF2ZSBDb21tZW50IGJ1dHRvbiB0byBpY29uDQogICAgICAgICAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7DQogICAgICAgICAgICAgICAgJCgnI25hcnJvdy1sZWF2ZS1jb21tZW50LWJ1dHRvbicpLmh0bWwoIjxzcGFuIGNsYXNzPSdsYXMgbGEtY29tbWVudC1hbHQnIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlJyB0aXRsZT0nTGVhdmUgQ29tbWVudCc+PC9zcGFuPiIpOw0KICAgICAgICAgICAgICAgICQoJyNuYXJyb3ctbGVhdmUtY29tbWVudC1idXR0b24nKS5hdHRyKCJhcmlhLWxhYmVsIiwgInN1Ym1pdCBhIHB1YmxpYyBjb21tZW50IG9uIHRoaXMgYWdlbmRhIGl0ZW0iKTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgKHNjcm9sbCA9PSB0cnVlKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIHNjcm9sbCBpdGVtIGludG8gdmlldyAvLw0KICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9ICQoIi5BZ2VuZGFJdGVtVGl0bGVSb3cuaGlsaWdodGVkIik7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFswXS5zY3JvbGxJbnRvVmlldygpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRUYWIpIHsNCiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU2VsZWN0ZWREZXRhaWxzKGlkLCBzZWxlY3RlZFRhYik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICB0b2dnbGVTZWxlY3RlZERldGFpbHMoaWQsICdhdHRhY2htZW50cycpOw0KICAgICAgICAgICAgICAgIH0NCgkJCQl2YXIgYXR0YWNobWVudENvdW50cyA9ICQoJy5BZ2VuZGFJdGVtUHVibGljQ29tbWVudExpc3QgPi5PcmRlcmVkQXR0YWNobWVudHMgPiAuT3JkZXJlZEF0dGFjaG1lbnQgPiAuQWdlbmRhSXRlbUF0dGFjaG1lbnQnICsgaWQpLmxlbmd0aDsJCQkJCQkJCQkJCQ0KCQkJCSQoJyNzZWxlY3RlZFRhYkFnZW5kYUF0dGFjaG1lbnRDb3VudCcpLmZpcnN0KCkudGV4dCgnICgnICsgYXR0YWNobWVudENvdW50cyArICcpICcpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGZ1bmN0aW9uIFVwZGF0ZVF1ZXJ5KHBhcmFtZXRlciwgdmFsdWUpIHsNCiAgICAgICAgICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsNCg0KICAgICAgICAgICAgICAgIGlmIChsb2MubGVuZ3RoID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gbm8gcXVlcnkgc3RyaW5nIC8vDQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcGFyYW1ldGVyIGRpcmVjdGx5IHRvIHVybCAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmICsgIj8iICsgcGFyYW1ldGVyICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgIGlmIChsb2NbMF0gPT0gJz8nKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsb2MgPSBsb2Muc3Vic3RyaW5nKDEpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgLy8gc3BsaXQgdXAgZXhpc3RpbmcgcXVlcnkgc3RyaW5nIC8vDQogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBsb2Muc3BsaXQoJyYnKTsNCg0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tpXS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgocGFyYW1ldGVyLnRvTG93ZXJDYXNlKCkgKyAnPScpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IG5ldyB2YWx1ZSAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbaV0gPSBwYXJhbWV0ZXIgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nIHZhbHVlIC8vDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tpXSA9ICcnOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCA9PSBmYWxzZSAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChwYXJhbWV0ZXIgKyAnPScgKyB2YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICB2YXIgcXMgPSAnJzsNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbaV0ubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxcy5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxcyA9ICI/IiArIHBhcmFtc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzICs9ICImIiArIHBhcmFtc1tpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgiPyIgKyBsb2MsIHFzKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgLy8gICAgU2VsZWN0SXRlbShnZXRQYXJhbWV0ZXJCeU5hbWUoIkl0ZW0iKSwgdHJ1ZSk7DQogICAgICAgICAgICAvL30pOw0KICAgICAgICA8L3NjcmlwdD4NCg0KICAgICAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KICAgICAgICAgICAgLyoNCiAgICAgICAgICAgICAgICBAbWVkaWEgU2NyZWVuIHsNCiAgICAgICAgICAgICAgICAgICAgLkFnZW5kYUl0ZW1BdHRhY2htZW50c0xpc3Qgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBtYXggaGVpZ2h0IGlzIGNhdXNpbmcgYXR0YWNobWVudHMgb3ZlcmxhcCwgaWYgZXhpc3QgdGhlIGhlaWdodA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21heC1oZWlnaHQ6MjAwcHg7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAuQWdlbmRhSXRlbUF0dGFjaG1lbnRzQXJlYSB7DQogICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzpoaWRkZW47DQogICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdy15OmF1dG87DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgKi8NCiAgICAgICAgPC9zdHlsZT4NCiAgICA8L2Zvcm0+DQoNCiAgICANCg0KDQo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9tZW50LmpzLzIuMjIuMi9tb21lbnQubWluLmpzIj48L3NjcmlwdD4NCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vY2RuLmRhdGF0YWJsZXMubmV0LzEuMTEuNS9jc3MvanF1ZXJ5LmRhdGFUYWJsZXMubWluLmNzcyIgLz4gIA0KDQo8ZGl2IGlkPSJBZ2VuZGFJdGVtRGV0YWlsc01vZGFsIiBjbGFzcz0ibW9kYWwgZmFkZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIEFnZW5kYUl0ZW1EZXRhaWxzTW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSI+RGV0YWlsczwvaDM+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0ic3Itb25seSI+Y2xvc2U8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0Zm9ybSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJJdGVtVGl0bGUiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXRlZ29yeQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNhdGVnb3J5Ij48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkxlZ2lzbGF0aW9uTnVtYmVyTGFiZWwiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+U3RhZ2U8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTGVnaXNsYXRpb25TdGFnZUxhYmVsIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcGFydG1lbnQNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMZWdpc2xhdGlvbkRlcGFydG1lbnRMYWJlbCI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT0idmVydGljYWwtYWxpZ246IHRvcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXR0YWNobWVudHMNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJMZWdpc2xhdGlvbkRvY3VtZW50SWNvbiI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTGVnaXNsYXRpb25Eb2N1bWVudExpbmsiPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMZWdpc2xhdGlvblN1cHBvcnRpbmdEb2N1bWVudHNMaXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxoNCBzdHlsZT0ibWFyZ2luLXRvcDowLjVlbSI+SGlzdG9yeTwvaDQ+DQogICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGlkPSJMZWdpc2xhdGlvbkhpc3RvcnlUYWJsZSIgY2xhc3M9Imxpc3QgZGF0YVRhYmxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LWluZGV4LXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSJsZWdpc2xhdGlvbmhpc3RvcnktbWVldGluZ3R5cGUtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5NZWV0aW5nIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1tZWV0aW5nZGF0ZS10aCIgY2xhc3M9ImxlZy1uby1icmVhayB0YWJsZXBhZGRpbmciPk1lZXRpbmcgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LXN0YWdlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+U3RhZ2U8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1zdGF0dXMtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5TdGF0dXM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1udW1iZXItdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5OdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS12b3RlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+Vm90ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9Imhpc3RvcnkiPjwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPGRpdiBpZD0iVm90ZVJlc3VsdHNNb2RhbCIgY2xhc3M9Im1vZGFsIGZhZGUiPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBWb3RlUmVzdWx0c01vZGFsIiBzdHlsZT0id2lkdGg6IDYwJSI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1vZGFsLXRpdGxlIj5Wb3RlIFJlc3VsdDwvaDM+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0ic3Itb25seSI+Y2xvc2U8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlRleHQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkJhbm5lciI+PC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVm90ZXMiPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGFUYWJsZXNfd3JhcHBlciIgc3R5bGU9Im1hcmdpbjphdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0YVRhYmxlc19wYWdpbmF0ZSBwYWdpbmdfc2ltcGxlX251bWJlcnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBjdXJyZW50IiBhcmlhLWNvbnRyb2xzPSJ0YWJsZS1jb25mbGljdHMtZGV0YWlscy1saXN0IiBkYXRhLWR0LWlkeD0iMSIgdGFiaW5kZXg9IjAiPjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2PiANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KIA0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgIGZ1bmN0aW9uIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBpbmRleCkgew0KICAgICAgICB2YXIgZGlhbG9nID0gJCgiI1ZvdGVSZXN1bHRzTW9kYWwiKTsNCiAgICAgICAgdmFyIG1vdGlvbiA9IG1vdGlvbnNbaW5kZXhdOw0KDQogICAgICAgIC8vIHBhZ2luZyAvLw0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgcGFnaW5nID0gZGlhbG9nLmZpbmQoIi5kYXRhVGFibGVzX3BhZ2luYXRlIikuZW1wdHkoKTsNCg0KICAgICAgICAgICAgLy8gYmFjayBsaW5rcyAvLw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIGZpcnN0IGxpbmsNCiAgICAgICAgICAgICAgICB2YXIgZmlyc3RsaW5rID0gJCgnPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBmaXJzdCI+Jmx0OyZsdDs8L2E+JykNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImlkIiwgIlZvdGVSZXN1bHRzTW9kYWwtRmlyc3QiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1jb250cm9scyIsICJWb3RlUmVzdWx0c01vZGFsIikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtbGFiZWwiLCAiTmF2aWdhdGUgdG8gRmlyc3QgVm90ZSIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIDApOw0KDQogICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgbGluayAvLw0KICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c2xpbmsgPSAkKCc8YSBjbGFzcz0icGFnaW5hdGVfYnV0dG9uIHByZXZpb3VzIiAiIj4mbHQ7PC9hPicpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJpZCIsICJWb3RlUmVzdWx0c01vZGFsLVByZXZpb3VzIikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtY29udHJvbHMiLCAiVm90ZVJlc3VsdHNNb2RhbCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIFByZXZpb3VzIFZvdGUiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigidGFiaW5kZXgiLCAwKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiZGF0YS1kdC1pZHgiLCAxKTsNCg0KDQogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgZmlyc3RsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBmaXJzdGxpbmsuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIik7DQoNCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2xpbmsuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmaXJzdGxpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2xpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIGluZGV4LTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChmaXJzdGxpbmspOw0KICAgICAgICAgICAgICAgIHBhZ2luZy5hcHBlbmQocHJldmlvdXNsaW5rKTsgICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIHBhZ2VzIC8vDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIHBhZ2VzID0gJCgiPHNwYW4+Iik7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPG1vdGlvbnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1dHRvbmluZGV4ID0gaTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbGluayA9ICQoJzxhIGNsYXNzPSJwYWdpbmF0ZV9idXR0b24iPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1jb250cm9scyIsICJWb3RlUmVzdWx0c01vZGFsIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIGkrMikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgICAgICAudGV4dChpKzEpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBidXR0b25pbmRleCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIChpID09IGluZGV4KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmFkZENsYXNzKCJjdXJyZW50IikNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHBhZ2VzLmFwcGVuZChsaW5rKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBwYWdpbmcuYXBwZW5kKHBhZ2VzKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gZm9yd2FyZCBsaW5rcyAvLw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIG5leHQgbGluayANCiAgICAgICAgICAgICAgICB2YXIgbmV4dGxpbmsgPSAkKCc8YSBjbGFzcz0icGFnaW5hdGVfYnV0dG9uIG5leHQiPiZndDs8L2E+JykNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImlkIiwgIlZvdGVSZXN1bHRzTW9kYWwtTmV4dCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWNvbnRyb2xzIiwgIlZvdGVSZXN1bHRzTW9kYWwiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1sYWJlbCIsICJOYXZpZ2F0ZSB0byBOZXh0IFZvdGUiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigidGFiaW5kZXgiLCAwKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiZGF0YS1kdC1pZHgiLCBtb3Rpb25zLmxlbmd0aCArIDIpOw0KDQogICAgICAgICAgICAgICAgLy8gbGFzdCBsaW5rDQogICAgICAgICAgICAgICAgdmFyIGxhc3RsaW5rID0gJCgnPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBsYXN0Ij4mZ3Q7Jmd0OzwvYT4nKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiaWQiLCAiVm90ZVJlc3VsdHNNb2RhbC1MYXN0IikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtY29udHJvbHMiLCAiVm90ZVJlc3VsdHNNb2RhbCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIExhc3QgVm90ZSIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIG1vdGlvbnMubGVuZ3RoICsgMyk7DQoNCg0KICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBtb3Rpb25zLmxlbmd0aCAtIDEpIHsNCiAgICAgICAgICAgICAgICAgICAgbmV4dGxpbmsuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7DQogICAgICAgICAgICAgICAgICAgIG5leHRsaW5rLmF0dHIoImFyaWEtZGlzYWJsZWQiLCAidHJ1ZSIpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhc3RsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBsYXN0bGluay5hdHRyKCJhcmlhLWRpc2FibGVkIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG5leHRsaW5rDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBpbmRleCsxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgbGFzdGxpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIG1vdGlvbnMubGVuZ3RoLTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChuZXh0bGluayk7DQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChsYXN0bGluayk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgICAgIA0KDQoNCiAgICAgICAgLy8gcmVuZGVyIG1vdGlvbiAvLw0KDQogICAgICAgIGRpYWxvZy5maW5kKCIuVGV4dCIpLnRleHQobW90aW9uLlRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICB2YXIgYmFubmVyID0gZGlhbG9nLmZpbmQoIi5CYW5uZXIiKTsNCiAgICAgICAgYmFubmVyLnRleHQobW90aW9uLkJhbm5lclRleHQpOw0KDQogICAgICAgIHN3aXRjaCAobW90aW9uLkJhbm5lckNvbG9yKSB7DQogICAgICAgICAgICBjYXNlICdncmVlbic6DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICcjMjFBRTUyJyk7DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiY29sb3IiLCAnd2hpdGUnKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAncmVkJzoNCiAgICAgICAgICAgICAgICBiYW5uZXIuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwgJ3JlZCcpOw0KICAgICAgICAgICAgICAgIGJhbm5lci5jc3MoImNvbG9yIiwgJ2JsYWNrJyk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICcnKTsNCiAgICAgICAgICAgICAgICBiYW5uZXIuY3NzKCJjb2xvciIsICcnKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgZGlhbG9nLmZpbmQoIi5Wb3RlcyIpLmVtcHR5KCkNCg0KICAgICAgICAvLyBhZGQgdm90ZXMgdG8gZGlhbG9nIC8vDQogICAgICAgIHZhciB2b3RlcyA9IHt9Ow0KICAgICAgICB2YXIgdm90ZW9yZGVyID0gWyJZZXMiLCAiTm8iLCAiQWJzdGFpbiIsICJBYnNlbnQiXTsNCg0KICAgICAgICAkLmVhY2gobW90aW9uLlZvdGVzLCBmdW5jdGlvbihpbXYsIG1vdGlvbnZvdGUpIHsNCiAgICAgICAgICAgIGlmICghdm90ZXMuaGFzT3duUHJvcGVydHkobW90aW9udm90ZS5Wb3RlKSkgew0KICAgICAgICAgICAgICAgIHZvdGVzW21vdGlvbnZvdGUuVm90ZV0gPSBbXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHZvdGVvcmRlci5pbmRleE9mKG1vdGlvbnZvdGUuVm90ZSkgPT0gLTEpIHsNCiAgICAgICAgICAgICAgICB2b3Rlb3JkZXIucHVzaChtb3Rpb252b3RlLlZvdGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2b3Rlc1ttb3Rpb252b3RlLlZvdGVdLnB1c2goDQogICAgICAgICAgICAgICAgJCgiPHNwYW4+IikudGV4dChtb3Rpb252b3RlLlVzZXJOYW1lKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJC5lYWNoKHZvdGVvcmRlciwgZnVuY3Rpb24oaXYsIHZvdGUpIHsNCiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCIjVm90ZUNvbnRhaW5lclRlbXBsYXRlIikuY2xvbmUoKTsNCg0KICAgICAgICAgICAgaWYgKHZvdGVzLmhhc093blByb3BlcnR5KHZvdGUpKSB7DQogICAgICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoIi5Wb3RlSGVhZGVyIC5jb3VudCIpLnRleHQodm90ZXNbdm90ZV0ubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZCgiLlZvdGVycyIpLmFwcGVuZCguLi4odm90ZXNbdm90ZV0pKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoIi5Wb3RlSGVhZGVyIC5Wb3RlIikudGV4dCh2b3RlKTsNCiAgICAgICAgICAgIGRpYWxvZy5maW5kKCIuVm90ZXMiKS5hcHBlbmQoY29udGFpbmVyLmNoaWxkcmVuKCkpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvLyBmaXggZm9yIG5lc3RlZCBtb3RhbHMgLy8NCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICQoZG9jdW1lbnQpLm9uKHsNCiAgICAgICAgICAgICdzaG93LmJzLm1vZGFsJzogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciB6SW5kZXggPSAxMDQwICsgKDEwICogJCgnLm1vZGFsOnZpc2libGUnKS5sZW5ndGgpOw0KICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCd6LWluZGV4JywgekluZGV4KTsNCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgJCgnLm1vZGFsLWJhY2tkcm9wJykubm90KCcubW9kYWwtc3RhY2snKS5jc3MoJ3otaW5kZXgnLCB6SW5kZXggLSAxKS5hZGRDbGFzcygnbW9kYWwtc3RhY2snKTsgfSwgMCk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgJ2hpZGRlbi5icy5tb2RhbCc6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCgnLm1vZGFsOnZpc2libGUnKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgdGhlIG1vZGFsLW9wZW4gY2xhc3MgdG8gdGhlIGJvZHkgZWxlbWVudCwgc28gdGhhdCBzY3JvbGxpbmcgd29ya3MNCiAgICAgICAgICAgICAgICAgICAgLy8gcHJvcGVybHkgYWZ0ZXIgZGUtc3RhY2tpbmcgYSBtb2RhbC4NCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKTsgfSwgMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCAnLm1vZGFsJyk7DQogICAgfSk7DQo8L3NjcmlwdD4NCg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICAvKiBmbGV4LWdyaWQgY2xhc3NlcyAqLw0KICAgIC5pbnB1dGZvcm0gew0KCSAgICBmb250LXNpemU6MWVtOw0KCSAgICBkaXNwbGF5OmdyaWQ7DQoJICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczowZnIgMWZyOw0KCSAgICBncmlkLWdhcDoxMHB4IDEwcHg7DQoJICAgIGFsaWduLWl0ZW1zOmJhc2VsaW5lOw0KICAgIH0NCgkJCQ0KICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1NzVweCkgew0KICAgICAgICAuaW5wdXRmb3JtIHsNCiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyOw0KICAgICAgICAgICAgZ3JpZC1nYXA6MHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmlucHV0Zm9ybSA+IGxhYmVsLA0KICAgICAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGxhYmVsIHsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6MjBweDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC5pbnB1dGZvcm0gPiBsYWJlbCwNCiAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGxhYmVsIHsNCgkgICAgd2hpdGUtc3BhY2U6bm93cmFwOw0KCSAgICBmb250LXNpemU6MWVtOw0KCSAgICBmb250LXdlaWdodDpib2xkOw0KICAgIH0NCg0KICAgIC5pbnB1dGZvcm0gPiAucm93IHsNCgkgICAgZGlzcGxheTpjb250ZW50czsNCiAgICB9DQoJCQkNCiAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGRpdiB7DQoJICAgIGdyaWQtY29sdW1uIDogMSAvIDM7DQogICAgfQ0KCQkJDQogICAgLmlucHV0Zm9ybSA+IC5yb3cgPiBsYWJlbCtkaXYgew0KCSAgICBncmlkLWNvbHVtbjogMiAvIDM7DQogICAgfQ0KDQogICAgLmlucHV0Zm9ybSBsYWJlbCtkaXYgPiBkaXYrZGl2IHsNCgkgICAgbWFyZ2luLXRvcDo0cHg7DQogICAgfQ0KDQogICAgLyogbW9kYWwgc3R5bGVzICovDQogICAgLm1vZGFsLWRpYWxvZy5BZ2VuZGFJdGVtRGV0YWlsc01vZGFsIHsNCiAgICAgICAgbWF4LXdpZHRoOiAxMDAwcHg7DQogICAgfQ0KDQogICAgLkFnZW5kYUl0ZW1EZXRhaWxzTW9kYWwgLm1vZGFsLWNvbnRlbnQgew0KICAgICAgICBtYXgtaGVpZ2h0Ojkwdmg7DQogICAgICAgIG92ZXJmbG93OmhpZGRlbjsNCiAgICB9DQoNCiAgICAuQWdlbmRhSXRlbURldGFpbHNNb2RhbCAubW9kYWwtY29udGVudCAubW9kYWwtYm9keSB7DQogICAgICAgIG92ZXJmbG93LXk6YXV0bzsNCiAgICB9DQoNCiAgICAuQWdlbmRhSXRlbURldGFpbHNNb2RhbCAuZGVzY3JpcHRpb24gew0KICAgICAgICBtYXgtaGVpZ2h0OjEwZW07DQogICAgICAgIG92ZXJmbG93LXk6YXV0bzsNCiAgICB9DQoNCiAgICAuVm90ZVJlc3VsdHNNb2RhbCAuVGV4dCB7DQogICAgICAgIHBhZGRpbmc6IDJweCAwIDE4cHg7DQogICAgfQ0KDQogICAgLlZvdGVSZXN1bHRzTW9kYWwgLkJhbm5lciB7DQogICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7DQogICAgICAgIHBhZGRpbmc6NXB4Ow0KICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgfQ0KDQogICAgLlZvdGVzIC5Wb3RlSGVhZGVyIHsNCiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQoNCiAgICAuVm90ZXMgLlZvdGVycyB7DQogICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzMlIG1pbm1heCgwLCAzNCUpIDMzJTsNCiAgICAgICAgZ3JpZC1nYXA6IDEwcHg7DQogICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTsNCiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZjdmN2Y3Ow0KICAgIH0NCg0KICAgIGgzLm1vZGFsLXRpdGxlIHsNCiAgICAgICAgZm9udC1zaXplOjE3cHg7DQogICAgfQ0KDQogICAgI0xlZ2lzbGF0aW9uU3VwcG9ydGluZ0RvY3VtZW50c0xpc3QgPiBkaXYgew0KICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdGQgew0KICAgICAgICBjdXJzb3I6cG9pbnRlcjsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdHIuc2VsZWN0ZWQgdGQgew0KICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7DQogICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjazsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdHIuc2VsZWN0ZWQgPiA6Zmlyc3QtY2hpbGQgew0KICAgICAgICBib3JkZXItbGVmdDoxcHggc29saWQgYmxhY2s7DQogICAgfQ0KDQogICAgI0xlZ2lzbGF0aW9uSGlzdG9yeVRhYmxlIHRyLnNlbGVjdGVkID4gOmxhc3QtY2hpbGQgew0KICAgICAgICBib3JkZXItcmlnaHQ6MXB4IHNvbGlkIGJsYWNrOw0KICAgIH0NCjwvc3R5bGU+DQoNCjxkaXYgaWQ9IlZvdGVDb250YWluZXJUZW1wbGF0ZSIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgPGRpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iVm90ZUhlYWRlciI+PHNwYW4gY2xhc3M9IlZvdGUiPjwvc3Bhbj4gKCA8c3BhbiBjbGFzcz0iY291bnQiPjA8L3NwYW4+ICk8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iVm90ZXJzIj48L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgdmFyIEFnZW5kYUl0ZW1zd2l0aEhpc3RvcnkgPSBbXTsNCg0KICAgICQoImRvY3VtZW50IikucmVhZHkoZnVuY3Rpb24oKSB7DQogICAgICAgIC8vIGFkZCBhZ2VuZGEgaXRlbSBoaXN0b3J5IGxpbmtzIGR5bmFtaWNhbGx5IHRvIHRoZSBhZ2VuZGEgLy8NCiAgICAgICAgJC5lYWNoKEFnZW5kYUl0ZW1zd2l0aEhpc3RvcnksIGZ1bmN0aW9uKGksIHYpIHsNCiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgaWNvbiAvLw0KICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW0iICsgdiArICIgLkFnZW5kYUl0ZW1JY29ucyIpLmZpbmQoIi5BZ2VuZGFJdGVtSGlzdG9yeUxpbmsiKS5yZW1vdmUoKTsNCg0KICAgICAgICAgICAgLy8gYWRkIGljb24gLy8NCiAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtIiArIHYgKyAiIC5BZ2VuZGFJdGVtSWNvbnMiKS5hcHBlbmQoDQogICAgICAgICAgICAgICAgJCgnPGEgaHJlZj0iIj4nKQ0KICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoIkFnZW5kYUl0ZW1IaXN0b3J5TGluayIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJpdGVtaWQiLCB2KQ0KICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCc8aSBjbGFzcz0ibGFzIGxhLWhpc3RvcnkiPjwvaT4nKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJCgiLkFnZW5kYUl0ZW1IaXN0b3J5TGluayIpLmNsaWNrKGZ1bmN0aW9uKGUpew0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICBBZ2VuZGFJdGVtSGlzdG9yeS5EaWFsb2cuT3BlbignNGY4MDY5NjItYzA1OS00NjA1LWI0OGMtNzUxZGFlZThiZDg1JywgJCh0aGlzKS5hdHRyKCJpdGVtaWQiKSk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KPC9zY3JpcHQ+DQoNCg0KPC9ib2R5Pg0KDQo8L2h0bWw+DQo=
  recorded_at: Mon, 15 Jan 2024 03:34:34 GMT
recorded_with: VCR 6.1.0
