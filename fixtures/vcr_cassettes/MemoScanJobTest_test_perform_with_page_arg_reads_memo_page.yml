---
http_interactions:
- request:
    method: get
    uri: https://ottawa.ca/en/city-hall/open-transparent-and-accountable-government/public-disclosure/memoranda-issued-members-council/memoranda-issued-infrastructure-and-water-services
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/139.0.0.0 Safari/537.36
      Host:
      - ottawa.ca
      Accept-Language:
      - en-US,en;q=0.9
      Cache-Control:
      - no-cache
      Sec-Fetch-Dest:
      - document
      Sec-Fetch-Mode:
      - navigate
      Sec-Fetch-Site:
      - none
      Sec-Fetch-User:
      - "?1"
      Upgrade-Insecure-Requests:
      - '1'
      Sec-Ch-Ua:
      - '"Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"'
      Sec-Ch-Ua-Mobile:
      - "?0"
      Sec-Ch-Ua-Platform:
      - '"macOS"'
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 29 Aug 2025 03:43:54 GMT
      Content-Type:
      - text/html; charset=UTF-8
      Connection:
      - keep-alive
      Cache-Control:
      - max-age=2764800, public
      X-Drupal-Dynamic-Cache:
      - UNCACHEABLE (poor cacheability)
      Content-Language:
      - en
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - ALLOW-FROM https://myservice.ottawa.ca
      Expires:
      - Sun, 19 Nov 1978 05:00:00 GMT
      Vary:
      - Cookie,Accept-Encoding
      X-Generator:
      - Drupal 10 (https://www.drupal.org)
      X-Drupal-Cache:
      - MISS
      Access-Control-Allow-Origin:
      - "*"
      Last-Modified:
      - Fri, 29 Aug 2025 03:43:51 GMT
      Etag:
      - '"1756439031-gzip"'
      X-Varnish:
      - '28853944'
      Age:
      - '0'
      Via:
      - 1.1 coo-prod-ottca-httpcache-kube-httpcache-5649cb78b8-hsbv7 (Varnish/7.6)
      Accept-Ranges:
      - bytes
      Cache-Tags:
      - MISS
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
      Set-Cookie:
      - incap_ses_642_243507=ZIn3R+weFDL8dJkN+9foCPohsWgAAAAAM/RBiwEbwgLDMo0H+y0CaQ==;
        path=/; Domain=.ottawa.ca
      - nlbi_243507=Hkkdc/JXvl7ov45haXmSIAAAAACwAVncQm0oG3eZ/GMLzvn5; HttpOnly; path=/;
        Domain=.ottawa.ca
      - visid_incap_243507=9koY6AHcTa+ej0GEs0/lFighsWgAAAAAQUIPAAAAAAADI425r5S5Irc/xGKws319;
        expires=Fri, 28 Aug 2026 06:24:44 GMT; HttpOnly; path=/; Domain=.ottawa.ca
      X-Cdn:
      - Imperva
      Transfer-Encoding:
      - chunked
      X-Iinfo:
      - 11-67610958-67610965 NNNN CT(13 25 0) RT(1756439031472 31) q(0 0 1 0) r(1
        32) U24
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Fri, 29 Aug 2025 03:43:54 GMT
recorded_with: VCR 6.3.1
