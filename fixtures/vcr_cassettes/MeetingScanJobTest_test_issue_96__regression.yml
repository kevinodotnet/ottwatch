---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/Meeting.aspx?Agenda=Agenda&Id=9dc974f2-fb95-401e-bf2f-5fe225f5cdb5&lang=English
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 23 Jan 2024 03:39:47 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=lvfwjronzig3b4wwyt1cghbb; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 849d02efbf40369e-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>




<html lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	Committee of Adjustment - Panel 1 - February 03, 2016
</title><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/jquery?v=8Oos0avDZyPg-cbyVzvkIfERIE1DGSe3sRQdCSYrgEQ1"></script>
<script src="/bundles/Meeting?v=AVpWBphpdxyAs8EnVqIgfGPcIy964yCGHE8PBR5W7yY1"></script>

        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <link href="/Content/css?v=uTDadAVN2kXgv_IlKa38IoLBJEDhJyqBD_0SO6hOWTg1" rel="stylesheet"/>
<link rel='stylesheet' type='text/css' href='./FileStream.ashx?DocumentId=101428'><link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" /><link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" href="Content/Meeting.css" /><link href="Content/CalenderViewStyle-updated.css" rel="stylesheet" /><link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> 

    <style type="text/css">

        body {
            color: #000000;
        }

        a, A:link, A:visited {
            color: #0059B8;
        }

        .comment-link {
            display: inline-block;
            vertical-align: top;
        }

        .comment-link:hover {
            text-decoration: underline;
        }

        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

            .embed-responsive::before {
                display: block;
                content: "";
            }

            .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
            }

        .embed-responsive-21by9::before {
            padding-top: 42.857143%;
        }

        .embed-responsive-16by9::before {
            padding-top: 56.25%;
        }

        .embed-responsive-4by3::before {
            padding-top: 75%;
        }

        .embed-responsive-1by1::before {
            padding-top: 100%;
        }


        html, body, form {
            height: 100%;
            overflow: hidden;
        }

        #Agendadropdownmenu.dropdown-menu {
            right: 0px;
            left: 0px;
        }

        .FontIncrease * {
            font-size: 1em;
            font-weight: bold;
            cursor: pointer;
        }

        .FontDecrease * {
            font-size: 0.85em;
            font-weight: bold;
            cursor: pointer;
        }

        .panel {
            margin-bottom: 22px;
            background-color: #fff;
            border: 1px solid transparent;
            border-radius: 4px;
            -webkit-box-shadow: 0 1px 1px rgba(0,0,0,.05);
            box-shadow: 0 1px 1px rgba(0,0,0,.05);
        }

        .panel-default {
            border-color: #ddd;
        }

        .panel-heading {
            padding: 10px 15px;
            border-bottom: 1px solid transparent;
            border-top-right-radius: 3px;
            border-top-left-radius: 3px;
        }

        .panel-default > .panel-heading {
            color: #000;
            background-color: #f5f5f5;
            border-color: #ddd;
        }

        .panel-body {
            padding: 15px;
        }

        /*ul.navbar-nav > li {
                display:inline-block;
            }

            .navbar-nav > li > a {
                padding-top:5px !important; padding-bottom:5px !important;
            }
            .navbar {
                min-height:32px !important
            }
            .navbar-toggle {
                margin-top:4px;
                margin-bottom:4px;
                padding-top:4px;
                padding-bottom:4px;
            }

            .affix { 
                right:0px;
                top:32px;
            }

            .affix-top {
                right:0px;
                position:fixed;
                top:32px;
            }*/

        .Details > div {
            padding-right: 0px !important;
            margin-right: 2%;
        }

        a.dropdown-toggle:focus {
            outline: solid 1px #FFFFFF;
        }

        #lnkPoweredBy:focus {
            outline: solid 1px #FFFFFF;
            padding: 4px;
        }

        /*@media (max-height: 760px) {
                .navbar-fixed-bottom {
                    display:none;
                }
            }
            @media (min-height: 760px) {
                body {
                    padding-bottom: 32px;
                }
            }
            
            @media (max-width: 600px) {
                 .AgendaItemContainer > .AgendaItemContainer {
                    margin-left:4em !important;
                }
            }*/

        @media (max-width: 500px) {
            .AgendaItemContainer > .AgendaItemContainer {
                margin-left: 2em !important;
            }
        }

        @media (max-width: 400px) {
            .AgendaItemContainer > .AgendaItemContainer {
                margin-left: 1em !important;
            }
        }

        @media (max-width: 300px) {
            .AgendaItemContainer > .AgendaItemContainer {
                margin-left: 0em !important;
            }
        }

        @media (min-width:768px) and (max-width:991px) {
            .AgendaItemSelectedDetails {display: none !important; }

            .visible-sm.sharing.SocialIcons {
                display: inline-block !important;
                float: none !important;
            }

            .AgendaItemTitleRow.hilighted {
                display: block !important;
            }

            .AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemIcons,
            .AgendaItemTitleRow.hilighted > .AgendaItemIcons{
                display: none !important;
            }


            .AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle.hasPublicCommentButton {
                margin-right: 135px;
                width: auto !important;
            }
        }

        /*.AgendaItemIcons {
            width: 22% !important;
        }*/

        .visible-xs visible-sm sharing SocialIcons {
            width: 10%;
            padding-top: 5px;
            float: right;
        }

        @media (max-width: 767px) {
            .visible-xs.sharing.SocialIcons {
                display: inline-block !important;
                float: none !important;
            }

            .AgendaItemTitleRow.hilighted {
                display: block !important;
            }

            .AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemIcons,
            .AgendaItemTitleRow.hilighted > .AgendaItemIcons {
                display: none !important;
            }

            .AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle.hasPublicCommentButton {
                margin-right: 65px;
                width: auto !important;
            }
        }

        @media only screen and (device-width: 768px) {

            .navbar-nav .dropdown-menu {
                margin-top: -5px !important;
            }

            .dropdown, .dropleft, .dropright, .dropup {
                width: fit-content !important;
            }

            .collapse:not(.show) {
                display: block !important;
            }

            .navbar-light .navbar-toggler {
                float: right;
                border-color: #ddd !important;
                display: none !important;
            }

            .navbar-nav .dropdown-menu {
                position: absolute !important;
            }
        }

        .visible-xs.visible-sm.sharing.SocialIcons {
            /*width: 10%;
            padding-top: 5px;
            float: right;
            position: absolute;
            right: -8px;
            margin-top: -22px;*/
            position: absolute;
            right: 10px;
            margin: 0;
            position: absolute;
            top: 50%;
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
        }

            .visible-xs.visible-sm.sharing.SocialIcons > * > span.btn.btn-primary.btn-sm {
                padding: 0px 5px 0px 5px;
            }

            .visible-xs.visible-sm.sharing.SocialIcons,
            .visible-xs.visible-sm.sharing.SocialIcons > *,
            .visible-xs.visible-sm.sharing.SocialIcons > * > span {
                font-size: 12px !important;
                font-weight: normal !important;
            }

        .SocialIcons {
            float: right;
        }


        .poweredBy, .poweredBy a {
            color: white !important;
        }

        @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation : portrait) {
            .visible-xs.visible-sm.sharing.SocialIcons
            {
                right: -8px !important;
                padding-top: 4px !important;
            }
        }

        @media screen and (device-width: 280px) and (device-height: 653px) {
            .visible-xs.visible-sm.sharing.SocialIcons
            {
                position: unset;
                right: unset;
                margin: unset;
                top: unset;
                -ms-transform: unset;
                transform: unset;
            }
            }

        .packageNav {
            position: absolute !important;
        }

    </style>
</head>
<body style="background-color: #e5e5e5">
    <form name="form1" method="post" action="./Meeting.aspx?Id=9dc974f2-fb95-401e-bf2f-5fe225f5cdb5&amp;Agenda=Agenda&amp;lang=English" id="form1">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="u5izDnFKwN3kvT6WQzBKJnw0lLk4Xcep+Ml63b34ySWyRbxILwGtY/+IKE5aNLgY1ZFpqRrB7bjb10JUWuNyR/E2aX9fZlrWUkvUnxta5TNmeW6CbU+ZxTqg7ZOG+v4F0H9FjQ65rliH5BPB2wx94hBREPZy1udzTmpePgJ9eHr+5gfps3WmDiu0EEOx0UVbUYMIEmyLFgGuNFDbniSCquBU2QriK/8j/y3bflD64zToOP+KcvyuO91otXPozJxYsfCr5M7qLRrEIQh703LGkWCrjvNvuHgzw865gUV8MRyw38ky75tWGlz56PHZkQ+VHgVK+LJWCUWJOj7Joh1qANRdJTZoQOo9/VYRzs1f832+i3e5CuF2qUjYRcHct2fB3KcoqdnZmFN7wvapnHUlJZVU2RF3h1pC8YRJR9/EH/WOro9Wek8AKjI4U6ecLRoTe3BTumLHDns+Ut+tEmuSzrq/qFf3Cc9UQrZO2ATDROldJl/tY9Vs8c9bW9F1lS7juEC7psBhNy6lENUuv/HE0ZYfheatyBoQRw7C4ak+TVBuY5jXLUHmFLnjNU8zIHhNnkVVqSa/IyZz7Sh7Rbg1NpW4R/XKNrX+3disEqMh2/4=" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/bootstrap.min.js" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="4936DBB7" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
        

        <script type="text/javascript">
            function iframeLoaded(iframeHeight) {
                var windowHeight = $(window).height();

                if (iframeHeight > windowHeight) {
                    var newHeight = (windowHeight - 185) + "px";
                    $('#bootstrapModalBody').height(newHeight);
                    $('#modalIframeDiv').height(newHeight);

                    return $('#modalIframeDiv').height() - 85;
                }
                else {
                    var newHeight = iframeHeight + "px";
                    $('#bootstrapModalBody').height(newHeight);
                    $('#modalIframeDiv').height(newHeight);
                    return "0";
                }
            }

            $(document).keydown(function(event) { 
                if (event.keyCode == 27) { 
                    closeBootstrapModal();
                    $(".CommentIcon").focus();
                }
            });

            function closeBootstrapModal() {
                $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true'); 
            }

            $(window).resize(function(){
                var windowWidth = $(window).width();
                var standardHeight = $('.SelectedItemCounter').height();
                var titleHeight = $('.SelectedItemTitle').height();

                //if (Window_OnResize) {
                //    Window_OnResize();
                //}

                if(titleHeight > standardHeight) {
                    $('.panel-heading.clearfix >.sharing.SocialIcons > a.CommentIcon > span').css("margin-top", "4px");
                }

                //Replace the Leave Comment button to icon
                $('#narrow-leave-comment-button').html("<span class='las la-comment-alt' style='vertical-align: middle' title='Leave Comment'></span>");

                if(windowWidth <= 539){
                    $(".Agenda").css("padding-top", $(".affix-top").height()+5);
                } else {
                    $(".Agenda").css("padding-top", "18px");
                }
            });

            function CheckiOSDevice() {
                var userAgent = window.navigator.userAgent;
                if (userAgent.match(/iPad/i) || userAgent.match(/iPhone/i)) {
                    // iPad or iPhone
                    document.body.style.removeProperty("overflow");  
                    // console.log("checkIOSDevice called");
                }                                 
            }

            $(document).ready(
                function () {
                    var url = window.location.href;
                    if(url.indexOf("pub-ottawa") != -1 || url.indexOf("pub-support") != -1) {
                        $('.AgendaHeaderDetailsTable').find('.Label:contains("Période:")').text('Date :');
                        $('.AgendaHeaderDetailsTable').find('.Label:contains("Lieu:")').text('Endroit :');
                    }

                    $(".Details").addClass("d-sm-block");
                    $(".Details").attr("aria-live", "polite");
                    $(".panel-heading").prepend("<span class='visuallyhidden'>Agenda item details popup</span>");
                    $(".affix-top").append("<div class='collapse-stream'><i class='las la-video open-player'></i></div>");

                    $(".collapse-stream").on("click", function(i,v){
                        if($(".VideoPlayerContainer").css("display") == "none"){
                            $(".VideoPlayerContainer").show();
                            $(".la-video").addClass("open-player");
                            $(".Agenda").css("padding-top", $(".affix-top").height()+5);
                        } else {
                            $f().pause();
                            $(".la-video").removeClass("open-player");
                            $(".VideoPlayerContainer").hide();
                            $(".Agenda").css("padding-top", "18px");
                        } 
                    });
                    $('.VideoPlayer').append($('#VideoPlayerControl').detach());

                    if($(window).width() <= 539){
                        $(".Agenda").css("padding-top", $(".affix-top").height()*1.05);
                    }
                    
                    // ensure minutes show if the meeting starts or ends partially through an hour //
                    $(".Time > .Minutes").each(
                        function (index, element) {
                            if ($(element).text() != ":00") {
                                $(element).show();
                            }
                        }
                    );

                    $("[data-toggle='tooltip']").tooltip({placement:'top', boundary: 'window', trigger : 'hover'});

                    //Add/Remove public comment icons for each agenda item (real time)
                    var agendaItem = $('.AgendaItem');

                    for(var i = 0; i < agendaItem.length; i++) {
                        var className =agendaItem[i].className.match(/AgendaItem\d+/);
                        if(className) {
                            var id = className[0].replace("AgendaItem", "");
                            if(id){
                                LoadPublicCommentIcons(id);
                            }
                        }
                            
                    }                                                        
                    CheckiOSDevice();
                    var selectedTab = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("Tab").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                    SelectItem(getParameterByName("Item") || ((window.location.hash || "").replace(/#/g, '')), true, selectedTab);
                
                    
                    $("#package-container").on("scroll", function(){
                        if ($("#package-container").scrollTop() >= 48){
                            $(".affix-top").css("top", "5px");
                        } else {
                            $(".affix-top").css("top", "48px");
                        }
                    });

                    $("[tabindex]").filter(function() {
                        if ($(this).attr("tabindex") > 0){ $(this).attr("tabindex", "0")}
                    });
                    
                    $(".AgendaItemTitle").on("click", function() {
                        tabIndexLoop(document.querySelector(".AgendaItemSelectedDetailsContainer"));
                        var modalContainer = document.querySelector(".Details");
                        var focusableElementsString = 'a[href], area[href], input:not([disabled], [type=hidden]), select:not([disabled]), textarea:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';
                        var focusableElements = modalContainer.querySelectorAll(focusableElementsString);

                        focusableElements = Array.prototype.slice.call(focusableElements);
                        if (focusableElements.length > 0){
                            focusableElements[0].focus();
                        }
                    });

                    $(".AgendaItemContainer").each(function(i,v){
                        var commentIcon = $(v).find(".AgendaItemIcons").find(".la-comment-alt");
                        if(commentIcon.length > 0){
                            commentIcon.append("<span class='sr-only'>Public Comments:</span>");
                        }
                    });


                }
                
                
            );

            
            ////$(document).on("item:selected", function (e, id) {
            ////    hilightItem(id);
            ////});
                                                
            function SelectItem(id, scroll, tab) {
                if(tab === undefined) {
                    tab = 'attachments'
                }

                //The function under eScribe.Agenda only take two parameter. In order to make the icon link works, I have to do a work around for this (reuse the scroll parameter).
                //This should not affect the original functionality of the scroll.
                if(scroll == 'attachments' || scroll == 'comments') {
                    tab = scroll;
                    scroll = false;
                }

                // update url //
                window.history.pushState('', '', UpdateQuery("Item", id.toString()));                    
                window.history.pushState('', '', UpdateQuery("Tab", tab));

                //Update the Citizen Comment using ajax.
                LoadPublicComment(id, scroll);

                if(document.readyState === 'complete' ) {
                    LoadPublicCommentIcons(id);
                }

                //// trigger event //
                //$(document).trigger("item:selected", [id, scroll]);
            }

            function LoadPublicComment(id, scroll) {
                if(id) {
                    var meetingId = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("Id").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                    var language = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("lang").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                    var tabindex = $('#AgendaItemAgendaItem' + id + 'TitleHeader > .AgendaItemNavigate > .AgendaItemTitle > A').attr("tabindex");

                    $.ajax({
                        type: "POST",
                        url: "Meeting.aspx/GeneratePublicComment",
                        data: "{id: '" + id + "', meetingId: '" + meetingId + "', lang: '" + language + "', tabindex: '" + tabindex + "'}",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (msg) {

                            var items = document.getElementsByClassName('AgendaItemPublicComment' + id);
                            for(var i = items.length - 1; i >= 0 ; i--){
                                var child = items[i];
                                child.parentNode.removeChild(child);
                            }
                            $(msg.d).appendTo(".AgendaItemPublicCommentList");

                            if($('.AgendaItemPublicCommentListIndent' + id).children('.AgendaItemPublicCommentHeader').length == 0) {
                                $('<div class="AgendaItemAttachment AgendaItemPublicCommentHeader" style="display: block;"></div>').appendTo(".AgendaItemPublicCommentListIndent" + id);
                            }
                            $(msg.d).appendTo(".AgendaItemPublicCommentListIndent" + id);

                            // trigger event //
                            $(document).trigger("item:selected", [id, scroll]);
                                
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        }
                    });
                }
            }

            function LoadPublicCommentIcons(id) {
                if(id) {
                    var meetingId = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("Id").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                    var agendaItem = $('#AgendaItemAgendaItem' + id +'TitleHeader ' + '> .AgendaItemNavigate > ' + '.AgendaItemIcons');
                    if(agendaItem.length == 0) {
                        agendaItem = $('#AgendaItemAgendaItem' + id +'TitleHeader ').parent().find(".AgendaItemIcons");
                    }

                    var isExist = agendaItem.children('.las.la-comment-alt').length;
                    
                    $.ajax({
                        type: "POST",
                        url: "Meeting.aspx/GeneratePublicCommentIcon",
                        data: "{id: '" + id + "', meetingId: '" + meetingId + "'}",
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (msg) {

                            if(msg.d) {
                                if(isExist == 0) {
                                    $(msg.d).appendTo(agendaItem);
                                }
                            }
                            else {
                                if(isExist > 0){
                                    agendaItem.children('.las.la-comment-alt').remove();
                                }
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                        }
                    });
                }
            }
                                                
            function UpdateQuery(parameter, value) {
                var loc = window.location.search;

                if (loc.length == 0) {
                    // no query string //
                    if (value.length > 0) {
                        // add parameter directly to url //
                        return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                    }
                }
                else {
                    var found = false;
                    if (loc[0] == '?') {
                        loc = loc.substring(1);
                    }
                    var params = loc.split('&');

                    for (var i = 0; i < params.length; i++) {
                        if (params[i].toLowerCase().startsWith(parameter.toLowerCase() + '=')) {
                            found = true;

                            if (value.length > 0) {
                                // set new value //
                                params[i] = parameter + '=' + encodeURIComponent(value);
                            }
                            else {
                                // remove existing value //
                                params[i] = '';
                            }
                        }
                    }
                    if (found == false && value.length > 0) {
                        params.push(parameter + '=' + value);
                    }

                    var qs = '';
                    for (var i = 0; i < params.length; i++) {
                        if (params[i].length > 0) {
                            if (qs.length == 0) {
                                qs = "?" + params[i];
                            }
                            else {
                                qs += "&" + params[i];
                            }
                        }
                    }

                    return window.location.href.replace("?" + loc, qs);
                }
                return window.location.href;
            }

            function tabIndexLoop(modalContainer) {
                modalContainer.addEventListener("keydown", trapTabKey);

                var focusableElementsString = 'a[href], area[href], input:not([disabled], [type=hidden]), select:not([disabled]), textarea:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';
                var focusableElements = modalContainer.querySelectorAll(focusableElementsString);
                focusableElements = Array.prototype.slice.call(focusableElements);
                focusableElements = focusableElements.filter(element => $(element).is(':visible'));
				
                var firstTabStop = focusableElements[0];
                var lastTabStop = focusableElements[focusableElements.length - 1];
                console.log(focusableElements);

                function trapTabKey(e) {
                    var focusableElementsString = 'a[href], area[href], input:not([disabled], [type=hidden]), select:not([disabled]), textarea:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]';
                    var focusableElements = modalContainer.querySelectorAll(focusableElementsString);
                    focusableElements = Array.prototype.slice.call(focusableElements);
                    focusableElements = focusableElements.filter(element => $(element).is(':visible'));
					
                    var firstTabStop = focusableElements[0];
                    var lastTabStop = focusableElements[focusableElements.length - 1];
                    if (e.keyCode === 9) {
                        if (document.activeElement === lastTabStop) {
                            e.preventDefault();
                            $('.hilighted .AgendaItemTitle a').focus();
                        }							
                    }
                }
            }
        </script>

        

<script type='text/javascript'>
    $(document).ready(
        function () {
            $('.Details').addClass('hidden-xs').addClass('hidden-sm');
            $('.VideoPlayerContainer').detach();

            $(window).on('resize', Window_OnResize);
        }
    );

    function Video_LoadBookmark() { }

    function Window_OnResize() {
        setTimeout(
            function () {
                try {
                    var maxheight = 0;
                    if ($(".navbar-fixed-bottom").is(":visible")) {
                        maxheight = $(window).height() - $(".navbar-nav").height() - $(".navbar-fixed-bottom").height();
                    }
                    else {
                        maxheight = $(window).height() - $(".navbar-nav").height();
                    }

                    $(".AgendaItemAttachmentsArea").css("max-height", "");

                    if (detailsheight() > maxheight) {
                        //need to substract the panel heading height (dynamic depending on user input) and also need to substract 55 for other static components (space between panel elements)
                        var contentMaxHeight = maxheight - $('.AgendaItemSelectedDetails > div.panel-heading').height() - 55;
                        $(".AgendaItemAttachmentsArea").css("max-height", contentMaxHeight + "px");

                        //This will never run ... not sure why it is here
                        if (detailsheight() <= maxheight) {
                            $(".AgendaItemAttachmentsArea").css("max-height", ($(".AgendaItemAttachmentsArea").height() - (detailsheight() - maxheight)) + "px");
                        }
                    }
                }
                catch (e) {
                }
            },
            1
        );
    }
</script>

        <div id="package-container" style="overflow: auto; height: 100%">
            <nav class="navbar navbar-expand-lg navbar-light navbar-fixed-top navbarbg" role="navigation">
                <div class="container">
                        <ul class="nav navbar-nav narbar-left">
                            <li class="nav-item dropdown">
                                <a href="#" id="navbarDropdown" class="nav-link" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="color:white;pointer-events:none;" tabindex="1">
                                    Agenda
                                </a>
                                <span class="caret"></span>
                                <ul class="dropdown-menu packageNav" role="menu" id="Agendadropdownmenu" aria-labelledby="navbarDropdown">
                                    
                                            
                                            <li>
                                                <a class="dropdown-item" role="menuitem" href='https://pub-ottawa.escribemeetings.com/Meeting.aspx?Id=9dc974f2-fb95-401e-bf2f-5fe225f5cdb5&Agenda=Agenda&lang=English' tabindex='1' lang='en'>
                                                    Agenda
                                                </a>
                                            </li>
                                        
                                        
                                    <li class='d-none'>
                                        <a class="VideoLink dropdown-item" href='' title='Open Video in new Window' target="_blank" tabindex="6">
                                            <span class="HiddenAnchorDescription">
                                                Open Video in new Window</span>
                                            Video
                                        </a>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                </div>
            </nav>

            <main class="container body-content" style="background-color: #ffffff">
                
<ARTICLE class='Meeting row'>
    <SECTION class='Agenda col-xs-12 col-sm-12 col-md-8 col-lg-8'>
        <DIV style='padding:1em; width:auto; margin:8px'>
            <link href="content/Ottawa.css" rel="stylesheet" type="text/css"><script src="scripts/Ottawa.js" type="text/javascript"></script><!-- saved from url=(0089)http://app05.ottawa.ca/sirepub/cache/2/sp5ak2yekf4jnqbin1scvdno/682010172022015135160.htm -->
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">

<meta name="Generator" content="Microsoft Word 12 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
 /* Page Definitions */
 @page WordSection1
	{size:612.0pt 792.0pt;
	margin:72.0pt 53.85pt 72.0pt 53.85pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>





<div class="WordSection1">

<div style="border:none;border-bottom:double windowtext 2.25pt;padding:0cm 0cm 1.0pt 0cm;
margin-left:0cm;margin-right:9.0pt">

<p class="MsoNormal" style="border:none;padding:0cm"><span lang="FR-CA" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

</div>

<p class="MsoNormal" align="right" style="text-align:right;punctuation-wrap:simple;
text-autospace:none;vertical-align:baseline"><span lang="EN-GB" style="font-family:
&quot;Arial&quot;,&quot;sans-serif&quot;"><img width="135" height="61" src="filestream.ashx?DocumentId=101366"></span></p>

<p class="MsoNormal"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Committee of Adjustment</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Comité de derogation</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Panel 1</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Groupe 1</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Wednesday, 03 February 2016 - 1:00 PM</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">mercredi le 3 février 2016 - 13 h</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">The Chamber, 101 Centrepointe Drive</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Salle du Conseil, 101, promenade
Centrepointe</span></b></p>

<p class="MsoNormal" align="center" style="text-align:center"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></b></p>

<div style="border:none;border-bottom:double windowtext 2.25pt;padding:0cm 0cm 0cm 0cm;
margin-left:0cm;margin-right:9.0pt">

<p class="MsoNormal" align="center" style="margin-left:72.0pt;text-align:center;
text-indent:-72.0pt;border:none;padding:0cm"><b><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></b></p>

</div>

<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>

<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343766" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">CALL TO ORDER</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343767" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">OPENING REMARKS</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343768" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">DECLARATIONS OF INTEREST</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343769" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">CONFIRMATION OF MINUTES</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343770" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">ADJOURNMENT REQUESTS</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343771" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">HEARING OF APPLICATIONS</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343772" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">Items to be heard after 1:00 PM</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">1.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343778" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343778"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">90 Bolton</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 12 - Rideau-Vanier</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00385</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">2.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343779" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343779"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">256 Clemow</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 17 - Capital</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00386</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">3.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343780" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343780"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">1166 Wellington</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 15 - Kitchissippi</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00405</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">4.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343781" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343781"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">16 Sweetland</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 12 - Rideau-Vanier</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00398</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">5.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343782" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343782"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">655&nbsp;Echo</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 17 - Capital</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00399</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">6.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343783" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343783"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">123 Stanley</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 13 - Rideau-Rockcliffe</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00404</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">7.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343784" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343784"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">96 Broadway</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 17 - Capital</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00415</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">8.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343785" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343785"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">385 Riverdale</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 17 - Capital</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-01-15/B-00440</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">9.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343786" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343786"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">638 Center</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 13 - Rideau-Rockcliffe</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00416</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">10.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343787" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343787"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">26 Aylmer</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 17 - Capital</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00419</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">11.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343788" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343788"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">287 Dovercourt</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 15 - Kitchissippi</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-01-15/B-00477
  &amp; D08-01-15/B-00478</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:444.85pt;border-collapse:collapse">
 <tbody><tr>
  <td width="593" valign="top" style="width:444.85pt;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><a name="Item343773" style="font-family: arial; font-size: 95%;"><b><span lang="EN-US" style="font-family:
  &quot;Arial&quot;,&quot;sans-serif&quot;">Adjourned from previous Hearings</span></b></a></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

<table class="MsoNormalTable" border="0" cellspacing="0" cellpadding="0" style="width:86.42%;border-collapse:collapse">
 <tbody><tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">12.</span></p>
  </td>
  <td width="46%" valign="top" style="width: 46.62%; padding: 0cm 5.4pt; position: relative;">
  <p class="MsoNormal" style="margin-right: 25px;"><a name="Item343789" style="font-family: arial; font-size: 95%;"></a><a href="#" target="pubright" style="font-family: arial; font-size: 95%;" class="SelectableItem" itemid="343789"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">525 Golden</span></a></p>
  <div style="position: absolute; top: 0px; right: 0px;"><img src="./_layouts/images/eScribe/paperclip.png"></div></td>
  <td width="44%" valign="top" style="width:44.64%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal" align="right" style="text-align:right"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">Ward 15 - Kitchissippi</span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="8%" valign="top" style="width:8.74%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>
  </td>
  <td width="91%" colspan="2" valign="top" style="width:91.26%;padding:0cm 5.4pt 0cm 5.4pt">
  <p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">D08-02-15/A-00324
  &amp; D08-02-15/A-00325</span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;">&nbsp;</span></p>

</div>





        </DIV>
    </SECTION>

    <SECTION class='Details col-xs-3 col-sm-3 col-md-4 col-lg-4 col-xs-offset-9 col-sm-offset-9'>
        <DIV class='affix affix-top' style='width:inherit; padding-right:5%;'>
            <DIV class='panel panel-default' style='width:auto;box-shadow:3px 3px 3px rgba(0,0,0,.33);'>
                <DIV class='VideoPlayerContainer panel panel-default'>
                    <DIV class='VideoPlayer'>
                    </DIV>
                </DIV>

                <DIV class='visible-md visible-lg AgendaItemSelectedDetailsContainer'>
                    <DIV class='panel-body AgendaItemAttachment AgendaItemAttachmentNotSelected'>
                        No Item Selected
                    </DIV>
                    <DIV class='panel panel-default AgendaItemSelectedDetails' style='display:none'>
                        <DIV class='panel-heading'>
                            <SPAN class='SelectedItemCounter'></SPAN> &nbsp; <SPAN class='SelectedItemTitle'></SPAN>
                        </DIV>
                        
                        <DIV class='panel-body'>                    
                            <DIV class='AgendaItemAttachmentsArea'>
                                <DIV class='AgendaItemAttachmentsList'>
                                    <DIV class='AgendaItemAttachment AgendaItemAttachmentNone'>
                                        This item has no attachments
                                    </DIV>
                                    
<DIV class='AgendaItemAttachment AgendaItemAttachment343778' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101367' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='90 Bolton Avis A.pdf' target='_blank'>
        <SPAN class='Link'>90 Bolton Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343778' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101368' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='90 Bolton Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>90 Bolton Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343778' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101369' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='90 Bolton Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>90 Bolton Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343778' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101370' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='90 Bolton Notice A.pdf' target='_blank'>
        <SPAN class='Link'>90 Bolton Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343778' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101371' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='90 Bolton Plans.pdf' target='_blank'>
        <SPAN class='Link'>90 Bolton Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343779' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101372' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='256 Clemow Avis A.pdf' target='_blank'>
        <SPAN class='Link'>256 Clemow Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343779' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101373' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='256 Clemow Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>256 Clemow Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343779' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101374' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='256 Clemow Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>256 Clemow Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343779' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101375' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='256 Clemow Notice A.pdf' target='_blank'>
        <SPAN class='Link'>256 Clemow Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343779' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101376' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='256 Clemow Plans.pdf' target='_blank'>
        <SPAN class='Link'>256 Clemow Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343780' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101377' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='1166 Wellington Avis A.pdf' target='_blank'>
        <SPAN class='Link'>1166 Wellington Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343780' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101378' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='1166 Wellington Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>1166 Wellington Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343780' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101379' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='1166 Wellington Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>1166 Wellington Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343780' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101380' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='1166 Wellington Notice A.pdf' target='_blank'>
        <SPAN class='Link'>1166 Wellington Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343780' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101381' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='1166 Wellington Plans.pdf' target='_blank'>
        <SPAN class='Link'>1166 Wellington Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343781' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101382' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='16 Sweetland Avis A.pdf' target='_blank'>
        <SPAN class='Link'>16 Sweetland Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343781' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101383' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='16 Sweetland Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>16 Sweetland Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343781' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101384' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='16 Sweetland Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>16 Sweetland Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343781' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101385' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='16 Sweetland Notice A.pdf' target='_blank'>
        <SPAN class='Link'>16 Sweetland Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343781' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101386' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='16 Sweetland Plans.pdf' target='_blank'>
        <SPAN class='Link'>16 Sweetland Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343782' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101387' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='655 Echo Avis A.pdf' target='_blank'>
        <SPAN class='Link'>655 Echo Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343782' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101388' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='655 Echo Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>655 Echo Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343782' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101389' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='655 Echo Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>655 Echo Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343782' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101390' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='655 Echo Notice A.pdf' target='_blank'>
        <SPAN class='Link'>655 Echo Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343782' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101391' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='655 Echo Plans.pdf' target='_blank'>
        <SPAN class='Link'>655 Echo Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343783' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101392' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='123 Stanley Avis A.pdf' target='_blank'>
        <SPAN class='Link'>123 Stanley Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343783' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101393' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='123 Stanley Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>123 Stanley Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343783' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101394' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='123 Stanley Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>123 Stanley Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343783' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101395' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='123 Stanley Notice A.pdf' target='_blank'>
        <SPAN class='Link'>123 Stanley Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343783' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101396' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='123 Stanley Plans.pdf' target='_blank'>
        <SPAN class='Link'>123 Stanley Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343784' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101397' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='96 Broadway Avis A.pdf' target='_blank'>
        <SPAN class='Link'>96 Broadway Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343784' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101398' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='96 Broadway Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>96 Broadway Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343784' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101399' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='96 Broadway Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>96 Broadway Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343784' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101400' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='96 Broadway Notice A.pdf' target='_blank'>
        <SPAN class='Link'>96 Broadway Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343784' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101401' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='96 Broadway Plans.pdf' target='_blank'>
        <SPAN class='Link'>96 Broadway Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343785' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101402' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='385 Riverdale Avis B.pdf' target='_blank'>
        <SPAN class='Link'>385 Riverdale Avis B.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343785' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101403' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='385 Riverdale Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>385 Riverdale Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343785' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101404' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='385 Riverdale Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>385 Riverdale Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343785' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101405' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='385 Riverdale Notice B.pdf' target='_blank'>
        <SPAN class='Link'>385 Riverdale Notice B.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343785' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101406' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='385 Riverdale Plans.pdf' target='_blank'>
        <SPAN class='Link'>385 Riverdale Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343786' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101407' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='638 Center Avis A.pdf' target='_blank'>
        <SPAN class='Link'>638 Center Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343786' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101408' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='638 Center Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>638 Center Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343786' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101409' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='638 Center Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>638 Center Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343786' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101410' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='638 Center Notice A.pdf' target='_blank'>
        <SPAN class='Link'>638 Center Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343786' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101411' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='638 Center Plans.pdf' target='_blank'>
        <SPAN class='Link'>638 Center Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343787' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101412' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='26 Aylmer Avis A.pdf' target='_blank'>
        <SPAN class='Link'>26 Aylmer Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343787' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101413' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='26 Aylmer Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>26 Aylmer Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343787' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101414' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='26 Aylmer Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>26 Aylmer Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343787' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101415' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='26 Aylmer Notice A.pdf' target='_blank'>
        <SPAN class='Link'>26 Aylmer Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343787' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101416' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='26 Aylmer Plans.pdf' target='_blank'>
        <SPAN class='Link'>26 Aylmer Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343788' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101417' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='287 Dovercourt Avis B.pdf' target='_blank'>
        <SPAN class='Link'>287 Dovercourt Avis B.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343788' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101418' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='287 Dovercourt Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>287 Dovercourt Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343788' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101419' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='287 Dovercourt Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>287 Dovercourt Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343788' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101420' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='287 Dovercourt Notice B.pdf' target='_blank'>
        <SPAN class='Link'>287 Dovercourt Notice B.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343788' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101421' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='287 Dovercourt Plans.pdf' target='_blank'>
        <SPAN class='Link'>287 Dovercourt Plans.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343789' >
    <SPAN class='Sequence'>1</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101422' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='521  525 Golden Avis A.pdf' target='_blank'>
        <SPAN class='Link'>521  525 Golden Avis A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343789' >
    <SPAN class='Sequence'>2</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101423' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='521  525 Golden Notice A.pdf' target='_blank'>
        <SPAN class='Link'>521  525 Golden Notice A.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343789' >
    <SPAN class='Sequence'>3</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101424' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='521 Golden Circulation EN.pdf' target='_blank'>
        <SPAN class='Link'>521 Golden Circulation EN.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343789' >
    <SPAN class='Sequence'>4</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101425' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='521 Golden Circulation FR.pdf' target='_blank'>
        <SPAN class='Link'>521 Golden Circulation FR.pdf</SPAN>
    </a>
</DIV>
<DIV class='AgendaItemAttachment AgendaItemAttachment343789' >
    <SPAN class='Sequence'>5</SPAN>
    <a class='Link' href='filestream.ashx?DocumentId=101426' data-toggle='tooltip' data-html='true' data-container='body' data-original-title='521 Golden Plans.pdf' target='_blank'>
        <SPAN class='Link'>521 Golden Plans.pdf</SPAN>
    </a>
</DIV>
                                </DIV>
                            </DIV>
                        </DIV>
                    </DIV>
                </DIV>
            </DIV>
        </DIV>
    </SECTION>
</ARTICLE>
<script type='text/javascript'>function SelectItem(AgendaItemId) { document.location.hash = AgendaItemId; }</script>
<script type='text/javascript'></script>
<script type='text/javascript'>$(document).ready(function() {$("[data-toggle='tooltip']").tooltip({placement:'top'});});</script>
            </main>
        </div>
        <!-- Bootstrap Modal -->
        <div id='bootstrapModal' aria-live="polite" aria-hidden="true" class='modal fade in' style='display: none;'>
            <div class='modal-dialog modal-dialog-scrollable'>
                <div class='modal-content'>
                    <div class='modal-header'>
                        <h3 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h3>
                        <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close</span></button>
                    </div>
                    <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                        <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                            <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                        </div>
                    </div>
                    <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0; min-height: 55px;'>
                    </div>
                </div>
            </div>
        </div>

        <footer class="navbar navbar-default navbar-fixed-bottom navbarbg">
            <div class="container text-right">
                <div class="navbar-inner navbar-content-center footeralign">
                    <div class="float-right">
                        
                        <copyright class="poweredBy"><a href="https://escribemeetings.com" target="_blank" id="lnkPoweredBy">Powered by eSCRIBE Software Ltd.</a></copyright>
                        
                    </div>
                </div>
            </div>
        </footer>

        <script type="text/javascript">
            var AgendaSize = parseFloat($(".Agenda *").css('font-size'));
            var TitleSize = parseFloat($(".AgendaHeaderTitle").css('font-size'));
            var MeetingTitle = "Committee of Adjustment - Panel 1 - February 03, 2016";
            var itemTitles = { };
            var Sharing = false;
            var AllowComment = "False";
            var PublicCommentSettings = [];
            var LeaveComment = "Leave comment";

            function PrintAgenda() {
                window.print();
            };

            $(".VideoLink").click(function (e) {
                try {
                    $f().pause();
                }
                catch (e) {
                }
            });

            function detailsheight() {
                return $(".Details > div").height();
            };

            function SetDetailsHeight(AgendaItemId) {
                try {
                    if (Window_OnResize) {
                        Window_OnResize();
                    }
                        
                    //For public comment narrow and wide view when resize window
                    $(window).trigger('resize');

                }
                catch (e) {
                }
            }

            function CreateSocialLink(AgendaItemId) {
                var meetingId = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("Id").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                var language = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("lang").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                var publicCommentUrl = "PublicComment.aspx?agendaId=" + AgendaItemId + "&meetingId=" + meetingId + "&lang=" + language;
                var allowComment = AllowComment == "True" ? true : false;           
                    
                if(allowComment) {
                    for(i = 0; i < PublicCommentSettings.length; i++) {
                        var setting = PublicCommentSettings[i];
                        if(setting.Id == AgendaItemId) {
                            allowComment = setting.AllowPublicComment;
                            break;
                        }
                    }
                }

                var SocialItems = setSelectedItemIcons(allowComment, Sharing, publicCommentUrl, false);

                $('.SocialIcons').remove();
                $(".hilighted .AgendaItemNavigate").append($("<div class='SocialIcons visible-xs visible-sm'>").append(SocialItems));
                $('.SelectedItemTitle').parent().append(SocialItems);
                $('.SelectedItemTitle').parent().addClass("clearfix");

                //visible-xs visible-sm
                //add the icons under narrow view if not exist
                var iconDiv = $('.AgendaItemTitleRow.hilighted > #AgendaItemAgendaItem' + AgendaItemId + 'TitleHeader > .AgendaItemNavigate.indent > .AgendaItemIcons');

                if(iconDiv.length == 0) {
                    iconDiv = $('.AgendaItemTitleRow.hilighted > #AgendaItemAgendaItem' + AgendaItemId + 'TitleHeader > .AgendaItemNavigate.indent > .AgendaItemTitle');
                }

                $(setSelectedItemIcons(allowComment, Sharing, publicCommentUrl, true)).insertAfter(iconDiv);
                
                var closedIconDiv = $('.LateClosedAgendaItemTitleRow.hilighted > #AgendaItemAgendaItem' + AgendaItemId + 'TitleHeader > .AgendaItemNavigate.indent > .AgendaItemIcons');
                
                if(closedIconDiv.length == 0) {
                    closedIconDiv = $('.LateClosedAgendaItemTitleRow.hilighted > #AgendaItemAgendaItem' + AgendaItemId + 'TitleHeader > .AgendaItemNavigate.indent > .AgendaItemTitle');
                }
                $(setSelectedItemIcons(allowComment, Sharing, publicCommentUrl, true)).insertAfter(closedIconDiv);
                SetDetailsHeight(AgendaItemId);
            }

            function setSelectedItemIcons(allowComment, Sharing, publicCommentUrl, isNarrow) {
                var cssClass = isNarrow ? " class='visible-xs visible-sm' " : "";
                var padding = isNarrow ? "style='padding-top: 5px;'" : "";
                var btnId = isNarrow ? "id='narrow-leave-comment-button'" : "";
                    
                if(allowComment && !Sharing) {
                    var SocialItems = $("<div" + cssClass + ">")
                           .addClass("sharing SocialIcons")
                           .css("float", "right")
                           .append(
                               $("<a class='CommentIcon' aria-label='submit public comment'>")
                                   .attr("href", publicCommentUrl)
                                   .append("<span class='btn btn-primary btn-sm' style='vertical-align:middle;' " + btnId + ">" + LeaveComment + "<span>")
                           );

                    $('.AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle').removeClass("hasPublicCommentButton");
                    $('.AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle').addClass("hasPublicCommentButton");

                }
                else if (Sharing && !allowComment) {
                    var SocialItems =
                        $("<div" + cssClass + padding + ">")
                            .addClass("sharing SocialIcons")
                            .css("float", "right")
                            .append(
                                $("<a style='padding-right: 13px;'>")
                                    .attr("href", 'Sharing.aspx?u=' + encodeURIComponent(window.location.href))
                                    .append('<img src="Images/share.PNG" style="height:1em;" alt="This can be shared, click to open the sharing popup." title="Share">')
                            );
                }
                else if (Sharing && allowComment) {
                    var SocialItems = $("<div" + cssClass + ">")
                                .addClass("sharing SocialIcons")
                                .css("float", "right")
                                .append(
                                   $("<a class='CommentIcon' aria-label='submit public comment'>")
                                       .attr("href", publicCommentUrl)
                                       .append("<span class='btn btn-primary btn-sm' style='vertical-align:middle;' " + btnId + ">" + LeaveComment + "<span>"))
                                
                                .append(
                                    $("<a style='padding-right: 19px;width: 6%;padding-top: 5px;padding-left: 5px;'>")
                                        .attr("href", 'Sharing.aspx?u=' + encodeURIComponent(window.location.href))
                                        .append('<img src="Images/share.PNG" style="height:1em;" alt="This can be shared, click to open the sharing popup." title="Share">')
                                );

                    $('.AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle').removeClass("hasPublicCommentButton");
                    $('.AgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle').addClass("hasPublicCommentButton");

                    $('.LateClosedAgendaItemTitleRow.hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle').removeClass("hasPublicCommentButton");
                    $('.LateClosedAgendaItemTitleRow hilighted > * > .AgendaItemNavigate.indent > .AgendaItemTitle').addClass("hasPublicCommentButton");

                }

                return SocialItems;
            }

            function getParameterByName(name) {
                name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                var regex = new RegExp('[\\?&]' + name + '=([^&#]*)'),
                results = regex.exec(location.search);
                return results == null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
            }

            function UpdateTitle(AgendaItemId) {
                if (itemTitles[AgendaItemId] != null) {
                    document.title = itemTitles[AgendaItemId] + ' - ' + MeetingTitle;
                }
                else {
                    document.title = MeetingTitle;
                }
            }

            // when selected item has changed update page //
            $(document).on("item:selected", function (e, id, scroll) {
                var selectedTab = decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent("Tab").replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
                  
                hilightItem(id);
                CreateSocialLink(id);
                UpdateTitle(id);

                //Replace the Leave Comment button to icon
                var windowWidth = $(window).width();
                $('#narrow-leave-comment-button').html("<span class='las la-comment-alt' style='vertical-align: middle' title='Leave Comment'></span>");
                $('#narrow-leave-comment-button').attr("aria-label", "submit a public comment on this agenda item");
                    
                if (scroll == true) {
                    // scroll item into view //
                    var current = $(".AgendaItemTitleRow.hilighted");

                    if (current.length > 0) {
                        current[0].scrollIntoView();
                    }
                }

                if(selectedTab) {
                    toggleSelectedDetails(id, selectedTab);
                }
                else {
                    toggleSelectedDetails(id, 'attachments');
                }
				var attachmentCounts = $('.AgendaItemPublicCommentList >.OrderedAttachments > .OrderedAttachment > .AgendaItemAttachment' + id).length;											
				$('#selectedTabAgendaAttachmentCount').first().text(' (' + attachmentCounts + ') ');
            });

            function UpdateQuery(parameter, value) {
                var loc = window.location.search;

                if (loc.length == 0) {
                    // no query string //
                    if (value.length > 0) {
                        // add parameter directly to url //
                        return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                    }
                }
                else {
                    var found = false;
                    if (loc[0] == '?') {
                        loc = loc.substring(1);
                    }

                    // split up existing query string //
                    var params = loc.split('&');

                    for (var i = 0; i < params.length; i++) {
                        if (params[i].toLowerCase().startsWith(parameter.toLowerCase() + '=')) {
                            found = true;

                            if (value.length > 0) {
                                // set new value //
                                params[i] = parameter + '=' + encodeURIComponent(value);
                            }
                            else {
                                // remove existing value //
                                params[i] = '';
                            }
                        }
                    }

                    if (found == false && value.length > 0) {
                        params.push(parameter + '=' + value);
                    }

                    var qs = '';
                    for (var i = 0; i < params.length; i++) {
                        if (params[i].length > 0) {
                            if (qs.length == 0) {
                                qs = "?" + params[i];
                            }
                            else {
                                qs += "&" + params[i];
                            }
                        }
                    }

                    return window.location.href.replace("?" + loc, qs);
                }

                return window.location.href;
            }

            //$(document).ready(function () {
            //    SelectItem(getParameterByName("Item"), true);
            //});
        </script>

        <style type="text/css">
            /*
                @media Screen {
                    .AgendaItemAttachmentsList {
                        // this max height is causing attachments overlap, if exist the height
                             //max-height:200px;
                    }

                    .AgendaItemAttachmentsArea {
                        overflow:hidden;
                        overflow-y:auto;
                    }
                }
                */
        </style>
    </form>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('9dc974f2-fb95-401e-bf2f-5fe225f5cdb5', $(this).attr("itemid"));
        });
    });
</script>


</body>

</html>

  recorded_at: Tue, 23 Jan 2024 03:39:47 GMT
recorded_with: VCR 6.1.0
