---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 01 Jan 2024 04:42:37 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=rae25sgpdbr5elbeiiawxrhi; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 83e818635f53a21c-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=AVpWBphpdxyAs8EnVqIgfGPcIy964yCGHE8PBR5W7yY1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=uTDadAVN2kXgv_IlKa38IoLBJEDhJyqBD_0SO6hOWTg1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="5WT3lKgsWH0NH1nYRh3uegSzIK/5c1Bv4FmGsl4sl8PwvNprtXs+WEHTEaHZx6yqZOuqr+xhm0hNPHn5HbqtcyfzW5Q/FbsBOjVMCNLjRfHlqDCom/gJfxE32YwSOv9BqIHhHJ7YqdCsTubL0dScPpq9wV9b1b7UFs6KoeSQz9+9nMH9EvXGqZ40LlrMNwvGtIL5HcxZn6RsN6GcyAa1eFFgD28Ob3uRHXGVbu2ZEzUlI8QD1Z21L/TJ2A68uvo1DQkc5dyBuLT7gYiNIOQS2igUKMdt7p62K3tMOkcpNRttvVbkU5LJwKF3eWRdGVTjrR8rAeNPd9V8bItvTkeL5svyFAS83r06urjr4vknPTi85eZoB/D9xGAu6uRadBNcPtJiMk/QD5nr9nwl4Lx+o3O1po5HXOxH7R/iupoLE4bMiSbJNS6+vbKMlXGhHuKB7pzwogolN21AUEsYenhVCdlK8cFEeR6irueZTdM8MEu4FWSYEd4xUdmQQPeqAS0JRc7yRf4GFQUMPLccdiwhUz+SQA2frLlGQjdzZGlPbzLc7acEcQP3wf6C86aNviDAZykwMWaaIuwyMMkG+KNB44KqVr2kyDaC9VLb7DPdszJMaeklFLjlKZrSo48bkjRMkUI1jomr94QUd6YWav8dRUk9xGDA7ynCAIzpuuhWnH6HFzk/4qfb7kCHBs60gNFheS49SrhjZS8q0pMFIX7AknxOz8GPOUcG0hk358ZAGLM395UNRnDVxlBy/EsplOpCs4/ltAaASKy2iXTAghnyMEOz50rtaHsrj7NAmrx1XcqeFcb7tzuNzMFCwEKM59buVQKkDuznWM0VZmwXr7heK5wnrKPy3K3mL2Yh0nQGDSmajeAd1lxz5d+o5bxebSUKmdGSNt8ETGIoQbxEZkEOP590VgoSS8JgAhsUYbu0eWUbI3MEPAN2T+U2tlKOJ2Vxpqdya25kWbVLesQSV+dWWWgiud6gVvsXXukMENfo94KkyBINFPUTXJijNF0tPGdKH6XwzX0mrXzGHZ0t3+yiHeW6KIudHOrIYoT8bZQoOqMB1Q1oquREJ7GB/NnVSMHSGUtJ/QCiTeDRfarvOOuTsviOJkSv44375PgjBcV0hUoB2yHA0aKXP/Z59XEn0v8coTI6HWnvrdCjkWTGnjITsNShbgb/q9qz+/Tj4E5paMzn6sj8Z/eJn8MtfpUJTCPyNRjbZgMFXm9y9QQFud7aPAc0HspoTuQDOxhgj8qOuPs3ML2JD31UJYFIZiMSMaZnjsFGm4Iwcp2eJFZyuLQaUPkmK2IQoVcn7PkqggpMGl/FU8VOT24EPaNtH+FLZnwMl5lgCfAxlUSlnzq7zcZ6nXjlLE7al36pt28e3S2AAFIRdaRXXEeSfDagXc/lr0tGzazjq9/6OzCgA3ewpt9v3rylpHzCxcvdJs3mmUV8/owj8bTHX88P/1PPo3N5L+WNBE30fiU8Y7v766BVu1Ct9kTvIJRgyb8lUMLqSM61J5L4HFiJU4ezTZGG64OSRjL2kmjqbk6Z2X9GZFhTkz0z00sVVd2LZX3PDkNcekPOSZybkYx6b6u9gzNFrVnsBG9U59tnVjmpBV1Xyh27RPpp+jFp6hclC3AkOpHQmg05V/Qku6PEbmCF0g2q4ttGjRPeLejcA5MvQxCI5DM4n23vlZv10KOJhdX1asoUW5R1dmGTRc6h5uj0MGv7leiI2oiEX6vXemm/p03zrg8IpJ5btT6QIeoQxOMOOlgCW4CDG1g+H30ULmLDesE5gstTC07NwHFO9Urw1b3hxMxX4OdgrzwzqnZ3ZD+DnfrroZKCHZfg9TCSgpO9T7mRRgb93CT7d2qnya84IrmS2jVkFix4+nBKwIcWF2VFoRnGz9IuwJfj8WR3f0c6rkYSwYRFMnzawV/2FANp4Es2LMeexBohDaoOySdEXqImO9zyqsJ/N+ghVsoea1l2rotxIW6OI5DM" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" />
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden;
           overflow-x: hidden;
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="62*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-2-62*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Board of Health</option>
	<option value="130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-10-130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Built Heritage Committee</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-16-136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">City Manager Hiring Panel</option>
	<option value="14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Committee of Adjustment</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="56*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-26-56*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-11-131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Community Services Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="65*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-5-65*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-12-132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Emergency Preparedness and Protective Services Committee</option>
	<option value="133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-13-133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Environment and Climate Change Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-9-129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Finance and Corporate Services Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-17-137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">General Manager of Planning, Real Estate and Economic Development Hiring Panel</option>
	<option value="33*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-33*ef58236b-fce9-45cc-becf-c31c7a95d20f">Information Technology Sub-Committee</option>
	<option value="146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-26-146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Audit Committee and Transit Commission</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-29-149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Finance and Corporate Services and Planning and Housing Committee</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="35*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-35*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Agriculture and Rural Affairs Committee</option>
	<option value="150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-30-150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Environment and Climate Change Committee</option>
	<option value="151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-1-151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Transit Commission and Light Rail Sub-Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-15-135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Light Rail Sub-Committee</option>
	<option value="39*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-39*ef58236b-fce9-45cc-becf-c31c7a95d20f">Nominating Committee</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="132*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-132*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board - Special Meeting</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Planning and Housing Committee</option>
	<option value="45*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-45*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="127*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-127*ef58236b-fce9-45cc-becf-c31c7a95d20f">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee</option>
	<option value="69*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-9-69*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>

    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                             <div id="filter-options" style="display:none;">
                                <span id="filter-meeting-collapse" class="fa fa-caret-right" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();" style="float:left !important; line-height:1.5;" ></span>
                                <span style="cursor:pointer;" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();"><b>  Filter Options: </b></span>
                                <div id="filter-meeting-docment" class="collapse col-lg-12" style="left: 15px">
                                    <div class="row">
                                        <div class="col-lg-4">
                                            <div class="row">
                                                <div class="col-lg-5">
                                                    <span><b> Meeting Documents: </b></span>
                                                </div>
                                                <div class="col-lg-7">
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="AgendaCover" class="chkMeetingDocuments common-filter" />
                                                        <span>Agenda Cover Page</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Agenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Addendum" class="chkMeetingDocuments common-filter"/>
                                                        <span>Addendum</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Merged" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostAgenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Post Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostMinutes" class="chkMeetingDocuments common-filter"/>
                                                        <span>Minutes</span>
                                                    </div>
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" value="AdditionalDocuments" class="chkMeetingDocuments common-filter"/>
                                                        <span>Additional Documents</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="MergedCover" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda Cover Page</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-lg-8">
                                            <div class="row">
                                                 <div class="col-lg-2">
                                                     <span><b>Also search in: </b></span>
                                                </div>
                                                <div class="col-lg-10">
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" id="chkConflicts" value="Conflicts" class="common-filter"/>
                                                        <span>Conflicts</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" id="chkComments" value="PublicComments" class=" common-filter"/>
                                                        <span>Public Comments</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                        <div class="col-lg-2">
                                            <span><b>Document Types:</b></span>
                                        </div>
                                        <div class="col-lg-4">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value=".html" class="chkDocumentTypes common-filter" />
                                                <span>HTML</span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value=".pdf" class="chkDocumentTypes common-filter"/>
                                                <span>PDF</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;" id="languageFilterDv">
                                        <div class="col-lg-2">
                                            <span><b>Language: </b></span>
                                        </div>
                                        <div class="col-lg-2">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value="0,9" class="chkLanguage"/>
                                                <span>English </span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value="0,12" class="chkLanguage"/>
                                                <span>French </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                          <div class="col-lg-2">
                                            <button type="button" class="fc-button fc-state-default fc-corner-left fc-corner-right" id="btnSaveFilterCriteria" onclick="return searchData();" >
                                                Save Filter
                                            </button>
                                          </div>
                                          
                                    </div>
                                </div>

                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                         <table id="searchTableTemp" style="background-color:dimgrey; color:white; border: none; width: 100%; word-wrap: break-word; word-break: break-word; display:none;">
                                            <thead>
                                                <tr>
                                                   <th style="float:left; padding-left: 5px;">Name</th>
                                                    <th>Date</th>
                                                    <th>Document Type</th>
                                                </tr>
                                            </thead>
                                        </table>
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                     .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }

                                    .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75bfd226-37ee-4103-9f6f-720a0e20f58b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D75bfd226-37ee-4103-9f6f-720a0e20f58b' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75bfd226-37ee-4103-9f6f-720a0e20f58b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75bfd226-37ee-4103-9f6f-720a0e20f58b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=75bfd226-37ee-4103-9f6f-720a0e20f58b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75bfd226-37ee-4103-9f6f-720a0e20f58b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=160378' title="Notice of Cancellation.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Notice of Cancellation.pdf Planning and Housing Committee Wednesday, January 03, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Notice of Cancellation</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, January 10, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=6ed1ef48-cff3-49c0-ae9a-985045c4b57d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 10, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D6ed1ef48-cff3-49c0-ae9a-985045c4b57d' aria-hidden='true' aria-label='Share City Council Wednesday, January 10, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, January 10, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=6ed1ef48-cff3-49c0-ae9a-985045c4b57d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 10, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, January 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=6ed1ef48-cff3-49c0-ae9a-985045c4b57d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, January 10, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 10, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=6ed1ef48-cff3-49c0-ae9a-985045c4b57d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 10, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=6ed1ef48-cff3-49c0-ae9a-985045c4b57d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=161179' title="Notice of Cancelation - Avis d'annulation.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Notice of Cancelation - Avis d'annulation.pdf City Council Wednesday, January 10, 2024 @ 10:00 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Notice of Cancelation - Avis d'annulation</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8c647e01-2ebd-4d31-8107-0da6d1ebffc4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=160949' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D699ccb01-0f7d-4629-95ba-d122cdad4fcb' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8093dd45-3d05-4cc8-8b7c-ff31ed028923' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=160875' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D788fff63-2ffc-4b60-b862-8efe1c1c8394' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D43704983-1cbf-4e90-a405-8c04401b0ce4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=160813' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D101ee98f-e083-4ef5-adad-e6c8613c4b84' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, January 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D752109c0-f20e-47f7-9b65-158e58be9383' aria-hidden='true' aria-label='Share City Council Wednesday, January 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D47bf172f-ac10-493b-a67a-092f1c31e415' aria-hidden='true' aria-label='Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 31, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df26cd378-b12c-47dd-8775-3a3b0666f996' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 06, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0d1c82b0-368e-417e-8ee7-dd3eba9705fd' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' aria-hidden='true' aria-label='Share City Council Wednesday, February 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' aria-hidden='true' aria-label='Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Def28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, February 12, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadcd00c7-7a9e-4e35-b906-38b3e1da4728' aria-hidden='true' aria-label='Share Board of Health Monday, February 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da4ebb9eb-98bf-49fb-a643-1090b681436f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc281fabc-edb5-455e-9ec5-ff0101120cc1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4ef2cdcc-33b2-4eed-8634-f997b73fe93a' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De003fc3e-e8af-400c-83a5-48805aff3e1f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52764a30-cabd-4441-ae93-20f0fa702d5e' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc2ca2ca1-0f18-4133-af9c-5c7f135f1486' aria-hidden='true' aria-label='Share City Council Wednesday, February 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da38ab5e6-e639-43ad-94ee-dd23e7b24a40' aria-hidden='true' aria-label='Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-152"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>Planning Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Colonel By Room, 110 Laurier Avenue West, and by electronic participation'>Colonel By Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db4ca0617-81f9-4f2f-b7d8-bcbed3449324' aria-hidden='true' aria-label='Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 29, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' aria-hidden='true' aria-label='Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df4de9172-b75f-4619-a786-b38398cbdf23' aria-hidden='true' aria-label='Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D75c92485-bf8d-4475-b76b-6fadf3b5417f' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 06, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8b81219e-148a-4414-a02e-72b1bbbc05eb' aria-hidden='true' aria-label='Share City Council Wednesday, March 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8019a378-0e7b-4cf4-9dca-47d907b0ef96' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D58cb7118-858e-49e3-905a-796ab6fe98ca' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, March 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9d2c673d-5283-4469-8b9d-7ddebbb6d318' aria-hidden='true' aria-label='Share Transit Commission Monday, March 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5e838400-5511-4a4d-99be-47c4b155f48d' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 20, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 20, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046630df-5ab0-4fcc-820b-53e82cc2027a' aria-hidden='true' aria-label='Share City Council Wednesday, March 20, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd11c4a8a-b1bc-4b53-b87d-241aa5e0683d' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db203ac6d-5c2a-4752-9b2d-019f2584198a' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da3954153-cab7-4b0a-bea8-deacdbd8c7a1' aria-hidden='true' aria-label='Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D93d69530-d017-48af-a75d-5244692670cc' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 03, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3abc02b-9f54-4127-a5f2-84db8252dbfe' aria-hidden='true' aria-label='Share City Council Wednesday, April 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Ded31ac61-39c9-4ae3-8d70-f63d35c4d91d' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd8790ca-ed41-4466-9766-60c56c2fbee6' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8752a132-2255-4e6b-a6a0-c244fd81cd34' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D281cf799-d75c-498c-b582-911b96809fa9' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' aria-hidden='true' aria-label='Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, April 15, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 15, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D95b18589-2549-427e-823e-6df486e1106c' aria-hidden='true' aria-label='Share Board of Health Monday, April 15, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D31eafba8-15fd-4327-a237-7917c789ddf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 17, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 17, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' aria-hidden='true' aria-label='Share City Council Wednesday, April 17, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D256cb79c-c8ca-4889-b016-665c3ae5d576' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bc57fb6-cd27-400e-b06b-ed6051a2e40e' aria-hidden='true' aria-label='Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 01, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' aria-hidden='true' aria-label='Share City Council Wednesday, May 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 02, 2024 @ 10:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7654692c-e3a3-42db-bfed-52e922dc8acc' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 07, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da514d875-4c32-4650-9830-89a7a9a770e2' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd34f5519-5ad0-4c24-8096-118234a877f8' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D057eafda-178d-43a4-beb8-5f3b0b03b3de' aria-hidden='true' aria-label='Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52da8377-369d-48f1-b54a-b45b5f0ea020' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D235f67b2-ff2b-4112-bf74-3b4b36261ee7' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 15, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 15, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf60e77a-6a82-49b7-a765-6f6240ee2c8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 15, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2c226df6-bdfb-4475-8031-a0401dd0308f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7852ab33-7954-497c-b6ea-a24772f08cf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42654a53-0d23-4db6-814c-f6d9df0f5b27' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd0d9ed5-0d37-484f-8f52-8cffc1389856' aria-hidden='true' aria-label='Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4c900e-8f1e-49c8-857e-d2cdb1758f94' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 29, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 29, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd222c97-c027-4c36-8b09-8a66e9dd4d8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 29, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D821ddb60-febf-47a6-b6af-364553b1bec5' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1237110e-b0f6-4b5a-85e7-c586e01804b0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D485b6664-5f06-4a27-8006-6b5ec05fc052' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, June 10, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' aria-hidden='true' aria-label='Share Audit Committee Monday, June 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bac4135-8dfe-4d05-9f59-95e083a8cd88' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1637c236-791e-4e9e-85f9-a2802a5067ef' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 12, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 12, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Daf49c3ed-8099-408c-8f62-6d99ae315dad' aria-hidden='true' aria-label='Share City Council Wednesday, June 12, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b84f262-1915-4249-8573-4edae7898e71' aria-hidden='true' aria-label='Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, June 17, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 17, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dee6d6fc3-62ec-4d7e-8a01-406f0a654467' aria-hidden='true' aria-label='Share Board of Health Monday, June 17, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D282286b9-da22-4dd9-8ae2-83e9ebbc10f2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D90e989c4-5ede-4192-a813-3a71049a7c77' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3df51c0-4904-43a7-9699-0960a1084be9' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b518b58-f70e-415e-a90a-8b7f614372c2' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 26, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 26, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcc5202bd-d5dd-45e5-ad73-e40e21f14454' aria-hidden='true' aria-label='Share City Council Wednesday, June 26, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' aria-hidden='true' aria-label='Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7c9439-2578-4899-8b3e-d10d430f7ece' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, July 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc4a530ca-196a-44cc-8a34-8bb6f94473d4' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4bebdf-6117-4ad6-9175-7c62114e62f8' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D67587d56-e263-480c-a232-c4e8d1c8b7f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 10, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 10, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df7927e1b-535a-42d1-9583-6e1fdfacddba' aria-hidden='true' aria-label='Share City Council Wednesday, July 10, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8287fdc8-e07a-401e-8e8d-78bee2ad7c53' aria-hidden='true' aria-label='Share City Council Wednesday, July 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19b5ae68-597b-4b2e-9a1d-711b572c8a14' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D314c2a45-8edf-4abb-8db7-a73d69cb5726' aria-hidden='true' aria-label='Share City Council Wednesday, August 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10ae6291-009f-4e0e-97ea-d206beda8a4d' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da527e923-da92-4d20-9300-d4f2a947e332' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dae15d54b-7c98-4cbf-8906-3894fce74f8e' aria-hidden='true' aria-label='Share City Council Wednesday, August 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5565084e-50ec-4216-ae75-d3c1cf8c5149' aria-hidden='true' aria-label='Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9258226c-36fd-4cb7-b855-ecda307f6c20' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 04, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' aria-hidden='true' aria-label='Share City Council Wednesday, September 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8209cf9f-eba7-42ad-914f-6d9673b994df' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D15045d75-9820-4cf0-b265-cad62c7f5b3f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De0ce2087-2dd2-407a-8f3b-3253bc2aa944' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D60f32882-0e46-4dd5-9fe2-6fd9b88547c5' aria-hidden='true' aria-label='Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc7507766-a2c6-4a6b-8c5a-00b9b098d90c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, September 16, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 16, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D55f50adf-c3f7-4676-a708-62710a1aceae' aria-hidden='true' aria-label='Share Board of Health Monday, September 16, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db0b7668a-64e1-4271-a607-991a68855dc5' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 18, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 18, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3145eb2-e6de-4ae5-946f-637a1c291bc3' aria-hidden='true' aria-label='Share City Council Wednesday, September 18, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D40af4304-2061-472b-a4e5-3de677482ea8' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D77c4478f-0aff-4184-8da5-1e1a67ddade3' aria-hidden='true' aria-label='Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 01, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df8995ccf-86ce-4b30-964c-257ab9f4bb8c' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 02, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 02, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D534308ac-8f54-4e99-a7ed-5e14200e10e5' aria-hidden='true' aria-label='Share City Council Wednesday, October 02, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcb1815a8-edbc-4a26-a4be-51fada9d064b' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D020b7719-a8d7-44ef-9eb0-fa383e8a5db3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D29630604-1862-400a-ab4c-8dee737a21ad' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' aria-hidden='true' aria-label='Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1710403d-4622-4fd1-b04f-647e4a5a0a06' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 16, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 16, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da2eae498-343f-4085-b829-727d4a885c21' aria-hidden='true' aria-label='Share City Council Wednesday, October 16, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D054f0e31-0ee9-4046-8a7d-02848de2cc35' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dec8b1035-e9cc-46c7-b857-8b28f48834ef' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df14ed038-8584-4af2-8e3f-3255bb3fe92d' aria-hidden='true' aria-label='Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 30, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 30, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3efcc478-d9c4-4d92-a0f7-b92814759074' aria-hidden='true' aria-label='Share City Council Wednesday, October 30, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, November 04, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 04, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd0371028-c1e9-42c4-ba4b-53a489506757' aria-hidden='true' aria-label='Share Board of Health Monday, November 04, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4fbd6684-cad1-4207-a703-82cb54eb0fb9' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D102002dd-3a94-4e58-bdbb-9dd4453b9121' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbea244bd-87e5-4161-85d1-29f070625be3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 13, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 13, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8199af2b-2ef9-46e1-8f61-7b494c88c680' aria-hidden='true' aria-label='Share City Council Wednesday, November 13, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 14, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D674b9885-cbf4-442c-b6fd-d4fb6b91623c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, November 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8e3dd510-587d-48f4-b958-9eb35d3df1b0' aria-hidden='true' aria-label='Share Transit Commission Monday, November 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4b7a582f-5455-4a32-b810-67fa2e98d0a2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West'>Champlain Room, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19a67ea4-2205-4413-83c6-cb5fd95e8ca3' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, November 25, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046bf135-3af9-4226-9f0e-16d643f95bcf' aria-hidden='true' aria-label='Share Audit Committee Monday, November 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c32fa41-8130-4b47-97bc-92a96925e65d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 27, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 27, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D20b160a8-7484-4d2d-ad5b-d9b941c66d48' aria-hidden='true' aria-label='Share City Council Wednesday, November 27, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D681c0a84-aab5-4449-8f5a-c974713190ca' aria-hidden='true' aria-label='Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, December 02, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 02, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' aria-hidden='true' aria-label='Share Board of Health Monday, December 02, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D6497d250-c798-46af-a95e-79704e754d14' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10700da8-db1f-4761-9160-bb2cfeefb063' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, December 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5d97860d-1141-4f1b-ae54-1bcd1f753030' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dfe04c767-9a78-48a3-8f4d-aee0e682e1de' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, December 11, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, December 11, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5a93081f-f432-4b19-bf3d-6f1c33750c31' aria-hidden='true' aria-label='Share City Council Wednesday, December 11, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>

                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2521)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2023'>
                                                            
                                                            2023&nbsp;(296)
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(292)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(261)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(212)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(233)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(169)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>63</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>7</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>118</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>11</span><span class='Year Year2023'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>37</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>62</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>9</span><span class='Year Year2023'>7</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2023'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>99</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>247</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>29</span><span class='Year Year2023'>27</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Manager+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">City Manager Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Manager Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>26</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>25</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>27</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>86</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Community Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2023'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>17</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span><span class='Year Year2023'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Emergency+Preparedness+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">Emergency Preparedness and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Emergency Preparedness and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Corporate+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Finance and Corporate Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Corporate Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>112</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=General+Manager+of+Planning%2c+Real+Estate+and+Economic+Development+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">General Manager of Planning, Real Estate and Economic Development Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="General Manager of Planning, Real Estate and Economic Development Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Audit+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Audit Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Audit Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Corporate+Services+and+Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Finance and Corporate Services and Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Corporate Services and Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transit+Commission+and+Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Joint Transit Commission and Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transit Commission and Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>131</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>21</span><span class='Year Year2023'>19</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList53'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board+-+Special+Meeting" id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse53">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board - Special Meeting&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2015'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse53" aria-labelledby="MeetingTypeList53" data-toggle-id=".collapse53">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board - Special Meeting">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList54'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse54">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>106</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>12</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse54" aria-labelledby="MeetingTypeList54" data-toggle-id=".collapse54">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList55'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse55">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse55" aria-labelledby="MeetingTypeList55" data-toggle-id=".collapse55">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList56'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse56">
                                                    <span class="MeetingTypeNameText">Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>23</span><span class='Year Year2023'>23</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse56" aria-labelledby="MeetingTypeList56" data-toggle-id=".collapse56">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList57'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse57">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>208</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>29</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse57" aria-labelledby="MeetingTypeList57" data-toggle-id=".collapse57">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList58'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse58">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2017'>1</span><span class='Year Year2018'>2</span><span class='Year Year2019'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse58" aria-labelledby="MeetingTypeList58" data-toggle-id=".collapse58">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList59'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse59">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span><span class='Year Year2023'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse59" aria-labelledby="MeetingTypeList59" data-toggle-id=".collapse59">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList60'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse60">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2016'>4</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse60" aria-labelledby="MeetingTypeList60" data-toggle-id=".collapse60">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList61'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse61">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2016'>1</span><span class='Year Year2017'>4</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse61" aria-labelledby="MeetingTypeList61" data-toggle-id=".collapse61">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList62'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Special+Joint+Meeting+of+the+Planning+Committee+and+the+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse62">
                                                    <span class="MeetingTypeNameText">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse62" aria-labelledby="MeetingTypeList62" data-toggle-id=".collapse62">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList63'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse63">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse63" aria-labelledby="MeetingTypeList63" data-toggle-id=".collapse63">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList64'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse64">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>109</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse64" aria-labelledby="MeetingTypeList64" data-toggle-id=".collapse64">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList65'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse65">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>107</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>13</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse65" aria-labelledby="MeetingTypeList65" data-toggle-id=".collapse65">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>

    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>

        var mincount = 20;
        var maxcount = 40;
        var lastScrollTop = 0;
        var isReachMaxRecord = false;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();

            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    var scrollTop = $(window).scrollTop();

                    if (scrollTop > lastScrollTop & !isReachMaxRecord) {
                        $('#masterPageHeader').css("overflow-y", "hidden");
                        document.getElementById(btnShowMoreId).click();
                        //comment out fake lazy loading code
                        //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                        //mincount = mincount + 20;
                        //maxcount = maxcount + 20;
                    }
                    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }

            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();
                }
                else {
                    mt.show();
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded" + SelectedYear) && !container.hasClass("Loading" + SelectedYear)) {
                container.addClass("Loading" + SelectedYear);

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered" + SelectedYear);
                            SelectYearOption();
                        }

                        container.addClass("Loaded" + SelectedYear);
                        container.removeClass("Loading" + SelectedYear);
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered" + SelectedYear)) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered" + SelectedYear);
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });

        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = window.location.href;
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">
        function postbackButtonClick() {
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var meetingType = [];
            $(".MeetingTypeListbox * .ss-value-text").each(function () {
                 meetingType.push($(this).text());
            });

            setCookie("MeetingTypeFilter", meetingType.join("|"));

            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            

            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();

            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();

            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();

                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }

    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            var expanded = getParameterByName("Expanded");

            if (expanded) {
                $(".MeetingTypeNameText").each(function(i,v){
                    if (expanded == v.innerText.trim()) {
                        v.click();
                    }
                });
            }

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);

            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }

            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
            RetrieveFilterOptions();
        });

        function getParameterByName(name) {
            var url = window.location.href
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'
            };

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }

        function loadCalendarMeetings() {
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();

            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: {
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    }
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");

                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300);
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });

                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");

        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);

            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();

        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }

                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus();
                        }, 100);
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict');
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType');
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate');
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem');
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict');
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });

            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });
        function closeDateRangeFilter()
        {
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();
            closeDateRangeFilter();
        });


    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();

                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }

                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){

            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {

                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }

               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();

                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);


        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/


        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();

        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            SaveFilterOptions();
            $("#searchTableTemp").hide();
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            var filterByMeetingDocumentTypes = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".chkMeetingDocuments").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocumentTypes += $(this).val() + ",";
                }
            });

            $(".chkDocumentTypes").each(function () {
                if ($(this).is(":checked")) {
                    filterByExtensions += $(this).val() + ",";
                }
            });

            if ($("#hdnIsLanguageFilterOn").val() == "true") {
                $("#languageFilterDv").show();
                $(".chkLanguage").each(function () {
                    if ($(this).is(":checked")) {
                        filterByLanguage += $(this).val() + ",";
                    }
                });
            }
            else {
                $("#languageFilterDv").hide();
                $(".chkLanguage").each(function () {
                    filterByLanguage += $(this).val() + ",";
                });
            }

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "bSort": false,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                        $("#searchTableTemp").show();
                        $("#searchTable_info").closest("#searchTable_wrapper").find("#searchTableTemp").remove();
                        $("#searchTable_info").parent().after($("#searchTableTemp")[0].outerHTML);
                        $("#searchTableTemp").hide();

                        if (!$("#filter-options").is(":visible")) {
                            $("#filter-options").show();
                            //  $("#filter-meeting-collapse").click();
                            // removed condition for filter default behaviour
                        }
                        $(".srch-grp-table:last").css("border-bottom", "1px solid darkgray");

                        if ($("#searchTable tr td:first").hasClass("dataTables_empty")) {
                            $("#searchTable_wrapper #searchTableTemp").hide();
                        }
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });

                        aoData.push({ "name": "filterByMeetingDocumentTypes", "value": filterByMeetingDocumentTypes });
                        aoData.push({ "name": "filterByExtensions", "value": filterByExtensions });
                        aoData.push({ "name": "filterByLanguage", "value": filterByLanguage });
                        aoData.push({ "name": "includeConflicts", "value": $("#chkConflicts").prop("checked") });
                        aoData.push({ "name": "includeComments", "value": $("#chkComments").prop("checked") });
                    },

                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            return false;
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                }
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
                else if (event.keyCode == 13) {
                    event.preventDefault(); // to fix the issue occuring on select/unselect checkbox and hiting enter will refresh the page(site)
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });

        function onFilterMeetingDocument(ele) {
            if ($("#filter-meeting-docment").hasClass("show")) {
                $("#filter-meeting-collapse").removeClass("fa fa-caret-down");
                $("#filter-meeting-collapse").addClass("fa fa-caret-right");
            }
            else {

                $("#filter-meeting-collapse").removeClass("fa fa-caret-right");
                $("#filter-meeting-collapse").addClass("fa fa-caret-down");
            }
        }

        function SaveFilterOptions() {
            var filterByMeetingDocument = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".common-filter").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocument += $(this).val() + ",";
                }
            });

            $(".chkLanguage").each(function () {
                if ($(this).is(":checked")) {
                    filterByLanguage += $(this).val().replace(".", "") + ",";
                }
            });

            var filterCriteria = { filterByMeetingDocument, filterByLanguage };
            deleteCookie("MeetingFilterOptions");
            setCookie("MeetingFilterOptions", JSON.stringify(filterCriteria));
            //sessionStorage.removeItem("MeetingFilterOptions");
            //sessionStorage.setItem("MeetingFilterOptions", JSON.stringify(filterCriteria));
            $("#dvSuccessMessage").show();
            $("#dvSuccessMessage").fadeOut(3000);
            return false;
        }

        function RetrieveFilterOptions() {
            var allFilterOptions = getCookie("MeetingFilterOptions");
            //var allFilterOptions = sessionStorage.getItem("MeetingFilterOptions");
            if (typeof allFilterOptions != "undefined" && allFilterOptions != null && allFilterOptions != "") {
                allFilterOptions = JSON.parse(allFilterOptions)
                var meetingDocumentFilter = allFilterOptions.filterByMeetingDocument;
                meetingDocumentFilter = meetingDocumentFilter.split(',');
                for (var i = 0; i < meetingDocumentFilter.length; i++) {
                    var meetingDocumentOptionValue = meetingDocumentFilter[i];
                    $(".common-filter").each(function () {
                        if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });

                }
                var languageFilter = allFilterOptions.filterByLanguage;
                languageFilter = languageFilter.split(',');
                for (var i = 0; i < languageFilter.length; i++) {
                    var languageOptionValue = languageFilter[i];
                    $(".chkLanguage").each(function () {
                        if ($(this).val().replace("0,", "") == languageOptionValue) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });
                }

            }
            else {
                if ($("#hdnMeetingDocumentFilter").val() != "") {
                    var meetingDocumentFilter = $("#hdnMeetingDocumentFilter").val();
                    meetingDocumentFilter = meetingDocumentFilter.split(',');
                    for (var i = 0; i < meetingDocumentFilter.length; i++) {
                        var meetingDocumentOptionValue = meetingDocumentFilter[i];
                        if (meetingDocumentOptionValue != "") {
                            $(".common-filter").each(function () {
                                if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnDocumentTypeFilter").val() != "") {
                    var documentTypeFilter = $("#hdnDocumentTypeFilter").val();
                    documentTypeFilter = documentTypeFilter.split(',');
                    for (var i = 0; i < documentTypeFilter.length; i++) {
                        var documentTypeOptionValue = documentTypeFilter[i];
                        if (documentTypeOptionValue != "") {
                            $(".chkDocumentTypes").each(function () {
                                var chkValue = $(this).val().toLowerCase();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue == documentTypeOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnLanguageFilter").val() != "") {
                    var languageFilter = $("#hdnLanguageFilter").val();
                    languageFilter = languageFilter.split(',');
                    for (var i = 0; i < languageFilter.length; i++) {
                        var languageOptionValue = languageFilter[i];
                        if (languageOptionValue != "") {
                            $(".chkLanguage").each(function () {
                                var chkValue = $(this).val();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue.indexOf(languageOptionValue) != -1) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
            }
        }

        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });

            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {


                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {

                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });

                $("#btnNextMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }

                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$hdnMeetingDocumentFilter" id="hdnMeetingDocumentFilter" value="agenda,AgendaCover,Addendum,Merged,PostAgenda,PostMinutes,AdditionalDocuments,MergedCover,PublicComments,Conflicts,PublicComments" />
    <input type="hidden" name="ctl00$MainContent$hdnDocumentTypeFilter" id="hdnDocumentTypeFilter" value="html,pdf" />
    <input type="hidden" name="ctl00$MainContent$hdnLanguageFilter" id="hdnLanguageFilter" value="9,12" />
    <input type="hidden" name="ctl00$MainContent$hdnIsLanguageFilterOn" id="hdnIsLanguageFilterOn" value="true" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50301700</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Mon, 01 Jan 2024 04:42:37 GMT
recorded_with: VCR 6.1.0
