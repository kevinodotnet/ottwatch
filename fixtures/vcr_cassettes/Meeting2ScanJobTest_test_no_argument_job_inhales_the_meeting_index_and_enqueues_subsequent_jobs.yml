---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/8.5
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Tue, 30 Aug 2022 19:21:35 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=7sdLsP-6aQOfzQENdG68fizcss0Nfv6ByddRS2mIdfU1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=zvgDRt2NFldz_2Ud7qn50GD6yurLLtC8CBMDIeaXX0c1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="fzV9aveGKMg0+b6hUP+PEyH4xxhlWtd40ZhsRFOWnk9SISTogGg92tircFO7jJUhyxwISXgj2tMf7NpdrqrfNpuswD2kuGBX/LhXzCFAuvGsBCJ3q2ZbwLSrbQbYJccOu4xJ/MJVageLT3kZWaLZxHnl8qakvc36UkY2hPD93+dh2XdxaOg7EX/7RZJJkzS1EShQcII+PNKtO+kOcEzExRPHXmw/JYMmESCQZIQ5jCShatGpvlKGZhl5Ayc1DWYJp94XGTGA6JQhy0lhHOyrrok3Q0JJxwbYerOT4BYegZaq7NFwSLQ15SerM8Wt2yZ+Ahi9aT0dbIJXqRqwqmg3t4BatflKOu55jSc6sDVGka3kBawG/fOssNK82C9ZnC9j+ZV2oTmDNDV9ulagi1+hGtikUPfJcTm3t1ODT/WsKoEfpKVBnqUQ1A4E5gMGWlBX02DC5qskqN2CvEytLiz1DO8YXzmTcx4nQqtzbAQ5BrOdwTUhJV1iyvXPCC5PRXl6LO6uqWx62k4AJbRxqgGOcVeFAPjGzoBVPVBWtXL9ULGa5rryNk0n2s7M8DUfhqwkxXiPV2KOTVK8obwVImgvZnnZPPqiymlYFw5UZVpu3W4h4+JCRmcTLXEki5ty/K/RsVkgJ71/Cx09ESgulFjIy7dyWYHzTRzjhRdWXzF8yDZe09yeDZ2legqycW8aX2xu6qUUuRRSvKp9hU2C7j8AFzplmGCv9h9DRPE3I5kiuHNIVsTD3VyudUNUgpJCRdtafCaf4eHkJFk8bEktD1qVOtWwo83Gi2iNIfxULGyhsyZi4eT6uO+40B+EjKmmB1w4pziLbq+w1RfDq6NM+j9227m2L5kzsss2PWew+Na44l0ypYY8TSR3drZuLWR0WLHWR7JtUetGECF7BPnGUMcr+l9GJlZ9TA4HqBu2NhdnaQfBjewRJ5q4fUx3cv3UN/JJSTVjUmOsUcNjD8Xca4xmo759/kdFydCeKKFi/HnKifQ2m/0yGtjM31aXZCExucs4BD50YJbPem0H9Z/EVnYmiSK0U9kIeTvUR4IwP1u6imqiIhIJjTmdHjG0oGhDxtQL9fs93N8LjM6LHLy9+Ec+kki9IfGGVjoePnWgBO4j8wh5bvZ8pBZM0ysIz9OHIBzjQutdhCThmLnH+IX/0CTxqhtc/WzEUy/pyEY6jGmT8eEvjpeQ5lyDUw1gjCOmCPCzmysk3dnbxTUivvveygwj6EPfYwy1yf0E7hDQOQprQ2hoK2gKEZ1hIXpMqpFWNzY/biwVyed/F9MLyFMiqIlxk+XINAf2LxZgb1OeobDW4zqpVysb9Rpz4gE5YPerbaSOYK6GmfqXXhDJkfVSjq6Amscrnz8PwoHWDoJSmofLtqXxBhAPMYDE79HtbSCi2ThVv/qc077vuEZj8ulWGLcZGo83NirUzOB4u6ZBhHSLfI3ov3FgkwsRK6wEC8/MrvVN5vjn/hiPLWLbHL/87Dc23uJYgtQIBiycmmmiQq85BwbTDoJlzZ2vyY5gMz7SrtSIIQ1bObmFPG+HutvzEBP4BeijcHP1CudYJTYLaZGggMiSU/fMeQsGNjobdWA8H8fJd8/En6GAx6Q7NfN8qLSdF3PQeVaa7LOlx2zyeo5e0W6PXQIP1buWK7aHV8XwfV1kcIjRcEDFTRTKh+I4ZH2N/0mDTqoi+B6C2ylAirzBdUKUuXFboLxv41z7kiD4SgB3dpwjTkO9m4oUiS4MtE7vWg38pRBzycA9BtOqknNEQ4koc2OUnPeOGnhulZLsnP/bEbC13Ucm/stTZkyu7wql/KXjQyvVLkMPZR8kLxvdID8So5ROEBXabmzi3VlpxlV310YPwfISAOOZNq74B+4vn2Hima8GF0OZDQ8f+dihWYcCgaE43oAEFEdWBGxDKScqjx5mDuaIPimOYgPQdYiQeWJ5TSCAkebPWwFDyWwB0Q021Xsjb5PY6c0fCdwBkZD1t+vdiWzfFzN8/SivWGoO7Lq9aX0jai5C2vf1aeea7HsIrClUOTKcGNzcwwf+fs/0dhz92zRkZhud2fTuP68rXqchgOpS1TPq29L/w3+MFHaxA/yeHAqALysWcQGGHq0dVI1M12/GpdV3kFsJuXzDzatiK9WiVRaua9fuucHwGB2YH1rIvZ48pfEtdk+nTMdcxBe1ToD7B2CIpxILWzxTVEsld8ro1A1mkrT1jDcX0QHTuHktfZLwYh857hULcjpIs48K+Wik7cZjKr34a+ex3DI4R6AiQ8NqmUTC0f2FaUNZyCtN4wNSK2hn0Og5UOpezRhC89knPaDjQQmF+ltMM0G8aLUavh8ty0k8w3rkYUsq7VfW3JFsnXGH87IyOeIb2SIi4CbhgpWJ+NogAWBF2u84xi7pa5H4mYDL4duIympNghI1y1xB73CTCeEHqs34sq5uKUKZdDgJdQ3uzjEKsim0bbB3nDHJqlVO7l1HsP40jy0pSVTMZfe0UfBLxKEmN/iS8X+Bu18pEo3G+1lpLwFceGnxhp/Q6sJdzRqPyhunNwDZzv+eVBNISd5OZKuYQ4nd3Pu2KP5Wp6FbusPVsZ1NOvIFl5zKaTnZ4AxDPf1ki0xfKye1FQZ2R+zR705qKnW1lSgZeEvMrWUM7OfiUrAJ0lDRDdW7m016ZFacHFwqVw6P2g9ys65mgT3Ztn4I5HNl4b3k15wIpUe6lzqAV/rmDGal0akRSpsZDnndZdsO04ArCBvQp9JtKSFnKuIyLQG9cbyCMyPyvV/5rpIQBJZc0PgsZpFdGEKVQMIWDtrfmHRYpU6YrSG2Fq5qJxLL2Tw45ZvMiyHB6dwiotGy05bfLv9uyKDVRLIotNgyJ7ML40xtyyW6v3xGSrYYlEZLcWkFplh2AFZi2jvzO+JdMIh9qtAV+CCp6qY6LnsaYydu550KdNsGF4P0jMVTKobobRo5019cWWeGKIzR0KSTLMejSElhKMtJSW/zlgRTAWUYMPTI8cWAHLI99m+zXBphP2MTB4zOlCeg8Qk7rxnGhjod93hiJJ8YHA4BZYs32ziSSVRXJimrM9EWaCCdtTgXNeWaR54mEtJo+NrW6jzGlCeeff8jvlmHJwGjL/RyCWIIhnw04harLfWFE4zHrxNkW60bvUdGP+P/hGy6Ii+d8MZDGWgb5JvmAyuC6DO1iceQ6QCxgscSyoa6gcHDPYtAUOW3zERiqytNmxIoCOszDBSX8RADAPB9+H5/egxeYWPpeeigJdzkmfsmorxeJqdO+uAnthkpn5ev6tPW4n96Z8vOJW6gQSzdUVt0KhVYSoET35rwDBgCyfTxKc7Isa7D/uOmFG7+mHpNRV+7uOIrmKXp7fKnnta2iv6IpPS9n9Cfdn+nPMf5wCQhQw/U3o7RKmDGbCZ8QFwWl+G4Y14mvAPhhr8PDD2uVDR0kfzl8hKDkKFKyuAJK3oV3idFPs4w8+lvtQrCqP3Y5xSXYvWuHAeZ0hN4luTmVBdY8Ykxgsna7wA2P0ym5Rj2DvQjEtenaZNR4ONfD7Gpdtqso5kqDkJRnnlnHHbIBTP/zRuMpDxbKTt0W07p5TwNAwi3vjgWkwqrxtE+o/Sd2tWsDivMNEr8FkWm+pjqZhEERI++ladLRWDyyGjw56Li8cH1ucsElgMO5UyVTjAJdm5QMXyIqIOwX5NRpoiJwC0Bo5f3epbidXAirT3nszlDjhtjrEqNk0N3JgF+vO6fw84uyMPB9gs5AJUbKxbl2Gw30v0BnEWgvDYElHzxFPVyNEdIQ8PO7icA2KKi7KMPnfk7QaaDWGYfVTvghZ9ggRtnmxH4f7oD4EnGQdOKY7EGiBogNkD30gSfhBrSZ8rIQBHEO9nq7P2xTYyBmffxKI9Ol1UDwKrjIHd7wx4/LAWQgRXHhFOKECg35U9jVOiRCvzX4NkmfQTkx0kMGPU8W+HqQmIp7o3lYJyxOTtgTc51uN89ED7fS8/WzyyR2t8GJOF4p1/eB0EVxRa+3jCLWpE0vFdzqpKUTNEA9nkEts9Xn4j538yrmDDdWRTDSIF1Idh4yMKq83YV7+z68ODeNBiSGBnFe/gdrJKo670uy0fHAmm6Pnmqgpsfeu9t/OmID4oUBJQ616rnkcoXnm0R8Q1kvhNAx8ZBMUUqaKeg/LndujsjM5Dc/RPlc9yLjC4OtECGanjtDOclRdmnRKG4i43Afjj2Fg3AUXls3XgB8ZVUnmAPppT5lB+EpXP6EB44A/ULy44QWufJSDSV28pKYdOnp33yVTQm6mR9kVL8TOAIneZ1ql7b1tZsI/hclcNfulPuDvk68iRNixqcwQQSQ30c3qGx+qN/4ebXiswLWfl+fqCgaS8vQU65zTRK50OEDkJo5WwRJDhoSzINKlHw7EjhcspGCdZhHVvpqrwmpVAndhOT2hZYYURPEoT18L6+5u2Gzifx5P+yGVm1pH0hE5WN9Kk9muvO/X+AofcHAcOGwAqAoPeBqpoZPTQmF+u3GKqvfDA0tXK6k6VPeM6Lx+tznaSL50mvT08o79tVhvOvqZi8Q3IENh/EpyByiBz3Z7Qe9hDGtfDDn1XDECzhZu9yElopxNwtPUWYWlxeXsVt7q3xkhxKAKdnQKtznxgrjpJSHNqgKLB9alfLDaNqJA7gk0gZSJLo5v5KdgkUVL1Q+XCjACf6+VVANkqDBqdecKIc61nmd8mVadGW6+qkpghymmtkAwC+GPLY7HiRoUg0VPLiie8oImavjTfG4RDk9GdZrcixrqxT0c1nWXzWz5tVPvqATrFt3hb04TF/5ghfrxZcP3E+a5DQKwTAV8p2h3lsT9Q31plZlmRXC7cm4rl9jxi+VmvVYlmxJIBPYd3Svn5rb+r4TiAOIMl4Faw+XhVGSnsV7Tf/Y6gl4SpMbZW7+hnOg+T86cI+25iBJ2sy5zDKDD60tMEBnr8/sxjBYoS5cwtICF3DH8M+EVY+eTXUdo5iTGwP8tJ7kiKJqoxthQzUcjoacRgpurdF7P3UrlaXwo5DAGOMPDgfIJ6PEkNZG/4hxTZqYa65gHvkKk37JVJgaUwzqwvG1lVlIBlIN9QswAa0nEmvm+14Vvw0DYrGe+b3kg0A+6xH4t5gQe1m+CazYUwU5q2RHPIwQXbm6+lKUeN0c96Qe9fcwuZFcrITt7WfJJEDMhKLYTqdUhe1sHi3YSXZZS1QKbaaMwDb3lccRDbKXnSo3PPXuH6iNOpPfOds65w/HC9Xe/0SWI/148gHtrrn4AeckDbz0/XaFiMTACeryHAu46gReBAJMhTYb6kC8qvUoWWpZy6ne8Sgu479FxefO9QvV67SV4kxP9djHSmgcJr9TXS7jowmsUHth3fvxk/HZpgJyTBjTOCnC7AQgXt7gv1dlbJS6aR/aGwtiji2vwJoo95932rTXfyvRrzwLvJGVxgjNoJLGG7G85j/tXudURAqIu2vJOwCvPMmTerx2OBLcvFNHODiLMBKME7GuRy/ebAuZq7o0TMWAzYzA9xVKX6LqunYQLQ/QWmlDT1/Z8Wabm8erasYOuoBO2bzUsHFl/4UvuAqniplGWXTAQs8Y12fcJ0IgkQa1cKwSx2+EKyx5Q3acoRDLh0yGaS856o6hpyRrc5WWBcImAOR/tz8607I2Y0jtTWnfIwlrvuE+dZ9F8VhfvcOoK0yCqdspxNvjQDa/e05CpyoUqkB32nidgNlhZd2UkscS+x2lhop7SwPg1+UrxfUYMY6ac/WxpJLzEV4M2weR6Wped+/5WcvKMN34uxaShpWxHYMH4fc5uHY0vtuZvG/ysaFRoIJ3WhfoN60TmsGbpfBFDphHG6vQWDI6Wcu2sPnOz0sUdAf7YPvGMeyOH3NYRyc9qDjxjwyBRrkiQDoe4mtuw19IB+gdwQ3P3anI2t5+MU3wpVidyWzqbuYq0vm8w9mDdMevZvv/TrJ4xhiVNeJRDFosx2ShrTxMdpOEAX2u+rEhB27lWjB8nl3R2AT8+FqC7a7+XDKjKUxXhGbzB4VwwhsCQLWKy4D7apx+AyGTtyZrREtDIhq/owDug2ZTX6UQsF+GUUkGMQ5ehUhjvV/cBrWpz1XOpd48OMsHh868IqV5hveSvW2/yrRdJQ+5/+n1VLE71nudX3z7+2/lbrOBUq9RSpm9J7PUWrJ452valOul9SatN6b0yxbgcHJkqrve43IlWKlExGQiAPPIpdLmR7iS+l9dAruif9SXltNo6WKEfqg8Wzh++C085xe7LyfbAr9XokwxLUXx6xVc6ovNMIfrmvjpxoZ8+KltajO//0JXF5ZjpKNRez7F9EyhQB2ESp+zSsfbkTt6s12HWAFM+hy6Rq/43lUWp0tvYKYUpchcuFv/KB84aMUyvKw7urUApUioaxbOKPwJ+d/x71KkMXJuEz6im0QJ+vwXkWMQTrWA+I77RAP5LlpTEFME44qz9YpjDOZ/tVdC9GwSTCMlST7fXkQbhgG03hbDiUFmSYqt39qNDWNVNuTL5y8J8g8NUphheMZf++/sqghOtYhqjjXBoj5nyiJMFMreqZe2j57QPTaJkuea/I+ttb6xZIXDq8roSUWKOEg1TkgPEnHA6rwMKsQy7W6aQMZHJ7Js52WGlZNeooIKyPvWYzWDE3Q7Hhhd6rty+sdukQ2JYXWZX0mdkYodddgQgzjMQyyEgBMOEBy+kgLQfPXauC4H2VTytbGovGcfozGu2slPy4TD41qidSG8loo3Vuni3RmfG0Inor2JN5esOByVJiOHHVRuuxV+ZBZo/5Wuh1dLXchfiD6gtHbyFaVzu9zTueRiABSxTGQB3PHredMPioCFKlGTvoOd6dvr5D10iwAnS7Z7kzcFEKtGzj2OPoDnCmOiuP3ejAhmLTSWxT7H6bYqywuo1HMv/JD/AexNlyqJyXUIOmZKHrCpUkj6g2hjsDtspA8fFv5euUyh5tynvt1bUWpUIY+VYnwiAh3WUBb3qhSPb7ZRGAtL9uftTfEuCov/K5pTNjOO1eLDtC/inFDnonZzHUcgjPb6TnOEXHRb5wpy2ttIuBuW1qlZdO8DdV4KeCbr5GgO4arM7xCdtHRBLhOLNnMWvgMLwynADlnmcaY9QPSE6GAnj2biPCDWOG6EdwN9yRB3vs8AB3s4pN5I4JaufDhpxFjpBSGV6ilW20d5o+qACECA3uRL9/SXisr3WPSJjjnxcFN1UD850wQ1csdwbFmVwQO1mPeForNSUVmfYeD22Uv633iD14xZO4pE1y8O7B6Bz3HU3MlSGxAEiAdWNidpDsqVRcRLzpPPN6VADtYzhqiMbC07+vEgcWirORm0QRyQbfcjgnD0+zw/Z+UJGucS6YG3Fal9eetSDWoqFa1/048NxMaPiZApbI3nZJObY8EE0ixAr5hGe/D5uM+1NlGSD1zQEfH+EddoBYOcRBi8mug8wiv8fD3NOQmL/kqEb6RNsI2gJxI9dwP047mjWCY+JhPYcP8N9ziFj4C7wNGMBdJO6elEeUrsDDCwnzlrkVYKJDyldJwykvKJJSKEYnGHKMGg15uBw4bAeR/o9d7a7c8/Mj5f2GZqKrH8E7Io1Fd47pcNesLzZaw+IrzFU/6rIBUI1/vO4Dc7gGP4OmsXVBiAN8kJoqqTegp3rsAxgRBpv8FzN360jtILKLxhiYy0KdojXBL3SVXsPJlb0GB+Qhar78SxBgrHCfo4HTX7FQHa6f8pNIa96yglICHM0p1W7b5OGAW8aj/DbC/JMJ3pZR+XvjcYFMCUK+iQ5c4jix98C4hesCEpicrtRtn2LeJqsBsLHXK9s1RMVS265QlnII/sRy6UoEZUsQymxLA2P9oydJHxE+u+gFVFbFa0iijSWj2+L3RZZFdS2EW4PTzXTPBItTdsFxiB3roffYhMTcvw+dLVW+PomBJlxyEC+NgQnZF4jL9etbE0/LZX8tM0eGHlgQ3xarN6LZFi0jcJOGu9ZUK3ej8hj1214oM5+6cZcqm7xbM+yOq4+nnD9qj18r93HWg8uU5eiOSQ/x9GxKPr1N7eWQj9n0uuMf261lDWIu1Bn2s1wjmxC9xL0n9oiIWP9EOTGqX8cUDullTdl4GZcVy/XK+kffWZxfqJ4rzgmTAmVgG2AqBnJlvUt19cqtX7CLhg9Twu4DRWNcbWBa9HfHVuYWVdzH5yT1T4WwnFeTids/TWqYntVXB0z/WcRtU4jhgyFUz9p9KUl3ZZ1XtDKnm1GF/Fmc/02bql12Icnjbz9DWXRpFdsLtiZ4v46Btcjs1BmkSUMlDex4RiN5dIX0iT+y0PLnz4A/Q5T/siqAxPYHsfS8/PouN0jSfGnQGz84nVg0uVmemQJ4FrPkDj1i3IhkwV9jWcFALq7HVXRp0etk/DUOxGva0MSymygpgv3DDIDE8ePWJtx1Gz2ZcRIX5uvsFtxt9iofOmNkWKsj5HO94eplq62I3ScGZ0HRuoBq5g4uvKL4jy1xhar92P31TZK+A5eToPBFjBZ6dh25qUSj7qn4beLDy+fMA5qTpbnHsnizg+499H6LeoAqUYNgUa1LqS2YZj6dXknGWPQNebt9Dlw1jqf8ftAccfJ1a75t5CrxiFqVKdPMaUGFnIku6rkOP727LelZmAIWe8vsdJdBOLtHCRee0lBejWblGST325YEQa3nys1K/m12q9/Pw+gtNIycB4w5JmE9OWj8CCNj1u5A69Tnn62YPdWIeLRWlIMtczdYQvySKnMzGbn7rhbE/no7kgyTVU6yE9dK9w5jSJPTCkmT/KtXViPnVky2p5+IZbxgsxWZU6VdAXsft3i4LLAPR2e+rGcd4ktQkKViRiuaC+LFq0tKpTboLrNwK8LN1ftzDTW3r+7TkVEdN6hF+nxHRbDbfZ7iq19+EAXKCDDwc1ZZEfxYeeqNqM9bZNvITIH/24HjMMwXf1shLpDgtt44Ipo33tsgqrDbip+++g7W7BsZ3uKjBau0Gf13yb7246M4nKh+qOuY9KkdbuNA0/F2kl2hXiFLiL0yZzL09x+5EUjrY3Cjx62ZQ+jz4+HmhV1P9N1b27a+dNaU2CT2VC50JUe4wRBiqXKpY6PTVk6TUUnMnE+2xHdkzwzkJhwJxM9vdn4W3ozkH/5yR35ZrSJtH2btYYkU/5jjj4k/NWUB12vvysWpKME4gNVCwoZaX8QZBnExKBCRW7Ty670yiO/IM86RCo9ap1jv6/QaW3Oox8OazgxePsHFP4J/1Ko11Ga/wfn8t6zeji6srWEUsNu8nVR1xfVIULmg/u4x55QMHFkpnxAvfRbfIcB58dXwCTiWy5GO+6ZUreo++ZSs6S8JEwxEZZK50WG7Gdhz3HKPUP2TnrLSy8yeBDbkTQO/LMS/M6UKavdDNNj8GZZcE7VCVGL6oP0bYfrsxA3zPsGl9G9b7IzNYEaLvmL+gXoLrgi22PxJYszbhZFQfixvi7VdWF8wugx2Rncbn+hOMLngNK9hvSB8ufarALZjTxxUrgG6WSKJaY6PAf8MDptQj7YmogXdZzJoAG5tuLNNAJxRf87chFxCou3IP9apeVS8snUA8jgjoMz8aNc4Qy1GIKrNW9KDUSlwXB9WfXAMU/bhPaIdjjeoKiVDXA1IdtGn4jMBpVVL/NABppw6077zy8aAopQYMIbOJAb5CH7gM9ad9mFQVmfXyj03ZNQTCwBY2F5peGKbDgS4nM4HCa78VXLIVjgEg6IqLnoGKGQbgGEuBgXLrBDTkg/faUDfnFu1cgs1Szj7E93VOPdrkpGf/AgaIHpXFXAaZ1A+ped/4TY5QF/rWqoafrJbzahchiCvR8Z39UjCsP7ZngnIf4Upt6cU13OnPwORMlxazfQdplwCFiIuEITavzH6MmYDR15SyuunYjy1YhWxfsOaFJYCdaCpSTbut7eyxW2XhAYAh6tPPzLWcXNExg/+5OMWpvZZmkPGUSq6buoxounm9a36M6FvuSJJGsxZF9jfOYJtKLk0oqYOWFXTzfRnP9IJXfRl0XlOEl6Nyqnc7XOLd/UAHBR7zgPls5WAKjS5UbXwCo7vH/cIcaoi412Y26yKnWrhhFSPIxFRe+eF2i1H5yRsqPiJ6d4bNNa2UBj6thMXdNsx8J1eRbp8kl4k3Dub/ASl95zF/kY+NoetYYpIWenLTRWAr7PLE6CiMFxoYLMqeM4OTgh/YhjuBZt3rjc/jiWXxIegcJsRBgdOJcZNtkWsZVwJvESr7ZLB1FV82LTzizvOTEKvlpTY2Z8Uey57TnePcWkmULV6VlcibMGn57eZs/o9dD60pbC0WnUU0bEF+qmQaWwDThB6QxyJs6lEr51Ych4S8NRqMi81oSuOhCzw6IqIL4BvI+Q6i9AvfjUaM+ieoMoCRcM0chT+QQuwSVriDvGc+jB6E+L9bZT0GhwXBVNY2sZbsdxW3s5ikTdKAkZFxb89Hbs22D7M7GQUrVEnrwNYoZJ0ZO3KlM+TfgOuP5CxvIriQlmC5VsOefxTjLBTKFn4eAyNXKqqRXhlGwS0pR/UfIr9sWVTnhKn1Beb08ycprnyu47MSiX//2Y+uLV8E35dCfOit27Qy1OMySJd723rMCDOgeY65amomXiGN9MmM7ALoejrxp8/xq2qj9mizUlTztNn2EW++XzyhkiDcAUHjcKJLddSzpo5NczoA1z0LC1bNAAJ3swRxlPJE7oj4TrR7AenEvnlHTQMW9fFUAuwCKOC2VJiPN/KlWaxFaOQ2Bm3IG5fGDDPl7E87CTOScH+DdgB5yXSt52RfHjRVtUSJv/IDm4A6cX5jVlkHRepcwGbP5wV2aGA80TUmDNQ9+B3fSceLaws5+KlT0hlQSqMv3mygYux0t/0BpCriRlCEeIQWwTSiVTRdSbY+aXjfrklERJgCTf4sGz40h8q8fD+GqGMWfCJ1dmudYWCqX7mMki401IyH4kzwnaLvqw10+Ffsi5BY2jQKwyS6c3Rm2zi/TfC5VqQ7mihAJvKl6ENei/gOT3dlUgSEm6BY7vJe2QjmNtUZhTe7bP5MIvKWkPvGmYojWOs3AUYMK8RLxu7aepIsCjFOzxA8k2kvfrZUfAdwBYMAOG4DVehcfyDCClfO9e86kZY9G5WyukHfGSAC+SIWZnFJ46iq1u53xsqr3IlZWt5b2igo71lBcwgwflg8UxLjvkhKy84EMXSTtQcTJi2E/WfXUrIkuOGl+txgMzB0G/pT/DwfilRpf7QTGTIIPlUbwSxPzt7a6lG6KEK/Q0o3FyqrUtjhl02QVj40m0/wmS/FKXnEj4S2YzhBmcOgj0l1FSC6+q8yvoOKvoveCWIbaYrLR+qn/F4uiRfoaAbnEWfZOA4yOsD+9+9Pm7C+YG9hzk/5tBqYBNZ2RDk3YfC5qq+a6cu4M1kNIkAquA/1tDCTrvwPlW+tllgAja9AfDGDpSim+McEsXfGl27jFBQngqejdPv9LRdYQetdN0F0hzBw9tVhcvllUAT/HQgkONwG2bOAW3btWld01nv7lawTBL44H2L6Z9tmGA4Lo4PsVpQdtZftjdaeJXJ2CeuYMG6tfL/j8yzHkCrAR6iNIuOxmS4Rln7NAhhVbGrimC0HSPqP29HbeK8eCWSalwRUXqWysDW8+s3fslvaXhsdGXmre3iRf6TcBVLDv8EPr0GmwRTTb//5gJ83s76rLSY/XBpNUKFVyywYV4eFlg31nXxnXej/oX+9fKbsSxVQqY1CKSR1SeWI1KIKTEuC/dB3KMJ73a4jsk0eVjZmQdyyfoG88ga41EvV2wvFgcrV+t/1UcxVWQF5X2GTqIfXFpfeRInr2w2d/BbzUY2Tn88EMV5pRhtJDrvpdmHXE05vrSLpdPGoImtqasNUrRyHKY4x6qieIPOIC6RHOMO33X4m4BoE82k4S02RtSQxzx8pCHwv5GtBuq7c1czyBE54eJXwX77X09jUC6tuetFWNSgV7qz2JvyekuDDvY8u2cYHcWdSOjaCVur7BOcsiCaBTA/y6ivjm204MuTFnwuY/4GUCQS02pZkQtHbjSwP3gi1Ra361qFSluiGHBpmB0wbcNZ3JZcVgLRFDAnit/M3XsZ9paTwkfBoJA4VX/23X9P/i9lSdZE/DlKnnRIENUo67jhBY8wchCeb8Ur/aBX4RuTYa1sZpRhyJpRGdqKaXiMqiD7WH6f48uLcSh5ZG6xCSFgB+CSiQHaj9L2jlNgkOu11hLW1ld6fIEy56MT4IQ6XYekcmu9UHL95lTnqHccjOFBuFeHND7oFS9qGzkBX4/WrDo0iXuORj8oNUtIkzMxLp+p+RzbRucDAGvNjd2Q9366jIZMxcqzVtQ8MUq5mUUxdYZJJUyNJP0SMDGlRF7rR2bSLGt5Xl316LlEGGhcldC0G4+6oZ2vU7B2yA8GXmdOaUqMGSSYUAp8HImKf0qhyrd5uCWr4aC1R8dVc36nNFWJToQJ45fbXBKt5y2nnDlXd3QijU3O9rEd6Z69zENvfVFOfF2nb043WhjeGuuMq1NBR+2A6e3gVON/CBrltTd1PP+MtjaM5ryF57DArURNNux0r6QtrMqsZPBRpDl7qHCciWHWeCT5cnbIs6RPjEGxzamxqj0f1DHhk0ZfNyGkQDM60QdMYcZgUBDGpfEwsmOXU2VnWnh/ICFunL6IOkLUlh2Zu/SUC2MFWifPNOsfADpr2A7/tRraiR2y/YJU1IhuadwvhSjdp3z89w9au93dlzT/0PsZFdNSTVyTou1v/sAf5FZzS+AcNq4GzVnTpWxipcVJL8kUv8vO8GgOExrpSu3/XLxXxSJz3TjWvdMxyZ1NQytv9AVIXl830EEQz+zhyT277oN0tey/5S9CoUsFR7bHHIqZBC+UYQIR4R2sh5+41NgsbNRvd6TjePf+xVCGlm0px9LqXR+bVILb/VJBG4oa2t+z5fdZc1mZlS/NXw7R+aeM5mttmP7BPmiwJgk96UuZPJ4qA88cW89QgBilDtxoPb70/BDDNVNkCw9i04x2WVOOl6RZRObpSjSkCg9MkXQRPSq3uMMZC5wMu5UPCfImOFqHhFcmIWkrNq69fTySMEXsw2rzXOlUrC6+srqs0S+gwZWkg4Le2HrcbfTnH5OLCPe6CcXuAINdjK3ZR9yWLRD9r4hGLPPOowIu2zf6FBy6VKqBQ5bpr8Igp9CyuGc7nzKS7hKG9P/0AbUH7I3CVNdvXdVVc99+zE2+VJYbTr3LizOr4aEGa757WlGCKihSV2WL45ZkL0bMETDlVZu6fajawIt9XcwVCBshPTmC1t93Py2oF2f1PbT3oe4+K4afgV2Yxu4hsp4Ll1UuipTkx789Vmj5TmONOHHQTSwvWHBgqanjHrqs2Md5bTbg3y8mMjcwDY4pWBTAvGzeqIYlk1K06vwNOy38lpUPLgTvgRWxkxhd0lUD2SPyCJKXqysC+9tiwAebdgbP0icTGJMOuAYhNVUrGzl7t2DPssBeFLwY1G5xlSjHk6pDAIYFcl5YhH6hc5biQeXEC3X87F8JhEL3Z89yWq9JD1T/JFph/wbsVfofcnN1ugmM/2NcbtALL3mDgxBf0cCg+dnrq768msnCpKIBAb5is96Sp6yDAftX52JDtF/lkh0O0AA1Jt4J0XANqYmABOJEzw5cHozqDRt+V8RUB1MqvaoQ9l+Aqwzl/9tdKp4QJ6tmP77RH3R8O6SM0p52NtGdDYl6YCkR/fPpzncTeHWCwihUIMYv6u1NNOKWDDlW5b5Tba1U3ty9djzyu39LgIVhWjUEnLajAkeOPEJaOBZyS2RaAZh3nTGoXckXy9NKi2wHHWU2sbw1NcPngD+59LWFwmkISb96HwFX5EUZcQ0xnQe0pQs+PMSnRhjqoIZL/Rt80YJH+AcfP2K3OcUdO4mKvnmDaE8LAPuF7KhNC34iMdxH2htWCiQaZMblVY1wGrnOGRzZvzGMCC6+8ZMeEd+iw7PCJAxwoCYz+VzRBRiCj0snogQ7A/29DAUoIYBLxYXAy4/zgrSm9yyVCzlij2R8gLqVhDeZayG5jnXvVrdNP5+bcKklSKZ7mM41lv1SaxFOlUy7WNB3VTheDMjXnFryp2AXhG9WMdZQYcoLVxmr9G6gxhK7dZX9EQveVlfOOSlmZEsLEKbrAyr4C54qF1BsXqfIWpEvTwAC/UB2XLWPWxhneDwCXg6eQokit3cOBzYb/usNHFAZ97bL5mFZ7OBAlbAYy8Qi168CVqbu4aW//yT32D7YkfPsGyZth7M5D77WdX9hJL1BlYVlf9/hc67RRfDms4gJCoNowcwQM5wHRNRXx00+RM32QtTgWmu+PArWJdg8JTAycpF2/BFx8CEU8BO6IqKfjlZjU5uuRBdoBHkb31XjxStZ65sko+Rz+PAzpV2etX3IEl55E3JvQnLwZwkz215ZrhdmZcvA26F1pR+hclHTl2hf5cuqIGF4R+IkENnjt69vclkjeVm9pYLWwTnCWzwZ7va9PgFBBoqesKiGGAH60nRso0zat8xiYpC6XGH92U1Tq7Ho5uASKDS3gyVFDXfWaBRMrQmtP8imFN5Y1FLAwKPPyPy5muCHZ3BTqJMAobFwm+orJYQAplqc6vfY0PC5ZsdCbGTHgCUM4n7df8EMddbPPL3rpVjiMgAXeOjPysdC2Frq32qURRTEFEr0m+kZ3wNiygvqcGwd7Jb7Jj2IEUzMmf2EwoGBln1mZdBsAve7S49/Z54UpYUH1HyYx1psntch8FOuhtx1FAGxeTlF2pCU0OiTrE4IigenBUhBFUoiTi128i+2qDDwPg4WkuKVHGq2pSfi6eRR6FvDfJieY+nuBXyA/IT/aWp1FXkoe/4+ug1YFDuiNqusY92R4s7vJ2Utk14WDpFUNeAoKgLmCBgzsVI5uEiUCyZwgzxfy4Cdj0lq+fmxoH6tZs3b9vlt8nHUdzn3CbcVNnQlhh0yEOmXRvC1vY/erwA69UKezAJVRxT+56+LPXMRPc0PgrfZ+jLiVWAuay88sGL8mfIvZwytK0J2qThQ/Ur1KQ4NNy2G8NfRDAVOL1Xjz+kx3bfyQwFk/CiezcyDkAufc1Ij5jFVc+N6GSd8umHQe4ECbAyaSKAVUzroUw45N8V96+10oji/+b5Ybk4tUadoQYQd+i0mFiDBoKS2TBSJcQVbHR/Zj3LHw/6V09Cge3BuHrYL2G9uP23p9qPdLD6QxcZt9SABOhDu/MWtsxzi+m90+Ov0FnL38KOsv04xdlKOQTO9XQWvqABgQjsSwl7wvzaxJqED7bsydNLPvtcAeOpAb141AOoi9RxJTrho0as1kpKiKitRrax5F2zOZT49Q4TPj5mV3CBvRrMJNDcyeV8nkhboeFmzDOZRbgMWkhPDdbhdLhnHSSRdsk9qMshKLAIvmPVYYFxGOWWz8fkxsAy8sil1SO107M/kcyPvmuDIMcMnS7YmAjLNlmtzm0uCaA3p19LFn4/vZxV84WBz2syF+IbPXpi+3EsYb+3ODiBO1yEBg/Jxl1Z7nXeES7B5NB7Fv+Hxkg5s1z2s53PyRmmn9Xn9/ChTSRVboweSGLmZ1L5OtNb85GrJ377L9NP6yOP0nYT5kAnK4NEuBYvjyqQNNYXdptVxk8GGwigrChVe34qJVCOxY+ZtSjpwdvqr2LQIHVd3v8sdZE88cz+8NgJcAj/U+cd5oUuMrHdqKZtSyH2XvPnCfHZTu2NVfxnqARNiXQ8GCda4f6Xtg6oMdEZA/dFYq/HHnHwYpBekj/Sc0UKOqXrm+XThSCTv8Ys8pm2Z6DwtfQstUG4OEMP+q06dcAbfV0rEAS0uFVOr9Vu8fbUtgDv/QXAICRNh8bLqhp4fi/VKWKi5D4WtXoAJRobE8VxEFqoF3Mxzfp1vJxzf2KONjfWx4kBU2xwXryJOfRu+7WJLbgA2Xbh4KWQbrFWDAhuEXWmGTlfu36FJi+tD+InN+oYZZIA9n4IjjyDtLuiqle+nD5kiGSLTvwfeaI6jAzeipcHXv5awCyR7ZeIgqkrn+3fIjvS8EXnAwtwOOcCbO9BVGfwMv2NTZFu37dq7s+bb3Z1DlITnr7x8J81RGNwVS3l9Un1pNFKNqJh/w59fQQLXwk/luna5YpvkWm/qHT9rWHjfhk6dBlxEH3qHh1KXm2NfGnZ6TumKjIrdhNjhwbTx4AML/43LXye8rjAFPjrtSC+2sdgFcfOAjHXPfMbzExfjQCrGpA8Ppao1muX8LPmnbdNbD8D1Nnmq1UNXu13UW94ICeJLTmGQlQ2ZCCsomiwwWZseI60fgG0PXlpLwhHt6U5pzQxdIqmH+RydLXqTEcN4svhc8RONJ8e/h1BjQ2NegqmcaU0u8RdtOtr5ytBUlKIYChhiqN9JzBtkINfexzyqzOjGAiZKzzjf8La8y1FESlwcA57/B+N6znk3RFjF8J2NItcEEbdyp2gllwyeKfidd/mBWV7mqqrblvfEAH/QrJFVMbMPaGqb/q0jU830MrnMS1sIPwVNbybpDCh1HsC4i1npiv4zFJhfO6+sNFLxzBcIVmLAHLOwApl5neyapVewkmR7+fK+2pNhL6spYCDDiBzHPa37R11FzS4DlEh+0od9GEduBfgcqJ0wo3fM2JCcv8anlNcQNc3hugjllfFv2hUSSzSjItZ6w0/Ez3IPpd1YJeFSCN0Qv1kPEh7+LUebtEvm0zWjM24Anch1e4vR07CrgstqVmpPgfQGpTge/sPfI0p2hrmyZWOU2T394nvFY0A9dBIMJ4RqGcy/785BAwrS/TUGqOSfRdIz4ypcU6u070TrGw7tQaBgl06CevD3ZAxXtB+URIIy+acaBmpA2Jc5q4eQEI5oIJundFPNXrgvB47jJ4BOa0jThb0vCsfFAWREQmvxp32HbO5thtzCO+hjh5I9GAoEVwFaeAEMZJ6iUUS4ZVG8MjSmw+oLWQFbg9y2FbTfIMaLuoTQpRyxd0TyTC0cBHMUp2ZidFAUWFAclAD/vRz3+eQgNu5Bq/a6rwFgLfgfporreCAdialU9WUyq4iejGOKJunxJqvSd6rOFzuqak9SVOxDYJ1Es04JkrkAYf9+PZXMuw3TwYsotnfrJpr1Cx9hq4seFO6ehX7DqPeaBvjSHW7q7ympoAq/N5YbZcfksUGoZ4LNUlxtyBBAw8tVYKPe+3JY1WQeO+Nd2KMH2yHGgIrZ0jiipU/WBXOjkpFB/QsnFpGscdf8B93PbkWccbYkuzkKR9Ev+Ibkq8zonIG4Xy5VDXltaV7c3xAxy0ed6s9J8VESl6A9Wa3pRQAbCu0vfXD02fXwQha3eLdWZOAR9Q/6fSV5MCnpp9kPQ6ft6Z1UcmSJ/z1QZBIDAfL2H6udojhnR/p62jqy0eXqa3UIFGWSVeA6ZLdKro4kenmYrIdMAKnYe7baEGJ1l8BqydgqOyAfjdKug2GPZuVezhZUaXW6oERMLsEbv7dpGhM9Z1Q7vYglK8oehWy9zK/NXvpMGSjydIr3QaTPUzd0Ombuy8ivW0mSe3JAkkQ6wkdlINkwMmr0ajamO4gIYRaEYbILZo3Q3uDIGt8LYu+hVN/rcNFF6ujytqf1S1e1GzG62o5DlIN48KAI7ttY2LFCjMi5GFaaz58dGVZD1qSLy0OIYFQJdAWGYGi4KMeJ6liWJXGe2pq/yza7jubsb3Ozqyhzbe4yynaOw28raqTfXXXGab26KFEz5iZ/k1tFTLxTYLAEjInfTO3fInLl+L0uhkjJeHqLIWwev0Ekyg3BVK2ys6xcGi1e5XnMyo5b8WLv6FY1R5YAicXInfD6J+U1wYnUp7A2xUFOkY884R95wtjvBSrNdcG89yFzRAKO/Qd7zTZNZnaRKCiRizXpX9rB4YfCW7+/MJXgRTrV6Zmg4oOoWM/hXcURldMWboO5DJD7XvOqb+AIaNB3v47kuhZMFNv8XsPJB/gJBgebI13YS0xfAQG2Twim0CyppGUivESzTauutCH8VMvYaJ7N67YbhDDMHir3Gl3iORa5h5DXlt8oKAUO2BRIfYu9pHH7LXG2QQFHR5k+Fc572q4JuIDao3HpPjARzJJK/AckIPSCAneNcnxjVtLrTESL94V+AwmGqPWWaaspPHOII+jVweseOxNDmnI+6/uz6/+TZY37Dk3kP1jG7Ic/2/oNpgbjiwaglodtnRV0DJw8G4FAomGxc8LcndE7VEIm8gzMLqfLlpHUat9ugWAgpXB6nuW2cscLMsPTVpb+psRzzpxkF1zsTEEjxkgVYXOo1DOwh1rrYHMNjGI15EZzTxoaoQGrUCvUY9xOOl7EqAjYZIXdMKrub5E2eryco36xV3GtEU+vWjMcjw7SBoFZdabZVNjI6jM6J9NhP94xXhEp44VKVOZo0VIsjvb8sNUgTgUCcN3hRVY4OmBexb+bE6VTrXx2q/92kS41Jjol/kTRSwvgrOcVyaaeg37r1flR1CXhJTSbVQZR4eyNhHY1aoNNz4pY+nXQZgmF1WO+FbDHmqdxruTJ6EWIFZV07AX50A/8oVbx/QNItfZbtG3GIVaIuolVBDqkk5RS0bNI57ZXhRkR4FxY9dnGzLyKUXsw3+cCK0ES6VfMG8uL0TGrvnl67Q4BOyq3W0dOhKUoFNfaKEUtd1sQWtlDM78q+AO9mwhCniweliD75tHSOEdrnrl+uLxqXwVCiaa9EVjksOt9wsbhe7PIrifSK75tQbkoz6abqx56RVh5Sq1e1epJx5LC6J5h6aJWkkOnI9kLzlGZUCyHD5sJISK3d/lhBG6kL+c7gNGcoMYbl9i52XON0D65kVpfCjin4YLlBtDAnRrAnJbCgCzseOBEFxaK9tIs1qlhUt+ZjlDNs1qe5JeFWRwvjmT0aWFVJ+7nZofonyZ2UCxROFV8/jvIce/6nKplL/w7mpx33rcZ+fOdCAqQIIX68gKauItGCMPYDboK+ASxV/V4Ig4laq7QwPzdGTSOZtnSDEXoO6pODd5uyV5DhrsKXKZUUHW8lam5OqBO3Z4OoiwTqHHFTg7zZhTT0Hhm1fpsUVltH441OjW2GnoEAL4LsX1UJBdm5opzFy4Wl/1otomVQhSKD1XylF/dG1vGLvCxFr+TrwOkNjSRdQu4xSR/v9z/Akg3bzer5ovADDxZaHkUshY7TJRudRSMjr9+B9zV2egnJuj5t2ZVZsCmPxXUpMqU9bWJJgqRAnQ9CRVjidALLJlKToFNtbmtDvBIz1R1YSpZdwxr1ZpYy4vlE+hs2L0h3vCy+Qm/vchgS4EUC4kxASFYCOKAxlonQyr19cpN01XMYhvJfXD+QvR16x6tk3v5/RhfUaK//oQf7KQuX8o5NHF489DAdXLf3JIrVr5iGknZ89mvSsqecpwA4U5xbqdbG4v1chtw+sigk087jRGHgHVZPT9j+C28X9o/sgRIgGbAKoQlu1QceYlWywF9KEf4G5QHHkFiIOY710UOIh003PP7Cyan5TD/p++Mm/3HXHxqhP7VuOPw+keUAc2gNUTJPJBYFZHQ3cTjWktC5VqA+pBm++cCpXTlGt+1ttaI4ynraHXPchbMYXLpUKYBpPN+2VHFh2kV43q4L3Pe8WenhFy8j20GsEQq2ARjidpKUspP834WxNh8Q+BNHyOWJstO8WRNTqkkFlRnd61+JXS1EWMY/TNIlmlgp7YckJSOu8BBDSUb2IS0x0GQMrPy13mvW9OVyqd6oqlQPlWEbg18o5UD0ARtIGjQJjbySIskvo38pkprJsm4lsy2huZwR76P6wUmpLmU551YtmOM436a5zdoFNYnK5bY4x5OwwvxbDOlgRKc8EVAUvwSXcBzEA9Z3PGFIbXY1gVit5043A0wo8v/zTVZArS7gRt75dk154md3FTVDE9igysEqptayQRXersP17NCpoGmIVvPoukIImRQlCtAIoGm+cr+2+sX/g4OPYWuTUQ92id3jqim81qNjRILz6wJ76ccz4wffwQSHrKN5tyzm6sBFylfmx7D/MPZgV2dcxRpNOcpmlTqFi7Iesf7kJ0C25Uw57qZRrWln+7CLiRtQg06HGghflkh/PRQNZ4EyzNamddl6AIhz+Qs1+eeWpKDn3DRpimqLdvQLtuehTLIpGA07RgHOqj/lh4a6yz2nsRsObHSP/cKEI1cXxLsdvEFTEBc2uvN8xnYkSyIuCvnb76UO5/B/YEps33/g0Zqr7WW2rga3VcHz+ki9pOofRuhRs8Fx4WmMzBua4aoRHYMIKsJ76oSdZIDUocl7sTGW0UbkkW7dD0SmtSZ/rwFPh19W6J+A9dJy4YDWn87ljkvxwRyurJ7+HzizhWFKNGYNoGYrpIR7UbAcBu8d/fONvCO7YqTlBefxt6ypcfZXqR5/4Xpm9tv/BFTmnH5SLMW+fxp2rMv1a4LnITKbBUrDyIQzvdW3Yl7FSKjpc/zYZnSWgouhBFVCnUA14Q08JQGAY5vGtkmW4/fV9Fgm0N0+ag9wGhPTfDFgxUjyClVc2dAbDbyJKX4nZX7V/biqSNd1c/5mH90C0X670WsgQwO+u2VTsDMCHsnMknweOTV84z/fDu7auGSm9ctNqJMHlDUYnwXQoRigMFsDX0WztcONmiCaRYAXyb4vJWmUZCSMQDkflStn8J/djhgaouo3ZRmLwaIvPjDBhvh8AgujnioPHTZ48b7UYhNoK7iNPWmqcGtJ+hSjTXfHF28fIOYeqrf+dZ56U8cKIjJapBt/51q+kte7WmqyEJT21ZOXkqstH5x92t4921joz8tlO8g8lvCssEjXUF4GlWRFA+Y/5MGH1vyH9hdRMXo3taWs4+kQlk+ra4HjzdrvfYRqNYgJafUoLjiVpUOuYizLtEBhwn0GkrAvQzo4GnjaPHbMO8kpAJEepqs1hQfhGtgUkMq/MMqYJzWmz8X7KM//85KlhVOJCzjc8fo8czziMCDNVss1lasnoTDlGtqhLwzZTrTUDke8KOgQQ2h9iNiaqfQNfETGr9R/PoX2t3miUufKoo96h84ZW7Tee4eADJE7ko5FXRZd3Nyth0wkImZDtmC58n+Kx9CWRvKYrsWrdHkwkyO2bhS/cYxPWSmQc6KH16/fJjAzN4+JwNsK1CpqOqG4woil8kOe+kN1SzjgKDbKVmV3M7RZttwXzgIub6vlAJn2BlN5AYkzPjzT3kQSvWUk1I6Jtu47Saub6kMm6eSsKVllmYyeujYGnYT5K+wRF0C1jfm7g3sI3wcQi1xa9rvcL0NY4BOGvcQY8PulwmKrGAcMDFyBNqLLuca8NC6y5veBTO0NmSJ1Y8fyNPqblJZ5aF/JLJsN24DGmi3kxqw78buWwZdatqWhg/HpXBWWessOO8IYewXNSwvoLn7Hg2mU9KSHsRV7YV4h9h0EbNsVmpNSw1o0qYBG15TxoV7Y7MfFhyvZrJGiZrHPKi88SfyFrkWCxtquszvhT0yu4y2V5OF3vAy9IqKb7hNkFVcv0TCaA+nTCIE2upljIJuuhRZFN3gwbI1YBVDeLRT3jYfzJGv5ajHP/BfXcEkdcJbpKbePm92D2K4Qe0y2bX4qFXZlnlYcU81gu9yxkrfS5fxKNtUpEQnMd2MFU/TcxGwpilmwkhQpkRhxuH0SjZ48bMga0wQ1FRvmmyOc/ZQ8r/q1xrNubofbHftbuXcZ7hKiXGtWBNsN0S5gdvLa/zK+aeQkeaF7E3HmcW05Skubl7Q4NRfiDi9kAIEMxMCXHPLJVXk7Pg9uDbJSLYnSm1+xuUBQ3bz4hGlAOR27z99a7/xhJcLmRwzUfaT9MneHy1ffhF89MX25vaXzSQmm7Z37P3frVMWbCTIXWN59uAWf6AeDszsyNj3t37M4wlLxczIdMhPS7ENCY8pQ9mdVZakBQKd0frOgFF4K82PI8ENBj9qWNm/2kSFf8KeuHd0NL686zaD0iHXCk4lrC68M1KRLtca0U4SUqq1dAKY/E57UBOUNc9HHi1t7uG6o4XwTg6xSOuW1kEgenM6S0BBetepo7xyg/jH/Dd2MWByr5ZsKmkriDuTAWIukLgdk3/UEs1P9L1tDxL+YrZR1WTFl0aWg/HLWiPe6Y3hsyC3OkZW9HkphPxoShHNeRbROVjgfEAk2JLeNz5s0rUppBI0iXJ38MqX3Hm89+B/1dApqx2DfXMplXH9zwB1AgfliRTTonM84eYiz5XwCGLLP/9e599bPAPR64KVE/K4uqlPRBiRT8WDj0NNd2Hf/MREPWKWKopqbU4MzxFGf3T3D/2F0OOrzXK/3XvwhiuRoO5wEvu1GUMRdl/fxc/9JcQ5wnghBT/6cDFMbZFwLDTjzM+4tAEhNmFzRl6x2cfJmqW4UuZ63bOZgdnyZfvNK/0R3K1OKuKpFnmuf8ihgsfPzUG2nsSYEa3Widna5rLGfAbDk3RG5VqYwtr1IjxtpFZ56jc5lmPjTak5J0PkCxXfUcpv3jI4KBvwDtSdLMoNcJo5mHT1esnmSTZEhy5QqIzma1qQfxgWv/4QBvbzX2+dVUQQ6A3J1W52YjUnEEfBK51Bk6QUuzM0h0vrW5OZggKIDLwerwpdN/tiGfAKJyxlIfiaBit6/IyH37zg82unDQnMMFHt0N+COVRQ1CfzYB83BoFmZfZN4XSe7wYEOWAlwwV6G7EKu2fq3aygEbsgxCGeoEUDYTtty/jpRjfV0tHPQzMRZwkRXqfKCUfVRSBiDYQohaf1RAdaVAixexqGgZMz3w3x61dbUD0Ng5g1dIZkgvpVsw/j0hc+6JhUrtY13W2bjhOXHyypGxhcV/eIiIGqwxixirpYDmtZ4DsM6iNvDxNUbiuM3rSBpto0b96glFRTCiURrp/KEOjrqVbEa4DrjqH32lyPI1anGmhXmP5oVnISQ/nW8HsSrIZ1Rtk09IdRpEK9I3uxLyR+gRtBjaoIaCmciuP5Na94N8k7zAECdVwNs4Wu4jivVwYm3X65d8hyPASKoNM8AUmOvscwTiairCH0E8jTiTvJDGlIN6Jzv94ym2UahMy/LVoepNOJHSU4Fxk/aYkcI3vCu99vrXE8JLXjKtlElOpf7uzWzmDvBRkQ47YRy7MwSwOkLkuQwDhGbutsSLEJFFkT3F+ec+b+HNV60hpeAo4r4I23fR9X0lfSHyb+hrtnZyhPJ26W25sBuMFJlzJiPWdxeG0a6QfG8HyNyFuaDFzbADeZVIf+TJwOmf7j7OsLoveyoExMJgjRr6Sz+HUIs6DB9iIH+JQIooD49PfjNIKgiZs9mwgCcxWMcSBvUV8ULF4KHAxUEaqqHSPSBrNuWcqFdgWRO66vqLek4pb7ef++DjhhLTc3iGUE3Or9OxhDO1HcTsHK2Fgx6ftUK86HJjVcrEhBUkjYE0gHXhnVDT9XVe/bnrc2EatFcLMkAkoRUKQ6SgMeztuRj/ucTf6j2GixUkKeN5y/97WoJBPao9TXo8DrPz8aD4xaKS7Egm+h4oWlR2yWq29d1HsU/gEwlllRhAbl1wT04TIB1vOenrzACEKoK2t0HAHtPQ2UnN4HfA0BaWPE3rEu8GXZC2bIA82fKbuzMxCS8DGJ3C61ujC+dlr4m0QxjrbOeCsjO8/IYY0LRduyD8X32vtwC64AmP040IbZX7BDBjCGw83jfxtT4Tlieg4OPS6ybFu2pLZx+jSKxMCVHSnbpSxpBxtGs5UBP3Wf586vGA3fdGsb4yuSEr3pM44OjEFeLwNPDfS6mNsYBpYuoPssHwYs1TcrxdPDQoo6PEE3dsLA8TySN4igyA41DCopfBw0Z//DEbIV3qp2ILoDuPULOleXve+qPcPToydXcF6WsmFkGxAcy2/KDJrN8y+QywbqQ5N8U9vl+C3Z3PGEe9cnOYpH+MTs9V0ZMR3x/IKv9jtJ3suZHFlpq1eeZq7W1dMrBXqPqP2RrerKEoM+mM29D7xDe10rz8P4XSduotWDAzdhl5ZQ5IfYILid0XoxB4rc0n4fOPEa9pxUZPpsSo8mcx7DnzqDb1pishxkZ9Lx02LERJ7wK36YYMZs0ZSGV0J+T5d54Sne2hK/h3fSacdsAvrXVtH4DelhV19XoFBTKY2eDrJJfqCHePXEKnUw2SCNa+eqzu5qnlmcZzHIaKZ8tI9uQUIoz66vfeakns7E5T/KndyYHZCVYRB5Alzuxrymc26NSYqW82lkHcOc8ysYAGe8oEo6PPBbDq6/vL8NlJ7F1TQ/2LVVSLKTR++RYPi2k6kGv2vc7hhNb1yuW/sof6ljJ9BHjvFJ4aDJxLzB34dv4tPTkANOPeDvDm//vP/BQHs600T1DZwslrLDQZOnSi5EKzGpksvgSy5hJod26mSquGfWC5kVarDwgI+fYdEW9q0CnBfSjTKTf89CmvCznFr714odzMA6rCTf0ulDmHMMVFuevNJaWPZ+SEIsNsCDudtXMeqO8ABTUhAJpOweIm/59WJUPBhjhaMolqwyWLjZVRBQeW/Cc6hRobs2bPbRJKbGHyGFeglhw0HOUuVT/k0JLjU76cJ3fYJOERiDuJfvx4BjuwpZEwtc+FBZXkyep19iRHaUTBR41wjyCORjU9ttcc7/iR+WjfDBLijQz3yZtXtGL6ORz8v9Hz5YZgYXVV56Kc8M1ew4fwbYCAMi3ZxL+MhJzjQbNau/aE+V9dGt8Xeq8ggkh7MUFwd/mjZ/BL8hwTQjAtUi05FatGNV7UMoaizyfoPbBcfsMn6WG3yI6APl6IkHSUp2a2NK6+GrFmYU7TOWxG7ounR8msMHQkheSEN3sHWvIoNYppMOONwC4yqI7U9Cd/x5EbpPc7QxlVVmLZELDqN/C47ITzmIn/iWgfo6vKTgfwph3H2LakQu82lAXL7GYiWB5w0tnv7SU+FU/r8nJx4iiaHR7d1ESRvMGZRcFSmAY0B2hYKJ1jiXUIo3DaQjYLVBM08g095WZFILNetlE7rRSOptXNZ0YWDx0FwO9ZXzPXbZNxeazE/YkB9dqUDhmP38uAVqF+Xt9ZhXMpmSlst9fXu92nLrlKBdfirOU5oNu6yaM6JdANPFiv0zN+JWdUZr+45GbZuO/r8eiBIQPne/NjIoe0sI7lMDj/67H4rh5OiiV92VA6z3MX/j1PFXTxwdHiaDraDo0bekEkL4mXLapSdv2uPoaxc8VusVSlD8/ahwOGVrS0ZdKfq4xkXZtZsa7IbhhJXlxiurfmUIz1NlGfLmfVIgr2/fbjRwiXeQQoI05jiNEyIDle1+Dh0SDJ3VqU9QDmV2OPSb77V+YT50J6K/6EUBiNhUsigL/azZ47PxszDkuzY1mB6WlP8SqOsbaY0VcbGlt7QiZc0zA/+g49I9U28WiNDcDHM4gPsIXljNCF47frpt9A1/NqiAE9jRRDsPQVoMzvFz9kYkl5BoDePEQCm3XAMBs9aqH3vEO1FizyfWSqx+zUcmZDQozx+xA3UfkQ1ekzkUQcVORKdJ1jeEwmlLLOd47DKXaws8yDwP1erwWRpAkjgDTPo1nR6uoWwYmq68p+2SijVnmQd80snKQTqK6tdabUDUcEJg8/1krpu7rKrstLCUNmA/W0r6F+JVB7pFTxMeSl4RudeJlIfOpjaaIQliZAxS9qDuhEn1DkhYWB40ZcbfMXh6U63Ar8AvgHKtdKNjsU9/9Hqj7UQTBtM0FFu8CNCAFbv25LIDJ2fUQdnMw2KSgtobuwI3x5F5/G2AaKKIUsMEBalPmZaVXaaebMgir4TIYCz6Ox4p3VHXejyp2GyUNEt1/5sfvLjlrhuym+qQWcUGkTwvWq18iwD5Y/z3nie3J9RsbxDTKEDxAZfM95MMK/4/y49ZZcuzVlDhovn3Uhkw2ZdVv9ZqcNyCslSrCDJPt8RF2VaQKonnOm6VCmJYIMaRVK8YX4F4+Z0/7vJfMYDFUcpKkUf68BgjnPYuGP8+3EyD5liZiotymhZhDN9r9ch+MtZvl5hh1BRxN7cu239g3+vW4XoYsY/0tp70HqHJs6wNdfVpe4nCxShqs36xwxL+pm4dkxhHvpGBtX8OcU3NNg4i9z6CYUrmmPKPjpBh6DlQrsItuyMPYCQygXvlc+QznpNsjnUattqY13AsqHJTV2ddBqY413xTO6O7d6uxpsYl3O18d+D+k9Ei21+KYIHFp7PR0FGSMcq1r1FkBzMsTnVwOX7icokShMlC3tPSV3afNdqFdPy3ke96NBt00UpWigrxvVwvL15Vb2hFTvzP+L8T0dioUvhoRxibDMFPNV+BCLWJilTA8tw4nBwuD4JtjFLpSKKTIiRTohgbJEf1rTxpyWQu0RItHCNW1MEXBASujlObdv7rFcxAHJR/FlByfkLst/qarYNwVElxJ7+d4H38Q+ZhhuWzmJRjKdIVzX/CCpcgs32UBfdwXW0qYW8U2uMelxxq1Jg6/xnghvJzAFnt+Y71o+cnFI7QLk/A3sgKem0ErWpV5l+1iD0mec+QPNal/mCyF91RCgLpQXwh+O3XhRbv7Iks2s5n63qXJ8LGuKhepgiFG701U3wkafEPASqqiYsv/xOP169U+yt5IqZbwiAPdLgJjIw6sk19F9a8JDNc4rcoFqW2Kr4Q5Uiij9Y0zoFcS97XP8bifiUW9qKFogG3q3BtVFUL90qJQdIItbWVPbohErWz0wb4jAGT+2SoQmCZ8rcFySLGtKNZ8V9Sva204jSfNPG5SR45KuoggvRzQkk9Js4xDciBJgWJT5ZP8tPB8hojsoEbBXEq+XXdBScQ6IjgmHyAxgJmfAiWVOZUipJgC/nmxFtTbEOkIbKpYj2Byi+6HQz0iWagf3kOwcHqg+JM6BceW8uWe1UI4IHkIn09uXciS5n824PXoN2Law8sxzTDmRPU9bovpu45wFAQoIMtOyjAHf8R27PRBr6Wif0Ty+JaD7XC7mz3sBE+w/vKdZnqnwL0X/bE3Hj7VitLaE7x1rNshHKG7KAaPy0wHadZY4003bKbtviM5ImQGjdwBxS0MLl4YzvI09mOcNeBhVkRTVKhdsi699Fj70jG12iu/ZM3F6pzFlyctWVLGK5hY7wcuadrfHSfBS6D8LnFfNJLcuiUZCqBb6gXwUCFayv74uyQW/H4nnMnpgbLAq7A6f5GJCDiFInYlXFXOwGI+qkQy4hn2IZ4SlJVLtf1G4atU9oL8tM3aGylNpY0LpeWoOp/HL4I3PtNQPQ8BLrKDTf2RK40VwlPioOqnA6SqikJsD3AESa3dUfnaYpTzzmSoDPQVv4vRj4LC0ZQnvYSvhrbMeq9q/Pnv5hJRBA5rTwJux6kKEifWaGJZ6DLTeIubfBZ4/EB0rXF8MzQFQv1Vb1ugA3p5kEZykype8Nrgg1TQce+dyUY2QelsVGB5e958aQFaN9fNkZDwQlok9YZzWDbbxdmrlaPyeImIYU3evydpN1G/mGJOGn4zww4av8HbDaNdm7pp7P66bMMBD3ZA5ijqrpbf8QJhUqa5P1syCOmOcE9pJegyOXm/11fU+T44xSYWVJJ9h7Sag5GUNscCHbPDDXKojnO/O9UiB4cijGEiycHaQdIWchOgQa+4HRevLmf8WnCHfP3bqQHWhtcL9Dx9Mvw70v8O4AOqZ+Xn1ZqYwQ3L2ess5Sr2/oZHs5nJjQFJbGTaNOcAtnfVpZsggDyhqXaJVo7Rdl46JBRX9hUXsx7to8DAYX2yuj+pLtw/9R2UnWZO2f/GXIAwYoPGJb+FW/owTD5x4gnq1EBeQVPz0QG6i2Omnv64w1pEG+eLGfEzvzlN5dklVvyrdIdWNk7i0ER8t8JIwrYOgrL/ZVRgVrGp+j39O2t/qz5hFaGKgJ2WCUlJ0RSeHtxjBoknGnoaOg2FW8MyWD821pSQp72MOctpn7cjMqz5Fn/IR71ipNv9JE0bxHtiLz9QcW82xa7S95lhJxQYg7QAIq0tTPxryl44sLlgkte7EKJnOf9ZNIMR8QsGk5fU0fzjKFqUcVUHU2nNjOuH4ppCONBBIRb4oi0jjKmKPiXfTo3OkW97Rnci9Xkvy2laPrZINB+xeRykcxuvPLQ0CDsVYq8zabYD6frIPy3K9WavOma68vt4Ubb6AcqqSKXzcNNt07v+gYh4TRrtNIoTV/CUE16o59wAdg2eLd5rnM1G/PIDgOjfiNUZsn1q/CmRqTlTKWxPEGUVDKAGT9VNQvrG+MW3/UF5XyE8YvLboOSms7S70GvbpyFVbdHznHQb+TL2Dnh/MkzftE2mhc/C9J+DRj+sTQLvnfKyIvpTxt5/1s8ZD3R5OI7Q+zbndKdwynIOnmB60X6VNF45QlRamslWgUYV9jBHO4B3zbx21vpAfpMU1iIYO3UOvYh8NuyukjUfzyHHNdWy7v9XLmjgliClvj0P7T+9DO3ZgYNTYSnw4akR8oU0Tj7FD34yox7b8FzwvHsQQS0kIORTxCiLZJedkrRQ6kx+XuhndFYN80oU6ulRl1FijJ1skjf8s4JCdN9LIi+IuHm3rgwSvfxMMMLPXi76vAX9NSSCbBKOq9+0b+G/w7bVwVhP8V+BIeB+mtKAX0zd+fSaHEC8AABTmT7ZwPAi81R0fPPpnAVfIUzMMUiewxA4wImkslAQk2WrVBPQkr9WMdaPr1BnYgaHXJjFf+0RdyfWrARcikrEcCPboalzium2/K+3yyyFN8mgMiVZHEa6Rb/PqFFdqWNoVJY7Buf+DAg3TiW2MUpEnCcWIsl8Vy4YYTVSqr3Ib+zPvQptUPb1FPxPjN/ebwso7BZzLx96lZPA4ZN44nIShayllJpHS6ui7xG0UnPaKke7hVZvFnbWwwwwSyGMa7b+avU9Hfc4IDpVGV87Tqp0fgAtk63RUtt2E2P+5jVorewCs/OFhIYbIiaK9PENIo397AT4MUIQ5fV8QetRcbrlz8P9gH4ynHx/fDJGBaRKB8i+h9iFYlz3bvy4mKhLs7DzwuO96wJiBo8nMamHuPz1xLBTPbRFiDadAnGO09goH2u83vvhqrXt8ueyb8QCy7+vJe0iiyNP8LuFHNAY9B+6G7ycS3t7n6Cz7YBdTs45KxbCcG7MAdex4g3mRkQNMGN1zl11JYqibaxoukhUC+iKevhg+E1FjbNmt7IH9lF7quE/AegXZMMa5WOgZ8+HCvSouBMFgNnTJXRhQQ2F20dxS4GaTMiBSduDpn+MaO5Zr+8z9Km31ilPED03Uoi3IxDMFg4vUkPAktTJKzxD7FvISFgUzs5Ul1M+xKv85xykYbFz/VT5ZnnVu+Y5jh1SYYafOBrZ4bFsva5uNEh1bdR+BXymW22oCgJCn+AE63lY0Qo5SMZq1zURbmpiKf9XIzAuuZ58Zrmq7a/4XxpyV5XkuBLbLK9U3qWB6ALvOI2Fd0Pe0FuFc5vR1H8jP8mvm9iLD/69dx7msfUMbu4zTxUDSU2mrJ+5lTqg6kAgoWXy3nvUh/eD932a33kfXQRLjAJfcRv4En4ljtWHZcxtGF2GfFKgP0YUPtbXoJKokhVctZQ9hmwOTP5m+w7ysn78WFvd3ybOEh68+rlgKJiucAAA51zZqqOGh2rh4uppYQSCJdT2cM8lgiBFK9TEHLbzCd/jbtO0bzDmpZitLy9VrdcUjUvI6ZISVrmHJELlVKnjk3FSLIaDmHHgBEoCPLikfIzWwsAHlXtUtJ5ruSNhGQFUPL/es4kQDUsko1oT0YE2AS0x3bhcTNELxjg/Ng552X2uE7NDDz2wbX6IPAtsvfcsgt3zIbcIAV8XM4PULD2C/+hb2NxC7rwF4knZm42PGZlM6P9HCFZZcpJukDblWRBuda1Dz5ZNombeF7mt+CVDminGS2BmMT1qz6SmK6yxMPZ2M2NS/UjyNWSb/dJs32oBMEtCgwI1GdLsgwnQy9snP13Q088gcIXD5sVFDW6hfkwuOyumTxjY8hl/hudIkEMIjFI0L9DnahvC/pauvKEHXBHLPi2ZtIOpaHVaSVQ0di1DeWiA5zAULGbKYzNUyXPjsasTlcZB30F2r848cC4btVrt9kt+HcEUQNWStLBHnBXuSq+Tx7X5xzB01iy8L+L6lvWG9TiE6PtclXKQ2QTR6tWhWP6vrKO+wuq09LgCUeNPeP1I3bVckhnO6dC2zM9Wea7RuimQzJJph1Kcmd7EqN+/V2m4BncsqhkDTRCdexXy04NJpyVIoy6IukUIyXf7kboyz/4W+kaETgCbPa4sS8TdbWcHFHVhu+FkcpY9tlv2EUB0qS0i4BSDCWI3FIJOFMsHkglN0GRaiepMWNW+lsZSl5eNxMX/jK3J0hpoHiV76TAnibBWl4asqQSHTqmYOSgjCupuiCC85WCERlOF5kCOdf8f1BfhOI71TyhrkA6fSQxlqAj1CQ7DDMX/d42t+06afYyagQ1iu8k1Ru05jy8iPUAu7e2qKo3104YQOAn4ZTV4VYSucSKhSFWMf0VcUg1qgm5Q13Dd5kB1hk1vsKVqVsMXtsESXXnTF2xhAopztm4ZILKOyFPUF6g0+Nn1tcxIVk3+zwxSsTcwLLMk4qFdVv33Ay9s6cmo5tuvYDBJwr9g+UqlyyOszySHCRiaRAC3JhdUcPHze7lZAPAiTiyPmlABTEVRhR3QEpm6+rGJMxJz8yjGj0ltmFE7Q5H0TuPHjzueDvbBAIkCBW77vD6gR1umdgaFz2adqi9i3VDnL9QhHvENJ77FjbWUb0j3gxBSLFiQNVT+xgimT9EFxI+2DcYb78pl33RSoZhv/dZkdvqIB7flbS9uc0kSRZUChhDjBuYmUoPlzJfDuuz9HOs9Qog8DoJSynxmes43X/ynaylbKZOeWO/jYlWFVeAAc256ZhnRoonUo4OZ4+xN/AYvtXaf54qK8+mEakrFxB37nsMj8W7iVuYaYfq9I9GXsr8TKkbhnVSdf1wx+J9tqyMz+HHYe+PidRqzl3HDkCaXVUg4Td8oipb+cdg5DossrGeX4yvS2qLp5bWa+8s0hib2dbq7dkJRQUO+gc38zdnGA3Ls9sM3n7kK4migtZ/dytr/0s+axHkB8qpV4X+4urTTuNPqIjkb3jEH2NeVMJm3a2pWYMrr4AmNXHLwWHEKOOJFc07pLOCrd22Le9nlwavteozmCD04Lw91fnKTpVUa7hqwUSQeF/TopLcFQ11BY+Otyv6jRvXz2bYacDyunQpzriNEy4+g3lZ4uZlDp3Tyi+5b3e+7H467L859GHd9LY9msSBx+S0Sz2zOshWWQR+fLKsph4V/JVza14KJMvoK/Wzylp30kGtG62nwhhvsBdbYZ8GQ/Lfxb21FQI0+x0X0kJ/HqKzalA7E9bynNtpwMJpUtE0xOD53l6aytoDtNikFjpUTP9ePOCy3hkaKdeWjM0LX7O2SL4aIgPsMqjoQCOuiG4xqq0IctPPGiISjLo9b6RDT62Yq3WaHrm8DvYV06hN2FmUtiKgL1lU5FsahJQux1atQSnIzolTcBwshxjQRD8dfH6z/7jxvjszmfvQVxNQsmORb58N+F9zgttbF5b88xdh+9lI/wLHPqTMhsW3Ut/OwnEcW5YluP+C8ksCs6GkE/2yEu9gFVxVxQz7ecnNc0ioTjyMRsq+Rh5Eg561F+GrOxxof5xADXq5OKNJsb7/G6QdAmAuUeijRWNUoHKV1AdKriyOFXTzISqjkJ5bUrU8yXRDcWM1sl6vWp+FPpLXTxbfc2lWLaKKPMZeqlTwkLISy8eus4BPSYF4B+z2wbEWWWrtQrGAoJRfy3rbw/4viqKj/9wgN7K+LFwGlOyxjlWcxsxmjxspNh/fEvJ3o6DGqxu39Jds/ZhAusWSYAozdxQvcENSL/LYWpZK0c6M+9stMIh44aoBCDayrk/qTK4oqh5/kWpvJQGlqHPZ+URegnKd7FK/my3NoSQMNvZ6uspzbWYjF/VrdRlrE8wGYzSPC8cJUXgFMoeVacZjC9wS5L97qT/afqvGUYs36coUtJKhiOzPaP2LQqnSYvbS29qHlEitQVYFjRjtmcJbUFszBDxzZRGvNaI05rIKXR8LmwjhQMj/QUgSFvL6yTGb6g4X5yylTgooav2b+QKPogjmwxmtvnDhLa3CGjiTjyjY6NT6oeyduUGniK6gKUFNlrbN/S+9ekDE9mLJJoAPLQzCxhlgExRea/JWAfahCnRJ/kCvABbT2O3tbn/uVsSCKloToDHEqYGdc6+OWGUthKGlfnfgluox7PuwBtH0HCEL6yuc9T54LdAq6vSQfrENfwMMmV25uMLlANZIbLvvA47ZmYpl5lyD+VjD4ho4O3bAhkQdW3zO+w9GkfgUqTvElvgat/zt47ck3OoLMBshp4IHIYp8a/HzWiYIDUnhptTFo0MCcSAesgbx6r0i5IyrM+SvokIb0d/xc8zWjpSzx+FdmeM/VqM+GGuXnUdjybULfik14Aw+ai76tmoOggHVFTuSv1OSCkAf6CSjXxk1fQsoQAGKFDCz9AJe595PO1RrdJSEby+n/bZJ7kdhzfsUquaFuAtfPG4Pxo4yUzdWrdkd5l6zirJbBffCkPosksW9a5EMXN7eakl43RtI0vtCtB3Y8VuGAwTiDRzYfyzt4+7ey8zMlOmNsR/97nDbBiPdq+UU4t92lI3oiUFqyu+ZdCySiRtG9U+qFYfDS0AdiBozBwo0uMWiJGF2u9gFL6y95kepOPVrXDNRgtOnMNhGGnk7k0sBsIsiVtpu3uI2ZGiqPECdTiiKJtIzWe/frJ0MGvFuQ+J9BF8EuPkwBSURQOgoWf7RJ3i5wAGzfooe9y51xsEL9tiklbsOCNqPs7HfNzKcshT3VY/+URb0DM+CshR6vPgDo6HuUlEMtKg4ODUfV7IB63CuoCyC+ExlDqBFnOxrzH95jCPPd1A3OVvU9p4W3TVEd/M3PuxFpiiZnG6J7jvUFhDdrGgXxFH+uEwV5i0OOqykeLc7z92bNYuvi0va4LIrGJEJUiDGztzzT6rEiaMdUXnZjUvsqmd2cmblc3sPznW61/3HXfOnyo4zX0mF/TljcN4Hz4cA2rYBB7HTKteV93t4DkVXfVS596g3uzUowYR/jK6uyXBvDv2SwESywoaSxLgXJuNWb4fvUpex+3WqXQGCzWbxs+HJdTVLOX2CTCdHlqlL6hYSgVIfC29T7ZTjHuJPHPXIdphUBn2mIr770c1uZMMum3YzAEn7QRD6dFfXRQWdsffnyG+bMhhZ0G+coehz+CzVgDNLkP2pcGoFBV5UGdIaR0H1uoYErXNlchZm2uowz2BKJ1wvL6XcXFIqkTEghg2asXkcAscgfqkA/Cj8/sFoXXPghoGdcQfx0MRsgDfFxXRiWju2JPsC8v1gx/7Irnwk84anGayiUpvzsn9HCAPaofCesrmhwnu/LrEKaXrcmSQpi3tkiFK9VCI+Hso4CMflR0NS6xpj6S4WBHgYfLioKNo929XnotfUPmLV2pVFJmazl+ivdIvgvV3XhbumTI4EeFO5lmGQTxS+ORqoTcN2VI+pAkWhiGMPD0ClLFHBnRGTOEjHnAPTQ0V7lNkjchnnedlvzZfPID1RfVOb4WjXSuv0dbNMtAB15mCwo3ovdTt2YI0OLxFWAM3EWd49SAi8zdFozDEUqssgFfGJdnpKKKYM9ZTMYHNNgXJtM06/1Bl3qbDn0jhcHncYc/lBbAz38O5gNTtYv1amz5vBXyd0Spo4/cYd+0rS2clNaTGIyIKqdKYvRzpFPo9kd5FqtusEweMF0yAxtyurdqS8aeyMlhPxt/haPh6n7uAmHd1hDIpIMZ2SM/aI0n53woZFrfSVXA8dr22cPwND39u9Ec4Sj8lG8qQ/3RUUaad0HHImYgqbPsFaKsh8cb5J6XEEeHgyhy2BJT76FcRnutvlAUF+R7nSuTnanBGTlv61zfdK8MeFH1UOEofX3jYPTNS1akZQekbJI0FbyKMoslyhRUTH51WEe1uhDQ+HtYVcgowDKMSQqU3mpEUGVvE24a411FKP+ZzZE2Dm3PmI0H+3V/c+Lt3E1b/0YV2HrE++4dtl2VUhRqFN9qThJiWzQ1mnvLgRvs6dLDEtfas4f1cLJmmtuXjxBuF9StomZkbGBWOoGOntRLB16wAKfcB7yptO5IPfO4tbZB6t/MRcNJ/k84oIM9/61A2k2KWypsNE+e1Z/C3BnVX2l2Xu9rm+VnM3zD5DWkso5X27pPb0PqW4piIVxwrIux8A4Rd59821QoB83+l9PLucopRqq5iQv1s+6ZVQE+QfyrMx677OwiTrmmIY/3+bgR0YBBjJ15ozYE/4NGTarGGxvnYx6XwPaAgzfD/zbXKQRVXU9QTk+gNTa8scJmpOgX5/2sEa8ugL+If/fpI1WXM9eWKln34o8tqbXPWrOWGivSYYeADuGCbMalnlJKHbr8dwddGwELl6/YAJM7oBhiXHpr49876Dq2rLJfvd0s0MbO4pG9mWo8mX4H2fLUgFwsG8dnkiY750gXzrbVtxlXBcT6Cvnb27Wd7Tvqzxk9n9o3p+186T7hOtTt7nVYzMelJSYOr3Z4IflyKSxx3BaSTr6vUdn0/hyd5KuRRtQwxYt9THtOnDlL1XvtrRii+TAr4aVI4nmwMo1DKnhT2gb67JW2BbXpcdbcPFUmKa7bYV309sHUGTZ710zCd8pF41eO0NPi0MdBHRwqa6XJHdZP5CSihISiZSYEg9LYJCIw2zlzZHO6Id4OPdZ2dtE6KSLPd9/fWkXoqGLW9RPO/i8TIX1VTgabBcKrFfRWFg+LcDEhzyRcPaKL6ytuMREiUtVk5ZZhhZDSkPFKCafhYX8bHAYYNt2Vpyd3HG9popsbB8TjunH9YOd7AGWJdzPQs6ug8Wc57CdOfPd/Mw6w/LnX285j5YRHmjP5Rtg9tvohIaIv5kNoU46fF8z58uSnVpBYxGJETE/dGQ4CdByVf+uj/Wa9IchjMDrBEAgSe0fjVb41MHpOxeo3Z+4Gujt4MxBPW6M2MH6AShFM2+6aJNhwj8Xp7EHhLHZLTUzxb7ttH3jfdDSypfPAqNdatUvLrRvPmlGEFeInhn1UoP3rZsTjEUY3z7+i+AxJeXTLR0NHztlZYSIyf4cH1kxlTW6sIUw9f1N6o3LatXLmXV/sE/xg2iZdUZ/xEGQg3o6cbAan1zDe1rzwGnLf1vztxthdhmh9rJ6XBxAtQS6ZB0y+LbD9SPSZU1/2fL6B7S5xeEcFgIgZ5vrCK8WCjGf4sy39zQ5LdQ+jb3DespHJPtZ/Ng/Rqopu/oa1amaDB1GmQyuddVzgBs0aPzlCWAF/mBAtuXebiSHCqkxP2teXGpriRZHZ9KjGrpN0i3FqnZSqVyNAloHYkw/OhkpVVAV4nPemkUI63vLjd9QbNRF9Y0Tlu2xJ7WlN0+JHEJ4a+Omv2ymZpDu0sGv38bQtZt3ytnmGL8x8rIU8OUJ5QzOKEImNBeiujHeNRi+kPMNGLTa9FxYNDg1O+uNsV86x9DYBVNNM7e++Cksm57DrYcLKFGdUwscAhscVtEJ49qiMPAoisDndu4N/rZhJrpKP6UE+AjwCNt4P5u8kEKGLT0pUAxWNo3aB/SFAYQk+T1nRy/NpROvdz0b2E+EKwrZLpAm+qrYyPaEw12ukcsSjoc7wgjGevHmzGDW79rlnPGSRQGkCTL7aduylOWs8ymn3ZNTti4KFiiv5y4KV5BisrS8b/d8KKpXKr6cC4BHxMmaJ//nMHNZdjALGjsVCC/5BUhnlBpnkwMOnLrs1QdFdyIFPmCR5BeN8UuYZrtNe+QnuZ87ZOF7pARWqKcu/2sStCEzFm8jOaTW50r2Thf6ycrtyezqjxpXWXIPoiPYvx17UuG0cXuIZ5RdZoxGmfM/LjqxSSow+7npZ7szfocX+LF44mBn1NjD77qjy1SjYlffTHUwt8ZIJSOPFBKItrH1XPRNdiJ9dzegRzFr/mcCjtkmiRwW95jKml+6AFfrI/zNzc2fLKnHDKiDqn0V+dPeQ+fl16M40WUp5BvJvL51VKLN867DNER5R9qph7qsxy3icoacYTsGVa3vd05ueeU6L1mKq2eUynzYloguXUdOvomEbKXjDWdymMAaKGohNh2SBVi40AG+uZmFE2bEMwwPz0PbNXdTuz//72ZFfI1fvJHkBB6k6/viOI9kBw61BKoLNPU1LZs/GIiqaVT8xpHbMSXTO5663/OPG6SkWSNusNff9Kqy/efrq6S6Wa2s44ORf28m/LSLIIBUlP3WSDdz3l0rzPdXcEJh/pJJc7NNt/EeVSUiR9kRh7JRYGe2G25FAtnoTT3MNGDbW7NqMMY8+aJeSXOJDj/+1RFua7ZsChF/SX4BQ9ZLxDlDigJWLXOnCNPhlC5EKKbh88QEnCeqv8YnMAnNrh2cx3MqCHXKFSu583JphdT2E6yk8qgfwg2L47tTwPC1SP9Ey0pTOYYnF5/5pIopmWN2vvcvX12Q+pZ3m3qPJhNPz7oDy8IouveikbvoxXeELHG3g2hRjkeLOGMB7/udH/q6Nf5B1QFIRp6ZJdmYceqVAL+jMHTsQv5c2PbS/Dh4kjjKifSZ/gtv5uN9Veh7ZxF20Q0WDnC8G7ye/nyY/7mHvFeA/m2XFUsp9NlRN4w5ru3IHTqujrNSX+0gtGQUImw9N5XqWmnMSJFa0Rlqq/BdGTiaRJ9/MqqFUXXPqQXV8kUWgKXYgJ8NMoyZs5O7A1pwUPOiprZJC3ASkJ981eQQQbDUed4rodOYMV95KFVZZDJse3R2MWfxPhvcr+uC0f5jymadYyxw42l1pDXoeQ3Q0FEcAzTfUbYExhcI+3/h/AY7I+2sJZasZ9gCdOaEsWdP148LxoPgpeeOsWPsAHSLjtlTq5X9i3iqUVW+iwjjBRbPmv+RI17HOMtFFRjnK6Br9gs2bTY4TqF2plfiRfy9QSDFmbS/GPZDYoVy8IwcvFt19/zlS82IrMgEBRCWsf9ntMovI06EFfkNS/PohtsQ+ok1M27hx28QL1zFwUnRYWFp9beLpmPyK8cVFDMgEqWwIfqBLjOQH+B/eWk67smKKEWILaVBhtMCfM5j0dGwguym4PNBmWN3CGrm0+zy3FzLQHqZH1lQ7bpHhWXsb2Xv+ErUdRitAt1ADWsBSOW5Cp+vh2EChUAoe6VwrW0ZauiFYfm3Xj5GnuKzEAPxRrSyUzHczjh7gpTH/vyugNDPAuyt2dRTAzqRQZJShg+Ii1lfvt7YOwjeWpbcxqGH9eQ9+xnp+qwNi6lhPw4RzXiRFcg5gY0btpRGWL5BOGueiaEUEp7C+bm/SACUwAFCNPHK+kguJR8ivIi5tuo3i4XFObnSUjAOR/9Scf/GXgSUzABpOoeWGktes+ycZrNFKo2AlH4fovvTArUhiyTXFe4OKtPr3CC4oVSMHarOSV6EC6gsCFfb7k10rVOMeWydkUnBjb8WjQ3k8qvzytnt3Pf7TwHhF1F6YG0LNOn7c2B8tWraPrQYsPspP1BQcdZq5Rc01td/RNvZbFZEAum6TNnARaIX23u4v25lO8bRTbQwEET3oAkIyDa55yPiYvBajxBS6c3qL2UHEbMOEKcwnj4/Xlau66qSaMIhE3dnUJYfbHXF5d/4yorwqzh5AUbGTgm2NzFmdfyC5uEUGeS/j8NdSo5XkqzXyh4lN0C9ZBw7Sc347IsfHhenxJHFA7RD+IDXqJwBkwkclOt1S/Y3rZ727o7pa+LjqVE5FJngyQiL6K9eUIxS1ivr25woORMd0LoH0AYS2aqStfhBvdK8VQfEWC5VI7L/PFI9IoYzcH2M4v1mKdhmuvuVH/ixjNBaJ4edw84IFmBMPfoQ/mJrruh/QiTMnXC17yJSBm2rZb5uEYIgDnwTcnAPVj/agTFZHhOUoCd17+8ETrJrm072xQ8pjwPTxgkHckD5ZjvPjk23Fenwrqn3ZSDI9HfubGGiQOBT6Zv7PJv9bxNgcTxqy7fKhV9edwxa/VTQZE6InxPakZMp85+XQL3AhYjCaEHOVdAoQQvpeCC44Yl2cFQdMFzlx+A0vkSg++ZFXAK3V+w8lPl9F4ueAeBdNQDtUL99VsS9gCQWLpIitZFNka2Rs/R9Y1MtVN+frRSN3Prp5I4br8Ih89q4QRs+8EsFMbITs91hzrsLb5e6WdKTiovO28N7XGQ0BoENfHSfbULphpFqz7m2h2PXp2gSXedqhM2l4YFAd7n0MRpAQkIusHrv0Q+lsaYv123b+ZHldAN9C90sBrryRsvXSSEury22XDaD5NcE8lCQfwPWUuGG8pL3cHBLryljO8k1SpocugrOeSy8Ns+cmHpDQSsE4gqWeK2cWTpiVbYW8rSE0k+JJhMcOnseXzEr6ud57uCpXx+JWH8xa33ZTsAfugbleC3goa6pk5cpRiGsKcM3FZZNI8w1uq1PiGxDCI6RQoTaBPAhilCC2ZPtKB+PZOhMcTN5GTmzSlhuSGxkV73QsJW0yiWWi+FX4Y4pYYYidyQMR2+XmDKUSnzutzVeRYj94b9gjQNV24hqh6sdmS1T+imTVd5mATQxJ7XQ8qHTEjRZC72U6BwDnoemXIIx6WR0/i4TBI0Z6kcsPlaj2SB/EKcsJMFqv8mP/cPYsqhl38oIaagIk2afJnhfPY8Uysl8GaWb1qk984+sbevfJeiQpzdI/OA7TYgV1kwQyPX4r3wGobDnav1K6yubPhobCMux7RXrFSyemvbUjWGWup+eA1IVseSekf9c68C4oUM7NBBGiTy+/UUfzOxx5ke8/0wURDX/eAV9fOcsMyOuihRxi2XZTJR/PjySqL8o31y78VQQBdPw3FSoEpI/LGye/NOzfHP1vOjWh8QV86quA9ErbVghaFx7WVydtwKgoMu78hyc+ey53u02URGiW6eejDKZ/pxWgE8i2Brmo7lEd0+fDHX69tjJ7kw8+AsTLlQIaP5VLJmv2bK/Zl0ynCQVnT7ffMTGvb3ldym2L37i5ATDcfD4wUGHFd17QeYc7eZ2vdiLjN6eGSciHKBr03f1jK82Y7AhqxpK5I4L/B2lCCOW9T/uNCiBtYyqfmiPfxbAjjXCTht7GoW4DdCIAUI2XamVFoxvF7FkRopbBmRoHqmkIO0Ug9LKqr4uvD4cBWMTXI2c+yI6P0XQIHuLvB7A13yW8gCpEjpjvQY0e0Ml1qTJy09QuskeFiQjBY4aqFxPehhgeSybEJuQdEsrzEIbMoZK+YERlRRJBCasnQClkP4ZUJPBKHuaf+o+DurYw7NwLGs7JPfHv1SvFLzHzBTlj0KBcfrnqfdnC70ne21a74M/ZTssEY463nRoV8Rl9uZYKR/DKKNq8AdKgVE6DgQAaD51pYCDdZiCLzpW55SlGbBdCoF8VmWVaXzc2G1T6zjtozxZKduSze6NvK0jXr37gs8JvuFedzvauq5lHyAbOHEo5JVO0uavQW+HNrFglp+3eUPLpOSvm9/O1W+GOQW6ops5CNuxhwFWcLQgI9DpwNIi7B/STbgT7TxPjDsFgR0VxsOwjrUT8u8JjoR5VxmocYcalO4Ydv48Ro46kjQIy/KRJ+K+KEfcmdke6zhQZtqtNKM3TQ+ojf5uYbxPTs/Gp9lC3AW0vC7Yb/4POQmYGYsdItfV/iXFbT1wKOTcc+g6qPsyTJ/updseGKt4G3wg0BoGpTKSctkqkfzJA904fGoQXPilnH/v1gWWv21VeQ8lWFs7TdtlFeUtVblXrm4XgD0IJpt4gIclYbS0oCEB98nomaI6IuRIAbwdPChuih/I5xGFwAQ1WG86EUDn9+6MxcJ4ZqATtL14rGd7oB5Lg22jpTp5SV+JvypQyzFD2Eyn2QGOrgz4qHqDKXQOGsyRtWHY4hs9OKscRuhFuYFcabPoGIjym37K76v5AExdZRBWjgqclHy9Vqhs/yCJ8aAOrp6LtBgxMAHqeVTpCZYibLr3x68fVDE8piTDwMSHsNYqL3/8iK8cwZEUaTKIOA9/oMTXH1HVHzMWJRx8E+8qR8wG8SKIlBvNxLbIntkLUYIT/4OxdeObfMcYWAzYao9vfFZJNOg+pjtJLBjQ0ws4D/UWmQ4anovZkgiAbeBfQyVj/7SsYiwg0jgSq968220lLo4J8amAxEs7EeYKiE6RBNGuyNF0I4RGJBD36JZtISjhnMhsFHxC+WpHMVV0E388kfbus15t64l9bjZqOJLQxb698aCuDaU4WjKuCX0UUCseEFCfXzDlYzZVLFXLc5Ir3i8V7PBzo4Xj7ab/lbvX0tkbIDggT36gfB1l3s9DzUWJa7KDpEFrZUL0a/HtoEHCmqz4NISDCa5XNE6qRfHmNF4vDkk8rSP1HYIqV/qSAKmUS6qLTVzF9CsdI6YtIIOSanefumUUP++XOeqNRnmsNWk8plxCGs7sajN9QGtdyRVc9o15pYwXv5KGQ+ruwVWGsJEwtqjXLeGQDGGBjyOt6pxqQPfbwNSSNFlFR8uf32Yx39k+PukQWIL9tlp30fmxu4ANHhpc2BAGYteaiAAiU44qgVPU08l3M+ni/h+fgPFsu3ODEtrJ+JJo+s0SHKvKGdqBXqJ1Lqt3rkTSouPOvpub/WCmKhk4Dxg25gr3BiBwDfqEtFK6DbtKWWDvqnkm8HsmA1Caa7eYo9as2Ijr/0h0Eeu4rADX/eKlMM0y58EkgCtCTR+hAF2Kifs4rUnGg9wqhpNae+E045XlWA23mNSnRbnLuL8x1nJEx9ssBdDNBjWNOwmLEPlGOKMNhOflaMr51QglN0qrcN0TA4NIzG9kwHbetwoQ7tBAbVdb2i2ewCwjbrIQXiyO2xpew/guppnGNl08yOjOpS8pD+DAXnTn/zdWAbsyUBKpRBxn+vpnZYqKMu7S93gwqDMGAa+qpvugDKUu0awAO794mA6hUHl9xG0RMApOB9a0dR/12duZaNlfbVrf2IOp1Ygwj/1+2OObqoF0KhwhTsULqRAkIXrxuSdV3ejCHTDrgLu7jt05ZVe40Fl71qQqhxy4UncTdINKEqA+RosOK8LWdtub3haOvzf3czfBJ96J75Zr1SvtveH+rwUtRmIzHpKEBIgzd9B10M4RQzOcW1iFJpR1zR8bd6CHbvVPQ2Bu7dDOLboPttcVnGWQNrEwwCEn8KfQXhhTSK7btx6riPzHdheuThPd2Cka4BmasCVD7KapdMv+RzSJr7AwjIXdjInlfhFlT8qitwBs19YGmbB3TdomDaSwWhs3wyXFXHogaQVzCPgmfbn0f9pJLU31BfH7+TANFYKNDbiud6lzx/HNuyZghJfu9EQPGobq3hP2+19mKLOX43gDuCDBZyPVnLL2j1lMdCWl/nmTIRAyH+O0ZsfHPaQjQKMzJEmhwPrk/8OpBGomWRAIEqC2hN1XJpt7PxPV7RE0jSW+WUWch2oFz1pXIC7DVXFNXtytkDHO6deOeQEuYSznE2ie07pUOvnT9l0Bch2o/38kRqTOjILbNxvrPt7EL5OaAFeVHj9qKRl/u9QDqUcN74fV9e8m3ZS+BKBSOjoNXhWL1cYxDb93rNkSZJjtrLcPgb4jJM5+jha0UIh8tIAU/JSsafhvAggtIymoVj+t1i5fcfsneW/+thyXCpp5P8+Uk9KdUP0wDQ4NUJzA2Q/9qTz0J5UEmg2wzKtZyzWXZ7Mqe/zmXyU4G7+pzBv2H1yEWnL/Q5k9fvJ/6DFDB5jT1RgtKsQ9zMln46vO5PmN7IEutmaDOjKu4wOS5w094BEj4iv8DVp7UmhKCRFg6rux0HXS5ZDMGdlz3p25hUlZ7b1ALT8L/9DwIVUtcuiH/WOnHw5kR36buXQJgEYkRT3nLedUA20+EatV7ygRJYSt1WpRSfVRqGnqhF6s1rXyclllPmPbHVV5PaNVnqKyCI8LvraSaq4FaKShcslwTYJpjjEebGPCU3jfJWot9BUFIh/tpKWg/YUirW2EOmBdk0nGghSHJWx1w20tlMSbaRk6fLbanbPp+zoqJhuIZ7diXbomiR81K0A1ksjFGfaAPA5dDUsbfRlnpedX7DWX+82jZe+qKDm1aMeXHePEg5WlvMeq9KeWy3lO1obkS4nEN6+gYHx7Y2znQ1/RJ5+C2jFk6ah4W2KQQZ9RjyE0C3HpcXsPSTO24bUzxb93puPhGrowpROrig+OBhqndNMMYvx62HSVBA6l58+XIWytdm+7j/dPUhQZKXTnOEaxPLESko5xJORk4GS9/AtdgL198hZA3TAelu3GSnTTC2oC3n9aIaIBQukkiupnVvfG2VNk9aFRxXG315DwjvBDg2l+zYJGtxhbvzFymAutG1mWnl8bYPPAn3K4hawZcPNYVSaIewFP6RYNRgnOZSoLjRzYmttZZ0ehfknEEGHWNPUk3EZMb6J74l5gzwpT/ZcW9mxg3h4/lxy7Pg7WgOouROiodZU2qPhgNACgTML5QqoYMDpBDFgmz6H/1fOVd+a4IUvGDJGELR0rPmPOXXGgWpbmTRS2JyJoiS9Jhm6dlmqTmWLhxt3sXASf+Rhug6E/wX+9hXQb1RieJ1JAFzUWIDCykDZM/9yQ5EgVEYh8m03aH1NIyY3jkXBttoDUeR0rGwUftxZhBe5sfts6jxCYeUkncdECNA2eWC/kmZ71qu1ICtG/tB414f7/+Q42knMXDhyQkl9jNKnZsz26n8RB1AMLQr+54labMmyipu8m/PFeIucQFX1wTtQCs/Io6E2+UkBiM4f5huLnEdnksraYSM1przkDWZmNVYmf+70WXUovjw3jxMo/NoKuw4gTpSFDoB+/G3JS4FJjmGKn9P8VqEhrrFGU48rczwCzWfRoOJtOfgKugEDyMyZpRvdaX1rTdqoMGZWlT+AUNu4PPKmYSC0/KSM0+cOWYuI+n3pLykhf9BnyvYYT3CCgpbwc01HFy1swtfMorGX0rF52Snli6l7GDfdOyc9NPhLazO48463hxWfPDDDK2R7RWzh8lFYNZAZtwnSgCw5r+sA8WLzHfyC5Bt48sH1tSZr3044TwZZPfWzU/AiavDdXANfN9vkLRgQ2ffY1v2HwYMSnVX6kqxmqN/sMUdHDBtOuV2nHARJOYjoUpKG3hjuienhiYMedH20IVScvWWVzXc1fHJ8O9HX39mzoG7PTGVfSOT0YdbrUjd/JolXsXzF06HHvYRhVc1a0aXrpiZXpBlf0UvlCUDD9FsRa7zufHRPE5gVjxM22wCy0KqPCc9wz2QzCD8gWghbDmXne6Oggy6cid/3mK2lPJxXBYE+b7JaylVIwFbIdAnbKZN7gd3Uy4v6/nhR5lH/g0cH3qoX7eycbs9SyvL+MWQ05exBedYGmM/KzkqUWQIAaWB98cmQi938iOLv8C2yCxVwD1EMc2Bc3k8Pwb1caT2XgVnMwjCVGdrSDZCcwklZQYNoXWFZWajq8hVwHwI8aCTZ17UYXNzoD6FBn+abZA9IoxGWMqUw8sgMdE+eQnTNdOkGLcG73GOvdSojvKnFKq6l0tY9X8oBppp9Oek/uMJ4Db887sq0fznUpfA35tGYJE4m8a1+3sKTSoNYyHy0ATxuXsNuieTR1DjHFHGsa2YFSO2CZgVlPUibCeM+0/hBVHGhD6fNI/cHUJ8SyR/u+0DOK1uR8h/r96uRN2Dxf28DkBl+gq2Jqmfd5s3RailqTv8EeW0ltm6lTaX8Czzs2wZvh9JmsEn/ffVk9x0PCgGgCXp946BVZl+lECfaeji+LlthDq8kKhID1vfmBNvV5hfXikItDPNpVZOtR/68ZKOFiUwueAHxlrAcWS7FQVW38M739FCn7OOO2ASxRh68iBItQDdYBReMiysHRL6ixr/mKj+58c6UKvoKiH173oR5f8sIGfM07gUDNSMp7rVsJv+jgiWxhAlJgFWqq4nA9y21HzPGUu8Y6Gr1HMKBrQ1h9o7hAMfMnOtwBW+V0xRqRr9HxeaT3uwjGv1Y1N/cxdyfIgUEuJ1kreeuqglL7OYAEgUzWh+oJNPBZWHxKxDQlIzT27dM5QXS8sP2QXlfa8c1plqxFVnwOw0XuVszIp0AEjBUFg1c77asehRr2lpDMrMrOWSvmopPUtmpdb4xB2IHNxMUcymXdspW3xv6gophykiIFXn1WRNPWsW2HTBw1UbSpttjDXOeDo1p7eyzL6khF9vDETJFQM27aTsPp8QAP+gTKOBlRC16RlL0DPmL++WMnfxopw66v3FazuaW6SQdjaYRbTFK7yqYwQX7PCQElRWsiaWe+l8fxZYkfkv0XovBhy8wlPmMSagz+J2qH5nVoKkEchnit43ZxhMm6npu4C6FicNdfwpaGYlwOPHVe6iB9OkNjzySM+yRZSFfcKgrh+MGuAngd+HBYM7vV6Zg+e5gsqFcs0A6n6GouMz1dIQ/ZasMouij0mYOA3S6Od4BYlSrH9AdRYNvJ7m9DE+wFmeJQFKzE0XBaG/8xHbJz7PFxVAMvFTctgb2mt4UblS3n/ndh4Y6gHXcrd7C2jbDbvpCkMLkHgKfquZWIluPTTEguqOpxJBgygygTpfg0psLWiPzJoU8T/VQQvl6S9ICHofjX2eAA3SgFOjw6Itd/ekOh1n5nirp7yULZg+QHJFbFwitwCGBGBruIhP+pOUIKMIPZflzDyGD3Yywnt1FcUkve8nGe7Q27fVQezAKRKxZ7GBh/Tfwv+dheGWEosz037bEkDbPSEepQ8VqXhmJRXE3+EDkq2GFZ2b9bRlA9yy+BQ/VVDyeJuDUel9tgiB1XZLpqEhn1DVMi3+lRjzp7bf68qLlpbxaI5e7ZVFya7bQinls+i8C9B7Y2Gb+HZcIfG2ks3Wg5uaJYoYck25J/T8JcmYUlbDtkHwrKCfcC3cKxF0Lhv7LekBwUfXRXn3w9tjuOSCRwGPRQnhuwUYRwoZBmk10GssbUO/P0OMvfWLgOuSBivv5iqOZlBUYScUZ4vTn6rHdtTlB9h1O09HVa19/3oJI8TwMh+avZDiyX2wFQxx+foxtqbRTWNvJaqiLjwmbbdtlFbEsx61TPFJgZ+7fEBPAgTcK0l71/Tiy8fUpwTcAX0C9SqtlwDuTpHCDPGSAJYivMibqINLVicgIm/bxKyBTK9aSNp80xNf0wXZpNUZffyBp5+5zeLA+HZ9QIHIsxOqhbtJXaR1zGuluum/39OLx2L+bYQBjR+PHLlhHfN9SvAKFfDyxxgigcg2PZE0dk9Ju1VJ0SA8hjeeDHE9OfgOzJ+4N0FxgL2ofQ13QKk2WbSbHxMtbgAv0i3TzLpVN8xS8ihbZFTtR2SUTLLEDeGgWEWwVNGHbeFZbs6+FL8MwAExY4xMTuYC+0E0LxLLY+Tm39WhOtlVan2mZDAZEpId6cEswgUXriDUv2towYnotTPpi+LOtcGM801IjoVkdS59t4AyCP1SSUGWjrTYrpYdLgxo+GFD1tNzJYGq0v1QIcTaDkgHWtH/nPHKnaxRDbmYYO902+xHwHXqF3ss7T5nty7yhDz+QMIWrmCIoiUf2l0Zacx4cNOhvvEG4tVE/jLMGw/ggxsXpR3OEcSqoZmKM1wMGQ3644AVNyHp4wGGN9NDU8V896vHrHaNusuRGPgkldYZXuq2yhm+muLhY67dCLGR2Qluw49riqN9fb1TXNmfLy/IobFy3tPQ0vmuKIMlSel1V60tGiTDQLaO2Wh8n1NMBUhXz9D8Cssz0TOfzJw5QngqMrikZjElmB7iPAKWMTJe1v4rpebR0ZajqNOziKFwj7CSq6WG/dsw+IRRPuohJHnsnQXWQVXG4jnHbstEY05EYgLq5eA2UIE0a/r55iPvduPwxrtLe1uCKx7pub7jb2+Y5S7t/PZqIvRrGOJ53pLCOwXgDccVtJczqmWcAf+Wjv4+X1cFWia5Xbn54x3OARI3CzIgMFio/O/a9Owt63ES9SMzD6CwdmvMzYVNWkLrcCEeXycE15VCKM1+2SraZzFc5LZH4/QpYRQEZdwkwQsYSQuONs9TOHD7q9XZn6lAIYEWS0Zc1xmnky70Yqfahqhh8ZqahJqYMuKRwHr2ADB//Ckw0I4I3t4LhsaggpzgN+o6sgk+3XaEbnOVkUJwd3D9y3FVK7jjstrrqQtzRYSxsoNr7MT716Ovb4b4HAGuB+sH4cksUSHQ0/zAP2vwf/8uaaDkI390DEOgj2sARWujtPOvrfwAoSif03U3xrc4NoL7Y7s7ivgf5E0F8W8Rbx/Zh1aEtEoIEMOHfgX6EVGcHC2ctyPBkgqdy5o1jPRjFsEcx1QmxhTR/wm3sufIAxxDmQGG+kduDGTpTKLYlCzg3EQLahUH+E+evg5PshOsqNbqlZjZopUWs94LR/27YEXYiXkVzOObGUVbiYViH0apmHhWqL2eeSORwxm6WWdZU/d0QChAqSA+5bcj1omC9SsvPgAUHLW5d8Bm0pCPyRiAbUkFkTq78R8u7L5Uv5FJ9/MJYnt4SXfUqahjXQBgitree4QRj+WNH2QnPYlt75xiD/PnNLU1ccBeuGtqw77Dl7YUKE6DDuICbLICrSvAYKXXy40icjPY2Vquvy4Ti86zkJFtCaf90QG0Fn5C79gZtzPs6J3/gB9q1gibFX87Bt9iz2gLpnMaz80tBePBxekjWqUOnfMAbIzFOehK00qdlgSb/qQ4pmqMbE3UAb0B62yRSV1B/frymQ5ek6bn27Duomzq707AUvtJs4FvEt0Hz8gkWeT2Rn7apqJqJu/DupkEs/B8VRlMLNypydQXxX6iU28d5hm6MfrhPig/4Va4K73FX+fLU3VKpCA5eMjZ3dhes6pQ7s2yTLhBnWGcNL/QUjmqoXeas5xJGRp52zZnoYIQ1VF4ecezDnge41Bu2XF8Qnij0t4umbfblhJPHOUGZlEXym0uAb0payMKE2eA/Z6wtgAFC3nATEIvoXBywyswqJVVNplHanhcZ8Gn/bbR/YPJRczFX6tI8syRPq84DuYGA0l751SE3+iO+PHbJz+ylAoZTniJQeAcfoEMaCgW2QSGzwgXRuihCbCUKaHU8rutRzk/W+Fnxg3+TtG5/PKbHDIcMuoio8mPXsgqPzHFA3hSccaxBcsdvT9AsjSQxmAWNuXh0WAfh4l9/Eju4BWjUT6/hKv4sssDCuOuvQqKJpQ1g6j1BjPLBhXOImabbRkVjvKBkAFksxqfL+n8SOWNeq90ub7KjWP2FetVQKJcY4fZ1vhANrEA6vgdXuEcgsHdzTOQ561/xQakFBK1FFFP3f4apay48iKlumhCXZ/XquQ2P13wXc8dEdn+YfYhNCPiVbhKcCaj9mihL4WMwOWuTo5Njn2Hs8FXkw5Yd05LVsdWK2LWGqeHWD3lF0zkoOc+zVCIVm3jYsJOkooqp/jHd3RW4khyjk9iWS9ssfNBrxuPEbK2Go0BhC7lJAyt5EkQGmDrYpEsZPdttgfD+JXFERP5GCuV4TEN6XmLh9CYr3bHsMLQ+v9rAWF8ZOchsW3j29La5+fcddWEmTh1WmhE3UNy7dLtliE6UG3xbvlrrha3+a7aGVc5adSrz/0wv4DvNiMzUiiQpdxssOhGLxicHl6zwtdMcUoHguMQwInL5oef8361wBu+TWmRgFEj9kq4gO7RDjiH/WFUFli0IyyQPhSscnvz7ALb7e9ALCNWzJWdHDYEH/22MVpYEYIac9KuWSqeyMC/hJy8scKy2H1LQO+k/GrB2/QG35BQ4jTEfj/Tn9fg1kK7UbAQMjpeHz2tNeT5vmG+OVKykA3BOuuqWqWFM0Q/qIOgx1cbdcsBYCP/8bqYJ5E4AonqMMZLHwL35AH50CHBwM7X/3Pc+4lC69AtxwNJk00Fw2/mU8pZiwv42vM/7LMSVovi4i+PaWDw3iKv+dyCnNz0mY3RwWTz7JeqzGScu/mUjOb1C3nvH+7fdQMtIzjxUuxGqyw0V4Qas30Z7UqOIA1aKYUOwfWSONtTjJx3wvW+aWZKcwmbHhqXYdSRpiwwsgQ7UFL6TNoeVCqUEhjuzNCBt0ULajcB8YVwnFtZJOXXyJY59Y9KyxBD8m4creIw5PzpwAKCTdH6zfPyV0lLhmECCJqmvMGEsBK1xyi1B5Fe4WQGS5LIJSiDqhlWqNJ9JQolT5IgwvegogpziajV5JueuXwWqpGWdu5XFQ5MAp3TGV9cdBZNp5gt1is6IRcLORQ089PeLXCJ7VrxOp+1BKMux0kX4nH1qgGrcGQ4HcDPnpHuvLxx8DrbZs4DB1SQIk2LEAHIh9+S6YO7bvbayocU1LmihddUymyEF0BYpTL+bTIjzi37PujoOtMvSha/ahNkQzilo34O4c106k/XDPPnf3QsHjzQJM0mPZ70KbNpIwsmxy9pb6U38krFBg7BezmSTc7Kcdur4jrB3gcnnoybNe6mCq+BZJYNfs9V/TMBt1y18ZtWy+hkMxV/+tsFV1dni+GjnxPjonYDqhQs+czQcWFDdlJMXaTYxnRN/LdLZt3YWZYDS6kfv4B+Fx111fugdbUleCRlc6u3K1i++9XZy9+TwjBibdDiVIJqtqsB83X6dkQZeicvl3I/99iLzvYZLY0M24Fm/89mLCuzqh5LWIm4f77vII41mSsmxpQM+ACOZr7MtTJJ3KRIVDM2DdxsB6tS8AkifyQiOL4Keq6Tbxe7BxaqWBKp1XMORPuk1Q+Vlgw9qY22txKETP7w089DUygve/CtbmEkAjt1nTkEVQ0aBvGTOm7GJOU/xs0W79/HkKH9UBLmfYMlF2h8ffhXaF/BkaR0YiOGZc7R2vOk8qDp4RBroNM5N/AvKNLLMe+h8LHoLNGOgD21b2WKKV+F77W9fiqhviA1X5JfKipM+37INrYDW/dch9YyO6SNPzwMNCLdBLINS9w4nkijrwgGer07kDktI9mGZC9DLl4ITctxGn1LmDke0gQVCWS5CAIoR/k1EvxwWtp2Vn3hbI2YdrUmHkzJQ5CWOW1FrmDYHOse4eJQSTN4NJygGfsS6DLJK2FB/3w9d4f7PUTwjAT+bBFqHFeVeVlkFpmXzQJmtKN/H74xapw6gR3B+//rHZpXGNGj2A+G4ZYMdfXIWSiriHkf996xpVyumGZJFTxrr+aChjkb2DR64pp3lDIebdIgcNwYYXQbEAAw0z6SU4zAXZ0NrXBCRgQhIiPQ16Ja58U4vCbceYXAi6qs5oGpPpQrtGzUEAZkSE9nVrVyuwsyb/PJcN8syOW4FaCyXYTs3N4DK/+y9F2iPj8tbw90Xzv2Wofz/oRXdk98c6QFTybaEl/aK7OFn4cxkGjrz6OjYLyEMr//nvsceh0/DUTW2Q+DGiWPA3rF8ygvmBwMlxScGXfEZqcSz2K65KJvblbRX660VMwVEZAt2U5m/w/EamuQ5/kxVGnnxR21AGgTqGBkIKEw5LS/aZ0/YQd9miTlYHhMpeKXXn9KUG0gAxNzp5ZF7JsoFIGJVaQjVgxzAzN3pTWlzQRjhC6hSXUZWc90R9Bsm5VTekrWeJNpHUmFuTyyacQjzfVsARtsp99itNKM8VSr8BZQIAYJg/TfExTo9edHgzHEEOATiPXPdlY3oeWvQszQ/MupicsgCHlq6jHIDoS2ZCSa0KUhGsPywBCLuzCd5hY57QZSzTftbxR/WrByoL2ke7sQRXt+7/cLg1dq7xYo/2cXgEhJ8/ipA2UhwihH6xKX6mvUlKfyvAAozFvJ0aEU629bCKBsWqZF8Vkd/JxLl7BCt6Pmp/Fs5QIzsDB6ZNDQK8Rx3MoFiINjGI8K6ggujiCLxoIISRqV7rWkQcENiP8ZDvIV/ciqj1Q17QGrIIgTHP+ABMXDsXW2h4vjuc6hrLTdoXTZYPQnM+fQsqvEkCVL1Ms9NPpLP64Ritpz2o05lkjpW0H7qo8lX6IGmYXoEoEqPz1bnp9dOm7a+OOuWibo2Hh0oP9fDMhb4S3mgCMInnpENgUV3V5RWRNW5ZyVGjFg4IkGccsUJ3TRQUe+F8KGbkOn18Ws/6q6o7GpoSuv71snekgt5QvQj/BY9ixyQN2tYQXNMSDWfZOryB912dfniiKAb3PSLpSdwplUO9EJDd+kWMiKx8to2wfqYeqA5Pu/33LRf1e2j3kUnhNXED0BQvipdIIIJZsC/+ejLYJpJKJfyXkcCoGVOZM0AImGC2tkA+Sp+vhrAmugn3m039+SeK6OtZPPNA+OMPb9/HJqghDcgOv8c1EH57bI4qOj3rcChQV5a1dvwlxixGdFubUicchfv9X8t/uL/hYGXo0Bgg0/3CgfEFwf6bSA5SFQY5SzeG2M2Tq/QHBMuc9uqMXPr1EIDJUKAuJUdobVOpuPw3xCpRaDqRQWf+wY4T7CqirQzsEWnZzk3nodzCza70ITD+IpxVldgD1gHu3xTLmEb6O/yTFUQX/b5g+hT1UY8ijoGB7tX6zmNfkavFBGjRUzxtpwJO5t99cGeqoMlyQydalPhdbtKwLqxtn3YDRW1mFSkOjsUXwxwXo+ee0ssxWSCNLFj8z1bKaWlCe803qYe2noyoJpahWa37HbXpXGekf2UN10R8rpIjN+lShjv2ThROeNaLalfyGoTNoESaK5MuHy0nxpVFABXacEHiLSd5k2Mp4NnjdT9QM3W6PTE/1Q/osH2/MRQysDPiOTnzJSu+koY+WU64UHN9vfJafOTWfipO9wasdQmP9UBXZfoC6+d+GR9NLSpIHT3iZjjeLFHrc9NR+wy51qNVuCqxT9c+BcLfSiVyUYWAWem9cBEnmyiqTlkV3bflqYGlBqeZM9CPBoagL72uDtmvouxl1qEulCOzu7HMjhtBoSQ8lCCS+BdIOMegIW/3YHmcW8tiBfRJIwH94Ht7CaLNKymaRzL7zw6ltpfkukVUa+mljsofF+HzgebV/+ATqUQc6F329PrHB9rlkW6kKeVI7DunC4yJ5Q9Jky8uVfDGpirxrM2RMBHmGJCVMnurlP7BXPs0pSEgz/pr9DPu5EyzjpzMRACxZRZDF+jDCa5xzVduV2+XslVp3/MQxeOhJ4ixfTAJSIq43LpIsK18W162hIyKYkDF7TtDmI4LwTByf6uTUZ8LUFKjPqAygFaWui/iDTJggINtncrI28AuBT0yK1vjAxq5kSzmspiljX52sLuqR97cGaSG7wqKKRfJWSRtbCIN3TlrAloEKcu1RMk+wAt4QPcV4ZZN7J8fcxwIJI5K8asPTShd7LgR881JxATxh4uAzGCMCz8H3zc9UMipQGKt0kg82oU8+G8i9cTyEEzs5NeOS4luRZwQU3EsFfX9apAlSWCmThd6BrCyapd0Sz4wpL/fnZwiM9hKR/2GvB+f65SlsSro0s5xOBGBJCcWi95FFYpcg+h5CqMfvVdC9+5iKOnf8tFqq1Zt+Mdfyb2Z4EDbBT+cEXK+n0mGONMXxQH6mNwhTDG9G9douG39qZKQG3aV1i6kNnjQSDD6221GXYdVTKv5WxNa7ofy2pw7dTTOtvwuWMeWoFUsd/GqLYRnNCH+91sbSQtQpf1iKNglOXVSLpY8VV7+wnUJ6+FQRjAR83S41HxSeO6L0E6+mA+7Drjxd9W6Y/5O4q7JVBrXyC5c//dUtVuRkK4kVbnNGu9tHBjiFdMn27nAhj4jJtSgWfF4SXjACPfbqx4wHr+E5kpLsRm/TEMiGDWXJmaOCTIA8i+g6wWGEFc+lp1sESTtbBKhH/arCp3UyTbRNwZYO3t2lqxpcoO+ZOnFofbI4aNBefoc+2mTJL56qO/VEZzpfwOPbUw/9cFDCAGownf17qgyhvqYCV62CjbSsMArwdgcgviu+t0yeQtZNQF9vGLNtGaW9h8u+T4Z4WArr+zKD355nVyoL9PTQk8YVVf7PuryoyJytcWNw6rQCYvG3JASFv4APE1ZIt+0T2yYtyhqaFncBqxy0jrf4cBk3Ggcg3ZhX8BB6bbR72WEUBANloLGHBTormAuFJ5Gbc4u2C2DW/gCYQ0l4xvaNXFZwivVz1n5ibcRcYxvg76nz1DQm52AfaNylhzBfm+bQSNV0oy0hPme4B487+UeIGjavYKkaNuHUSPbAm4Zpw/A9t25eF2nQKhNhYrQgqJ9kDQlsl4qldFZZcbbTQFlwzV7fV/y6kqosODzmpvvaYDoBj6O7Maw7hYUJYsnylpJ0iufy6tkkkpk5b2u+EtTLBdlP98f2TZKHCsT7++kz8XPW+cEvHOZBPS3+adjK6jc/ThYafaCMzNEouI4DicMQcqmC3Izv6hxndi2y9wyVXb3GuujSgliJJFNzqk3x+93Zpf6cs8pJ5T+RE/yxwKyke2Xm2NGALKGzimELHUx69aioWRQpjQ6NhyW7byEf1w8BaIgR3lN/T4aDmZ6BLz0BMGIXJhYMB8cYZtjpR8k+W3PZWpa/f9e2rfN01oeVam/MHiT4NO/3VdvJaGARhLi0S7es8Cr4Z1ik45z4YN/triT5bvlO1UCAZWYGz7Roa51lwhU083lMTMZQj8ISN/cO6fyzebZ7zlSmbfWrVk40wNhyrjebmMbqliTK0fn2qcTPPY6IgIfudWz77Fv1AXHzhel+mSUv89rhY417Fg8mRXDMqwc6jmX5eY4cU6ijKD0HSyKcAi7f0kWvKJ9hEDTUVOiczn1v0l9/o2v8eRMESjJ+7m7uQ2VoFlqI+heeQjhuO1y07mggQFJ+DMLueU8v6K78VIsKk9tEvjNI/cD/7oFf9vL5Op+NKIRn14nfc6bDfiW1fWVxEGOc6SUOAx/JVWgZNb5CXkyEjyTMrL64QeYmphAxGD4Ov5d+EKIt8Pc/dIlAmb1wKvthsN3Drw0Zm+gdZMfErikRLbCZGHCA9o9JUynEA+igVd96geO9b7cXmtuDv9LPVfMr/TcV03aYH9SL/VyuzyBzYBBeMsD2T5Nl9FIbXTs6omH6euWpOvb7x8uSQsw0Q/sCYKiPD2d9lXANEFQvaXQwvYwFl/j3hLtUdAS+YG7Pqq3DQ0/sHY8XzUgJNFtb3xC9hg8It5DMVzxp8GdPUZvwd0KrSFE+55wd/BTP9q2uNmc0xjCBBE5Pu7zcRkkbGLrMLKPmPWckQ0ZChfzOfivVCLhl6Ms2ri7yIRgz6Jyt+zp4DFVyHJ+k8gq7YmziEkEAKTgLMRxY9mvY0X/QUpWUeMT2YMdg9RxpQUEku4W+uAGK69zb+GmdLzitjGkefOr7+P6UJlfg6GTXI95GaOeGlQ8/1/05/nlJYO9B2XLFf19S2J4zfp51+jEs+HTNmuw6vmsR34h/BA57AKHgyvRTf4QoTggq7izsIafrvsEmvuMVYZcyE4Q0usXrnF39VTFm2GrOacORsrlFtL96DF7fLOtZ8dJvWXwe95AZ5AxQyJK6dL8zp5v1D/vSkdK8WPjwFXRy+VMEK6efKMouKg0s9QMtu3VIakDatan6gkNc8lr7Y8/hWaR4hXxXOu1h2CZUmfpiiaSFIFSkwIXb6RFw02ekKlL9A/MTdXdzInHyrGfjVILvMKWDDXznO5HG5+yd8W9Wr/jFOaivM0ueXmLWn/8vop40f+JuzS7ULYACPfloe8buI8cjefF5LqbKle1X+S8SHlGeV5A1hmiNXJQXFAPfv07vb2+LjmgK1rms/8qNTwdO2OJWnRbXNeLHTBAVclGU7ihk5Vw6stEvGAvGTgCnxwI0kCuxLKpbjj+sOe6UBLqK9+0x1UdKrPwTDEqEgophS4OVfRmbwaw8/ng8RAEUiXk9jCfwKf5+jcrXRE/+dJoKRNEX643own2oQRVWEb0/4XLpdptBXzI8ZBnNFXVyMk1RBBhTkD+rRJ8e+yxRAuDOqSbgLpJk6IwSFiiIEEEPFZlsXjTY4RvTlJ4p99EbLveu+FCZ3nWfXduWPKar8MlQN/kke8wmQL9dktzEvZg3hEGFlozo372OK4Zlf/LtLmvl3PW+EfaqgTXcbtxBq/vrwIblnYrkqIrJnlfNZ/CthtGwlGziQBfOZAkat83okzf9Uv9J0O+RKRsN2wGF0PjGvHUYYyr5BaAbddeD5aSG3ghv5w+nxzFgYa3PXGwBQExTgoxuTLwNw2xoeZBQbHs4wOV+80t7XWNwEb8BKyNfai5YPrSkPWx0Xhvf9H8lrK5cqKguLqoatu23GszmXqpXj8Sz7iKCEWpEQnUeiSuU2LymxCUdQ1cimOiY1ou3WYhOyCa82nfYhkHs6Hq25ILaS/KNjADZXhZPhFur9HzcqSSbO1VJX4R+DhKoIVEKhzgGt9TOymbPV1151WUnjZU89iy2SclSCfQfT1N5MgKA7UlhCcyJqAdsmAFd50ltOuHajydHU0sNArbSaPv7dw+KG5dDbSL631hBBRa4/gJQToVou7kIkt4IrYLAYaAnnZaAkFCgZ5uBKy8VVFKyx68KwKL4NsQw6DsR7OGsPeC8SRgw8mbdmfMdMQ0CDW3zMxv88R6lnYwECBp+od2d3GpknmY+ri5Ivo3/POMS0oRJkHryjgDbb5JePNdvJOA9OKuK0vWEMtY6n6dZBx8BxEyB2zrKP2TiMjuL27OBmqk+qwgIIWafLUOAKOfpzfEz3ps986TTmHN3LybIlXj47wVe+yDX5hcLlZy0kRrDQNOpKcIdZOaDtOFbz3SV/xXZ4mP42pvlF5nhpWuMekjg0MXWdxs/QxEsk3I5dVjNQ4GrzFXv51Y6/J8XOF3QCWWrGpBtjZKwQy8aPo0QFnp+z9tursn03/Ey22X41FepSBVWa/mybaTNyWeqryl+AWRCasGZcxg1qmH6U5umWGjaqYwUPF9NDzSBUuzm3U6DmRE8s3R1yEasISUrKzoRDD/FGZ7fRqQGnHYt+HvGMBK4kPQNesJxp3TIR4v+r0XzGujxImO+Kqv1xxIav3NTkF58SDV8eGJzqQT/FfYYqULeujMfyB2qeNvxk5BQ2Qt/KZBl7Hwkia+Wh7md0R4k3j9ZycWpyaIL7oh/VcGKcxAsqFayrb0pm6JZWm7xxK5wicpW1HTaMrnUj+SAqlMcFICI0anEy63aLXBjFkFH+YUf5GstY1HnelfXCoLKuIwF4+C6gJPYEDd3MaCYp5bn9JsFVYlSGkWYsFoW1MjcFW7+9MBL1IrBNyxziI3uGZUMBkqV7QbTfy5q6E6VZy3orV2iPOxQ1TWnqZpySKdYFUgypvbFvaWz+OgRlK2kUe1hS7ativN1RvlQlYi/QvE0tXvCitbJMxIcGHYXz9lqhZpmEpSvu08z6T05I+TIiU/Etns0qV5WCRBQQPZM4a9Yj9XREdVh9Xk8ycaIawFa5WHpro5EZwTiYegazxCvlgJzRnIBi3i3c997p4YN5MKzCap5N9wYwr52vz57cQtbCulOdKM1rnNwpqm/ANJunn4sUkMWO8D30l5MoJGxNynjk6BZZr8Bdu9Nf7Wl5HavnCWod3vnN0BYCG8I2otr8Urj72LrKRj4XK1aCeSKhXVzMtAmSJHusz5UPKz4ISxwd9PeV9SJSdujLHA+hyUby1UwTCwluvXmZnMIyZeNc2bNwV467xrQNQPg4PwYpVqcQBAIqG5htN5QbeKF9+orPt91G7N9l4YEcZeX0PAeFhkFq2jr88QoVj9XrhfkbCJIAQ8vpE2TBfuD5TEMpOfqkEXjkHz5BlnBHwO2Wund3t2JBiHa9+6XfcuGaTxfv1Q5AP399mD6CD1uZMqQ6QBt9fc+tueiNL1IOshVNGNx5Zu5Wzc0ZbUdFcDgJw058dPViK/6Koh+wYey0yJHZmPKrjMTWCosDRROm19p9fTlhtEs3sY1wLYmkcg9PyXVa7RL+E18QfieI+nPmilWbKkNDupkn0IxOwdpo6QDrBsXWkZZPA58jj4bKMtt1BSukAXrc3BnU0N8MKH5/l4INFcsJf+SVLuyp+SEchyb7r00D13Cng1UZhQv96J3eOFshmASWhnnIw59lm/XwZAiGf+Kn9lkMNtQ57mTN+KhOz9CNOnJ0BIt+mVweTWdS+ulgr2j1DhHUqh0ibhtR3cfgLbZhcc8GBPQKKzgBV222p3ND7asDbgxci8MMzirUOQcGhq2TdiYV2g60LOhTOi8c6yEHq942CCcQ8pX0jLlwkh7mwWOrnTYgM5va/jDkyZ2W5wy7ird+rjOiVkD2i/OxJkitsiBqzvz0aKvwWIECiHteVKM7d5qN8X4Lp2WSEOLmfdlpbh5RWwVf/VZUyY3ysaWvPakV1T7jAvpLx3ZznvxUOs9fG7w2GK7CRX+n8i5wktRMj2veSvKb7c5qYwGIGNALn+vr0JIh8F0vpWNqSQOSR5p38vjUL0kRg6BV5ktxnaNY44UKI40qcrXCfp5EQPWNSp/aoXaJsJWEzgQqj4ft0T1hqHfCqPAELyYF/n2gejijliUu9iXjem2XYjiQzCF3jiGnRVBFYXv7ZJEFA0BwUczbDUayqNxPpKoWqMSdJMfAFJp9c79QCqUMCglN6he2EzbxFLZj4s1dNkOcDLcYicgZ2ejRnmZEz7NU+DnANs9tvlkIwPEZMgDdZ47KzBuHOmBFGw5gyn0v6WUvxiD34tLe/6D1gFieSoXrX9dXooO8xClIXc87Sw0UxizilXCUntzUhoY3V/VuPxBUhDEhtkEjT4huzQDtWK7/hSPwrf80nbvt03yaF1A+S3drrmQB9g6zkZprWV7HZk2ZYlbg7UkYvkXZJ5eTj/UCpL3zknqt24rcm63s4NGKt9RxXcp96r6d28cVe72uCgoZSzRTRhmUzxd9eyoC9Pggb+lMD14g12UsXUK+UwyrTVtYEZFHQfg38lkpXo2eVCfMs6O9K+SniZMDpyq5tk/Zucmj4yoZSaiHzEIdvN8BCGTwWakD6Ccj6cTjRlcmYCxsPCpzDIXd38EXYHtvCMvbl9v9l3ea1SARqb7OxaOB1dLz9jeQxbAfLEoE4fyprKMqET3sH1NPH8/IFZ8k2CdE/Ub5+Cct4FOjbAB+SH69B2VxPJ6mabf1mCneLGMyGFbSjnBeZOqWqvFZ3qyOlU/uWDthRlxnzU+ld1OJJ9w6I2HseDMn/ZfVI3D1h9i1pk98gpAXIqG11kWr6WYKqMCeJHduOdGil54P4aePzwUogDquRp74fKo31s/TNzZXXZfF/lRoFvBwJYU+YolSZ4ASCcQwPgmc/kmTId6PexJiitTXZrXxTCRdbj7MSWDx2rdGcS9IM0sIC0J9hwxtrknmc0XZkbM2vyOysLy61/LbMdCnnrIJQYHmDmly/5yG+QoYJbZ+wfyvLe+j5Jep+Vq8/M2CWglxsLINFJaxAkPo8P3rSNZzFfvMl59Z+Ejj/3W5N3IGZpDQ1EUMdU2VWTvD2aLTJk5hBhRcCKm9Rey1B1ejUwXR1JnoiPz7d86wKy9flwMg5EXbVLKOd4odk5cHEYKR39KZpltrKIM1RKgUEUbED8dYdpxm/hlUcitUrfIokVtw+n9WFDaCIEDejLxPe9w5+MZ4s7FHr332TGOFvpxuIvgcox1WOgjaAyc4XvJpiMczMdVkFnvgx38Ts1rUE9Wyj8GvjXdWbhGn+4quvH7yLSoTXyiX3xU0y7KrstjZ6YNDlUwxuywc3Kpy6vReXz6MYpLtEmFhnVVxmKCPaEyYWLvXbfS3a9CFJtO8edv0rdQzvwOV1xjgbVzFYePmMVaGgldzsys5SuSK5UE3wLQRxa138bASP8m2jtadwF8YFYMaVpOqxAnr6Kr97B7+gQIALZ/Kiq5N+Oz1tm61ofjZvGq4Jud03nue+SFb/T73RIJANW5Oc7She2Bn51o1H27szQNuns7LSc+wikjnOrmFQdcih1EVuA6+9vd2iuqOC+IZTz/nXd20MnFhpg2ADktozr9MioRrhr8DifEbj+kuwC1PdPEQE+RydmQ7DSE2MyPu/F4HOdnl/63YmIODGyw52N0SECQ/0h2Vy4XBSbseCb/XIL71DHOdBmpzchQtEKLMqx5BbLkktaVnvKA2zZe55bT/WCniFKcIULC84T9LyqUkeTZAKFe5LW7m9O+cFIKS+YaSP1/3jxdBhHz7GAcX7Q/GDYgq/kwU4Em1+wUnRcy0wkwuTFfoSmopV62jWQyhUHhHPJ/ccwWT3VSIWQ9IaXQO/yYehl5xCC1jfNmeWaaZtUfOHKHvbdXPkrGxNtG0WrGQmb3DyYLQ4B96WGmpemoiE0H/bYHtu4lX6iW6NBuRmeVcC+xSZYHGdeCQHQ6pWwoztMNEYpwDTZoYtvtuLovLkoUWuPwzBHTRQ0gjplLnzEBwi6k9s4Dd96bnOnHOiNjDveJNGuJTWroDpVBrGY8dsP4Ic2QIRA4c2mbTwD2qK9MnD0dZRUa2Re5LNqP1xkqSUVSMxbn12K2SvZHSKwQr7dk/WXcLJO2Q38XfdtwPF+XrFo8tqSKnIjddwOYesa55vnKYF+FUZJ7n9zYhoJyuLCqIut0ZD4MMTOnnXSo0oNJnyyI/F6bTctf5ehgKlE/pXZXFZsweK9t/NoiYOA7yxwTTo0FR/SO77NMyuUl23HqwOKxFAFSpjqb1kaQoFm5XNbbpPNHR/KUabwRfmfm771CUIcekat6Jxp3fJqNgCu3WVkhLVdDzw8o1n5Ck9j1Pt17k75CewqBSr4VATNlIausUtaaOnEIVLBguJo0s/dnHv4fZP4Uz4McEd4iCo8sKYPCkLahJv1rx4reKdrnY45C7Hid4RfooU2/EFIx/hjIpKAeZp+5SJvqp+dZCXU5CNOohsgp5KFeFYsIaMN49sB2Tkk64pVMjigj34FWe6OdG7kLNxqJ7v1dn78CSjup3wExmaY0ofD57wIUJF25MlInw/QGg8635BFHkipc1hqnFl+g3a/j933/LbzB6yu9aXO9cJsRhzHnk+JPth/LOrrWNGsGEEukTgywr5CFwVxL6zcc+pOnvcDupf/+6eeiJI2lbrRxYnZEIJe9jFHQIt3jqryXt5PhML4R9O18nds69hBeUp0TV8RblCYsLNYlLnwfuSzNiwmELOeFiJeG6Cu/7b+n8+f7D4zdituA8XyoSI697iecXww4hSnexloScIEM3DMqA1qFWp83CLk16z43dYt8b5zgDKCGb5z0PCVVC23N3iRA//DpxSvofMwjllnekfCQRQk+4XYfmzBdtsiULgE6z8zssHjbE4jQGMY8qouRPtCowEX7i8SYbWpXuIWD1MrBgMXNQRoA4gfUK/LYEucAGT/tM5iegwKsSCcO786A5LToUil7VRZCojrxK7p5VG/8e5URcMDIIXkjkWeSCraBj7LGOGZdmlntrwpDT5OmV16r8CS3+Ej7E1IsPdDn2anJ0dBxnHHzjfCe5OHLh4adxTD2sjIHTOcsEMs+wiPkB6vmLFnwSx0yKWfoMpphRD9qbULl1VaINMyq/0Rd5lxV//uSwvb7zHLkHEgXXA0fOseG3oSlCSoZGfDUpU2WEcwUmtBs3stxWJxuxDfLxDanVP05as+Vp0xMVXRH6dp4aXTcZDG9bQSgQotmCagaxcTcCTEUNCF8WleWzhv281H+aIO2AYzn4RXvHf/eq/p8e2SehQKFPoQU8qJ1AHie29SibW6knYGKpT4h5IAiOyK8QmFMep1qNd1XzMouxTaa3v0pbYm7YyUiXzI/ZTlNezONGopSsbncXUxplZqRsS93+kY4/hsQWyOl4PMOsMsrG+gFwTEbzKqOoqpZJv/CZ6OeuU65ayDrSiV11aihnhfev3A/r2oO/CM+dmnY0gP+EX0A9I8GJPk6qp8amJemiuCASKawWl6ejRlCnHorsZmx5NjUBIiYpkBpLMuRkGVSZ+y99eVFngMu7+EGMuyVA1u1NX9omEK4Zd1+TKlZoZFY5RsrUJpH8nAkjiAr0JkRv+qEjnkgMEKVT+p4SfYlX0iVskXkOzuZ1jlcC6vlbm6WaKYVdNqpI9pJOd57ECxZ5qElI2l/FdadHiHBDoQVtRQkf88OZHoKpucs4BbfG7twyuhjDylt3n5x1MrUu7oaAxury/TPMPITo+qvqFEN6eiLsPbKJXsEVn3ObZbfkx1o+yd4kBZvwtgLLnCzdn68We8vtOl/YcfgGJPpCwuHAi9talMielzdVgGnytgdu3pD4v+WgKkkGeC/sqvMhc8EnPhoTv759Ih6+1l2YkhS6RXtV3C1t7hxsDC1JnYDRXtJpBKWb4HLT+xAnyzMeHHjDT9F4GyuNd04I1XDtsTc6nT0WsUvzptpbZVdURoovWypk+2KyrmYfQvc0ZsO2AxnM4f/C01gzgvK4Jh4BGGpRLixon/lP0ideVD6g6U6K9txU46+vvcInar4Jrhjxczs5xI3/D3LD7PnIrg9cJRPF0lZZVT3D4ZbTn2ENPToLAyiGbeccWEHecd8Jo74B3nGjmWapoKcRu/NctZ/eQiRupEdxW45s1zXVAtPd0vBSOVQekFyfmZMcSN3hnH6M0xR1RpYGmo/Z/4K6veAzweL/n1GUU9Va3ZsJiR5xACZWlRdoQai2R9jApJFYWxWKtdUwtdv88/om605xZ8KbGbz6/SeRHSXnUlbxoa2l1bui/UrC0oiAwzx+Xza4ryK+l0gYXfYEOZJUv7aLrVjA53uNYZh5kq/+p6hsB16XghKdk+AXtzu/D8PoZpB8yVxDV6BSO6UivhwG0tqzraKPwhe8dbwvYU1CaaexHUKzXiuLDpJpn6q1ClNbiihETVuzJa7gTpCic/U5PzSDkmJFCEWi1tR72cFnd1ZkMRNAmb3vcmwn1OG0yctb9Vysiia3CAdV1ubaQeEKwgySlbv4MNtH9tUsARDPfwGkojnl1WsnbJ/rQpsH+AMhIZDIrhwTpQ/gI7e6AuRXA7oWoKNUSB0Q2RvfaDiekKvIyt4ovGOrSeJoA2ei6fvl9hKIWc31WeyDBYeWnVyx7N6EkfMyvP1DGugbCvDbpOQJEU4HBy0LO5suZYPoYCj8RLo0Dqc+BdMY/MYUV5ITE7flhGT55UO4MIl9lqDyD6NKPQtVVeiT9aY9LdLCsuBlMuDOIS80ZhjwZdpDLgyZil8qVxFAvRTfDMZHrc/fUkyQLJMMOhmbkHea9q539alY4MXBY/kjQORe8VXs74r/TL2TLzVXBro1S+4V4A7vhmNh0mqgo8rYxabDKeApH6T37+YpspG+zPSA1aURoRUufR2kTF6S9MMdReiZLDCqmOy8ar5JizG0emBIz1P+yT35tSd5+mqdogGeCP2AokPgQ/53WBaN9HKk43kbuoChU7PaDrnFYQM6pU1gE5hDvyc+JqY065Djaa7lnfVQkV4IXurHy2olTu3EkMrwe/28ngAarP5DUPA+S6uYvmo2Ymy43vRAkpN/xjwfukRTAc+M8NhMyLyHJKo1+1bkpSZXY/ZtPQmFGOMBPQWPSjQ2amCOKIa/gMCvo8SlgMmnECNzuKyjViaeh0q12MFYtU23Gv87vK5aDfD6ORK5EUA1WvOQ6dA0CXN3TK82LH2rIqxOmfeDjYXWoAXkeF6+CpWVUwpJsEcaSbbPyLPuP0Vv7ZQgsE3cxn9EHgjo5KsNN/6XGq4rY38CpbytUsTrwUyq5wGlT/KhCXn7glndXPPVPY/tCsfps5i0cDKQr3MOAjjDyYoNvJNGvqomkWjg+huejNaUTAPVjlDVguc0YOa8VSnZa73VTxojtKClub+Rf3kf0eOV5qIanGD16avAJZin+sHgO/h90qmvSTVTiMlVlHNOZQapyRyKYoGeORrlQ3nq2wwadAwGlaYls9A6K40Hl57yBE6hTJNETGpHBdK+7NKy7CD+tbVdiAcNHR4iXnASz4gnvWxiPLzPVO4/pQcq/wgPdFPsa9UvmHXbXrBHvXyjeHiMjl4cFWbsMV8ckfjEWQz6L0mYlV4/LckkWzO9zaixacC5mxGmeyNMOy4Ye3cWAbv6O8QGJwaOpi5O+4MHkXGwo6wDoadSEBWFuKekFTcXkZA4c/4NjOVkgsE7ayCKXlMRH4CINo/F6Milxog8mEa5Rar6WPgwE/sCKiV2cg8DlOSJi8VlW+Z6Ei/D54wzYSoP8yusr0VhB+qHh7taFy5N6qeEWdCWGpDqXxxBQspBhjRuZrWDwadFHhSjFA+tDlLIgRYX73ZwcEwnoJHSQJtqzP+OWt43VMnizKld3xiL7kpRIJgiPzy0jjsD5kLCf+ClD5620Rl007Qk9OnsFqrKzjlOK6VNYrgpM+KbUGOPkqFc4AQQSWP3yDtpMN3sVA+A7VLjaKIT1/ugV8Vavx5IRVqcyf3WtxfkipG5YBoN8091bDa7OJcstH1Y4nQVlOJHBZttd6jnky17toxULTgZThZ80mSbPBLp5LVom7dHa1x5tx+nZksv6hLfE3J/gVbPuQNEdWXmBBcnqyQUJWLnH4tplcbv+r1zSdbSNKRXjXsYuM3rdOnElEjNH7333f6JZOXFWzIjsV3ARbnivt9Rt1C/gS2dkLqJrSy+Ki+VI6FNReMIl+RrJBGOQDH/3RCWEUBtsKi1OU6YZ9xtGHGHu0VYTYq+GS9L62awmjXXYEBO7xu6/vYh6llfwh6UXQhA2MOoneiwuoke3SNrMvLV9y4WqPYnB3w31T44BRG9VQopYLxe71fUdNBeTHDTD2+Y3dyiCmafOivlVoUts+bFhVvkxL5SLR3gVC3VSD1M+H1byiJJVT1pta7krU8YbMdACoH/urywxCEBD8GVM80BEz4tjSQ9fbk/ggq7pHsLRsn+1gFnWyQQpZF9mNg7QF+KOCpviMCnMbFYkE/QhneNIKys4eIBEaMB98hOft3N+0HzboGkmpjmnzZ491VFyyYLF/gbaVyccthgox5PEhV0xvcCCF4Ltez+OPHsOpAVMStJGtdmVZTXyA48qCW0jmbSJtez0aZ122zUJRZIw+MjZ3sqfNiZ7GBgNHfERvBYEflycqvsoOI8rhWBD6gYJ35QU/Wkm4k9vmkUL0M8bWpPC6DrEJl7H4cP1+DVluS/STg2h89/3Jgj/r7a6GRv5BiZ8xdO/wartyz3umYiRpdw8JitvMNH8rGPm5F5gAOuZIn1eelv8Jr4YBWKAx5AQcoHva1npARMaTU4peE+2/Ifn7u7xUONNwj0ghYTOdbfLaN/WbYFdHuAGxhUcLyz7xj50DHHKY02552qZPJLTRVp1u+I/Hp5xAqlg6GIccNjIhuMWqqWSTRqXdRKbhxsjhzBJkBCNQ9AH307Gxnlkws55iXwSbINuZwMxxJHJWEsTTx35nsZvIuonufysv+i7yAzRGPBT0CnptDVQ6GMslAb7XHH7vdpxuSfYhpuRaGOxoDvbFdIicT3DJZInM5pjK2wnfFcrV5d4sY5pC1Je1CNfXXkgRWwSephYnqOyPeCQV6CNy2Rp1Rzr1gHFvA04+Td8RT9SUNdjmlbaQeDFmZ5rS2thVsNCuZ+RCrk1ZLTiA00b6b1sq0ICHlyBbddhVWNs6BTThAu41PgBmc1qisHg8lCsSCLkZkXu4kxzPP15olnNxcFFK11g2DhvvzPj7cy9FNg+2pgQiYAIPYVQpw1kmVnNqS1leuRmDuU9fFDMlxUORi5oaoxRYAqwmx5bUvUYnPGg3ZDRMaPtKz9FVnK0pmyrf8me1uP1gQvmi5n549NjVuVBrcwOm2aIVaUW+SReoUkbaIe1lvuWuCaFwn5o0B15pKTNujigLy9+HSrnTwMY/j9smLYG/BWNo9ioONjpIYNUUnopeI+g9fn8ZFXC+de8BGXCC1Rq8FhekyBwV9wytbdkZ4hfSIwE+OM8BzGsWjCKX8fkpit7ci+rMxwjtAcm4N3WeIfc3Sj50UdZssN+4p4LHSXL8XkSrGe3zHAxIBG+7/+JvYrlLbQV3yvqgpOiJNuxdx7XXin6C99bq8+92MAJ1484O9uVEvpGLCJNKm/LjoDXOEasNG2NrhMPWpdzwR+X6zPnSbob0wcP5SsRyjhi43ojpD6ZFC563/BS3bKOnv92xjMDRTK+duCU106oKogwTd2pIgbquoyX4T8q7SJQ5H9vfYdbAtQkYoxhiKhwEVfWsHN0M+oE7L4buQ5uziOfskbXxPx34XjZcrKsd+Hsv5L005e0L7u70w5AXiJMrLfE4KjTJHbUc7G+rq8l1/o6bZAqkSIMkM0LNwVeLioME9Sc6GGJxX3yIFUvs+xRwOmyUhW+Di7sKFigaLuhitOH7aw+vpJAuG1nO7a34eGeRtBw3YXD1dpPjHguGdzJ5n8iNLYrYTc1svtA+wROkhQMUm1I6g0w/JhTclcLXZ+O9jlI8qjBTrsXqdpBcgACs8YujOhZCMixCYwHSS4ecTsSKvquCxwkAnVKWTy6h0Od9ZsnWT/phgKKhw2pElVeHpJ/YrR3KZE6gltZkTR+Cnmyr1jvYLoscsDsB0Etz7Y0Qqt+Jbbt2sVGAaBvu1/LHawD3wShCz4d7+XZEOrfN/iL60JmTxGQy4zLIkv4LLDA2tDsF4bj3WALPO/rVAkAarQrlxDogIxAtnx574wD9la1Yd3YM800A95xhek5vC4os9ISylARyzV+WCxJAUMMoOLeA8FKlDOSEWyOarZrzlknG+U9qWdCJO5WgKff41Q3pQ3sr3tp+5Qaf6I3qmbR0u/zFJYEEvKOq9y6Dg3Ppwc7ZrNw2fiRY/84/ph6OyQTLvR3OfVFm5OHp/CthWXNyH0LZrOyRcuDHzAMI4DODabhN06FdoY8s1dN2GjaZoIo0ccRehQ2gYYNPEDhLlihk/bshRBYthTpLTUkgiCKVJwOrEFsJCibo6C6w2WQXb6XxxRR6h2zSpn3jnPdnyaEkS8KBwG2gXX/wFL5Zoo14KpDDX/PWVPi8VChOSSe2/IITMfrd9uMEtXtqfgTI+64K7til5n8tzzvh82emmk1h9V/cV9IR6kppD4TzKX9SE2SG61ms9z+ZqB/rgN2lADEPXSxfvWYIMbZ/6Lly+wjP4yJBJxsWMqvY2adr2qVLru8UPv47uY1m3DEl0c98dQHExYYuT5npww4ZO/jpf87Ey8V+kiiPO1BujVQbhXZW5JB655hGLjNjrMKZ0V8k3VHqz14gaEQOvE1nPAECPbB70GzIT1lzn7RFCDnHnAo036ob4Vl0gbFosJqhJHrgI3FudkhmMMD/fK/RwuKtONiq/Y8sviyiGRWngZojJIM/KNLYEBWxvIw7a8+Nm1FGTDELVXTDiro1fTBU/BK1c+UUq2N467ig7TE9ZtmlkKLFRCAomkh0iO+ZbQTLwjekYABHPVTo9TgmWGeywjNQtMJ/Luop7scRSG2buTK5n85KVtOqVW1H6rDtYCLbShx7Slvqh5OL+vzczujjA5+2wiUNvvQbbiq8R4WfL8YUH4cOhuHR7TS17TKlSWFYNFZUAXbKCJFz9sVBFdhDiW5uSXTqTWwbpYUNy9q3EXMa83+WAmsHuahnaGljhbfHYvDcWRufs4u/I2acmGfedyifH4bNQF5Q4hokAP89/qltrcQZHxBgWa/dFWODa9EUNqH6+p8WpU9Zu/khlLBmMYK+WcS29SdIXtqxTtsXBABHjIa8l4VwTcVJHJTCTeaaahTAwIsII/tq89HCghmxOWTtLs79TwPxsBPhy0+nH5HWmKLZHzmdED0RCXz+klk23jKPWU0/lS6vPkacmc7W5mtI71Ymm7b9WSXJaTyQZes46plEYwuZhcDJqUptk0GVXGgwGOko6BSqAXrUq//u/44ygrYkygRcMKM8zzWnndfFPxllCueVEHR8cDJlYNGde6SKVV69twbaaEr+p1ad30YSFBGUXieZoZGoqvPCL/c9Es5tqN/XTYh9sDAZTpukteD6lCNRqyLCckxgKBMZ344qr4p6Pd8HcZvQn/+Ny0R/t06fUiyhE0i5h77W8wy74iV3CWJT1covxRLVggLkz3t8t92TQJRFfIQ/l6xJTwHCsSCwN1fFPZkpqImnIxOjgtBveaKqJQ5Tyz5oLISf7xCqPgsPjUgUNirBs+/OOdXQ+d7WCBd/U1n5TX//kZ9y/wZZLEESZZcQJCWiWoQSemcWLTm4cpA0SH1v2Rqg7w+uwpfMBZhI9+WaDIe29ji4TKisveRQizvk4oow9WJiD7ScfIo6BA7APS7oaeeBn6mOi3e+NPVVYmc9Y4E9obqp5ANP7f0uu9YjduDgFAQDYDYmpEFS/0lvYSGhAXrpJVTRzsYRyE4q5ngHRLG9im3bdqNybl0hfJQpCYCSIcu9iJhQLgEIjvqIirOWU8vSXdMVbvM72hFG6/+8s4LDfUcKqo1Qao6xiUbURQl9t8qxVhDs6X1II6DP0SdwX1TDh2ur0DF6nl+F9IDHidarTT+URuYEk0ZDH9tpfRQeroefqnd2zFPoF4QJugnX/vY1fYUGKnbAlGHja/yaNGGcdMUsZc3XZURxit/LNNWAuI7wGLoy6N9fFlzXFm5FoB66XgnsS7RuBMttawnoSqundiHPdd2piLxUupOGxvmKPPXIhgjQ7KaJGU9qOtliBEK2iF4D4uY83EOqm1ZXGs8F9c8kpKAJWpN7lAoNGAvimJgwEzwR9IMtnjSlCS6rtnL1lAMkzIftHXDk5TlcRRbxNJKAY4+Nq/QQdlYVXbb/bLXU6nagvPEwsYtHaa6e4tqmssCnflYgqdqbT0ddlKmU9HSZNDHBTyZcYUAQUMo6po4l7eB58vYwnf03itewYj114fssVEXJQUms3wefpSJi9TRM3kyJBGXgRVd0RJc62N/QPXanMJw5+TWdre67kSCm57UpDAaEUrSn7mInSZjTghGqZSFeHO4W6uy5buBQE+D8eDC7Wi/R2J9126IjC7POwgL1s/WUvKfjgWUkdaePSY35cmJklRyJKwP51tMX6dVqHY+g0hoDNhc3Mzmcp5XsYuwu+DajlwI9SyVlAoRUhwZSLb+MBw6NG0ybXMmXnsYMyyhEKYfdpakwIKbiPkLIpmxj5c2mTwaxV5IS9NYhGWHM2DCYlPXueYlh1vA9u1HROFi+8Sb3z4TLfrjatcfRdoE8cakbZXosF71EMbmK54yaIi4y+GKutm3PixDYEEAJBVaihr1cG1poIebxpu3u+fFvZJD+5mZddXm8oDnCgWcUl1Z8aya9uhukYriGBA1jNT0KXnhFSBGsAOyoz07+VXTJiqUQwpV0JlKMV15bdbbDGZJGUqxZuULK2DrMLx8TlhLuPYB1HGqMjY7w2cPcWcedZSkK+UIG7CK+QWjx2PuYn2O7RSSPtQjD79PUVmY9tQ58bwYnCWYijjOTgDxACLd9ij9wWCvVcrQidlsBAospDgoKUGizFcyee+l0TS/YIj1PoTfyPkAvPDFIIC7kppllYOSIJ7vI2AANGOAAZigPggv05xI1jxFQ/2eh67R9sjgV4X4ULQYDtphHjfaHKfrPlVT4JrkP6YwVwOwJohOwEh+WWrkWCFatuM4QPlAt74o8RYL+UTulv4rMSKa6L2sLuWMeIOVRqBCibE2mCKd/jzKqOwBDt3K3cqwJ1WIRq9Gh6FHmaLnIRFwiwE0x3/5Ns8aerqSIb91CEhfVod0kA0az8WqOBThAnbkVrrHbqKqJzsAWYKFavXyILtLOESA83TEwnOMephqtQ35GjXnsb8wA1mWcGX+/cEHDsu4IGeq2ISsPpfyswY27ppD2n6EbElGBCkcXlUK9z+103dHpFMwYMLfjpgSpeRVsff9A3jEFuTrsH1QRafFuFqFkPOmci1PjEmfsq9cTOODoB4Rvcgl/1Xsmvjtc7iKS5hd0U2J1eUO56RDmtpCuRpqm0MOTsTXa/QZgBo4Nhx2qsIYrDDlKMD5FS+Xwa2ZMRPr8Jzi/Qzcjsv6xcmRYsaDz/SRsThMia+i0pReXdjswKFSyXt/vTJsB2pzYGR+Qp7n1znPJN25jz7ZtklO1jzbHglpwVQeIbheeJDgvZ9zrnH4nAhDe6ml84EJ6OQoCAZbLxdCfB4saSjnh6B4Wu5QcaZ/628qXu4DUqDpKPC0bUj2UiLSPSnEiHZMGt9RVQZsnEcZD62iKB+C+2k/YCp/243wBE12gzvIc5Rqo4KjVusUB4Y8ZZHYGPKKBkoBuQzslAksNDJyGAYMMuQ9SAGWNMtrnew67MjGLDgAyI/iNfL4Cnq9ZycagUOtTRqZDociLBM9lA2fa3tF1jKQkrsHGFG2cvZHTwWuPZFJONm67wGpb06HzZQ2wiFKOlE4CXdg5R/dJF80cFteJ7IDPOHvCsy4GqG/YRc/z9VKNoMnIXNFQTOlIT4yvBq2vL2wcVbVZa1D9z3iY75+RWLnXi/o+Mc+XWXnOhdu3zMkYKIGIyIlKqIKDcl71HBncNbY9aq7IqejcExANVce4JIrzKUp7iDXuE6tNObez88Jq7UI6ztgoDeFFTYqHYhJA65J7QI6XqY2DiQoR3d7CrAtgamK0KgipEZzs0UwPZInIVh7XBtPguKMC0U7siU8w2uvFgObmRIpDWLmIhb54ymdX+2zNZ2fiqmeBpXAD7vwLDB3AZQNp3sDsIgYnpvnHnGBaU9Nly9DmcZgKHfn1fjjSlkc80wt9ch5CKBn9TE5GOvF5ie3p2Pn0Co4if4sOiIemyLf0VjjF2eTdjqnV6dcgVCKfWMI0Vcwy8V4c828Jm1VTerqCHWqZ/NXdJ9q/pC/7Fk4q/OI3Xy558BL6rkkYUivYyXjpljoIIEbit0TwHTn6rMch4zams4A0q2L4pH9sBUvBC437oyCq1xgrtF/iNpQnUH5hfvR+NRJW5AMOHhAio7h3bczCVwulABUJqQD11m0HjkaYDcQiS2um1z/wx2mfi6D/sE3z2Wrr4pCPOCrnemYW9w3pqv8kQkWGT0r/61owm8OjFzAwa+bsYgl3tnJazYBuQQ4YbiyG7vHQoX62QENWGmXRPSyYTu5erQtx3o5zmvbmGA8EmZTOuk/p/sHs2Z2R4GzVNt5DblFDdx9v2iUlaATAg0y1n2NtQqI0j6erzyiBaBEYT/1qkuARd7+XR5av/xFkeykV4rPWJhkiTN7lmFgFr+ElFfU39L3VxJNQLp6d7FDc+2TUtNuo0jY29zz9bLhaBfFfAn+n+dcQrMrfmPoZORJEK/JpOXGfIjUtXRilEyXe7NEaD0Fi6TQnR3psVEo8U2NkrY5oDDITXVj+Ou63MLpau6wcUlm61VlumESfdNOKPQMXwpj7zF5Bcj7rCIJuB0R/ntmeobxBnyrEGsuyTE2yMspNFoVsKqAuXkh73U0Z8I3nA+dENCttDZUbXZeQEs4bnk0xeBrCrczygD9UTgYW9vw2k/OhoFaNe5z1IJK7JixSsMgXUJ6jxncJ4T+BbGMJbEW4BzleKBNxPkpxQTmPtVnBpwIGx6C8odPydNZIfPReH07ACUTTsDPpwf9SVxywrO7tRlOSjruKM57PICo8dwqWomydBAUOpTigIlWbK2/a/6lvpfIVzQ/6iJlIowDoWadkcwVS95aVh/CJyh9NfIsBAlcjXbB08C86rTvSHv1tPJBFXNlljjcL3uLQQAlwkNTH6WgI5EkDdUhCvBMu1iFUnxcuH5QdcCxWnjX54+3k3uvUtk7JiYNqP29lJksq9ZK9KYVqDWhW+HBfCnqk8qBJ9OD/MUASC5tFsiAulAme4flD8dMavVY9vEnRsKPkNueVWKZQAIsOpBbsqeWJ7SmFpKFnBCoVE9378FKwJpnMLoqMV1pTWJnvP8UaIQ4r9PrUq6q17HoPGhJdDc3kfu6HwFqDb3t+pMe5GmxnUprK7aigJv/Z0I8+GFimxzORbEC6kn7nHW/ic/fijxZ/6xpSR4VaVLj3vWwmK9MrvygPA2WwRFhU/NbiNDMu+384Znai0rWDofvtlE/YOUrZ4yIXf1QLnC1+gCHHNxPT38uWo5OZiF3BwMlqBHyfcMVQDc5p65ipqb1kyzWnBD5Gqi8AjssaidvnBP57O7zgfIWP5GoEht8+xBgUY6CHO4DefgCP8coAAKN+qnLQYdzKc0Tmx7kctdQYplWD14wfjqVCg0OPxkRMUSWrPkIe1bmS8217HfVjmX3IFkgJF4B+4UDKFgENk/zi7Rf5UTziRRD4r15VoU8cixW9TntCiAiCy6Z0UoApqWY58ooDvDmwJY/JwF2bRsOsT2HwE2ydHaapvP+/Djox927pLTVKvmr3/nxvmAT4qd+SpxWAjGCre7TPJ3lbJwIXGwwcH1N11aLshAm31OJBNxbqlavJbvl+D9YPCsBRrmZB/bXFUYMA2JJuNoBYin+GBkFF2btS5au2mmSR9Nf9ZHZmp777lLO0tfUV7+kRXScWUswKJ6nY/tlTNGMwvpv1ZSbB7fGOiw28W7+6yZLAsRD0SX3Mj+QAZdby2NW4Vd0I2PUUvMQvuw3flEdG/0xN2ZY0SSJBjl/j9tZ+UwU4rU9oWoVBSWeHlpk6U/7VUXJB9j6zfUMQjE8DhzDRQflI5qoeiLrndaVWYrwIVaaIIr/a5NmUr/A523r2JdIqsP4KtGQKkPUWKAo0sYg2JqvfmNqFnuXv5Qz58PW2RMXC9jZs0MNFTtiPnGhNAUH4UHOdE5lgkp82bELllXtJEAi99SGC6pnI19+/f1Y3dzezPj89zh/ZIEIX27gU9I/BNeaRlrjpGdrWirYcFUfVi5iPpUusMfazEaR8z1C6gsTPiB7L8oBnUI0stZwhIxL+BLjYFyWwZaehPxKA4HRm+ovpJee+IlukzC1bAY+3xMeHdtvC1HbVBB2hvdCPPonc5MrlKSbmI9Md7y5tncRyJqe2bWrShDHxpIH0exxnffQYmnZFy/ysUvnRNxJl8Wv8lraZpnu7HuzKyaKxARgXF0zbW71l2IvQ5wQcR5o+DTiW7caBVzSfrvCmSEry3OOWRJgirZVPb00vN0f4QJVUBBggcBWn35zHMTwfIeKWlAbrXepmW31YjxMR2sSCE7AGA/kr/Lz5OulfsA4oMtogNil19dqsohkkI9NLiClJWYkU+OUAsX9cqZaWLwM+x+U1UQLc9xb2AMW5na7TqDfvOs+rShCEjq1Ro2RLEtoFGW1cPdzdWH7dLNxYXz7EP5PAQd9fCmE/Fjej9Eia3oL3+fOR06UgBaz2wXBnnlGjYg/mGe4Jcm4ihbLt+MDvvNfxV2yW2dPYHFFEg49NYrRtb6VpkrezJ5lt9tyaEv144HIqlhMOv9inZc8bmYKig5h3SdAJfXSzZmoqeFhhEOtJxd5sEdWJVR1afOuXS5BajrolyNzUrnrrFzENStvg7WxhKDKHOUB0VMZGMUL/oD81/Rc9++YA8ncu3Xym7Fk8YuHJ1AAVTRJYick0eSuJxPUdwz/mY3KsXxQwqvFO1TGhtgHveTLnqOu9b85XHLAJ8o3IgxpwLYfV/DPUDnXhI3twySfLsfcdMaKksrNTvLQiKvxC9RrPOPQ4UnFfDqnZpN564/e4CdfoJUTK8H9lg8Ybkayk7jD/8fPX6X2lM3ffSjgEQPjniSD/Y1k7U2zbJClxAE9xFK8QEmCKnHvVYfIRMs4SxnNv5ubW3HhaqoRzT47WJS8L/7bqubr3e0y74veQ7k/14qSuDHt1es/ZSg5kE9nEv0n4KpcBuPYuxTw4z26fPAPEJPvjXTALE8AKYSSnexnKnqyAUsz+talxYbpbPCIXeAS1yM1xbuI4n8q+T6PRxbPpSvW3lR9AMVqQ0QVjIryHjfIKc4PS2ux1FCbruHN4qEhg472SQlQySOku2cugC24FnpULdJcBRQ/zZSX0NtFhlCSVWaBaYHNL/JHXw/HTAC7a+nvoWlEhwwrJKaAfhnhI8WAvaqKO0R4Cg7qUuEvCZKjCBYOzSdmHUURW8qJjTT82Fm1ZE6m8zsuK9UoUq1VM5MvMJTf1552jxmvKqMbb8qPb6u9LE4PCuyvanOlx0sMQfXMExravLtH89qtp2oMIqSGg1El5nmtXuTe6UgOxwH0QDnVNfeUg/FsR6OJDHUlMp+6slXx0wXHqLt8aus/nkEWSO3qUqSZoaQ3shl65CeuNxgm0OXSAWtNqEIysyClbm2HdBeMnJ93XQ4f17xvELvrng/SD2PF03lTioEuZu0fnhk3QTLvN9uN5uyCi6mKaf7kjwUJe+AWwrzzZn1cEfgpZJyXAF+QMuUJ5/yR+q10MCfcHRBvChrHePByYAdBQwvGPnkkW43UHRpZghCg0GdFWZj0lh9sgyc417UuC0gcbex/3+Dp91wh+aLesN2ueScValFWqRYRTBow/g6D4Bk/kH/E7HmKtHlmksZXoa2kYvAUMyxXSxydY50AqKymnIR2e45pGEAAy8bBY62MlSYW10QDiOgFM1+JuLq1WdlYe0ubPb24jl8atG4RU9jTk7uASNj3vU3pKZKL+e1qhFI9G8PVN8PBNdXvqF4prTPtn0yCjsDPMl4iXYvB7ksfUyQdv7eB2xlfDZDALUEzNpOibGDlN5v99znkO6CKGAijsQYSObBHwY3eHp0xOeurPvRUBtIzVCuQnD/dYXFUBhaJ5SoN3FqksxUd/E76G1WryijFKnlw7IVT9zke3ptw+UFB3VgFx4Ec7/r4lmFyqnpkS9Acon/SA57i6QCMmnEBLQdt4azR80IoUxTt6yWFjFLphmKW2JHdJ/TvXVf5PFrExPhsNaWx+u5J+VStqUVHdFgvGxqYP7Gxc2Cfg49u0dQAR6a4+DnqVikorhU+r58saqL0ev9rOdRKKC7cQ9ux9Y2pd/UNlSxvYhphCCYdb0B18yoXBetMZEA6mV2o7qgmetOxCZgogMIUAXE0cB6ldmT5EoCsp2xTbLrMYHzlacXt7Tffm/cbrVooRpvjuYa7AG1ogqrSrxHx6HRdTdhSudKCrsfMI+bttpM8UdX+huVrMWj2A3kZlcNnJ9Ch/fYgPQJ8GejX2uohNAvXymQOgrRaZ7870y7VydW7aP3Pem+HAy1LoxuIUlpQ4YFIwupusLJ1hmPvCljkYBPN4HC5ewwi5xIs+qzt5zK7f9XQAbtH94csL0YkFV1IP8uUbA97mlu3o1S/hOwsKZottcqzTWrPqX8qA0I/l8CM7paYWEP8nMJcjR6EQOni/9d/thmLAun6yRqm6mD0UskAP00nops5QlICh6XrjUcyhK7vrHA1++mdX2t+4oeqVz19wmby3d4j6AJ8795HikRNrmRpxy0yXqE4J9XdGZaGmLOrE3gj8QuFulIwBLSENnXFICtb6gogFRHfwuhoSSelDceEUGnvcGBYj+5F9qtgBFlq21U6HiE9QHEPTRd5WYFPNyj6F6eR6LzdNTiyPvknllpwZrW/da2EhgNe1po2qNvTLc64lzhsH+CksssdoTRim5nU3JydHpZqTHVIPnTz56aSPuEQyNXapOh1yRN2Au1rZkWfs106C5TMeuMQa5537Zp7GxFQxNTz3LteCuVcGtxY98vzHTPerNhYqBG1I3ljV0fZJVX1o08+lO4sgDuirxS/UmGX6Z/lzI4CCyfwEk0A50i0lz1LxKl0HlUjPiIUzwHYw8N+V5ICD7sXcWWeAI+MrUIcUCpQx1NGQYMbLMrqsWO3dMRFvzfWek9lDRjMHrRM7l6qDmMkARz8m+D/mtK631RYpgDOeEPP6Qy68+E4u0ZzMjaygODQGEWjo/mQDYkZV9Kph078A0aI00R/R4+Hjmqr42tNHB05KDf0SpciQiUDCgXaIOQVayIhqe6pCSBv8pVQvauKf0K6w7v7gM1G22DvdJQtQTX86zdU5qvPiApHeYo/DvSdTuQ6YTgynO7vSQGrBZW/Uak/kyV9xsRm0WaRD/FiiUgnq2/+ArLJcMI3KlUgR/TYT8tdRDQVGc9p7BZqaTSyr9xvI5lZ3Bc89o3fCX+rpw9SFVlh8n+6seXf80dUg5xm1yI5ox3fj18wnCMUcVCqhiMeae5jBGkDw3yFFU2Vdrrubz6yol9Vpv1m1Cwt9Fw07nWRXF5WP4AlkKXmfSyenzvcQ0s4GhMkJ6WXON+BG6gnZAj12kCfmc1OsKmDXX/9e6k2DwkaK2DUzXiJ5hY1BaymjOEOo+fRM4fqcKPNOZ354GA7HQFApJQ208KGsjpN6orWhDywixyYkfyDkGcD2hPllbC+P/1rcCXh+wW2uv8Cqs7CtNptQrk/7o6LlsQtbUH4vC2ZW0K6iHqOcfmawa3l6tm0pQlulwpihBqWuNrOQq5Uz0Og4NaYFuhpV5B+7IoAjALNaa/2MS0hoBUouRhz9TJ/Oq8+CyB3RN0xGSxpoxR7H+WGUu9SubZigCeTS72htKibCxrRgnUceOM+qLxQsstISnAefNLFvM+NFix9Jfw0Oyi51Z2J7JYcRi8Elpb4ywGaOeLHzMLhY2CeRm2HHp7wFHJXVO8TP2tJI1kLv/B73dOPlmfN5kWWfD206qcl3++rGTnm2S7l8lsLksFLo1rScJsZWx66nx8iQ19JCOyyrpYsuL5P2Q6wqC+JAn5VwhslM1lVIk5jzAT+BR5d4KyGLhb1zKx9xBw4q779hu0YiuQQeXNjPKQBnTgH1hTMoJHc9SoEqqZIxIZBpjUkvfBiPJT/vAZWiHcks6CZiFJq9AIyEf78n1z0l2I58LEOPkU6yCuVT/kTSIF9Emxlssfkcrtlo+FCzgGGAHYQ3CY276mZ1c+X+2CyralRNjXMAqdR9nkxFZ948DZBOnYSCv5xghDmZw8gok3CFkxB7UW+yYJvMAWHyKyM7fjGvaKDl3CKROzrWot2E6j16wvs87VSFqwOYAyOoZuMQCip/outoEOvTaP2KzYBX2m3XlsqlWg40FAiY5VmaFA5QATfV6BX6z8uybmmxm5cZFfBN8Tzu+Rt92H63A6i0VhlDDn3E6lBiedR7R5lTG3+PHDNBG/QXgJ8pUKdVtQJefbNJ/JwrzzQi5t7pcAqKdPA9urs8uleZst83uSQX8O+NnMCNf7YmjvGP1cxDBp/Mn1fSsnVuiRH+ssmty2HB0mJbUiI9GN7EjFlaOzrK/hnry+T8QDjhhQfhjD78NyWnhZqqejpQL3maK2bRx5Dj1MRJlgG67w4ymbper2MTrvkD5DYJA4u+uudOXgjVCy90XlyFBolKazffVrqAXQYFLop9HYAI7ySP6ZsVWrEzSjBDGu+k3+oxKqup6dpu2Rv4Mgiq5458WrOkdWBprzhG/jZvd6dPeHX+B5IGiWJJGz9E47tXz9lESDyp0D4aPqESuQSQvQeaVth3hq+sXCxSkJ3Yu0MBXM7IVhBIWHmDIaCWeXVM61ofaGL+POJ/DJqZuGwJjMj9BO5FdT+3ng4oHNwsCKHe1Bon+vLkU2Hjl+ekkGB3bzsg4XmkRt/39PkdXsfUAeebdA76jVwvXcj+iHPRCGKTvIEHrFhwRdUV2XbW/tJIS9zDTRAtZAK3UFBGychflChdSA25PV2oIUXJWYwG1ZCyKgQ/0iODMl/QYGfhcUY64jDC3jRwQSo4bkHtfDSx+DVPOQvWOS9Z2iRXOGsq/mJkq1RuPXWF6I0U2z1k5SzeJakvRo4Xfi9DPF4+uJXVaD2gwXgrVRjOBUM3STv0XJ+GXmFEzclIxQsvYifgbEf3c4JR2YgErymDF3dy+UIqBEWNinAf7nqPz/gWLVidydTmQ4uQB323aLqtE3AiYsntLsaxkxGsymB8AgaQcIrdU4mtHcUbY2cJyaLcGqRxGQw3RWPDnzTsxmZ70loBjo1NVxLq6T5L8LZIzNpz8zz8TghZnA6pBTeZpP/cyV32Y4uTNXtPOl+zVQJWrh3rJAhtKjTrLF/RgK8fSI720xYEC10AXh6M6GSyspWqPJw3d/UzDLlC3S/QDepORkBG9/JgxyVEQ1baQu58NSOqBEZjJXXfa0jFgZE+M1GwM8TZbzuZMZNqf+gVkpywgxAJTiIxq3E2wLCj5mzlmGZoEza0frNxPheBrzh7kadRq6fB9dam4WQrvTheWI2vZGlCya2ppJlmzLfgpQraxC1j4GKwE7333t2xrNKspNgOIOXr4NBwNXgVjWZ5EsRpzbyMiqyz0h+U8Of4UMPDGgwWmMAS74Hi1FfGO1u+LZXFVz2AzfGm/4HmNiSDpfUEn5P/KUrgRDSuRujmsh1yErr7k5WH0o0mPelHZMAapxcJXrbFxAxhk2A42ld5CzcrE2k0PxdMJCuHNx7p+6M6NvYgRfpDw8NC1rM9+F5XajduWAWalbCUAR7oVXbJ7p0W2ve8HZa0R91wXLMP630nkB7/UOh/G4s0LMWXIMSmlr5V3YcdPQWTUPJP/tFzo00xTmAba/faDJUjN4x9La61v14xww5fQI1fda6gJfIEY3aMihvGILysIAYZ+qALVFtOZk3CLecLAMXfeKfKpZdoaUn4yOPp66+iF/1IL2jZR1mq6kAvAIV1U7ljRDFsCOl84gOWwUUHZXZ8F2iV8VcEVFMiVXOoEBm1TF07XKUiSKO7zhK/zwAV4UsxmUQiTgzB9/c2EJs+8eVkw4jhPAqcuFHrS0d4FJgohgH4kupKtQKtorq/3l2E2mefnUN7Nuj95z5VmX/Dhuw9tZH3QB7SiJWpk5qeXzDV78NkKJ+AOH5jkAdatRHsE1E/l+s8VsUPga2gyInvXhCvykUBYWZ74593GyXmfbzcgCXg5OqT0iP7o7k00PWiSAKLgYB5bHJawD4mJpiLflOpVU0tmwQkAyXFfl/QBkO88CUiYkD2DipjrX+fEeMj9uhdlrgaPME07A9Xtz/KIRjJzyshwNDNVer6aIoLvcINnCION3g1n+RIPc397gPOtuvlqA2UrRuvh6nCzMX1gyqYaIIMj6GI8LV5519LrVjM3P5TrO18muFXqXc/I1tTb4mcSXrnMQ8zs74md9Lv0KFD3rSOqBv+qgnGsJR3uVLHzbPe0YuHsUClVnZyocBKlSSUJd3W9jslQPkcMBgrl09ziAKkiT5HDjHSs9CEapSL4waq2khLds28GgGSQ9Nah+EMWtJa65YuMOlypRpHzyY05vmdtGR/l/LZ2bPJvGLC4kBmUHH7RJSr8+zjkwwN2UohQd24tbOGFq7QikQMuJ1ZPdZN/rGsqHHtF+8I4mvNhmz3wkkGhJldC1TNKImds8d61EXeDYY0P4ct/7sVt4r/KBh+Qs2yl0++9oUTmNtJnrRJLRL0lBbT+Y2CdNa4wyfEQJIHQzxSR5ggdfExu4tFzQ3zs3E8n4dcV8fG33Iud1EPG9HLY2lLlwZEAS2QKXfD7By0steLTiKh8UzQgko+sdZFmAz7bWwatyqmM0gCT4lO5a+6CtifQ8NlEnVHDd3jIGgrOupborjlwMPZBATwX4P3dFe40j1/4L6ixVdiBOGbyhsKtKM02iKQGmAgyAYosAVjR0orvyoaB+sQrfh3EwtQv/RnwxPF1x5XRbSnAGEFoK4gQRP92CSBJ2nzubkIw4PKZDupipEvTLNt3rflheDyYqyL68fXWLyh1T6bjJX2JXJFYgb/mFpV9OdLKAeu2VmLu4xbimKA+x6+psOUa0QTOZ/Vz/xgUs1XnQFaU5oh1kGShJDRxF/ck41PDl/HMaFhQ77IpKu32IDAPG5ow6/DruqPJ+yw7kLh4kUwdGMGjmLDhB5J0sJk2ASwFZe7O2iz2jsBRieVG5Vp43RW8/VTk6eZ/jkajCgti3k4ApSVEH0eZxFVfu9/oCFbFpQvxvcp1sKFibXk133pcVYa5Nv1blIu9RJK5vTOHIb+Uqe01sg0e5NotaGZ7gSD3BKm2bf1rdKlNDK9c8sTQjnjJR0v3v7dnlHW9Y/3sx6HnA5cHZ7kD7pfWVnWJaljsOTv/1RA6F1Pfj/eVKUUKfLoEYdXMcaBTZr/Z2Q2TMqZncPfOdVuMhyEv846fRCnnDxTU4X34Ki/W2Glrhf/4S05Q9fPdqxK45AMv6KJdhipaDIt/v3Nx0FvOHIsICLTNEHEneeb3Wx+O0923NZMzKpZgJujMaQ8mMHOkhj/b+PXkv40Bp+M89WOQYfMETMwMa7bsryOIrBmOiLawhmGVJ49mp3U8xxk5Ia5SWiDYWbPb0zMmNxQKYiwjDXdW/WDRtII5vmd/J3PvlK662CpmZz7ywew1YVP7JkohiNwTC5rmTkFVBhadhD8VrfinKiC4NlI+6flzT2paVedzKL13BDh87vCXLpGKCzcVlWeBr2BfG0WRipwHED1eTt/Y9UDDe2mkM7mNGxtmSyM9bHqYLjiyK3x7ntN3rNoQr0p/DqkHM0CFdOm1Rg2KIF9KimGVG/WDKrIUrqB01C6wcpWnnQa9PCwgq1eG0jbN7up2qq6pc51tzJKcp7fHzL4Ie8MGDdw1KR8t3gSh+ubDqGrAim7huHeCcFlxsKnxljdqsVnxzudMV/Tgz2Esli0D1U4WWghvJrce2s5GgPAOGg1MX0hqmtZyAPzOKFl7bf+3SJBilvNcsDfM10axDr7DEBIOD8s8aVY6/G33mYMtQDtk4uQsjDlJ51sZQCKHj6/PQvmFvofvPugyypKqQOg3SLwGqEkxalvLqiUELCy8/884e2jiJK1D08t3tV6ZOVghgE0yCavkxdW4rAQGdS3xrOjQylcFWv9xnw56HVEtR8pcDu+66QCuslCi2Y/XP2L/zES1E3Bu3UyX9xcZ6Mv+GMWQjJMTpQSZdrw2LnRfv/Ucbj+vlKA9jGOQtQgliyaFZDbSGDBwZYvAKDYzNdSpeHGMRq+zT43GqYkUNsbmfnkx49GeoTnVk96N5sdoiktaBUCsGXm8WF8zLku6BIzpvHfyLPVo0q4o2thi6BegabxZi/XAVx19Wc8OV06gFwSBHrirBSsGkv3+78+n55OY9DhObjrJa3UsILywxdSjbbcDCgq38pMkTDKN+bjwbi9Z8ggaEF3gWJ9j8GpEGe1AwrCpAnrzJnQW2SK4NatXxV7vh4UfXDZfkpbjgA5uFQgczh4zSeTxUBopMCUmVOVk3llSpmDQD9PwXs5w/Hv2UGj+5qsSmYzmIZdmKFAdcS2X/6hskoUTmZTVwGvM4Py8yw9HpRZ3rXQn3FYSBRnRI+2rYJq7WwPcUnigZAGGVZ3kvxO6c27RXaNMB3F4KqSr3vCrMt6UlzIWPbikkxrNyFLyUOxFqnUBtPJzd6Zlp9vnr3/zyHQpSyZlAmx+B1xbvmHTaKK6CHzvRkTAzKanXHQknT67fLJ4RDnS2x/Cv0FfnbFahPpstLzwlKzh0Nsyx7mCjTEEKEploiCRXIDnKBn4mtRR60eJClkd0Mr5pVJhm995Dui5wgt31H+WTmtGKCTJzws+PBNTZTAiUrz2qEfAhJsd8q2tYnXSse/ydLQY0Up/bBwURd/8OnmsWy5rKG4qJmZo6NGPOf1JH3OtL+6y1495MQAtZ2Hki7cTqANyZF8FJLCECcRFaapY42UXwkyOQtjAWgarand91Ay9pnHi7LHE+a6IDBJ1iW9caDcIyasjDx1JMb67g2KiQjtYFdnaMOc0xnuuiak5egHRHHRCqo42V3spR7zcomhU3XUyflxV8Vvx5lKYvmUh5lsNr+9T9ltVevi2e9x85ibNwIMGOBEg4zka+dRHWYwD9HAMn1XHrdUDx9rGO3lJUyhGM+pRQA5UGjo5+ZT4dQEkPByj0vAMEL3Intn03wToysmcqfbLuUT/DIGZv2JT92LvR11rI/v51mAdBLULqY4677Ad6lI/jS3+QKDZtOvGDHz+KIITriubPeXBrL79hZe2i8JEa6LAtA3HilpaEQq/C84d9RXcQjwVKUZ+1W6DGx+9svZNE02NfWYtxfA2YJuBuTN1cye9fHjkceFncN7r8D8sreUqlHQSMzGksFmKswdLNusavExa6gz60RXKAS+B9wCGFkPgE1sdVWBIAyGV1IyOT3hVXdZvqEeaKkahCRQeDOjJtL9EQ+bKlEPdlDlrOAm+vsCsgJz2uKRZF4nngwndG0LYVtbINCdJfai8hKPJXGYi38yNKeUFfLORqaLMYrTaSP4BKetT9eaGxnh+1WMJ1OMhrIS5U7F6aVg5o6NudyQBy+IBtJy7Zlh8Dxi5qMtKykqycB4la1x6EiAslhfMYIBDg94q+Yfg05hJAppnW94B4FUR2DDi3AIXtnY2l5xJr2nmJmU405rmyXpwVcPkr6bwUL+3qpsouHPRDsuM2cBhDuITwPoCHDEeyQP+vYiw1LG0YdiqyG8nGSzTYlZednAaezjDbdn95V4RowwjAmHQ4WuGxLKr7tK9cflfM6AMo6dxfJglPAxNc/ioZkuPsec3YQDvJAcSd+vJNPEOaz0+SUo0xg5/pEuvkwlJ8yUJEZ6i4x9SBrYSwkZOq/cWjv84vccio5oYKGQ40OQ6cpvI1mxwati5fzpyrtbAlZvoLVs1aN2C+mcF7cXSQj6HwQ9ob8jxgbksQLBx3CyRMOYbKXkVTelP+MLFIstj/v25Bvogl4uvAYN0C4Dzvrg5ZXtsmBk6d5HMIdBppmpI9QTrbV1X8NUkTA+S8hhFUo5RCSC9nA/fsRPppYiewfCMZdB7tl8/PfudZBr9uSFVTTr/mRt1stnHVyDKpX3Jqz0pjaAP26SpKS4Yh4mCl+57q5hVWN9MK0mrMJluXSyUfCfBFbpyoNA203QsbDetRFNSzhkvvzzaAhNLTOnOIbifITIb19C6UKJWZ43tPi9yK+dSNaX6uio+d66JhSb5HEFvRnQx9nPDD1opGJnPfxhWTao3NbJRiq3DXycG7zEl2uwnSa6FNm4rR/cJrUhMiVS2gSCW+bDWjRgZG9E+uRZRl0CPkCrfbIIg5a3EGP9Q+loL2j22aBuEXmv8l1EdS/aOZRRXpyIkUzO1oesM6e0IDDgTTUyDjG0O1vE98YhnRHXF0bqcbXpJSQBhef/J+ImjWgsp/em2jmEGKEvh4AHsFZ5pod56MFq7dEq1IBsXKFZs5htzqITY/bN7OzZ58RDJdj+eLS8fSzRyJKZJkIpD/TRTqkEaMJcemlIpO3urZVNKdz57oPghQm+5T1ObFIUw+bLgnaenjoS63CPn2y7Dpajhwfza+/yuYVZZ0m07XBVjJV5PHtaiAkPRo87R7nIHDsCziy/oMs1IyuvG1XSr6H68dYluIMcikaUWwA2zdgFm1UpAjAAyt3E9V77PIpSsPGq6KWEUvOUtPchl69Cc8yNhxTbK0mQZ5om0XMDf4xIAo6jSrHXCOACBWXQUTbzsoQkSzMMyUzLj3vsXmeK+Q19fHN+1DlB3nMLLzfqlh8SMqv9wmEVgOAsvHLcX9yYBt+tYApSL6Nc8jO5uUtDuW1Xcc/glDPluNQWLQg6hMtyr+BBLhDj142BnMXbuNu2OyuTPw9FCmRpFdYphgQO6SxVuR/yXH6RwPa9LKh1I/56D96kgQHdlcYnpRmu388kiHt5kcoxxKUDMaAPFkVlXnEsGU2mrmMFRfMVzkbmpSGk0zKq8nJN/+SOP1jgczY53JJ6IfVnVv+Dfl0Lg/UwAbfn3PDIpkXW4T//V43IKis8eRFxYgujUXsMUMFpUDhutu/1k4eFk6EXFJ61woJR/WXfeMoSi34A2PFU8qiwPnzsZDoFd/1gflC2vKVRH/8eNCAl7Q5cR12CwR5arItmLF+huRvSTzDlwEQy7uNgMj0qtXOGOc3pjNGEg31XuFHaoPoGCrPDj7FE3x7se6p33fmhOC99ney7Xp+TKLI+4axkXn1z+QuZ6+Nf/K47Jk/VVkb0GLVK3aMSBq/CoGDDwtaMVYgBiI2KSDRl8l+9CoZDjCFp+1F6nrVZ2ZZ6RpJpw2mjMFg0MjfNXw+GYjV8HGPEFfmp4KeUHBxJ+jBbNBA9+drrTNpq6xpVOyQGrUeXP7E//fQRF1uskn+RsVW3WtfutVuA/7ejAUKGmdMWmV8zrKg/91N6Z7PZKX6c7v4IfQKOy2wbog8lDo7as5UmsECPKYuaw1YIpVfNjU8JVrtLNfMZwnUWpfEEXsrTlCB3KgXz9ZiIacd4xpc8xBSOc0yi638Hics8r/AHv6m+JNlJTTY69donvllHsOpQmdac1X3ob21DohsxdJPkMT4+CNgSt7+XoyuFEXXqzYCvgBL/ZnFc2Zzz9PvlqOuhqhcQJnOJVY1AvrqQs276/hwDo74c7SPIZPR8jk42wJ3joXeWOE9q4K/2eZgoGTETHe1uKGeGGm43wf32McYox3HEysBU9XREJNEOmprxZyVFSvtuCWW5uJVcpqt5dvHL7pruDx2JUzE+3uiVHNbTAqrit38Zk8I/apK/hiLo06+7bz72oNnk3KXd52RnMeEU+Rr26pptsaPN9xKN7hydAS12UCmuaSq3BTot4E7LJOmGT1MQuw2ZQdnBYgPfBcvTvtp8sIQjuL74oyQdhkFgTdwo+4ATKkX3NAgKbhqqEREgoTTUa4IkUqq0Yh3KyymW+WtyqFVkSk9rMnMVLAwdBLEyxFgte0t0DWex46CbIhfHo58yRLG/05iKHRLnHXjTY5kvM9415Z1rCbWygkjCIJSJpMmjeAnGnZmInZVuGffKq7vOM2AEeOoEcUK24AO06aMwE1T65EFcHyFT1MrhREsbmQxGnY4U2F1A3NIswsEE0+pzMQOa63PLQNmCbS6kPW40AIC6HMhFb/Nty3S/hDVNAX4KY6aUN2ydQO1IhS4/VwWIMLg8E77CeNiud9X+cJaeVMwUA3fycjJgWSLVs256BdYFfV/bkYK7GFPwSmjcQx824QfIeU5ncAZtJFUiW3OcG4DZ7SI6UXWO9XdKnVt8UW4Ti6Hb91gvdJyYAPoGy2bNcx4sOJHvu25EZyezceMTil0ajS1hnaWqAI5PEq1jv6wLP/JzHj67LhVKASDm9S4qIkesso0tYu8Me6Fuxj+m77G8+BtP+rtpwngVNDgfboMwMIBWP3XDWyJ//O2trHi4KjOQ9EO10kH7LO9Cxi9SVRH/9FVZZVgpnp+Fdye9FntR2tY/pUfNfsKZlhNha+Yi13pzgmotfrKTOKlaO1JnNTzH3CaWFLyQaVWidqy/W0A1+O2Tn3EwCprX2X/riSCbLynjDE1rzOSSiF6WPzMx779TrnWjudrOJIJ70sBu0HMR0nmD8Wjgq8pdGHqnILzCs7QR2q/WnWVKcfLTPXZXQuN6LfCCWEqVfRRRv01W6F+8n2cXoX1KVajM4R4xa663M91Lmr7YJxBkNrTyjuLLBFPFdriOtq7JPMGWa+gk98PVmJpf4SeKXDgtHQRyABj83zTT5+k/sp1OCUrKG50ctVn6gwb+FA9ZKsBQl4CjzLRXt/qOwABvNsRC58zBct9tfMsz2OBzKEDug69tvv117hMJzHwGfhy9842gwSBUfzgVnrPZqW+4/oTIYSlfOcMVU8cg56G3rAZ7QOo/Sq1mRnQ0sJzAorIHHrefKNYkx2lscDV22hLfXDc/KwlyVREm6E/BKf/htB6H9kuTX4NAANyOzampwSKHc+8qEdGngXbTTWSotRKKWUdM5530fa0P1kZnYMi5hcYyfjzH7vCl0Jbam9SfWyi+CcP2Aa6NRmsVjcncgs4jhVqaJKZ//FKVKFk0qfBqSONb1lnCr0Ma0hP6033I02j4jcmiTe7CdEgTPgSXi+wn3ZA0kl1SBWZwbCD+AeDZ0TOiNS60X60QUZA82RVucQMBdsyWMjZSwsf0uEpWxtmlJBkjMteG7iPYRSmoYxWhWXOXD+3KHru090fN48CJpe2ZDhwSC4FjBBpcBnJ3n+XhzAnuAc+ibhajU25eoXEuw07CkbcfmLealgfQRLK3gqISfnbfkijn/7exd93427EOuXTJBBhcAiSjGlSfzynpiff0CUB3M759KpXlok1xCuBsmSZ8qX49k1jPJjK76VlfMt2Z0sTm4MKFIBDm4Ql5l5KdoYRbBlhGicDrocJp03QyeZ4ipOuXUDxqHdOwUFfJzg1UBp1lVWuvqgBrl20FvbzmHtkwjf4HDkW/Qap4jGRsh4jxO+2ogeaRrHEiV3yjSLCTwkDdgxtfBdqTA3IkjaEntwWyyCyc7jX8P4AD92Px+zeY+KujyLspnlWWokNF2beTeCWZ7iBEuuDZHJTQmIr+sMjjJuUdvBdsl1c5DwL0YbDPDcm2Nv2YIF/Mc/76cSHkXicZgEIn3jKZBFO3HJIm3TisUA6hP14RIKqJ/17nXl+DiOL9i0t/ZR+eTtmkdSA0tzOsSFmXklgMz7OaOEr7yojBbO5W4ArR5IQIvCaugzNJ0vdorksCJuTW4Wy20EOh3IpkhlJTVhtsL2SXgClCbn8vqktSWfW9Ww7d0SzMeH4vb/rUmvhKM+pi6CRjhdB331Lm+gGzWU2vu+Qrsht92PGfvYKVsdoe7vYO+iL8UMHZTCmpRP7noEt2IAOpanaWitMP2NvtTocdCYxLIoJiTRG7K4cqtYGIWU13J5JBnD8bhLl1rOO3GHISDMUrlCqGt/8xg7qhcLRzxotXq8gsrXAQxCuCrxP5Gbb726ieYxfH2pBRRcxKrHTorXlVu+Sdt7yG71z/LSLzF9dNZe8RyVQR6YghK474kQw7moNWnETCer2zyTtTXocgSc1/hCqeN4OafyOQGzF7D6c2UsVfGN0zSzoYBy/SwP66MfVrVc3AINHUUq03t7XzKRD2FX0SSc3jguzic8oe5VANkeTTP/fXepx2lPiSgSfTnKd8vEuGF+hgzgQpq+61SPlKrV4OzzAQ1YsEC5s4hKEp4zKJkDdEdcp0qP0wkRf+j5l9Ul17+FWU1QvE80B9rQmCTT0XVeMAwfitoLwe/7RGvqoHSxWyRGIwvx/ZEUtQ6Bsk0Pm2s+EPROo13dYF97//uskqkQLz7U0XRPDjqQ0X0GE389V+YLbr+C4h/zoCbiE7hl6jr0v4TAFydrnqEKpDrw1p3jEEyHxJcxiHxznK3SZTbkmLX/Jx3oqWVEn9h52ZkEV3qCAh3W8yUxaazcMvUIt3YlE5zu8sEq9EJEAKwYkYJ1mgcyEiyCUiBa7vqHSBmLKCBuPnVqOoE8Qvhm6iZ5lqhaUpTDLXJ1xB6XL/7W9kXg9DIYf7Z7Ci7YtJWAvY00sDvXakMX1DVQ2uOgHGU49NoC/zxegP436MyfcAdJquovi+8sMF37YGOXPR9PLm9z4rBRbAnwbI1T2cp2+O4Blm/5TXwRbP1bI6HjLgXnNOd6ouK8cXIodO7PDO6pGATKmbdL+9KUo7rrqnNTkyoQ2Ducep4odLyeOuDZqLVIiLDG2+VsIaWXnTyol1BWB67xZL71BiOrYAQhSV82FXe3us1g/YM0jxFLeLnxTtOILPc98zjOYrG83xXASJfqZpZWBpN55MfIwQiqhbbfrAlRpfS3dSLcF+33G22M0MglTZ6+IWUrVwyC5HgKViydUvzfHHgxrEjPo6RX5tNfJdgdkqsO5P1MCS2XNoViXw9LBf1pLveTew6YMLOKHDIxZv7FprV8yjoOS+19VGBWDcTS2VAXMwQMxp9fqHM51E0hD/exij4Cqcta7p1TTyPV6PYsrhOBTrp6R4Qh6gmr6CnM/2BVDvXCidPsRwjpu7KImTMxMmIPTFru+w3zAiTvtTThJVu3B/S5uEwBR3j+uSnctwXNdn4nZ/LvT2PpB9UMtULyMr91Y9SE94SbWOFikAvouH7Gs/SoyHrAgfcO85ia6674Arke1uWCOD98bLn9yXWfyHitmLn70w6V2yQHoqH95K5TlVauhe3ubjJxUM0mJs9jVOm6nsc1sqedqg8xwWk4vk5lyHk7FGSsZQHZNNoE3GLf6iX12sr3LqYWRvQRwEgkwjnqY36m6c6StypwngX/WxjQ1C6++bt+JqKoWUafMBvEv0Nl2Px/10wnfuUgnUeppZmcsEppY8RXGV8FbFCNmnw/7ypYb4qPk/7aUt2O44G0hO1xIVVzdDtdp5esN8naJh/3WAuaJLPeZbmAkwTCa5I7+CUvm5eLFUN/eQB7dRzQcgFFqf6DcbLSxiBHXgUJCITO1wFjtjL7Zkvmo3QecwzucvbQIYKz0LWMV4QXkTQywpf/7UetWjc8LK81N0bNe/EjF1J7AWwauMThRCvaez33Cy8tiG4X2QmBQY/1YcxuQyYsO4+sUvh6/tR5FVTe77aqYfnola0DXaav6dNYnV4NZxSmaXNVar6BrQQc7e2+KYl2WbSK6J6pY7jw3RlNoxYCeG7LR10Mz9FkSbtEsbAyV/+b8uaDckHuWh/LVw08hAKV7ZYmg5fiLRi9ZNtqqtOIxy+eKHVScHjpQ7ypNfe0DH1jangb6txhMF+djAXMGJ9CoBG/zRpKDYYPVWoInTnKdGhFaQthkM0jJP6TeVnvTqTPIQYF9CviV5OXFEsVUFXh5R4+piFeJKWpijeRMmTrs2AYGAOogY74Szjf1nJt+Bd8/R99io1YIlIKCvKmyxNGJ99K3NlDXiP/birFmCT/6lAx4Bb+RLFv5i8UgcAwDlwoBr+RT1zHP9zVSX7s9gT5VtgNk8SULJL478KoMV+MdRj5E06R04A/HySMazU82HJOYhy+nFRV16BVyCSNSpsA2wt8AORPoMOW9zHa+gK5BGtcAWu7EJ8I6gxecENcfX99rHh3OEECDrb4scWE4l39nfC6N9fr10Ekt+GIPwEx5zvO7S/mrW0Au7dIeYMc2TavDEYO91uw2lgpfYi3q5VvGunsTghUIewVpBjKOntMKOEX+WP+1caSDBzb+Lons09wSxSJ1QKqJbkeSeyhFo+rWHNn4VcflnJcvkq8mCdzrm1j8NNRc+GVEEzFM1evtTefVj8xYCNh0Cr1qtHU7cUKXMAuTjNYM5hmkcczPswQXHh8Jf7hzdWj95mgh15qv7zriI7pRQsbRmcYiLM4uDHbeE+Z6+hGFQ/d1G6WeyWCXkJS5EPp90r4XJ83OAfNHEghk9AwGZ7VxWWs9lLXDiF9cuTjYL1xbvkC6aMAuvRYn5lp2OZE6boUpSdLRwhkAh1d8rQSyT935VRRRqVcT+ke3RiKRVmc0jBLyEuAvOneS2IvQlvpwa4RPt97G0pemoGU3658nIw85s/eZbDW213kXytJWFKervp0y9VgKcj62wbzILetkvx3oHWGiyxWwsqHdQ+BGy6/emiJbuG0OHG9k/RQ8NIw10iwh6TeCmFUBEPw+cDwTuOVf3FtC7HZbzS77OAJ9Ptg7pYWy3wsaR3mpNI2HH6wNsezhy6SewyroGJFcgwgehS3rQe8pIeYIu9Myy5u3+LTzuLo0rX4wkK1awKlK/4N51UUsy0ZjoOlVIkQDhCdthe6wM4zQbQvftBXXa74FHuXfFx7GfDIa+J2HjpfXS3HAkyAR+a9xypClEEyA8tys+70x+zKduWm3XNEZwJomCThe68/gkZcweVYCHXWQVtyL65dX0TNA7415qL1uICr0gydKbWoYYfShOrr2G8B16x7JIrdYsXHjG8YwqMaq1N3CpUMh47N9cnHW4odjBgn93CYQLYpLk17KbAmw1SUABd0Zwsam4GkmeAl4Lhe6FREFmRVPEgL7icFweqokCHqXdKYU0QRNM89qI5EeFQayuiUNXujsv+3RyqIwEqYeIDts3KAV+6xGsF5CYWIXQMCLNMdAMqZ0LMdyMdnkzM94goCYUa3KdOHtYHzgBB7ZSbewMiLoAo9RchN+vE0wciKCU4K0QX96uRqovI8r/Dki4MM4DcRzvm4Ra/X+cWfW3ZFe/lcXZs52SWTpKdYNSyZ3C36XVe4qWtZVBpqD8ce7qtChEGoysgsFJ9hbPnm7VfmunqG+jQtg0gj/sMvME5NOdpJm1ptsLuVyjc3bADfMp5MLlni8ZwXKMspSuD/TkREx+f10I4aKQUsyzC8QPggcQsT6+5jO6tlrJdrhyW+wiJPfFdZusWENablcebNRRifaP+2YzDf2zP3j2LhT7AAo6/zVUrIpJhXyYMXFd5NWOx07zuxDHeE13FbU6qodRDN1fQK1MO3gm6FZBs3nz0GvS3nc7rzWO0QUDgBQEKbbUTScbOMi2R8hzzDlF+cknO2UiVxpXqfsc8Kv6K0vx+1hYu8KSc1BtMuUCddpqb0ShIxKU8/o/Wn/qRD67EXWBlNdEKX6Qi9J8oj5691X0miDVkHTb8h+2p63gF99LJ5jX19ib1RYAWelvSr4jqNNRdFxhdS1bp+9gdQzNSejoSJUvqZMJsEtaUOxWhVY/hslwN5cqs8ovQri9CAEislY9EDABTVQ/Ls0UCj6RngKgerxxUzvDMwxgA0o9k42S2h7ZeOysKW5WULKJeFBxQKb2r91mvt+L3WNEOWNeMHHsARTxOvmvFVK3eGTUH4DYI7vLzSERHPtgBidu4PUlycJmLAq/2hV9zyPmhTEW89uaO22wsYZMangbf3rDn3TcBwWA0T98pkBFG2E17JPlvpCrC0UzhwDg3nbFwK1KXIe87e5AQBU2n3KI3pM/qzTLvoc5v+zERa+gHMevIty2knWenSSCo0t4W8Bk5cCGfx+Tledc9dR/obC/IcSnCkb8zjsPzPO+qOKeYOc/cNdidEdgcR8d8KX6MlMgcrWwB1spKXKWvAwgFVLZdTIkE5+GeuumyqS6fz0cbKu1y0T1N6P2e3Yz6GwVacF2tSNTPbj0KFKhXd7kQp4wUKY3L8d/1R4Xvac7qnz97dA50B8ArYQhAWGMoZHDMpvx9ivTrzHJziDae0RXbvFwMxtaSKoO/GlbV8CE2gBmei/Ws1jLHAeRnJ8KjxUySswABDWr81Q03bGEwTvMaPN4wXQk9TLvRufaGp9VN85OLmy0xL5MCBLvjidtcrSXKyxbol9NB1S+BDy1n9zodLkWRLNKVLn/SA5wuCmiMJmlrt55YzOOV1pXgaSTYJtOTINoacqurVxDskc/k7qsJyerGyRD1TyQejChktxvuxxnGcTPJnlivxF7YRpN+mb3I7vCswQU0rDQq9nAQ2H22exs07z8Hz7ZxLhT/BDiaMX3jky4aekM2e00CC0l/O2TejzdRJYwod87vXJxOUg4UiJuSzOeVuyirk9i/15saniIoZeN+FJIUQpAVUp2YTq2w3uwNsLATxIpXTUdPqBkY0sukZCc+flS6V6Hxyx0SexuQyXb6LdTCHAmA0+zCQZgWCbzoPx7d+XCeST5Ya0FWvhs1N2NrN43vaxdo+cPmZv0cFUoBdRCdAWkSPHuGPwQvfKikm/ggsuCErqhyN0j8KIOrzQVaCt8oYsJIPt1LfZf2R+ECyfmuwxFUWt3k/AkalOKruvmHV+YNiqqSzoKRFJqJ7HrrHKlbZceblacKVHWuloJPn3rcQuO8q1xeP9e1/5OPTTnfSzpDTA98pwMofuMog5j4/qr6hBgLDJqD1qiV8U0ShoUPZpC9AV7v0gaWzvRG49De9N4WW6dha8KK8pGDW4ClAAHtQ85/kYEILlLYi3Yqj6E4i6Iaz25sbydKjtynheMzhfkNrxlYk4kfY37ajU5Y2OHExkJw+K/GJocgDH1cyEVeIEyxI8QsGU7JBs9QhdeIklKEQAtYZTsFEvn+zLA6rdl/2WvISJTk+OyfbaOwXs4wBDxcAFjabqEhbFHOHAFVTN/t0fEn9rvz6c0I3oGy3SwmaR0X+9eCiZRlwmrP58YnCm5vwO0WsXTHub97PPgYmtdeElMa2OsAwY29Edp22GLGhCYEcoCj6WXc7YYYVduCD34459j6YU1vSj/UL4L7+VyXItGGxs17wpnJtua0rR71f26naZSa6Aw+Benn9D8mqKROv3ZmVJg5KLPFPjNTclZsyLta/9nH2LD4y/i2uKqy07vox+KfMlzWSmVrDo2fRzjkHJo5Zv/sVv4YLTOimSeuRaSj0r82C5iGfBxbRtqXRKp8RXWpZjwmQBfa6QYbuY1fHhkONagc8HncSzE8uOPYHeHG1Gq0nhTuRDrSMLi4XOv6WJKxbATBQxcciNUKTKj3wR9ZGVz/G3kQlgOZyKFHJLWbWJ+uEO0B5C/Swatbyb0yVlnpF3muYgj5dgozH1ByPuQIXQAI8ph2K+5oDTHYQnxAz+eLAGr7LPAAvyeuWQ14EHHJd4lv8UGmGpNA/3IAdRoGxrQ/57MHnPTHHEjsVOcG50PEMSBHCuhm3S0UrmxawJC8zUVExqumxxHKsYTabPcKiCumGuH2Wi5hWjKGqeVLLNXZv1jvjGY5b30pzJdetNbl+ZIGPe2AQ7HeGixbCrMMUlVSTHoFN7ZSEZR0hrrbgNoi2J7TPn+7Nn6whWHEqMHXprThqFaJDEImZIbIk/pj9Qf9sbIp//0Z1Wzy5jXZybCvcEOhGf2zJbhZNs+m2DJojvjxcxpsvWZ7SY62mzIMAHbHvqgiIfOKtJ3YR70B+edP3ZSUIxQmDtgzVvRLvYYaB+BGSlT2g91cKlg2TrvERq8evO5BULNV5Fp1irnMwrNgckUBzWxUSV0svWOPmO7hN8YEdxNH8PRBiCJ4dmEUaQjUmu9N/gs63u9npCylfFXh4+T/q7zNv4k4A8FOr6TcPX33Y/d01Fr9OYkWZuPg8mGPESZyzDt0GsLE2RdGQUIkpqwtdPxGFQm+nUOI2f6kWi6Qtnm+vTZxa4NYvbnaq8bL3GsOX4KmMHYjygY+sCnVW17nI9jvPwTqVJalB75bjMsfG6QiIhm3EMqWxzAXjiPdCbLzj33YhuURekqaJj/Aj/8Z9iXhuBTBtASo8QhmBdmnflatW1joT8/+ZQDeX/lqO2DntK4pfx5iQVLhGj458kCBamDWAMXUovTwhXsfSr40+aSklcsqteVECTQx1opcSZ2O8wRwsffmmBVSzcp9eVJNs1nD04iQTgXuwknqZ0RhvZAgGAvz38djWhTG/Bjq0ZT2XAilMc5WWKtA0RFLilg6SFmkn7Bow9rt0hwmB6ePT2k8wl1Bu0UeIdIFjTgd4QK3wUKsvHDyeIKhAbVLr2YFFe7mHzWnePaGKm94ArJ+JTWwboK8WveGksghC4V04tiVK35ykH7f1gy336SoUkZx/s1aZcwpSWl4MuKQmapYTYoQuMJIG13OnyJsSoxFUDNzuBDbe3pRnjH+aeycTP8hYFbFs1qzyrAXayOp2HoXShRhh7f9+b3AMtGffCaqT2NFrExMf6QRqdr1+wAt8GVjl8QJnBp59RIMoxJqVcXuQmHUyDLi4czdlnZoNBDF62a1CYNI8D88ZoyY7UqOMRQNLg2EqjU46B8wme2DP8aqPzURksuME2giG3jl3d2wfBKyZCUggdpgsE4f+uyidnAXAnkkRaUXYTccxKmiSlhFZIm+bC/Od2CCw7CIFUrei9mdD8Tb/oa8UNbUBb/3cuf9GjXaxPcQRVi+9HUiiDcEw7RWiyFsawz10EXsI/B1BFd/KDsdzm6wMo2Sr2HGf5Kl5edFuOK8ZPzgeuFZQbEHb/F7Nr8oFKmP8BUwWB0xErcIl4jwiDSeUgzc5+OzXcWMo4jdel/6Ikg5r6iLzBiJJbnre6yD/fzGbVz1/zkWDaOqQ0HyF2nJk4ibYkpJrGuCFCLgeFOL5BRheS5ok3aqfBobsU3metxqAem8PS3X5/3XoSqym8lEd/4kTX227boeWi93xhvMhsWAVx2XicLfvNOkuBXjgFS7e1niaghccWn7hGfJOuj7m/VEoCe1MMxVply150+CGBuD4wVICRsxiVOLmdY4yY4fO/YT89ctRnQlPNR3NcweDrAZ236PtL+6hYLfpqKZhVjeGBx4GOnhY3+g9GnTXHwaVen5v8PUK9WpXgc1JKu5ng8yLHE1sI2anjlJcNsDDS9XuqGByJTykuN2e8h6r8c6ObXKx8lXv1zGO3eHO0eE3yyaNBjMflE6qd3wCx+U40+LK6amXuzAgLKhMjr+tuCeZYncOPzmEcSrVBkzDGPUk+LL7rxYgrgxzZoFqHC7s7eHr3cgFEuRZRsjHL6zZkc1qUXlEt1pCw7lDLJDzZqWbsv3I1AEnsP8ocp5oIF6+cWV0OPlqgnotdCbLUuA53SJ5UDgfr3etsWlTci9UzlrNepuOmLBx0nbRN9HS8UJKYVX9KRVaUonpfxlnnST0NUu5X8Hpnu7h4386D8kJPqU4lM8k26YlyY+OOtCzBdkZsiMdRaVQXyw4uhk7OX0tZF0lR7VopBw/p1/IU/Q7F/hJGCJ5MFifl4y6tUQVoDvdwNlngARERHsJCuXsKKHhmK9KG17ugj4ILQtYOJGiXjxjYJ8Sao/pNd5kSRu54yoCq7TvaJ61m9Y2PI9fgE7pNLWja1iXW0khrT5mypB/dWwKOYQZ66jZplYUPwA+QxFZJYcgazKe+yto+H0SZl6ZM5CDtlJLPQcQLGkXeSn/AZpSi/MxiEsPKNSk3nGchZ7bA2Nuo3ApXZQKM4xYPab3MAdmbXmzJgyO15/zOs59YKZFrQS2YiMZOsmWahwMDx86/UExzRK+Si360Fi6gln+lEXgyq7cI63+7GIP5cABxfxd1BwMXarFnvMJny4NMC9nMWDqQ9mL5n565gRXZKdfnIQkHRmzTj0djNwmJB05e8zNHmsODkTSbvEH/EFhXJu1lx3qrQoCf6srm16E97CfT7Zbe/v3MXh2hI/GCglPE9m7hYcFNHMj8PS2ZRFhHy/JslKCRmydqEzf52PiB5SFx3Fxtdw8SYTvvRBXG/xQseRpqLVOvGM6yOSnSB7iIj72wssdPwKnu3J6s4BW18Aq9dhpb3HwidjHAAMY5btHvBKQ7ed3afUC8tLVb+VJUh1+lQq16YFirIbNTxFtWA2w3QTW7twpdy15++aTQRDnVgBCdPInOtgo+ubbOTTtcBzCV5f3HUP1IzzWVR5IaDf9lwztLGHQEQHtWrC30u5EnB6ZuWEOkrvjydgfXmCBpr0d2srngEH9wNLg3bpvHkd3pj12rOV52b35GRFOOXjhxs4+6i1x24N5Eg7Jt5D1RDMcugBI6l1GcmYZohCu55pi5CQCB7yNpNvvqV2+fdPim16xcmV/kcBznFC7ZO0UkqPkfkEtjYnU6G9KxCsxC0k2z/PgyVVxE2KfkYzbhgMomC8tOynTyjsA134DiGJ+fMDOiiXgxBA1DwX5L1ewwiL0RlZPmFrmxJmPWPJr5FWgXycwpGKvHithRtmCl4m8zb//Zc7mF2aYES0ksBwAlUo2NEO2nawF6nljI3qMpRfcp76oIra/X+q5kIVkKLXZyVRNePWkXJPttKMkQCQe9TVSIwPrfryvQyzfoWwwdFDPROy/D+A1S726Ri8nU37dcVS2tn5bMBL0Epi1Hnw6SpUBkv7dJOepSg8ozHO+fMQlT5Aqf+fPTZM7nPyITrj0gqjABymaIp6V3UdjNXvHN5WJM27+LOrWFhSeCyXMh+v/QhBCxQ0ns9khz4xbDXKqd5L0/LGbE4Az3yjbHM2o76foNGB5TyxbU1Vr7ffLJQkhJHwi9WOs7x9h2VXQ3yHcl6mgpddFwbm8mwCBxW6GrY8/qMVscNE13kaJnbPIucnKnq1IzFPd6cHPFGM1ma0wYLaDQI7BrYaJ/C/oE/GVokCYShUjtrqPlEcvN3b33oMVQko+Xj8m1nqzphG34BBpnL9snWfbPl/SckZJ7j8yeoo5cyjv+XRbLBdKkM/YPFA+ij2KLn2FTzgBnRCw2FAP6qjmtLWbSlkxPOzuT7/aKzSSwAKKn6pCPy3pCGq4xYx8JLbkx9mTsj8WDHQSF9WtJ1CJ2FkgK1acWkCXptiDr8+arEwAgmMjjn8lwKsJZYUfoArV+VcZ6WwJLFvcGX7kxMaZuFDyCtHBKI/KuAhi/dZ55LrY323vvrOj4lMPXOZl0KGeuXqNewKcibM1zt2bqvIldUsHcUNqX76cY8TbowqXfEKYsgBFz9Qx5DomcaDZKqhlKO/HeNDDdpTnLC1ewLBLr5k+v3MApi8ERMlWCzArHMSBER5jtpip1Vyg0I0S5GPM4KuZj8E+51BfjBkqoLP+NqdFylxV2nwont34vZ6gh8EoGqaGom+wk5FPIi/EJl6jA3GBLP5fobG0n6I2WQ6jYI8p69R4iIWNsTmJMcFZ8gxwAR9mc/jeCV0ssNxgRgX1D+EB9qCIQ+XT+0CrJkFHV9Rq1mfuuOzhRyJoiGHGOtQlPoav9e5uSqAzgGE+59hb4rXy7/0PPgdrmF6EmX5EhlvbbrvbepUuVdCF9a49feZOS6q/07Am7pJyiRaEUYdSzRjc4WULfJzQR0IsDqwCLiEhhp9LFjcovUerLJoNX5+ybiDfjOvPAA9stDK9/3mSXXows4rNnIiHzEbZPJaNfwNJXxYrmpboKtlA0elcjXX1MkNa+YetU2lM//VDKhATntu0ygPaoNiNHRxE9Jz3TAlB7QhhZHuaUOtHcOaV8lMjevakRWH/NOB9UhflIQRRArjfkaCTFVr+m1oryrxReIP5t4weYQB4NKDIMANuNf+faSir/FuFy3KkxCP6HeA9Fv5EdCKzczkXcqj1wGKOu+4eKNCkGu9j3gI2zH4Hw9OfIRvYVehWfvB1faQ8F1mg/T2Pv94M9VA59JI4bBPJ6VXRXNznVFeVX8g6caY6YPmCuWBpYl4v2PpcakQobJT7766caUKI3V7/65hvC/duW4jMrwGR6r9DxONdxWOt2DJ9lSZCgUP96Z6+5OEwrUkWpq7xwFPDzVRTJJ9Lt/TC46T8Oh5E+WvudjyCJ95wQjvEdI+rUoO7cP4IVmxt3yWS6ebE0oakVjFJQpOWfHzdwGZ577ofOdSAFJOL8Vjy6cktFAh5bSMAWKGVIlPC8KMxK9Ofys9E1wuUw11IhVs75qi+CtrqDNqBWHqc8Buh3CAoZ3Lx2JtwDuyqCqYP4vSl3XgXtnTu6mEz7JDi5FynSV+Q2y1ZghiSsWfGg2zYJeSucFlUS2LeWVeOcfAaYeRKcPw+Qf4yXP0tMroX80a0s3oHeN073J99VazDgE7kGqKTmWUPK/Me4wa1A2jIjb32B4JYYkO4lUV7ZehN+dGgkdFPZN/IRx15B8R0MhIH/tfbpkqaxJA3jK+sM18A0OKOGT4O2MtvZdPTn/Z0tGKU9yiDFBkwKJAjTQEqt6ymp6jgRygpSSbWovQw6B6xbnyb6bWqUviwypjKOAc4IBSnq4JWIOKd62UKyuwjU1vK8OoJSvs+qK4q22NUdRK3td+hhNasG+D2SpDoNPYLOCbJtR4NmDlKonA+ID3zXjAE/xChO3c3be6U6FbE//+Vos5sV5SC7pG2UojQLbUzlnKiqamgcE15DyPG6lPhfUUkFkgP+jvpbgotpT/yDCmSYMOxuzfQjiXqVPVNYmJ5eNzR80ZH/4CnsAbUGJzgkS3R6Ayh3/hVRJ3+ECjINRfnErcpQKJK8BaPnvKiisHwAV7+BUmH8Hw+08phzrVerj1BaqSkRn+IsPYPWx3KtbKn/GO4Eh2HL8S3TasFa8YrgMtwL8kDIk9GsHkIIhztZMcYae4YSR5TFrjzzvGQIA3IY6qQylN03JFjlseCkqgHliWVfbfdcFPuhJ+1jdKiCVqu++oDYDf8ZHfPqdPip55IKX/DMmLTZHzVvNdbaLBAcxKWGpWWfuzk7wsJmfjpn+Zo4J45wBbItAO0l14OWRQvWY+eVjOki5cULXUtBoMz1r916P9SJ/iC9fSl80UjllwL/WzZz0ykoHicaJ4uKksWP7UCR/f4HCwzjz0lhmPYNOmaIi7VmPxh3i7HbsUhJoKkBA0AXAEt62l6Qa7QT/K1rjEc7oBeyKCwy+mpRmGD2aApM15ieZE57guOEJCDjhE4jSemlYrev/+ehWWqbydXi2h+pVI0H3r3rqONlMBU+yd40cfnWGWC7IabsaWRJD0a1WCVg4qzWRgxHsCe2Wg71CrmDgdlkTKFpWB+E+jY9aJ2NqIb9+xY15/lpwPIFgotoics+QM36pohWvs/5B4dbxVK6kp7G+fcePVAFI1sAS8XqsnPwptruB25Y0ZQd7R2XE0u7vFa5iH3MjT6rktysHk1Y8BuR52+ZGsMh9fvsRt1BMLsppqwT54FqO6I1Q+ZxX6WNa9niHl9BANpz2ZmVm3OL4dLi2mBHgkZ/oxbflRKw0OEhWgWnf12iTM+jsm3Kd2iz3GrfsNXef+Xnya0FALVJ1Xej1m7mswOqr7guvf6sUD/7CUhOw4PLELzIHMbIf6TmUkJYFndh31WrvVRS4w775KhxXhnbIZDCDLsBY/5XTObFoUV1lYb2N/IoELevKh/dWuXKY3vdj+wwowYOmLvkDoFAP4nQcD6sSaSXmDphTvqx6VNguZyrGG+W8o0hR4xozaq72/bz+jOjElj88oiJUbulrap+rLDdXNVZNfoE2/YSdCA0gynH3k0empt+I/Zf832oxmpTlbom5nFopgpC/jjQcZlGHXrDIC+nCuNUWRkAoJ2rbWYLrJlLV8EZB5QsxpObMlIaz/a/av2w5EPu7kvI84r+OzUwEJpKHZqLF3Hv2rmRYZg6DFsr+zOcnb2w/HauRDkV4JXbYHggbIiCpuSV2jp8C3sZutnekZR3f/HwLdrN8OhP/yQX0ef/hbfPuoDsi01BL66jKFywkgWAyCGPPArgeOYtNRON73tkYbMC6prq2Qmbkw3axJNvWA8V3miukSjasd5ZX+iU5OgpDoCOiIj2gVDxvjNsrb4JRJPREEqUMk5r2tB9Ui/Lf88RC84PzjX3i+bIA7LwVtFKsw4/Mk06TjCZeeXWwkxi76Bvq3HcuKc9NWDMtht9Y8QRl6Wb6DuBiQIOx8wzTQ5Vko293y4KgunAzk6lQj6X/D0kfrhy5nBi9ZjOaiYPNlb/nB57PuqQqMHM2eKPcDHvVBxhkkvY4cJrJLrYuj1uEiLY205CfiOFuKlAtLX0KdFAbpZCWNuMWWW/yyxroWWAwwd5JbY4SJ1ihiwocGJ34MqDXCGzgr4/0B79D2EbYvQlaFvj3LptgVhCpC2ulsd/3dXyjFjIG/k/bivZj+xDCZqweW83vhFWMxOr9lN+DODhXkaU5djcS12Mzw/iEDxXZ+d1GFbFtPwaPvTM5Z6RdcTCxuKvSapUiv7PAOZi7V9Mt95nawt6ohVJHILSwRbdy1sok8BVtPWpOICSYySfZgXNs+TD6wqj9/f2XLFRn0vn4THuDTRJWKTcznffvmof0t7YqyhffvhecZRipzWaJutc2//EqSDDRxbN5HhDqS2uzglQBAHIHhCoM6trqk/+nrlsXx7t41s5fEfvPfvrAXSiYcdIRoVkSpXE4H+XJwSj1yhdZ/UOoXwa8LiK0PsAMNud23YNTnVxGpcw7sgPd22pj3Z1pAg9G3UZp1XrdmY+mCVTacXOwvPgsUxmVdz+zx2C5515r93F/aWPBQxXZEfojmETwy6rn3Hz+y/7cT2Uid6VC++Mvc59eaLMHZIsqjcVV8D4O0MKTGgC/AmZKsVRegMOr85PdC3gMbOiIbCAmkldrHC/U8lldj6w3+IlbeHX8eZM5wuv+Jx1u2goCPjIVPJ3zLMVlidXCssTfVNo4uByN9/AXQMHNnN2RPiMXnwJArxglJovW8UgVSwqxohxOfDCxiVIRcSo67EI7NbDZKJIrJz+MTDuJGEZGnk9PIo2ZdpoWi8YoSds9v4w0fjj8xiv6zOiM2ixGB2kujhAr3CNo2k+9eJ4VAzcT/CCQSuyN+3QzdxLGNjjCsjpW0bHjw01SYsPadEEWEtaIrLu45m8pWUUUfcF0/iacUgCpCzy3HYNtp762+ZmOGfs0AwxpldTMHR6ueSDw5SaA5OmvF31WEONEtA3d36h8G4mWgmX3i7mvrIDMEXhdb2xfliqT9BJTuXEDeIbaQx6LqCzuj023GFOMSl0cKiWtYX//wvyP/XXQdWGrOERtZiq3uG7c52DAjrIwOEeZjPzhg2G5Ie4oehzz13rMlyCiqhLMSVOQrQsxrI9Yz1ASAHIlvF+KCOkjZhcfuEFAlN1sgYuiEAW2cLClT/KvMrxf/OVgZPgJSQhxZe/AjFEI5s4j5hR6UzO8jpK/3Ly8jJkFSsQOdBvmlwmNcMc+ehy6GYiyB+HVkniVrH6nYvocPLcUFwT1PlfA5f/lU6rl9Tutm+HvG6IGd2G9KXhlf9Jx5yaUrHVwogezSDJxI47sZdpVdoSrzIa7sQU0xMJa0n/RSXtv02iSFpwu2Z0X0Dvuityeou26K10M9wq8WdiKdJH/v+S6Ahrwrx3fv6DUbGQpCsM5MF9u0/aCBHyjr/CH1erPfTt5ESPjg85cq9kIoPPwbeaAvqQPOJrvCav2NVlIk/n+1+OCn7prYpf8y9fhfbACryNMzIfoopHWAWg878WxmXLeAz9fAwwfktTgOvuvd6EdwT8ggVgnxnPm7/WFkZAPKdsgPXMPG+tBJO5PIWKnq7AhidyHaSZrUtMNwS3qee0G9CyLmEGCrs3nF4c9samd09QRspUU5j5hW1RkrW+XIcKMNeMG2A+tYWoYikjOH8uEqia7CW+TfsXFSLiEtSnlaS/Zkwf3+hXPejqCNNJQJJiafAI3Wgj+ziK2dKhE/rwUZGvYgEK0cRMujJ11tSZwHjv2UM26xOUOEkPldHoUr2FOBomt0Jg4uy8iLPtqmSlXQp95GKhWlmwWR5DiX4YzTQ3nwLiengQAUqfOazYVCcBYn3BJ+ODuiTIx6FmkBwSIXwbLeBFh3Lf6FbY7ckv/VKLyHi9Gx1tKkYLiel1Gk9qpQYMPPLKiGPqOXBOCMBHqPfBuKffpnX77spLP32f4tSO7vtn+aVZBRg3sCEnBOiSZT+7i/TajI4QAPIw2SXh8cyAPMJEr8wFduR7pFEPDXAP8NgfBSGYUHzE+hG7ZHDJOhe0FSeAKRIKuw4tVkGurUdMxNvFSdi9VzsnkbjuM27axC7GqWphBsUxnAl3QpPIhD+pbtIdkpWgElDfzzafwm66kg1VMCKr6kxnXM1pm1i5E2c6OWQoGjl2x26oa4yvgOOaRscMOrHg5TVNn/oOtKxAzlGQRl5J3ayfMzqf6ECyCe/6W+CrJN3kRi9ECVGKkfEGLfD9/L2Q6UAyLBWFFiKQ/SAqtFVFQgIxklOq9vH3pDp7GBvX343wxEWhqS7AGjR8oubUTXqXpJwnkMfidFtRvB1dM7t/BkT/LdZjWuveo6y4MIZJruF3DiR93dCLoB+wE02h4JPXxnagl7AxNOQeh1Mec3r4mjRBBJVyP9Dq8di6XtfuFOXxmq7x2dGZg8fyjbq2gEL2wzgG3mn2DPRrw6gnziN5WFWKNB88d0F6VZtH6upKR3soYI9KLzDGJMYFUMiXvILa+b/QpUZdYnApzhpcDk+dysmsSejf/qLdn54VXrtEMW6HMZ6F3GcfynEtAKhvbeD5E8J3uFKPcvxwKqSN0otF5lPO/Wwn1c0drNEzMtAR2m5lSm/P10NxobNHpBf1sE7HYs2p+AQh7zW/i5B2WdaGGO88O6YQIK+VuZr1NDjerqY4Z/D683LdQiVM3zKfmmVu6ySv4/1KWFyji3yLsdaDCApbjh0Sv1UIVvYLbKGswse9PBAcxdz6p4yNNbso+/IEkBaR0ZC2MR0rvmXWWZFbvwwVqbnq9gVjBlTMh/sT1fIJbZpwKFWh/hDgDiNBCtCg36LsFNV6DRtwc/TuiFzcxuckNKJ45fXvHXW0VPXfPfqUANrGCYN7o+eHev3lDMzwjIO3eO/4kF89mMEeZH+yCJNH+obIMVNCWm80oh8PceNZ6Hj5nYy6LGtCo7RfR6MCjzrOib7FGWFMFjA4hskbAgOfWxPYd9P3CujNW/b2p4IPUGxRuJlc4B8EIHd8nFVwPhZWnaPwooban34DHeE485yDntxpIhh8WNM4kpo5WWEhmTv0vzVHGaok2ZT7k8dfYAm36qlZGCPPlekJ3MNhFrn651Gpzk5MEZbH/hmsICn2DaFUoJra4mbeaeDsCE0bRw4pb34WUxyXCuOGq46RFnbr3jGufbxOelDbjPzWnnyM9aboOOdlGMGjj9XNrhwxVbbToFO9DJ2PO2pl+/OPeboGee8y501kje2N8u4PJNdXTRYsJY+YBfhoc13hgUNgRibozAqBf1lNwZP3cHdyTp/K9fVLMljJtHWBbCKp5Mj6EkTk9qYMnI97jbDbli5IeAH4525jmJSt+tKJGQF1TV82Gpo55YED4qXVCtyEg++ZAjgx9pGGz72YfJ9U4jDwbRmFasbDbOKIanTxm+d514guGuWFJb4C81ZXLd9H93GQ/7ayugNd1ljuXRjtArv9SD+CKvu8D2DLr7WyNwVJ6ssTStKa4bdjqqvAE/oaVzJH/avFTkYi9niMR3hd3N0xcDPI0uxojylrfqRr5Mdynmx/FROVQlYFkNOQMBeDMCh9zYj4EBHYn54bFBz7ClgiwrXlITYlFNtBcNQl1e/D7+6ig5lx0GvxOQR70YmGdZXxcbuu5H26iT085q7WJVMFuV7c0zfnALvhti1pwPbYhKsMXhMSr3ykClB3FqXHpD6ufOR/lnzsaJpqgcPsUVhWRtNYlFj5vcvbFS/KTYLbH5UQVePH+/zO7ru0SdkIKtZz4gpTeoTEudZwLZlUURed1uZSUaLg872hR8xfnQ4NzEUUrbI5CVrw0RW+clV2ripzVFWINRl918+E/VO8XanoRmJneCdn7cRWgr5cVSZ//ddQSwmKjr2qfSgC+VUfglN0T5x8jrmpzpO7XUhHzRc7g5rNsXpe711KEVvm+QNtYzia6YkCutKIHDFRL42EEd9uy8ZzEcmputsuNaTyXBG4hvjJMlCC0JjgwiYNYsqZQSzQnYxQr8awHGZQjT6PsnQnf1nT0GcW8t9QW5YyE7rhIv4FOnCYCK3kVbB3srfNKmhqZe+6rWEML9WCsC/7+3DrlQL0V0ZiRI1LEZvg67jz52m8R4OGHnnHHgLN5ff66Cpc0AVoaxnNgiYzTJo5WmvyMOorqmQFFYTE5V26jsOlq9h5/K8P265hm4ypNPf32M3oLBm72w+hVlIW63e6Xxm/zYRXF+4Kkftkj7ksK4JB8Hp9SrDwy7H6xEi6v2OU3wZ0DCslqRD9HD9QhJoiBTuhUVRc9Qj6mXTH17Xzyws467JAC6V681LmnfWG2lvGFX5VST6vsu1QsnLkf/UnkqI2U+sZqfsfVqpL8FbQ6Ebgp5zLgyNIknu0HwdLGvuzH2sIpB2U2LMtgWGvIio5cdxT52w8yS369tXwEKXkFBEOSBsQTtX5WMtbWgR4XiuTQSxAiqNeZ3CrL0FCh5w6TE4281/i0UEWbabTG+5Cu0uCjzhicF1vhT50DxQf1NGgFmNbaStGT7yM2IZvFjzmsewaXEpC4Y3M88u5XH6XgZUHz4bmf6mEf2mMEborsvpE2+q3/8cHQYfFBMCkTmpxUn+nZoWKW/e/0EgHXZqfk4PfPPCOEyK6DzSvvLVE5BBG5Xv6+qrQvhMREMvIy900mtLLBvXJclY4faScQqpfHYg5daCmS49XjSyai+WnwM8aW5uc29zdWlq7M+GbeEOTW9fX/W7SmYAtgEbEBft4EZfurIMAWdOGNBYMDw8I+DzzU6kWVr9pF1QeZOFSNXVtaLFThcIyG10vf+tTCSP3j0qy2VF9va9Ze+WZIWKDn00EOvW7MAi5dyC/nikrBAgzAkBrmnYyCNoxA9q26+VEJc1oDNuD+8vSTD4YwGcDQJh7g6GH/VHadNtvZBdeCRvH7o86ayTr0GoTNUDllm22ciA0gps19VgT0mFPF8NPs91AeFv0FySF8SUJ/+9NQAGgOXJZd7vsQo5yLKNFnMCuowzlbMTxHD05pO2Eu57KKNZMlHJMQPoM/AOrkC2deR44vTQA46PzMX9WrORf7gIwIGKGSSHBuYKgKIkFvc7DXidrO6l36s86r5WYO7VpAs0H9uCGzkuOyNmIGa2nxt3n49Kepf6qcq36VqslnMdt47H6OrOyBvt2ZhuaVYeQqYeoRbkopXhEOkVUdwCtb5RZCoSP9+g9OW1QeoInKW2Lf+n03ul5uzPt88iCAD31OP+8k6oKDA5xsplAP1P/aDxAzDJECTkBUOoUN0y+M2kYSvygKWDv69qzM4DDUH5QLlUAWziSY3UwfpQSwg0fXb4kVxR9WwFXJBQp2uLNergsXsJNvE9p7QS6iok9QzOLhW45j9Of3iRehqC9V2GgOVOfgUVLJFpdELdP+KQHdEE9u2Yw3JG+pJJQnJnIIqytTH4gn5AiI86oPuzzyKDRwTDvOb0Xhpc7WrYXQF7edMtBynNqhZYDXGtqVVTdUcr8uS/rjdSn9uFcgY0cE/ZwJpEVoCb+rbFCqOsVarpAcpyIlK3KdETfkd0OFuHfjbVGMPLe9kwt6aDjN5uFSQFQuuu3Ws8ginXEZtFE2dbnZsCywrRi1IgxNPJvL3DWvGGqs/hqmv6JKXtsSJ55TgrtEGGwMI/kCg3VV20PWWkfMaZRWOHEO833E1pnMRttlrE7s1MRTOFIbyuonU33Hxs+W7t32m//MZr51ea7eGtuagSClK4zPwnZHMHRsUraeHc45x1SzU0WzNC1qMrPFlIAanKNHW5Y2wAoxJO5hE8U9rnSLysarkjHjyTFfUnYDPsZN3o+igaHOYLDEBQuFRaAtvCB9x03TEqwk7mWVRlT/MNsZxrAvMYPXYikJhE4fPVzREIt1fIrjOix9d6uR51GrZcEQeRc+ODBUi5ZPC4JzV95to6Zx1663wzW8JhTvENCmlEwMMt6zo4QubUlX01bvBqoE8/GJPZ1iZlKYlvhjgmi6gz+VUKyPiySPbZvVGW0dQbrJ3qYgKt0zpGFhgoW6M3b2qCPTMMAyactiAAzDx8nmM6noDnPlcYb9AiVwwWvqVDpSpghSTXcAfUJc8wGRlhYlG07RbUbZd1ORqP/4VxexfMJ53PA6EyV5EMITlLL3V561mmyrHAj4Sf+SvSCCafZ2GEp721K9xvpkaq6phwEJpA3LCAR4l3rbIWCiMHIIi5YUIzXuS+svLLBFggR6cLmE/AXrT5KQwwiuZPYl8xt0NfFZMa/j7va2vSVj769pdZUGvVJ8wbx+AbmM78+hstTf3n6FIZfeXO1PgAfjW0SlOTam/IBGe5idr8aQKUI5p46wbTXOvcZe+4p+DuIGuCCvQKsfggAISwkkjuiJREAeWJs6QRdnGpCFBXd4TnmXT/FYUynbcBQ1xOqc5zTFEzqq8TKLoI+MdM1SRF/Wq81f+0OR7i1czfxgVODnmD95Ja94UwGJSdvtW2OTSzuG8RKCLuPaD8LF9YoK/Qd6DFxcTnOlkqj8twz+VTDoIzUqy3T9J/bvxbH3ztkBDHBHz/KGZMJLK8b2DmtQKfOXZXFLv1a9NJfA2A3jnBqBbwH+mTtwvuI3i4kLABUrfJVB6Y2mGIBWng56I3xcuBIy7a1PnpSWURH8vtstmajQBKogRKPW9YLgzGNAtL/Mc0z0roUbbiSNq0WUjYvV7eAxYBlxmcOdFrRb+6cSRUdMOKN/IoaymNIMaRvukTAVfCoz4e/RjC51HPSTMOlkSdBLnhnUNOKx7t7ShTAGMaiEuyq63dxEoaOzmQT0SteLEcH5AKOHOnxbqH1rMjFZleLRjHOfOPvcAjr9Js+M5Poa5UHV2BF3gbqxWJZYsqMT+EHA3ob7p5rW/Jr6zTK2s955qIkAmlrxdrn9yJFZ6Pq5LVsMfZAxmKCAV+tVokqz+t4b1tD0L9wITbnNzxk1GoI9sbZMpz7R3Scpfag6TWY4+QhwBHVZgEh9NE4RBXJMFDzqttjIpMZEUrwX6GJ/g5wNQC9AYYh/9swGGRJ+5LYvYB9nGfLfjwLt67JYRbBcD07LkbJRn3HOZ7k/zsn9cEpKYCGK2utUCKVyorThTbKy3stYbz3Uy4TlBi427pfETS5snEhQrO4vqbTVZuEh92SeKRClRf7ObNhO6bNb+wpGLVwR/odoOxoHBHGhjZQ8msBIEC3kwREcjx4rOUdAwOdjmwVWDbuTnj3pVn2RX18ol9YO2T0tUPBMBi7g/92/zOdMgfbQHSHmNis77YlcC84gEGueoSUUU05O0l+8gCRVthv/398RvT3bwGvoCffbt+7G440Jej1HmFOBNTWM15H8s+83gyomFUjtVSfGm4fBpYOvKxg9E4XEy40O70na8NSVM9gMQ7WKEwDDx6l0Chl2DR67Vc2ObO77WkyXAWpEl1D7nElpFMXk0FE8ttFumyp8s5GKl42tsfxkPKcMvquPWyOLQ83CYXrx6lgUrg1DUlObqj75ShsJSIppYfuacpOh9CMvY7dYi3ANb/+EpsX6Lx0W4+l/GFQKygnsuAU8j5dB5JvSbBGqBrYvy21MjFGSRaN2pDLtN5Fss7u+DTcLYZCZKxhY9eNRl6dxD/bf3ni+f+YYwpv7qDdvNvgEnNnXvXP5g+xrite3R8RpsXR05GafI0mzT5lwcIypQJJz5h7Xfwn60PRyiFvALj16fxp1UxA/omxJj2CdPsCUKP0bIXAECfFBQHhZgt+zCjbOrzaxihnPYCM9aKWBu9tbo19EeO9J4ScrTB8ft8umhU58Att4S6Y6BYmXLPf959RCwfNR5vspqDVL2wYt5aNlspOxJ/s6IJZDWj1WnBiTr7PTEVpaWYLoG+yUEC2M/rFZbQvxBJImncsHZgUeirzW2ZqIz+mqmwgPKBpg/FMUHBvvGbiEmX8F0O++sxt5nWIQ3E69zBte/qNZWZ7bMNRu5NJ4F6BZ5mimUpnbADYPN6SfGCOFc0e4HeKwe6+gKIvvOSCB1tt+RLhQ+CaYYruIv96XFNmLJjUhoYxTYdHcOso/L6J2FMqJ+/kx1pvEWIYUuDby0C1LuLeUkbgNUTAH6T6W7HNHFGeh7J595+uJVdSD6mTNbsLyfYHEQtKci/OfxoKKQcrRmia50f2di+IdRtRwKv5VyrB71wUmfw85Vd476bM6D0DQVyLJRE1Vre4CHuTnRaSXXr4pw6B2YQjlE6aN5r/NlMeFUSpPqZ91jJOQJx+m0b/a1k4Gq9zgSno58GJuzv1ZvdJG0YDs+sDgesrHG1T6voA+wr4OuwU4Yb+Bi+TSaVetqC9cf2WsIQP0iku7kqIiBJmV3cq21dwlpOeHRuAAv3foqzwq3Hl3rQNci9lradFU6La9h8IPiY44a/jkvYZ1xOe8OsMoGlWmFuoS9A1A4vhF3Fh+KbVWCiYd2LnJVepJNjDl5zu5ubyEiR7wTIrjUZSmLXt4H1FwL1c/xxtreIBDZoB08hgKvQopN72ce5f5brHzJ2t3nqyaCgL6px7hJNHcBeNdN//jytKMQHwzaYF6jxa7h2vIO1H6Y9iAf4P/OSCG38ut2bwTOYPVxIv+qmp1Zle+eO2sO3FMSBrl5EYm+3I0XY4MCPVzPuZVAAhl4EVZbVtIkkZTZBWZiA/2oaRE1z+UvZC6dpD2ISRB8lPobyLeyjIlJ5zV/e8oLvUWUjPy1NBAxiW8KnV57/GDTl7OddBnVFyQ/o+WKfWJtG0qXw10qxmmksPL+giotrRUt3ogfLJ1qle5s+Tpf5REtd5Y3OHluE3D7i6fr1o6kRjwrucuI5wXAvJtQmGB/4+sD75CDKqV5c7qQ6fOZi7aI2GVX+VMODPIGI0onesWKBp8N3JaTSeEpEFv7mVFWxbRGMzUsBTPA01jQaO04xpw9+uy9kKoDY1lNCehftEHF1LwxdHd7ZgFntgIfJxfXqj+xonvu07k1mWw3Htga5rR1srCZkb76WIDi+W7qSXWlKwmagzAm9BtGjNrS9I3vklHaw3p/h5avENugIvxpDJMdRay3irvJF/4AFYnBDXF9bfxj/vJnApqgt889jOcfbTFmaMdKypFmCsgvxMWPcrNyA1HrJ3mTNJRMHO8/qbP9zzl3ho9NdZn8x6VH02A7LTyombs+ri/HepmVzV2N01Ri7hx2Y7X/Vu9qqD3b0rKshZhkq1ucrlrCqJLpLYVaZ4P8k03ge1pfmSo5KBw2tftu4Tcasa4yvXJDDDV9WzbRk6d6hHfdoZ6cbHc8qLo5AU+7Z7Wi/DBl75xKd6RAiKzxJ17Kd7lS3zeqg0yB/mzH0qvPGi8zGtI9PDHgSpfYj/mqSUBtfME6fxtkVwL1360nOLaxs/+iNu7cnuvUCjur5tzXBzyTgytPnx2fhQR39+lnebe3zi41RwQgVIoYhT8saWAeTbKiEsj3JaA54NmJBrCmrzZRQipDPBU99qge3qwgfnYwVF7WqNo5TxHp+zq7igpR4waYeTk8fgf/zDfdugm/15csmZYca0EtTRgBcqCU+HSYkIJFIxt/5dGX5KVqmyOIi2fX7n0RxN+xxGcAqnbo9u+LsLGizygUzQNPg7HJbteGMtJehcPiEWqKhJmgUl2YBDjxyt6Lp7HVASvNjgLk8vjJPZBkWZ5zEp1JqeJ/3FXCUeMXMNpHlvvf0In9QvGzxXFYulMDROHvkBGi/e54yc6e5L69P+a0puyTnOM+7sQILYBcUP0yjTnULJB1VrfLBj0Aer8ClhxnEykZZu7ZxrucepwI1eCUX/CWraqX+hKmV4K/Q6pZqW5lLe3a8u/iDyp8Dbrw0DXRPMh9AoeYGPZ0ELEOToIYmMaC9ZXzXfkF/JC0CxdpGIMlADnJj5OfU1M8U2bHHU1AKZe9DiYDjBr5ikNFaLnkD6+oiUyWEpVR+G1hsC/UEXVImPbMkF+980FzahgK7UBecAEN7YRPfdjQ3BGCW/PYIyGyWXZq1vrprwJsGyChEqD5DmNNPeFxSW8lYUwCOr/IjnrMzZsFQwx+IGi5jWPaLj5LIO481faXZ/u/zaR6RG0HxI+neVFdi2hTFKzexW7inxvDd0OzpQdJo5QZb1sv9LmLEkr9eJq9xHI6vSPGGwV4HemALkyl3ASU0lL3/kjZha3HMfiKwp6P8foiCxr4vRARZgI3ID1+sCC7AgA5qXHQCKawL5RmiLXxWKpC3bS//VgYOnxUT+HZhywcnAYGa3JurZOvg9lcNip6ySNGsQhGu29J2K7hWUUkStw4s7EbEOY/rQAN/2wuJaed5SjpPUOBCclMP8x2tQ2Cb5gucAmO7pNcsQjdxzuuRIiAAqukwyRf/AVMAXkg8aYKKR6bf6qNM9hb/vQHrV47sG7Gtd6a35EUw3txcfmWVOAU1EbOkxy7WGnmXytXbN/On4vDxCeOiQ5PKgdOxe3+rXkJ3KBJIJqQ/+eC9he9CX7UFpToNfruxJWbaz+Dmwk4zaQ+c4R9G5tVyfe7gnrOEjWBuzUIA/XZ1Fb2rn1A9bUPukZtGxh7ziIYt1kyEtGxH3g3mywyK/VCxy7U/0apuAleFsZbtnKVSU8Te2RHPuFpGJm30eXkuvwRJAlHOD3sdIPc3LMYV6uCdNx23HizFM9N9o/ilEH1RAti367K+7RU4LnI660oq9yMydu22+q+i+lKff1gKjf4u05EIjudl1hR4BFTGsIqF6G3zaYV5X2lhkUpf6Fo3LMWRHIRhaIC5U7yleZSmKM3ytnuBexxZ5/NSnvo6u8eDUGCiQ8mR9sXKOTGvUP6NRmk1cge/E1PzK3fgLtwC1bUVG+HsatE3D5zr0aPDKu3xnLgodeXiQo1dxq8NeUY6YyDVoQP2vPLw1dpP8QbibeBzkFHUa1VTuXw2bI41cYA6oLt/M3OWnGudvzQI7iKwCdik7lropMWlbK4RXI073f00oV6lb7C5hwl23qQzXJtsLn1e4nQ1HZptXqZ9zQVSZ6kTULWqQvcqwZaQw4thUbELv2qiEvPULmHkQZbIzuxV5BVawG8xU1uR1Xu1zwRzo5d3iaip/yxGucxasfiLA0jd6wTtytZfWjHTMSTdho63N49OTxf2IG0ewnG+UVtICCxlPmT0J19CMDvoXXwQX1iD9bjX3w3jHv6snC443gPjeyWIYwX1zJqGGE/SPbFIV75dsRsOKHbyKdZaX1Gvzhbar7BsYFcmRvDr8ICoIJNLwN5eLxRL9mRSsy/GTiHRHwp/hbxnVJ3dNw7Dw03HmCtNcpBZp20rwJvT7RnrFfbzIb/BWCNn0rBxKJmUgwIXmrDKroqsC/E/tKpMBUS0q5MwcIfQbWIfPIXnEFPrbyVyBIW+P+gcHm0BbHH4QqKwZsZbraqSZ913sm3zM+jsvM4e0yv56paF9ZWPES52sPaDF1L3NKUBgZ5z3cQN/BY3VnnfEhqAemIzvboKfS/e9Ihk+nekPgf/zUnB63uxZjvXcFJz/XEzrtRvDcND6VsE7w0Y7EBaTOJItTX0ZuAxlahpiz4At8fsYaPO9uYI+Q2D49TcRE2xtliCz3kS6YEYUYFEFFLIg/YRBwwhZmDfINxFCruoxB7CaokSieYP6iMuelfO1+WkjFC2+dos9EOHUFu89PXoGVUq53EPT/Fr6EedecSzz1swUUSc8K7WjzeNkeepYBvKKjOtP7NmMnEilLIInLhZOwt5iJCcG8/QwELtBfvxT6hfRUVw74NylRQnCimwY9xldl3/7pUvT3E9MteBBnwtsXz5Gwq1/EQnQo6fLjfk9hhCpFuqo4KNkgUTmG3waB3te6P9tJYhkf0Z18owasxI0ZTbzR0Z4zAnpp9MugKQi+6g/1tZdV9T4m0YFVRiuxW+Yq5fajnbFVAsd21YCbz185J8jyCyPVYIlTgojFjQbCfApNBD8dSWGhBgTe6OZp8gMxtYetm9ZCxU0G5yZsX2rjIb/3WobIkKMv+fjXYK2cf9hhttotwp052fkQAF4u9zKNgq7PvYYdWphdnI9xYjS0YazYLF5Z+NOFMFHG9PSa8ROqQwzSCW+mUts9txBkwgX9TOPO1UJSHR7APu65Vw0qwPBRjJdBRSzHwcKrrxngBLhKt6p8JEsGXrbYrqhZ7uwnhHHcEVT2vSWpFJZFiYOkKmI6y3DLTw9h/epDRO18aUgGhAWX+my0Q9TjbU9oNdPAM+rv3Apn7j6vKr3xJNMV1F11t8mjnXDWkhAQMbA70aPQaWlhmi6pFG6kLxBGiO+MODF2jY40wTuad9vYr4hNMqVm9LuReEtMKHDHPj+VmNKi+mapt9z5ZL86+VzJJwsNvSWAyRwDaMDoE8UjaQXfhdNw4VNhOokbfT/xXaCOOLFPoYyRKeYjPqr2a2oHxoNPHnGSdyZOIueVWK5cFDOhd5p9G9WWbrzYt0y/WzdXKbienQ7YdjerC/zaGxlUm/8iSk93YPx1StZwxOMWVkm2N8uuzBAebKD7hWNt0xrpQ9WLmaYQmTxshtydTYAbn6OWU2PtDUY2u+sPWS2QpXislnCb9v0T545x7FrAmPZYXtL/qoRw4ZGYhpQkISSLLEnqeHe5/YiQ4qrvWcRokej12vGnu//2LMJTHu5l7mcus2gY2yYduRkI5ds0A5lnX3RHKQ9spSZvOLBS8AvDjH76uKtLDMDP/6eQK0nLnQWEg+daPTIUL30R8+RsDHhbA9f92WEMVodpumTu9qRc+62Ggeqjww5R6JgZg4C8pkX8N3FdUdpPPOMU5IUd/JVSiW2QCdPBmvA4CvY8qfDiLLwsj6A5wYofno5xWWscAu/dVZgOUSERqwxDn9/QnVgcCIA5IBSUuZ54HAmMSIuwTe7xcUN5mK+2xtM1XTKxa+26TS6mQj+mh1HRj4r0e+K3M9PVzPswvrj13aNZ5O66KhzBGcp4C+ZR8MtOfKApAiDJ8Kk7LVeTM1C4ryF5z6LMzDRuZY8D/spWymn6avRsjmNkHtfuqxYeMHTLvDXB4BbWEM+CO3HTh2gjwyXks6Wvrhn7MwRCDtdpEFo39zcyysMpVGpLBYa9HPqjhBXqc5UmVUhfMFeNpsODzyop3YLTF+OntkUMjLDmfM1FdPuhbhRBmOhDcTI3NkEkIAfpPj7dCsf+0MySL6E5IhG6fSo4ZnEH4bFSoFcoZ/rcNeyLvmCR+Pyo652IqAUINkOccXbHXN9o4y87JmMnQJpAH953OGLdfX5do8VbkTHvOLwwb34+BWBEbXunJCmU8UYwptuJx80+K7qj3a/glsyBTgUqfU+pJI0e/7j3pR1LMAVi0NJlkz+6rCoowDgFQhaGKMxzpWRcVP4WNWMBc5hdnUiv4d1E40kykukUmJB/yGeKxQpIt+poCHk5uElTU9tm2gR1VpYk9kXHJO5Lvce5YlPAxie5c7JqZLlNvqLcTNTD41KTa40D/Hyk3fRV4jj/ymlq5myrxLkuY50e/MWef+GmJw+tGxDosW8ot/Bjcbg4egik39AoMiRY8UDnVEdwQtW5lEw7gFQR19F20x0138yfObnZBei9Z/xkopL2iW8MRLKvD28wyBMyBPwLj88lpTuhfy/KwzRsu930yIGyFFmgjasPSZT5cZOP2SZnqDLPJwzry2lvT0MzPht0mtNM/zdtsr0BsZgIK2/IjH1fKj4k9/dsgRdpNcTd1fDWxrkk4hzeM7v76UwwIJ0buEdpN2ZYxAVv4Q33vSMWW0BPczLG1XEF5hAoPhKAKKv74WfDVET1d6bgU3dRontRK59cEgLYP6YdJT/WWpW5EgCMkFObSb1C1OlxQhjKgksXm/I9c+2GSmUhvEIj4Bea3NXpb/exjnse1wl8T7Y1GGdgeqgqfTtjI0We7P5sCs9WDQXOe8/c4opMlSCWvsFeELhtSj8SauFI9MNpk7ffM/iXikMOVCOo1ufdC/VeA/BTRddw8A1eMZbgJzebpWKKKD2rYfhj7bLMXdyd4GDmc+Kcs3CsDOccOzDuVMVpjvGDF27opbt0Ds3bLusoFLKZXJM4tlLzdLmAMpxfPg4M5KXaK26KYu3+nJ8+U00ot8I4VF6yjx1DU0YXR6/wD3Spkh5pdlOVSPYzqlz8Se8+4LAzZ5r51sYt2Swsx5840VurF7WTlxv1YODU/d5KVCyPmgKZi3kwToo3N+tfbeA6JIASQLmmSBqHKklpeNn51XagGnHPnwfAFmgDsMSAetFupWvsPohy+Z8+bbCTR6cmue4VjmQQoDDlPF72S/vH6yxkLuZAvJ6bsAviCVsmcoWU9B6titfYZFsCdjI6NmIwn4m2iCgDnzz+p2wXvYFfOk3CrE79oDhr455KcyufMehiDqCPL1WNZaNFtO0F0L8iaV1AsgKu5o162Pk61cgTYD6TtAY2IUSRg/4V3vErMSreG/swFk6huZOqqppTIxm24RHwWvtq/HpW8Be2Rc01EJG73dN3XmiEaHHcSauBNrQ/ap7NShJj0onWZaB538aL2B1szFbTS9IB5ozsdnFqGm83r3g411IqtdYxzrpVFZ9LwDPH/AqhcdPFkYDnWvaR+T87zLC3JuA16/LYIDwYZVoNsJt7+x09l2SJY9f+oStQU+I3abF2ZMq1dRuP1M6uuDoVGL1TdhrIij9zj7/mGr1rVqoRITMwer1eNegCvPofRRm4rr4I+jGtB7pf4XrGGc2is2/eaFREhqpJoSjaPqKhcHP4I3Q6lxPCOTfrxqLVwydNMfendpNrGLMtk5NfER4un5mObJqrZ8ICghuP8x+yGVlnVb01MT+MD+qhVysmiCMYpDcXBJkMunp/MET6c+YTHMl11fR1yVAGUd4ppSzMOC16wNxqJLfOR+AuJMVkzch6OhcULvekIVIe+mZxiAevug+t/Gc2I0q1vWgT8AFy7JVgO2qn72btrwNiCTk6lcCHiWdZerrfmqRUe8Hvpfydryq9IwTybaGBwFdN9mT9RoMXyktZoDuFI738BXWwA+Cwbdmtjea6oN1Q0Ok883LJCeYzhze48+BcNdp9wUL4Q1Jv2EFkl1hmb5EHYn6S9kTeJFj/Ah7tsGOsQOZguSqn0drYIpIuXKe9m6YK1mUId+3sw4jHkwoccvnCym1xgw7IbO9K0eXCxxFJO6ki571ykpC/WFbXVl4rzp03/Cv9lzbLXCKeRuRTMsN8UWHCVCiGWsEaGyjVGmL84U8F9SdqAQmcGUxrURc5F/vFEFncPbtrtVEZ7cFP5IU0Kh9j5hTH5RuusUyOW+2pT8+feoXeGbt5XMsK/FhTMZmmzzsNil5csyxzbftXIhV3V6l47dnjuJRNyKQO254wh6o8uvtSD4kaJqcAHpDxWcE3+AWejnFeZ0ZVuEKgPVNcHFej5eGWyrx7vqNBOvvUrl/lvYfsmc4pCxaw8Lk2LgBsVGhLBjVPwbuVjeZcTnyCKJtNAwpvhwhbGpAVrubASbyWsloSbMv5ZrciOqBd/cAVcLbfix90s4eyVf9f/+JXjypZWTxItz3AH+LK3KNAz6MncMw6KuA8H0efGa5YUFqLA9Rit1qnpgiB1oS79zaA7FxC2AH+kfUp9JD654s3riNEcVLXeN/BzjgFKkuk52OvhgxsaoLHmEsLt+2lkDyOMFN3RvJqNyLWOczfQdd2GLalzowpRlLsMsl8FvXoQoPgnInSo6dd/IAymF//cjFIx7TJISDA3ELxLMco0DaCp0d9EAKrWQcmxlHbs2aEDeJZKqDA+Hu3ru3Vp8aWFRdvQIjCSQPLCdlBiccYs9AgB2ENPPAovclSun0lXERwx1LK61SyzAl1SHphR8bRXiLLjq5UXAJzdcEm4sdQiEWnWIzauxtapZmg9U6Yr6fpp5g2wVSii3tgJvGJoan78qQLZpnbgqiPhi9BC2jO3rqvfTs6NTUi8jXOJh3LGBx3Xl3Md4XbGMOyEqva6f3PK4X42tc/56jwXl1e2Ox54Gi03ltMZDvuVqY1UfrNjwIl1DsZjfpOpJRaOVSs6m9SQ8YoqZvolFeIYbqZivB4vkVS2l7MMwHLldXLBOjkG2BFJiTO1vgnzKLUhkHefGInisN/X2LJ6O8/DjA1NgV3Qyk8g/LNWZSSB5Rfm+WmadGp3+C0HsoNTmvtMl4aUuAUQYEHV/Kxwj1oON0VIEngUSbXkTw8NMALDi/i+GkQmVELfDv7V35D+e+2fqSRuS0zzNY4b+8YfZm6Pme1yoZwYOtD8JI6iFzRYVbWDKjmIlZTEznlKfZU2/PWiL2b9OxthMc+SfjUaloJ9LJkqXdbdzC5UmhVBumzX/dePHrql7KbGe9khiEN8p3lj1oUL2WO27peLXirQ4tZ5eem9NmiS4EfC0Ma+VMoJ/hJJrX3iqRWsu+ho295SKFfLawHqDCzpQA1RPpZ8WqzFF1VEd5A0ePNb/q9Br097R+WXuw27I3r7mcNr3f1pLXOt8t2j+dtYGP9u65QTKY6lKtXhUNWDYoiAnTLQdM2J05tk8Eoe03zJ6loL8rfv/izPJujt8RiC/hsw22Ool3n/Sov5BmMokL90Q8cPejvgf4Y6QrgzDDUTMb2fmee2G+LASvQmovGNCyaaIY3kLbowu91FfepIAfTxlDEmW20p31dboAq+AX/2ORbINY4u0za+w/X4V3i/UKorF73YIxL0AQRXgMcBFNng5EAYut4O1vSP5TAbo+Dceq/pdVuDDWhIOg3ytLfB1kLJ2Xi6NaURR3klT1DbhZN1ST8zRYRhzqGIUE1kJjom06VSdzF8VMfMt5ypOTmZROrDYVC4lbWNES+o4q5zFl287/jSPrOihddVJou0IZaFNO4C1NVneyFEp20m8anQbIWrCoKguW/v2eMeMKaihtiK60SLP2peeJV+b2TEAuvrlQq5ap/U7KxxrmrOcIQgiflL9cpOiZ9PVengB22+4uCjwAsUz4M3DePOx7eY23Ghp9/4b6qPpsJCLLthFt0ABgPY1vPPk6EK1ryh4O9Rc7t/W9ETtksQ7fO90bEZNDeuC8i79sSKuYdNmUB7YXrk3RXVYhANd4vusIrVGDSf8e/L95O1BVoXCh4dj/Z6l4r80GLl1SEcbFHTrUr6E2ghNaLuhJFwmM8rehu9CrlG9VhQoMDrsdPoFwMlNgtdpR9ZvSwtOu6+wsmnk91oNQRusbNZ/RupxHWdwMD0F3BIwfFdNm+z2uHnQADB3mClYJkyKoYqOI2v8nPkNrT09weGj6ey0pK/kgPJyGKvukG9agMYyEgQ3Sel81fW+0zi1jfiMaPQJRng5KBPZo+gWIJGUcLvNcZ+mccV8Ayvzv2QASakK+jsvezBO4bebHLtdIXimaj2fUUfbZOCAsPrdYSgye33Q4F/yIKDaQd1Lu7B3ssPiWiESzDjn/UfDXOQ8hjgwUmiB7Cv+bgHkZkQsMUX/qFuyQedzHT2gqgceJYzld5KjWZ4NqjwuFU2/GLs36JpVWqXev/BYo1KKClY5rwl36OGdelHZ3jbvI71w1FP57lO432R6vQkjGmJ/wt6yR5IOHMsc/QKppeMLfidV0PClz8oviKL+AGTuSx5j/UC84v50ZzxVoDN5/eI/dAAz8yJ8HCwrt668WcUv1l2lzMP+W2x11eiVQos4q7VLhO3qEHHD0hCHOr0wO6CBqTb8lJ4JqvgHgFizRyjggB4VrOsW0CluGnM4qRBfHgcbckkTemjMH6nhVDdw+yf93LutU2bIJpNlNBB1DDwoxFtqU4sEnNBVdbC4K9wSvP6lGReMGWDIiOapzZnqoenJWpMJfLs2v7pGq875s6hS/OEAucJThVTOtH22FpiHsc7GGoWxA4DLqR1Bn0tP4wiBmNG0uoV70+dTwEIjIQA+niLTaKcbUUINwz9xcOtDNHU+K5ft/W1Eiazkcv0mDDL4oEYUbIe/rKCLQLuSe49hvq7sNQa0KPF6/0B7iDjrYNCdIrYQGZZUmr7kvFIm8nWwQPMIZKXnVDmUHIu6rnHmwEzgSRTsVOpWZnQi8i4jJ8RR5e+kgROMXQyHUSuu36O0XVdf8TIJYTlwUtq9uUgctPRorIJVpbXFtY+iDS9Ds/2YOYxH+IRdxrIHlIQPVzyRmN3bTAJ+haHvMyzi2QFgf2ZiGqTBGig2fvRBiHRc23f/S+W0usiyAQdu62WsKnE2j4fAdfW7Znms1qERxWHJsFOqgGGBiYJPFO3WCGZIQ0EDMGQcLrVpbB9JYluo9QVpTzY/2m+tEvRt/Fz5O27DSbD2qLQTLVshfNiDQ2d9rrBMJ9GMlX5i/mgcglPEPkqJlxblWM85LUIM5m4Sxny8IVrcNrfr1TABODJpkB4wsiz18OW4Ca9RgERZsCozjwZOaO8NkAondaDRKmJD3MD8Ejo9IGj+2SNLhwO3iKZqoetr0XvMZJIeP5wpytRg6hHGZpTLW6WvE9oEKjjYbwnRyG9WpHxtAvNmt3NvKy6CIPAmO23E1H6J+sjL5VBXvksqem8CXsCI73VSwCOx1sQeOT+0rqI9FoQM9eB7usGHYWhFw1ngHvGrE/iwWljd8WmJHEi9pofDMUxu3NtxKcRNodvffc6adFhqSwpCUZdr7YNNwbDxfGJETDCFP4WW/RbUgiviJjLR5K0kpfKF1rSnH/sR13WvSt0BhCZm3W5wxZZDATLNsfoYM7ifjK2X8CLfkX7KQtvkhduvJ7VRjUQ8Sb5Q+AHZfOPNRLoA/zp81ZHHr/vvMdaIYhO7dLb7mlXZrjnf8Bvll0tZWJZerwP6Ir6IKHR6QQCINa3eJtiUy4bZEX1WQrt9SvV1bOVXhAWWUoipkkp+gEcpbf4upCTuCqKLFgcUjECBq8e8AcrRS+1QEEG2mbEI9R2M84NoSDOnRCbxp/gkBQuILGT2A4ypd7AunHg3Qgqzw7QU57cCBU3DTx3TcuqtjXQvUmZcR0VXEb3kjq03LupB7oUvj+0RPi0QBzVA8dliy8kXbTn6UTgvebkChdIPLOmkWGGBftcc7rj1R1XMI2wlGB0E8iTHBOvE3xqJPwRS9rpzx+feTl4Jz9Nwmke191KPOxifhYnFmWo1DoJUJhTL/aojBVdAjXta6X+HRmZuwsjWEBEdgm4NSvdBnFaznknx3G/RqhoQTerVFCaUM6Q2WBp2T+Ldxhf/p8HtVowl9V3z24VjoMPMMKceErgyYNJ8UpzsBYWEeQk698cW1dDLf5quQC80UDEFqnj1mve+iiGYta/SguTCNJwMlk8WURahO8fJUZFHAQM0r6ipYRVf6xJ4BaQeNNrmydNOctyahVqBql8bz6n+MMk5b1rgdxppQy6SfWItbOci++u5l4kLIbgbUiX1zLSWLC1Cf8zEj/OeyW5W9wHi8L4bEhch6AEKYIwZ0jFrbwFhJ4qY/0L83HhWLVz9H1YMggZOR2BLevgM1ZKKaqmElIxlNRSV8J4bJWjT+VOKRyagf/KakX0xFOGG9i1ztPh+sz3tJlZC9CnqRTAbOURsx7rMKD1CCfsziK4d6j57CsgEoIl+wsJLrhtgtMMp1UkXhx+a6SfWy3r4biABq+7NouN8nMmLNMVa3iJPRhCDl5YUQU0WnN/aY0kEqVVNFm3Ixff/mO0Rs472cESvPNp+CLD8HCeVBLPfFd72PjtD76y2EPlMwb+9tjEXgvpFt+WTH1eu8x4TwgfBKFujVyXobjlBzAXcFbkg+RWmTT2/VX7TgqNC2+2q/xa0TelTYRFbjW8VN/9yxwt9u+t4eTImdcicZCGTQam8mjriViYEFBeNREfVW4QYVt0+WiHvYp4+Zz7iPKTz6DjgIHO3DUsw5wcKg3Z85L07aH3uRt1axFcGuIMqUuuBECUdjMaOCmy24Jy7Q7yQn0Kak5A7PadJVJ542BTNcI8W0Li5XVHP/i8KMrHf/Gv01h04/4AwsMqhHxnpQHUU735DCldOZ/aVas3kI26BNw3u4icWKPpqd36g/AaOdJOj+FrHfLeFZnu7bM7EJiN2i9iBtXge+wJdZ5SV6TZFv/9RDy26iyJ6zb5S73Ep/LBUROUso+HmO2uiKxIyvOhQIWH8AK4nebrI0JYu9+MYNUL+ABbdf2tbLNvT5daZzLWH7Bo4wr+BiFmencVoMlgGA9wWrxGc6qNCtR7HcSLo9SJHxQok5zDQfX3QTRDhif0rP2W+LX0W9XHLXl3PpuON3tNlHFgniRdm4M0xqYc3FxtO1W9vOrnM3rQcfUVXZ9F2gEHaakMZpsknlr4R6LlP3GGqpuICdJK6ZWdDxaQ2ZezSkgaEwMtIH4rdATxAWRBB1g3zG8Z3RqltyVJjHyyrCYpPotz9jcRPViFzqHqajRlAJx+9/7KaIw9aCaKaSgzPOwbMxSt/QsW3BoXjE6zfHvDveH/UN0BIWVRJAuCma5Xf1RG8piztwEjRNN+rYnOEJCPaO4ATIRC9k5Xpinsr+GVaQXuJAZLncGCrOmSvpnXUOxiUycfbD46m70DWiGvfDc8wUIe0N4gimP0/i90X4akItAO/rniL12fOuu1ceNBr7fdx8h3D+73ifJmq3RF80rBsZXuXYycLWl9EYqCHA+30cMwtLJEL/XVdAzNk4iW6T7JsWRioLO0whzlpJzHoCxMUBI8CviWm7Uj98Hbdi+/ixGIZroc+nKsaoTTgDTrY6QdT8/kZRchwB/ihA09mehTi9Y03mjaiFAKUbZ9GSLY1zz8Pt/DlaWqReeAOro/5wDFazxo6/JOQFz/1E7Gg+d6UviCCG+6RX6xhSaIu+gkHaDvp6pMmoMDpHPnMtC/VBWX4sNHHDwagZKKGcAU8raU4I8Gl/dv3iN3UQp6WYZYzBjoxOWABj3hoW1XLumKAhOw6fhkLwn8ANLRaG/MKFEMKyxJzh4BNYibU/ALQa0NL9GNcOWK1r+iABa0O7bIIcn2iZ/EbbI8nlq6XDd+3wT2hh/RT5Bsg//N2xto+fBGu6WFjGp8qT/3sNPAKKEogOOyNae/yB68qKR0KgVG/kpTpN9EOD+dQLKpnwIX7RfoOYsUw5rOG2ndY/wV7hARyjnDq+vwyRIgYVwZ8+2VrEitskpLoYRvkjnu+wLugUiGhjIRULI9ZqdL/Xp31fJrKZRHIlHbuRQU4Bfim/g+w3BfjFtsQBNBh3tXUHQ31abDGa3Dj4ObmMRE9yxmWRP++T+wG49l/mKtPx/v2OJkwVDt76VrJpFF6ZWTfEtfbR0aHHUfzdYaJAWvTQz7bdPfvZ2sRP7j7BX3v22duk/MzJjBeAaCHbXZq6Kw8odroSPLzk7dCo23TGRMjKKR3f1qr77cl5nO5H4QShjCEX4XlOVczTgr7a0naKrUzJ3C60SiodQsXM8lFK0Da2VVxYAgnklFiNyE2jbuz5UIx08HV61DH9Du8UJK1ZHPJS+lClzs/4L5qjOHuUsLAoVufShpD5IaQ8pzQ3w1u0lk1aRPY6qUDK4LGB9TymL5ndw7L4TsDrFhEE+yqdpYXSO8W4KhzM0wnMQITkbU1VZb6UlHmBCmUxkas0xnJGmTxN+zT58uwbNMKXYMq2v8mR2cwf5UId+3TbZqO4kLitndWdRPLp5067yPr/eMbrpJeMeRxVWVZz2eSLLR15WtE54sqXWnk5BsyiwUuAC7qkOvjP8K+2UyptGiDONqDtDPQo10pzNOVlVrZSSIpSdDoEGnHCsFlnobV9WOW6FZY/R50oJPU+xtFOfr3qHtPQ8LR+tLSIYebRgZ+lJsM0CE1Olz434E0vPwTaE0+6Dr/AiRfkCrN85aS230r7qzq4JVZ9BintnlJ/lmiMEly087mlpjLRKEokxf0gsgCBRtDtoJx5WYvvVuin64uf3PqVrCvnjLJEKe92Wcv18Mz2mQ2VXWp45MBmCDFo3hw5d4KqoLXt3DGggAEIJJ06WpWwQwUHko1UbAmA3se9BVuLH2hT65wQbx5xsZzX4Tk2oaSssaGk1feWOaiJr/3kW+bXNHlf84mP6eRIyPBd2irWN9sBfHUMiH+nQliJa4owVzYF5KepNdVLkN5Xaw9fH9FhNCdPEtZACyK22DR62ZUzu8dv+oXCgt/aiM1Rf8+AQDERbkHr42cyrgOd4g+Aps1uJPuZUCQY29+d9xKmVvvjSACN7o6gAcu/JFLviJWYxcYJq3sUNozk2H8DOM7Wz8joGGKKKDzlr3ovTgEdXz1IivWGkXDOFErQRuEyLO66IhBezyEcGL0djf5bmFkk4kCWTbM3CgwqIZ/+58OQH2qshbj0jFBUa6GrYYcWN2T+kOsER6WVlOkif05gZjYJPgGF5DttpgQ2RbvdExGMxS9ovAU3t/yaxiJYY1kKWOkD7Gtu1TiJyHI41yWLwY6Zwgu3dz3+7d1Gb7PFJDM4yvbA6BFWgB/YeEzgfzlRzzZzysl1cgvtGQeqW63Q+vL0DJLix1aG0YBY/F8djTdigQWzilBLA91rIse5V+CjFaSTMcJ75/vzLRAt3aRuMCR/rfs3XzK2Aj9Fykxfq1s+oKeHYav8OhCZFhiRX1wjhSD6z1rG98w01kqac0OvuFq3NTHcbsQqGDYjj7R6KBCUhV009hF9xpRUbHTGLtoizYrblyO1gyAq4+3SOTJe+MMMSIlZ2VOvk55SLtyFwCLfncSr+G4t8OzoYx7/s7rSmIrZrkKd0bCh1np2+xx2GW+w5/gB43ISkh3QcIe30XxRZPDvWBpQ7DNQcvpbHyyzFz6qELM9a20u7WvH4jJxlZKpgNi73N7l5hidDh8/mVVpCI3oTJLFrk9/Y/REbTfc8xX4cZunLs6h2DYd4BhRgXulWEBkkZwW+g4RzBxiYTf4vAQe5GVQruRJKnJdyGT3+rwwr/lol1LKwO9Ke4gsil+pHLWXYRjOiwoLYSoKGAf7VnBIH8d6QrAYuz0QMV0KxOSaqvZE6WJbOxnMvI4HFaYlihwfHb9HjZY8e2hv312t+iUM8zkIUQNQbdhykrkVRvxVBWgv8l2tl76ApVvcluw6Q04U/Z1bEgV6IpZhhA7zYxF89mQmidh9sWotANfhPaeZ8m/aAyFLTbVr/L+ZgBqwSLZ30eiIRpSf6zpkpFWXxvX+lfpIBbM/5RrBh+COfpUHbF6ugy81ve5dAq2NQ/eL0uJMFRN/ABs1qibTIJcMfhLjYEGwQWztXBrSgVlORihwf3LQ9szeBF/GWW5hDBY1V6ynuq82O0Qdaeiz+7xgpzDDb6OJSkFOuICQ5E0VkJbpB+HhybwJbR9gP75AzeJ0CNOo01p5DY1FZNuzFHelMfWHZd6E1gKDNDKDweZRpuCBYj2kOg1yowvztm2mHK33xHaGvS4cWai7unvhe51fPljI+FYrlA7JDqALSuObmzmeKz8o2JWdEz8hTf1j9fjKJQ+IJCLwryJvw8mFPTkzGu8DNhqJr9xmr38UtLq+v+47B2fkSdeMoiCXbC95O+FbesAllgEg+YSCxZXz/2Y7fPahodOi9uhD2o6Aj2ljXOWPezel0LJ5xR8SlWFwg+nRo8Ouv8yU3igtrQUpFsckh43zjF7LKp+bb3OfKM621HTZb9crvF5eAWiFP5ZaMJCecVLvLIOBdEyyNGaZSq4Ms7e3jmsVOUYi+2LSdkX+SzmXwcMnfscEwJsXsFsghswTEpLF74JMQFMiUUqSK+DX47Ih3dB8jD8WhnOE0zzN1+qVhB67YwwI0V5BkFqe1fUujIelNU54Z7Jvca3W61IFCNGmPQWBN8lb4mO44ImAheYNlGxsH3uk3B/7mh9rVUH56CawcJKut6yTxDwoL4PZx2cYp8o1jtulp0h7W+UxmupprX5hviEHY/VIquC0MMdWJL9Qfn7dUNq+g+/9PGQ87Z6f+48Cy08S8xbrN1fWXHEh7Tr4fHNGHqccm7LkoGsEIefmUQdjnOk+TueHixSo7WaOycj8gHMLCoC3MTCpBh/2oe40/HRjJbwD3bCzG+nVis7UMomvvIh9Mm4jTlWobgbkf2G6F+BGE06NGnktn7CwO4eXl9xlmDj5QTD9PNqNljJ9OcsdQ7g1TFZWTKc6CcBJJw8VGDbra0QuW1jVp5EZGhwsQtal+7zcFvWXcUC+W24hU6m5mNotEdOh2ezrumDEgzn9/IkSIjBav3F3d3J+xVl/Uz1bDNIeBLWooUcnwvfcfApwlHPsjqLPiScsLscgqXPJoCj+KLpn2A0Mt9hAv10B7rq+kfsyc3lMl0bGlATNzPYUhZUD48RPuw/uxj7yy2H4E/r4ssOsPaz4imcnL5rfo7yVpUyYdXtZaPVlXxvU4rMmjkOEZRgq93bECHCefjYcyhyrwL0oavOb6gOhFDahvrOsRLr3yW7wpqW5bQtEMgdBvPiOUnaFuImzT6tCpRfXC8+Ni4YpsTcpWw37HQh7Lm58Z8RRWnpIErrGA7L9ivRA9hxJvaPA2gxpLybcdtmB2tkrUH42xqyk6gVG+t31wv8X7B57ShQfUuF18Xsu9eFpn+ZlEQpFbsCKpYlFU6r8ocB231+ovHO+dxs0Xu0yBhk4ccGpJGVk4SusZR8dEWQeS8Jz8CE9JdrTYeW5JPOHYCGmxAoDbX5e0axOhzRY02DJtJe4SOreJoTg39NoEy9O6iD5SjsBJZz0RVJG5iKY6ym8MdqNmY5TcIktiMK7hTSLyy4zY9MSfo/7bcUQ0wnTDXyeUPX/dyQL+Sx84rl+FmDv8IYF6i0Y06n9YsEIRr4J24EVS6el9T/isYPUadW+MjoKS+tI2Ch1gVUY+18ltmCBICJH5byw3bk8H2a/apG86Scoa5UF0m1n1C4h2JUXoNsecAht7KR7HjJqPTKmvo5PKPlhtCWYlumpFqWuqZgdqHR0jqWvLLjESrkIb/A6Nmhbzg3xLt2qNuDqdhiYj8c4Pne44tAIfRBIFDXwvDk46gb5M1PzpLtP8i7ZJCPjiPvIyRd5lr6A4/vAA9LpfOmL4Fw00y13e4FOTdRy/2sEI2xbezC5l0hRfNoDA6Xp50S886QTnd8vzw5BoXOh/76ti9KNZdxxn6Hl/kNSyG3tWPgZeoytgJj0jupktDjj43g/VAvxkEmrbzxE2FoE74h6Hk7SMNX53PeA4wIU9rKIlwKuJa2mwT7XqJwgaz9aDnFcYCvWvoCNJYnMSjS+CSoJ9e2zp9LZov3TJa/JQK6JQ4DX+HZhuRY2YI+k7ArXgwiV993m1hHj2jZU9Sc2iS5RGLKqgXczFJ9fGtnFEToubZW5T6PIfhb1pN97LXLyf65o+Wz3RUkYWg+EYFZt+2lxcDrgyaVXMkwqyqoXaEC8kv78kH5lr5X7g/rDUwuGN48Mig4tV1EcEDqtBvK/ISJKi8Aaum8WgkTCyFm984VVkjWqObvvjSShfOmnENW4An4xzlED/KCXLYZJKUVwjjoj0TNMYZ0DRuURdbyNS2C5MErTLY889WFjV09s1Tz/o0DPl9GDUHOf054t72eZ0w4EN3YS9XliCa5LTVILWkh82Pbu14dQB398zGiff9Z0ShjXlLwAUCSWJVizYc6TokGBjIuhmLdAzIA31Tz2EsPWSjBNWI0n7OMzW+8z2Oc2r6KKqitwzCP0bWt8jaHd0OMxllqFUXmRTk+lTdTXtQTe3NaTFHcYoWYzDy/25NAQaK377zlySr7doRSTRpbeu6ALLA+frKY7ww7OhQgYew+DrvXVFcOqR8IV5I9Tn1DdPRH3MSMo8yqyY39b54+yboF/nQJEBlD++mrYd6/HZIrl+Ah4szjGOWl1JlPXrtSiKlQb+0FQ7W50gnv8y8wIVhoCbGg65omh3AvDGcfDQo8UPNC6O9pW0vWRdb6ZiKlz/IrNR9ylRcO1TBvbNPYoqxr4PFlWGLCFGh+TLGqXP/UopS3XO+J+0cNF2oTJzRa0RukywLht8HIp5DTixMFRmO5ZbCMgXqbCB/4L5cVfyBVPb9QcF++UDOAU2CS6JsEl5uhQ4PLVBkWtHdeQol3nAayFV2e850yXBAaSOnGJo+Dw+cfzMAsYnGgWjkVW6n/oP+pL54lIVagjJJX8nRpR2XX6tlZPxOGYw320+sS8mdanSfotyouxdVSKrHjNyX/jRrSLs9SHcOHBqS8ZmWfXc6LP+G0DmZcHUG8fjVSG0QY2d+inX71geZ+UK2uShOog5cTTfWf5xtBh/D+maYcIvWCh3xbtRpvEP9xFo72ynw2RHLctULGq5sn8AtzeAZllDcEslKQ9aNrZX9l8Z3AlPAIVHWk0XJ8bPd+MmEBn2i08Tp6LpGpJt0HA5Q5XR1qQro5v3wSg6tF6bQR6MamCYw1bB+TzbBG2dUT2ThsK0YarvMLcYSMsrw0R/FUOXr1ZHFNsfvhPLWqyE8PwdUyeV6XM5hXV2PpTyXmd3rAbwMSgMl32XWBTW/a9EmXm3kgL5wZJzb9MM8ziDZFs5N0cRYQUFBHwfokXu9/MpqOnX2bflC4jT5xeKJ4kCcP0QRvRrVwwddHisRAQQPVJ2ML4nFlM7unS9lOj5/Vnhx75McHJWZpuyVrQIITv0vOZue5nbPi9u6s2bF4QZkbIFpeZIfkzZazZNJcqk7AskVR3vv03pRT4e+Q7v+EYJ1FtRIjUMJw41YiIXXOwTXAjcRvwkBRXYpwTI229lGbwxQ9tATAYf4aRS48y/Ge9V1+8j+tcFjr1XzH7KQFV6akbKHdhMMI1LHXxiFFG75F8e9nFysa8O34zYKBtL3PD4Ejz/wGLIgxVR0vh9ELGpPkRJSah2t16rHGryQ52GlY9wS5H5Mx3lvaW71ae7GEICWuC17r0/tgSaXJ0Bkomi71cFqJS5P91olazEvD0a5oHJOjlPiI4fpEx2Th33ZbydOpE3c+eLGgyvAXFm5EmNcbUI+eZjl0nmu4N6ObGwZAZY/8UAeolfPEztcG20r6PxV6nq5P6daInadnbuctHLH5P0C5cfGcIgQ215Di4qcENZpY/b1Qa6vMVYvvR/NEghzsuW+Fg8b6eJNcQOVVYxpmJY9VjXveUFgFMWpSBuP7/xYEVsKde3tiomaYJCOj+rYe8Jljlo7g8fdU+07x0IdCHo3IuIRuvatzu5VIHL2SFCQ5s3ZbM4L+2NPlQa/aUG7gYS5/QXqFlaWGADL4HtYoJAOPq0UCBqm1RJE7Oxse3bXBFFrYUaiTcCYhaGpmEw7kQjz7y+71bKzPcBQvXq3t54t4JLdulJFitxAA8kfM5Tj7Xc+t3dA9lyi9YdXV+sBuS6/fWWVFdsEAgaEV1KPsYpmaW1WfdMkgmN6zP965NDmDgEfh3Tn8chJ+wbioOu+vlCJC3Gip/thZFiUZtXRfCq/iyKq4xbmHmkNE77/fGOB1p4lZDbscdpII8Hcz2cdCV0heb9ny7H5yEzRCi/HauE6L6Kfp9/uEWy+FaQ3ZhnYsneg/Evti0tvcTULkS3WqInwiVDe1w5kBpuKBHmxXzLgmAIcnrpe6ZMffo9tk/MtL+g40gr11ZHLed4KSBox+K3BFyELQXQhrG5dVix+hHtM+n5CbkBtK+lU6Fol6F6JZa9fjNgb66LK9xTAnPNdYOjAkDUApJIF5w1DZ6kaLyh+owUxrUWH8QN+339nAqgXTmON3nZAk4HA7CDdeoIrKIjtdEZwSZRgrT8WkW5rUB8Su8eQ+M9dfyqZt6UtmiHoojMY5NA8JZu1jPE2A3CpglGaUIvRVrsj6flVMcO0gP/uX7vAGcbtjGpeWG785EKpDQrfRj9kEHcBIbpkZjQVW7LAlwURaLpMc+si7HuvLQ47L0CksQXC+cVxz2otSxYbPSiNMBfYwnXnGOFKzc+w7YEnGcik25vdn4lZUZQrhp7zjw5IMj888jtftFIa8rSlGdRu83T1Z87XIWXag2i9jEYsrJ/GTSi4qyVVVUqmZfHPGd6exISL+8cbV79J6CvN0TBR4vtLqgFaas84SeSg8wsfpNcehVg7hBdbuF4jdlnmj3to7ixI16XF8dsY912XCUi8HcZNPAWt1eJDNZbTW8uwHR8xKArS+6JwIpTTTcj4VluWmELcYfnVVeoqE03tmuDva9mXCnXnTUGxyGTuKX8sfAxLxR+IM/nbTiGSwsMR7WdnDXdWUdLTaKnxMWIv1Y8Q8ZthztfoFlnfuwKpGnVGSSCuBcrwSuWPBEZV4tEhwgVNL7Kb9qo+dCQozhaYRM65u12r68DDf/Z9L1yiW5EJWGmopfXVouHeoIpCpcs0BelLzS0h1i8IWR4J7X0qcq3YHO38q/x0rIHMYj8IaWzvfc3ujkCXV462BvxHjSbX9F3mVSVOjwKfXoVdBzRcJSPHw7vVu5++EVfzctF5+8XF5gI3hE9M5Lo4qe3BPEz2h/2ma2oNwQbTv3bR9N1sCxcmQunnJXuc77uZrJ1FwMeA1upi/ZLBI9H7+/iW+yEIxH/0h4r4LGCB9XwZYOJBW4PHbJx7l7I2ixNaRTYfI/syRYlSB7BVtz1iAkmbnoWFsRdaZkzh0/6KxFE8j84qRPCZsNq1VWYUw5ecwARXZIyMQxfQCRL3JwcBLr9Nfu+wibIZvyy8RtLZ4hOLx4DFPbNSEeF6k+dDFB84JXAhJLLPurjN/JgzNb5vDsNIQ1b2wLnL9pEqVUyjRfWk9+xkhnNN+mCfjn9fS6Sb0EumfyX0sMYcXYx3UAaGRcEZikgoVhSKg3AjP0Pp/sXF9DRMGA6ooNxiX1vAr7eYDTx7Or1z5BmUjSJDOytuXIJbkkQ6342eq/lUDQUtGDQM1BTFlBmh0dK9BGn1eLU1Oi7h1e/+AKDrIpNmoYHwziI0TlllTgzFUqjG3xTQUvtSeem0qGtH9wV9v9V26+Oid2LkE/3XAqNXjhjbGK/sTrNzS3OVAyfowMPgGr9N7iRnVRiIQF2LO6ayZCBQL8n22U/1ypQT3HBY0rPU0MPd3bRB/liFq3bpWV6c+nbbWf3yNWdf/3keXtPQ7e9w2C4742mmUWnlZHi2vNlTY+bwNwsU5oOvX7StEJN91n01N+W0iUswOrpESFA0cIu54abxJpKG+RU9TaN7JrJyloB3itBEz1M6desXnIIt+g0qgWrbM7dJ2Vu1KnttvJdDm87+WDL6q1UDCbJvTxbTnx0fWst9aVdpUYXhWH91osaTCwvwhqfVVLeBeeGgsdDadMZiE6ZpGTJK+5ESRS+swU2x3yGhudns/TdTYb7KcpETBtsAV4EtUpGfnFn+nUZI2doR9Q2nvZOUOHUNPAliZ7po9RYM6xDa0tT4lBNFiTB2z4nL93eUzmZOeGzwRcmCTGV24IYiN9s/DNkG9XM40I1S11HX68blJVoRi0phy8/qpNGEWVkMNz0rp2pU3wlGfrtQoKcfnC+ErSumLsYQGZgeb0J4DORdWGhqQKhAb1zz4fmeJprHdlVtPZun9ZHh4itV9lAakNsCqH9IiKaN1OeQscVmU659944yf3MwZAo4Pue6FrGw6qDfn29lR2HU1StKI7RtCOnX3+010d2u1vJ6J6wbB8OFArBe/QmelmZfwrtYBIYSO00RljdGUSGNLoX/ONSWECfTkkuyFWCI72r6hSbk8Xx6kq9pO7nBhRcEyyW8nq5SU4VttWwBwsyMf480Z2K2iNzARJe/JlqXxCqlkLbiW/mVa9790or6E8PKbLePb3nmcjLV/GHPQvJ5+3nQl57/hTyTruhuJBrjzHgPzBmVy7D+mOGom5dWFJlc2eFqjvJXgFP0Kah0jFwDZi1J7gunL7X2goG74LwHCm4IzAAWH0diU1bXtLYn5pgxJNfJ2x6NIlHVlDfPiOMLkH/BYLzhmV8dq2vNMj3PEZjBjb5i9PI91t8Wl4yPvLS4okVv9N9FIS1Coz7UdTijX2CIhKjUy6CbVQ6st9YQS03gi/V8wzNI4S2xF92A96PhiemxFfbDgmHIFkOBkMkSDqxlEC89JSNHaG2+w78p0/h8GkiH3MCB6tJ1vPgF8tMAHo6IC00GiAXJ6Vbemut3fV509O6u7IXGJwPqRkGo/wzJ4J/7X1PmeaL4rXTAKB0vnBMUnyuHCGOuOkaIFk5uI37kp/QmgLMKYhwOruvftj2kLLMR2Ffq9THSPUiU3rocLC/1P3JKve3lzkYRXayhYZSjyiNMdJUeZZd5LZTFRMtVsT6aVkfQ60OjjcYp1Al0z79Usu4URmGjdTfDR0HH8GC2Ejk+ZZdNg/fQnNn1x7qb57SjnrhcyPN5QDf0Lfh63TWCaPBY1AxujlwUnps4PjERaTdIMMe9VgH1otuRtnxTaM2XVUPESX3U4AaTnhM9+RPysAf3BZHUaRH143JnbZjRjq+DK9DjPszjLSwyTbeL9cpPc9q+NmDkGHPpW0L8OFJX0A+37yaogmqjvL3T+HOv6Uj2qLnPIcVcwcD430P7Nj+yixGtV0mtAC6CV03EqfdFaFh98QdX9CuXMC+AXxv7jwfT3v+y9GPoWkRz0EXMsKSNKn0SXDFZadJnTun1JUCrO6dHTw49RxMHEGv88C5Qta4qKssa7HOHbhESQel1KDjLHAGcv8zkFtqCFRiB45Cjkl54KuKFZ80s4DeIS2dgZox8TiMr9hbiN/mHaO9QbeZAsTtlZjybAPDp0hZHz0gI10ZEutngzFY87ftLOXNLy/5Z7gH9E9wf2YbEpltgmDxPXt3RkhKf2HeZShIWI7uFCpLvv9ugcPJENd1PzWWgQ41JxKg5tH09vJfjSbKHe5R/O6sQJQPU+lSjt9mMkAAGOcFJxRm3Oh1sJTkqTBoabtrZ+U8+8ZoNiOFB/A9SS1Sy4ewJyoW+0EaB/9DxUf/pCo/NRu6AkZVf9A2ibvGDIiSYa1+LUGAARB/ViqjKC+5IpmBVPBk6PUqbThVX6IpeNxH+Mm6dd7+fHxiavNNEsgi5dwTKr5ZBrrtpzw68Y/eZcsgVCaJhBz4+FY4xFDCGuSN0J/ZUj+F+gmmbPRp7nCe1mQw5Lk8dYmc7HKJaxqR8+uZrgpExlc96ChtbOuUcJGa/2zBPfktHlDRSYKF+7IZzl9hgLbdRCBLn2P1w9AtdJl+/0cVLrNN5XF41AVKBpMZvDaSpOqbggp3gvwcpjwg70bOaudV/vfkiyZo6LfxIXsF3D3OIYeO4VEE8I7AC80+9FCK4xKnNFUom3SBZ5YUqbJA4SCdK83OpakP0XlGuLAxyzVLHsadDQPxw1FWtAUHBE9rAAACF4kPV1XvLLjvCkaaVJlfP7kPidLBWfZc8WcUTK5mDhAeQK6v1mMmsC1OQAjpo55x/byieFVAYRfG/ZLKLGYgkVAhWyYOWOVYKHbOAEuSAowb/ledbd814AhlrA3nGYy9zvy/N3qFKI5TOd7rbHTnGaEvlJmfLuW67qe57i4MyF4nLx1WXklFydLHeLrg3sz+fYoCScUZUffIrMecMfXmFWPS8oXlqLfGiMH+ilLwRInAd48/GlanBpH3sSESo2MUg5bbyJLabhcQLUQS10uTG1O1VbBAOGfzrFZxvjKR1mSL2PYjVGqgnpp/zAHMQNTGczZPcYnkjRcmEhfGSr/pWIwZjfk1c1vcvwIn8kOoycQ3KEK73jtWhfTG9pFUPeKp0bC+BEZWnNTMWhRY4ptGBsufKDJmxtz5C5NuwU9Ci/9OgP03FBoWrkyeVv6VyJHipnICoKNNOEAV8pbsmToK4F3HBT9ZXPphdrVamuv16BHQDRwow1nuxJc/Or4cNjidPYox/Tprqqk/RPTQwRTxVzgUdB9dAjEjloT5JK7O+TnpHekya8uEGrPALzM9jsqYZXHS+mIjtIJhnqToyN7DFq6ykkMs/Iq6v9Qu+tgxqafuGQguwjNKX+PZy76ihxwBFch8D9LwWqlPjgZ7DhPxXlala4paa7t4AcJJjBLYUq1p/zVN1RwsTeuxMf97TanrOwaLSu9DAtdgoSmU4zy6QiXNWFd0S0jK5QMJ2OU85cnZTCCeql4PIQRsRxYrZNZTdT12r9F1B/EJrWBdTuGM4epn25aaRcTKNIiIJMJqTLa2XXJj96rz9Rujb7CWs20kj9qY8QNwC4VKlTFHKt5Bv5kLhP+mGaYMTaJadzddZO+/pYksq6vXAG7/1N5pBiR7ss2tuNiQA/y8bT8ROxG0Kzk4NHKQReBsn80xpgI7J+0Smx4l43hIOzsfELwGtjpxJto+GgXme1MPwNhpThvgdoZpUgiMPpYGOhkGdWEg6GLc2H30kqCX97fPV3QumrPEGIzUI5mioBIQoti5ij/bzP/WTRBXEfNl+fDmaKOMCFOlsCmbhtiFr6WbAQLkKr0ViIzvYWhDhcygMyt8lrG+c9FZB123JwRUmMn78f+m+vSBnGzfmdZIA06RGxb3v+Doi13lmGD/qdrvk1ltoENKeOt7pgGMFkSY0ONjHS4/tSOkavJUqd5S9pApF3qUINcnXnCBef0Q2ki9Lk24vQwOnAWm11KQf4VOscpWezHBno3mv904W8WGOP9H74oSxI1Sp5liRkOhItLRLnzEockO163URq8hk2HJ9ZzD4lUFcV3oSvBxa1ig7HWCJq0GxPH3Aikc6MnBkafJMkkYlyhCFmq3JhdG1Vfx9G2JYzyva4X3c85qSLiF7txeWgwVvLRxHaS1kSnmVZIfPgxximZPLN1W5mNxHYkW/WK3NYnt+9YE9vgerbp1dJu/IlYDlzE6t3Vy8DHgxGgRUyws0j2MPjFYKCPPViD+Zau+gh6uZZ5qiJTg0F1W/Bz9Lm9nF0LX3eeBu+I//5edMKL/oXF2ZycVmStgMggPfedSrVBf095TM8rnwmPB8fhVLX4IO/tJ3Z9Lu3GAb2dCBgeWtd4doCQrgJDjekK365LDeStdPjnH1XDHhutMPFza0qVIniBgLheXr9hN8cMgaQZxr/jXCoJ3a6RawYj0Iaz+xsb+PGJTJuVqRjhVKdjoyst+bAvyG9AJb6Q01/dNOfhHWfVQbmiBjSiSbyGOonwWiKVuAO+qBBes2utWsdF7X2GtXNRuvJpNcAqyiEplpbz6EtFwziO99NOBTe178UBCPgYrBlWbviOTr0oqG64uhSs5qQQZGuVtTlLWfgSpC6eFiYLZBOd+wOm/a5aIn2UAlKj4OOA5eWRsGwwlMmI36DWKbxslru6MOt1TKgk+gjCgAhUfU2Or7n5hUhYRBq6kkzBLBzT3OU9SIN85C/uAOpa5SYuxy9M40PXDfujotRsIfMwSY7O1jBULSsirHO4glViIFg8Gl9eary7uzcqcP6/OC85oOvN8LxKZxqZ6sMUtoMp7Q2XpAFt+lj28kL7BkF3nHVgjRMH8Efk9JkOnxZikXU48UY2aYQZNKrtUIhXiuBAUHeH4F+nxR8O6TRkUJV26XszlEX5W4cR9qxdAg17ZSzo1tJaOaKZ8wvaII/TsBAr0d1rwOfUewQrDDh7qNdhgkknQh9o2s5RSSE1SG+rhJYMUOE9UPlXprmQkLSCVfwDG38KfmN0K3y5Mkwz0ztSMBWsRJ7CjitKlb4w/FD53Dfr4jFqOo35EPPjZ2ofzar51ljL6jMXANrm6Uwf4erLqkPPfd6QLEn3VkfdYDe0kBH7V1KI0VcekE7XFJ8H6Rw1OrylSYKGa/VFWKBj57E2GfIBCxQAD8PFjbFCuT2zD3cubDhSo3PNexerzqtmZtM1ovp20NM3e8C5zllpnANoQcDHZE7BIFQ8sM5COmZ+wdo347n13BbRc99bz5a0nyGMl/IrkoyBvLzdqdGdhN9JfC3RnGkYZ+Hyk8g5ubI2cRMxGI3RShOdo/dM6EcAq2X1VErTHmcx1HetM9GkYBCVQ2g41aGArF0ZwdlwgsbXXHVT1QO3dRD3qJ+wbJj7h7T1abPYU8GQCOivnuErfG4Fcalh5UVGyuNCjcarMT3/vY2MZi2nSgeX53eh2bAvr83MGZQSdh2YybtTaVMDDtgPtkuP+bffqtD95gEcK7T2EfL514BB9CuFBAqqQbOLcSSpDU3e267N0rbW7MlktVvn8TG0WQcoD4j9eM3mypMBHyIsQQm0/TckzanqomCnpNPaJ+eC5j6+6RCEb12bDDbmiui8Al6LlHq5PbCSpHc6AbQz+b+qD7ffklZLHNJRLQGqRk8Y642x4o0Tpnygev0yPH3pevc/BzhNCClpjok3r/QpNvXIYxOySB7OhaUTRsykAMXY6PUUToFecLlp0R7lTWyMoRwWGlnItrUigviBacKz/nDbEsLMwo9VZZmsKSgzh487cukEga5MKQ+vXBLZPZp3UlpOK/d3055S+sH38lRGTY7TfRupW4fhj77w7VeDDT1JSOga2g5UT7hOXepJEbcIu740/1teOH223ouk9WqCnFHFzTOc3bLjfMTMI0mE3dqzrk+jaDO4ZgyxcFk/NY6E3RK3kDhLThvNccTYyvamQABXSEtVutEAFYvoc/Lbw82scr6PG4grwexK9N8T63iOatrp4jv8938e6DkZ6Y3lEkj1XjkQdmgfV5emVriwuJUJE3RR88ZFKfJGGmEZlhi3y3AemrYdvtywsQSAihebDaZN1YCeRHbYikcbgR9aHZJ6mLyfugcUsrEB21oRvM37RhNTSBwOVjtTukSPSKjFuBwBssm9MEbK7hNS7ViCgrpnNb3NA4wzrBuFIowPfep+gF8fxCnkWdkSuFDRP9kPv5ZXF/wy+0ALvNVlXuceGDRkQ74mptGME9y5qMuUwl78vUd4w9vaR5ASlpeXUPH8fAy1zASd3ET1K4JuEA2/Myt9q6Z4duR8vF22J9Ihai9/jXJ5LDa9kFelFdjifnAH97Kv1HZKyO+RHcvTXxeprZ+wuy/hPt7o2AU6IS3286cEPzUZDMpyZ2aIzZNQKS+ADPM8Z/M+6TiYWCfJhAaJgO8CB5BibvR5gXyECdR38TFM1rZgzVkLeZQMAXEA8x9AYLGMKZLCKZjO7O3hSmVBdY5+/pJBX7gIB4K3Dp3nGAZXc35jGXUAejYctlV6/b9KBx8fnmO3oSFSByf+cBDn97euYb+sNPZRSAAkqGJ+ax9SKkgLIw7vCa6wvaKh0pQeTDpvWn+3aWsI9MGxtsdHjdC48Fb6G6yXQj+wd8SxQpGQ2zAKM6dBnb46VrF2uJYeWsv/in2opwbBmDi9D3K9H1vwSp/VIAdA14Pm6zBJhLgukhoec/MA+kA7P2Vc6CrwmW+/KihNo+eCXynM79MOjyEk7lt7cfJhVxqtLg1d4+Xx5FzVZG1gxaCGukZP892Efr6ES1EY/kmy0XYz7tOkpJcQxvCJoPsGYss2Pntb6HoMcI0XrmeMXGLHhlaEfPgym59EH+uTJO5I3hK4kjTnBdkysfrPgeDO90St0oMuuJ09FqvcD7SvdbrNoLHgMCUoUJNR1KNroX+26ZT72ROfnv/k1ryNBvYMZKowGYi9pi2afxnsxw0/D65VjXGydN8PRDDEkOTf52N6zIAtHCApPp+l3zQpzEn36KwEGBVAKV62okOW3XZ1wg9yeglhwvuaR9hBwWUFAVqBTfx/Z/5oUjoM9GCj6df05BAoQRZ5k7n/NIFwK0NgWoUTt8w8t9pOjsw5zlJmNzLS4Hz4/YiXQyau61R5I7oZlwND0drHTFcutX2PlYDPR+5tdOke3eqavZ+19ET6ZbRLDBo1Hz9nDhgCKT/G2eDQJ+3kUOlqalPV6jCWcZG9+JGVErxyt0YsR4zPp+UYBl4wzMKZcciCv9StFItNR/Yh9ZJFH72fRX0dY/D/z6ZFhbh3m8vMyWt731ZjeOHN9cGodqG1KIY1ohwECMDhTSUsV3tlqP84b2iQb2P0XGDUr6nYcZV6ERogoYLzFaKSn+Gjl0/cS+39McaS7qDUrQ2oQbmw4rVLmdBrVj4XAmI+s44tck0Ur4bR1tHnDPwQhiZ1mo8eYT1YMbo5rTz2mjMa3tZJwmlFmwWTru6SRK0UsAPyS9xonsAs0VfU1SS17f1UwFtHJ0bJ1Ykw6RR/ao1RoBpGBzwsGnJ8eUpvxNvExS7cIEueE90RI0vc8Tit44IGHGH4uenJuva4IitxfAhFTllkOTvUdffFIDBu6X9zZersPn6cG1H5cyfVnfdR2MqXO1yvVyWb+AYR/uws4v9KZQI0U4zD1Y8qmyFtdNscovL9aseNWv5SclQYoljc=" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="4uP7QW15IiLKuGS6PoVIAas7dBr+QZoycsxY/jADKB8i2woW3LF7jqSILkAKAiHClH2oAsPP33t/0yJi3O7X2JW+tKyDNVLiGVn4k4YWHopRk2jBbh+iYr+zxtzEZdpMIOUS0QyjRk+YUNLbY+3hyvb7iKR5R6aPO8ZsbbNKP84dXwtzx2qDiYsSU0ulYoKTfYp/1Xnri5ZlilsTvR08tTPAu+HuM10L2ZbpNEgezThnzSdQIJ6SRwdVI6r84c9CUfz6sMCtZa9EJ6hBCcQWmHYPwjpPtw/yJk4kpanFGGElgK6ySXfTK+rkWeSnGDsgFePeJVouT5arq8nUWGuVXu+D+2xMnK0EimXCNxOR97ECixNgOzf4IoOzOzG3PzxN0S+2582NLX13vbi4svLootBhDHb0pOifJ8jKyiaUolt9E8OWYw6yFzKip/w1wFcwpaWf9OooGk4J6TM5pD8LBnTownnrHEL/DkftltYyfxIJhzv3f0XqI1p4jctcBIEc4pd67sRxJueZuUUJhoPRG5TpIgDJ78XcMZMxhLO9fhK7+w+g2APuCk1spHSqZBgumeU5E/i7s9AB6jYT+gE1NqDFtyQqWC6A6on/Pqoyk2IOJ6p5maFD4qMmwIGQBgFbgS1Olf8gy5EcAZFSMWY36Dz1/52Sqbdwl2s1jx3h3q+2NoojFIhb8PARQWbcNeauXn705WzTdUizaCLxM55gNKnay4ONxsgtNo2SqktJVqzBpq08BOcb2e+27h+AacVoJ83WIWOtGPYGxnu25PlzkpZl+5/NNlyMSmTOTqItRJkmELbworZkufFup6yuJZFaJd6QcEd0D9KnRm/1f++OF5AIMRhYjFRy55IBqrsr+ASe2O7iChuIHTP/rEaK2w3Nd4pv6ekalEixwW+e0sdfqAWZ+e3cEdP0o8f6MMMTYZ7NhKvg6IeP7F3p7vt0clRWgD0cPktjzJkBVVHJDZH2rMyzd2z/kluc+lFX7QbRxOkUMIsibvBwoNj3ZVBDZ6eb6cud0mBpWdDKH16aRMaGX2YTFhN002lQoyESjCE7jmJ4CcS9qBmxUwfG3ICKjOk30Hl+WTw1kM6Aqm2VrBVJD5WZwoorzD/I3mhZIgau1zZLwuNU03lt1VusjIwe2zw/j7U/1caEIPxlxGxeG7McihjjRhRUcHUdHX7i4SEXU87IoMD1zoaka5el4ZGc21Bt27XQiJf5JIGS5G2RKo6/Xxj0jfl7cKpSb/4siphzc/cqABYKLNENbeLPz4Kq7fneEPhxlXMxP4bcHL0L30pMBFlJffgM8l8Z2vyr3Ugy9IYJnRiuULBHdvTYpUPk/Ha2IokXx9/rPjFJYP/942hRMaBwngjevOp20yL3DDsgoexZeOe4supCD8WxZuierCQvyXCpyHcUeagEw9fr1A/Uu3pIekHJyw/MMmDYhtt5e65qLW/U1foPdZRjEWF2lgDEWUymPKxmmulbLXkUxYmqg9Uf20lleDml3uiq7FX390tyxwl2Hd9LLPVjYtx86hUkwuFMC7LuPkyup3bNst0GqNJGX9jFqTFz5fQrUiBL/afaYx1jpewBrEyx+gZiLu/vWh7xWs0W7iLoXjte/9YAYQ==" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
   
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden; 
           overflow-x: hidden; 
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }       
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-24-24*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Board of Health</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="23*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-23*ef58236b-fce9-45cc-becf-c31c7a95d20f">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="33*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-33*ef58236b-fce9-45cc-becf-c31c7a95d20f">Information Technology Sub-Committee</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="126*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-126*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting - Planning Committee and Built Heritage Sub-committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="35*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-35*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="112*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-112*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Community and Protective Services Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="39*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-39*ef58236b-fce9-45cc-becf-c31c7a95d20f">Nominating Committee</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Board of Health</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="45*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-45*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="127*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-127*ef58236b-fce9-45cc-becf-c31c7a95d20f">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee</option>
	<option value="52*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-52*ef58236b-fce9-45cc-becf-c31c7a95d20f">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        
                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>
   
    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-118"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM'>Police Services Board Human Resources Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Police Services Board Human Resources Committee 17 August 2022' href='VideoStream.aspx?MeetingId=ce1a3efd-4f33-4838-8aae-76f7123aed8c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 30, 2022 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Festival Boardroom'>Festival Boardroom</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dce1a3efd-4f33-4838-8aae-76f7123aed8c' aria-hidden='true' aria-label='Share Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" href='Meeting.aspx?Id=ce1a3efd-4f33-4838-8aae-76f7123aed8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" href='Meeting.aspx?Id=ce1a3efd-4f33-4838-8aae-76f7123aed8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ce1a3efd-4f33-4838-8aae-76f7123aed8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Police Services Board Human Resources Committee Tuesday, August 30, 2022 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Police Services Board Human Resources Committee 17 August 2022' href='VideoStream.aspx?MeetingId=ce1a3efd-4f33-4838-8aae-76f7123aed8c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=93721' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Police Services Board Human Resources Committee 30 August 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=ce1a3efd-4f33-4838-8aae-76f7123aed8c&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Police Services Board Human Resources Committee 30 August 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=93720' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Police Services Board Human Resources Committee 30 August 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=ce1a3efd-4f33-4838-8aae-76f7123aed8c&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Police Services Board Human Resources Committee 30 août 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='City Council Wednesday, August 31, 2022 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 26 August 2022' href='VideoStream.aspx?MeetingId=59a74d3a-4563-4269-9196-ab3bea684571' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 31, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59a74d3a-4563-4269-9196-ab3bea684571' aria-hidden='true' aria-label='Share City Council Wednesday, August 31, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 31, 2022 @ 10:00 AM" href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 31, 2022 @ 10:00 AM" href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 31, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59a74d3a-4563-4269-9196-ab3bea684571&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 31, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 26 August 2022' href='VideoStream.aspx?MeetingId=59a74d3a-4563-4269-9196-ab3bea684571' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=94203' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for City Council 31 August 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for City Council 31 August 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=59a74d3a-4563-4269-9196-ab3bea684571&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour City Council 31 août 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 15 August 2022' href='VideoStream.aspx?MeetingId=4f806962-c059-4605-b48c-751daee8bd85' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 01, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4f806962-c059-4605-b48c-751daee8bd85' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4f806962-c059-4605-b48c-751daee8bd85&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 01, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 15 August 2022' href='VideoStream.aspx?MeetingId=4f806962-c059-4605-b48c-751daee8bd85' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=93245' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Agriculture and Rural Affairs Committee 01 September 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Agriculture and Rural Affairs Committee 01 September 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=4f806962-c059-4605-b48c-751daee8bd85&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Agriculture and Rural Affairs Committee 01 septembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-66"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM'>Finance and Economic Development Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Economic Development Committee 22 August 2022' href='VideoStream.aspx?MeetingId=c160e3e1-dc4d-430a-ad55-e3e29d0d1976' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 06, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc160e3e1-dc4d-430a-ad55-e3e29d0d1976' aria-hidden='true' aria-label='Share Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c160e3e1-dc4d-430a-ad55-e3e29d0d1976&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c160e3e1-dc4d-430a-ad55-e3e29d0d1976&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c160e3e1-dc4d-430a-ad55-e3e29d0d1976&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Economic Development Committee 22 August 2022' href='VideoStream.aspx?MeetingId=c160e3e1-dc4d-430a-ad55-e3e29d0d1976' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=93246' title="Cancellation Notice - Avis d'annulation.pdf" class="link teaserLink" target="_blank" lang='0' aria-label='Cancellation Notice - Avis d'annulation.pdf Finance and Economic Development Committee Tuesday, September 06, 2022 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation Notice - Avis d'annulation</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 22 August 2022' href='VideoStream.aspx?MeetingId=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 07, 2022 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2dd97c8d-fdc0-4ecb-833e-6d5c8489d552' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" href='Meeting.aspx?Id=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" href='Meeting.aspx?Id=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, September 07, 2022 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 22 August 2022' href='VideoStream.aspx?MeetingId=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 07 September 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=93107' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 07 September 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=2dd97c8d-fdc0-4ecb-833e-6d5c8489d552&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 07 septembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-71"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 19 August 2022' href='VideoStream.aspx?MeetingId=879ec297-d4a7-4259-baf7-ff001c87455c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 07, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D879ec297-d4a7-4259-baf7-ff001c87455c' aria-hidden='true' aria-label='Share Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" href='Meeting.aspx?Id=879ec297-d4a7-4259-baf7-ff001c87455c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" href='Meeting.aspx?Id=879ec297-d4a7-4259-baf7-ff001c87455c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=879ec297-d4a7-4259-baf7-ff001c87455c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 19 August 2022' href='VideoStream.aspx?MeetingId=879ec297-d4a7-4259-baf7-ff001c87455c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=93084' title="Cancellation - annulation - TRC 07 September 2022.pdf" class="link teaserLink" target="_blank" lang='0' aria-label='Cancellation - annulation - TRC 07 September 2022.pdf Transportation Committee Wednesday, September 07, 2022 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation - annulation - TRC 07 September 2022</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 23 August 2022' href='VideoStream.aspx?MeetingId=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 07, 2022 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" href='Meeting.aspx?Id=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" href='Meeting.aspx?Id=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, September 07, 2022 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 23 August 2022' href='VideoStream.aspx?MeetingId=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 07 September 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=93305' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 07 September 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=d0f46ee8-dbd2-4f80-99aa-e8d7fa5a0742&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 07 septembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 22 August 2022' href='VideoStream.aspx?MeetingId=e5affc34-2148-4958-a978-99647b66492d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 07, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De5affc34-2148-4958-a978-99647b66492d' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" href='Meeting.aspx?Id=e5affc34-2148-4958-a978-99647b66492d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" href='Meeting.aspx?Id=e5affc34-2148-4958-a978-99647b66492d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e5affc34-2148-4958-a978-99647b66492d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, September 07, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 22 August 2022' href='VideoStream.aspx?MeetingId=e5affc34-2148-4958-a978-99647b66492d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=e5affc34-2148-4958-a978-99647b66492d&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 07 September 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=93157' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 07 September 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=e5affc34-2148-4958-a978-99647b66492d&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 07 septembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, September 08, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 26 August 2022' href='VideoStream.aspx?MeetingId=128fff38-faa9-4b07-a8cc-e13e88688f9d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 08, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D128fff38-faa9-4b07-a8cc-e13e88688f9d' aria-hidden='true' aria-label='Share Planning Committee Thursday, September 08, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='Meeting.aspx?Id=128fff38-faa9-4b07-a8cc-e13e88688f9d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='Meeting.aspx?Id=128fff38-faa9-4b07-a8cc-e13e88688f9d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=128fff38-faa9-4b07-a8cc-e13e88688f9d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 08, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 26 August 2022' href='VideoStream.aspx?MeetingId=128fff38-faa9-4b07-a8cc-e13e88688f9d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=94242' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Planning Committee 08 September 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=128fff38-faa9-4b07-a8cc-e13e88688f9d&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Planning Committee 08 September 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=128fff38-faa9-4b07-a8cc-e13e88688f9d&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Planning Committee 08 septembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 22 August 2022' href='VideoStream.aspx?MeetingId=c2195a99-385e-4c0c-91c7-467f661dddfc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 13, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc2195a99-385e-4c0c-91c7-467f661dddfc' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c2195a99-385e-4c0c-91c7-467f661dddfc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='Meeting.aspx?Id=c2195a99-385e-4c0c-91c7-467f661dddfc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c2195a99-385e-4c0c-91c7-467f661dddfc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 22 August 2022' href='VideoStream.aspx?MeetingId=c2195a99-385e-4c0c-91c7-467f661dddfc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=94288' title="Cancellation English - BHSC 13 September 2022.pdf" class="link teaserLink" target="_blank" lang='0' aria-label='Cancellation English - BHSC 13 September 2022.pdf Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - BHSC 13 September 2022</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=94289' title="Cancellation French - BHSC 13 September 2022.pdf" class="link teaserLink" target="_blank" lang='0' aria-label='Cancellation French - BHSC 13 September 2022.pdf Built Heritage Sub-Committee Tuesday, September 13, 2022 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - BHSC 13 September 2022</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=7810ff59-75b5-4788-ac72-26924fde542e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7810ff59-75b5-4788-ac72-26924fde542e' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7810ff59-75b5-4788-ac72-26924fde542e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=7810ff59-75b5-4788-ac72-26924fde542e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Transit Commission Wednesday, September 14, 2022 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 15 August 2022' href='VideoStream.aspx?MeetingId=2a1cfaf3-045e-4718-8773-bd94059fd6e7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 14, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a1cfaf3-045e-4718-8773-bd94059fd6e7' aria-hidden='true' aria-label='Share Transit Commission Wednesday, September 14, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='Meeting.aspx?Id=2a1cfaf3-045e-4718-8773-bd94059fd6e7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='Meeting.aspx?Id=2a1cfaf3-045e-4718-8773-bd94059fd6e7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a1cfaf3-045e-4718-8773-bd94059fd6e7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Wednesday, September 14, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 15 August 2022' href='VideoStream.aspx?MeetingId=2a1cfaf3-045e-4718-8773-bd94059fd6e7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-4-64"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM'>Community and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 21 July 2022' href='VideoStream.aspx?MeetingId=293efdd0-7039-4232-9ba6-2ab2c457a318' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 15, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D293efdd0-7039-4232-9ba6-2ab2c457a318' aria-hidden='true' aria-label='Share Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='Meeting.aspx?Id=293efdd0-7039-4232-9ba6-2ab2c457a318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='Meeting.aspx?Id=293efdd0-7039-4232-9ba6-2ab2c457a318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=293efdd0-7039-4232-9ba6-2ab2c457a318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community and Protective Services Committee Thursday, September 15, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community and Protective Services Committee 21 July 2022' href='VideoStream.aspx?MeetingId=293efdd0-7039-4232-9ba6-2ab2c457a318' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Board of Health Monday, September 19, 2022 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 21 June 2022' href='VideoStream.aspx?MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 19, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8ec6c6bd-ee92-4763-b77e-c354f535e67d' aria-hidden='true' aria-label='Share Board of Health Monday, September 19, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='Meeting.aspx?Id=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='Meeting.aspx?Id=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 19, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 19, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 21 June 2022' href='VideoStream.aspx?MeetingId=8ec6c6bd-ee92-4763-b77e-c354f535e67d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-69"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM'>Standing Committee on Environmental Protection, Water and Waste Management</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Standing Committee on Environmental Protection, Water and Waste Management 15 June 2022' href='VideoStream.aspx?MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 20, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' aria-hidden='true' aria-label='Share Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='Meeting.aspx?Id=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='Meeting.aspx?Id=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Standing Committee on Environmental Protection, Water and Waste Management Tuesday, September 20, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Standing Committee on Environmental Protection, Water and Waste Management 15 June 2022' href='VideoStream.aspx?MeetingId=41a4d76d-e1fd-477a-a7cf-32252fdfa0e4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='City Council Wednesday, September 21, 2022 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 13 July 2022' href='VideoStream.aspx?MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 21, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D74e2acb7-eaa9-4c2d-9c67-b03e1311e957' aria-hidden='true' aria-label='Share City Council Wednesday, September 21, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 21, 2022 @ 10:00 AM" href='Meeting.aspx?Id=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 21, 2022 @ 10:00 AM" href='Meeting.aspx?Id=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 21, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 21, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 13 July 2022' href='VideoStream.aspx?MeetingId=74e2acb7-eaa9-4c2d-9c67-b03e1311e957' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, September 22, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 29 August 2022' href='VideoStream.aspx?MeetingId=5f7f0311-9b17-4364-bbfc-e9e90d20b0ba' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 22, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5f7f0311-9b17-4364-bbfc-e9e90d20b0ba' aria-hidden='true' aria-label='Share Planning Committee Thursday, September 22, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='Meeting.aspx?Id=5f7f0311-9b17-4364-bbfc-e9e90d20b0ba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='Meeting.aspx?Id=5f7f0311-9b17-4364-bbfc-e9e90d20b0ba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5f7f0311-9b17-4364-bbfc-e9e90d20b0ba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, September 22, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 29 August 2022' href='VideoStream.aspx?MeetingId=5f7f0311-9b17-4364-bbfc-e9e90d20b0ba' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=0f3e94c2-c560-4849-9327-5b736959a357' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 26, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0f3e94c2-c560-4849-9327-5b736959a357' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" href='Meeting.aspx?Id=0f3e94c2-c560-4849-9327-5b736959a357&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" href='Meeting.aspx?Id=0f3e94c2-c560-4849-9327-5b736959a357&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0f3e94c2-c560-4849-9327-5b736959a357&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 26, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=0f3e94c2-c560-4849-9327-5b736959a357' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-123"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM'>Arts, Culture and Recreation Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Arts, Culture and Recreation Advisory Committee 21 July 2022' href='VideoStream.aspx?MeetingId=c2fa0307-0740-41d6-9dff-ac699077ade8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 27, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc2fa0307-0740-41d6-9dff-ac699077ade8' aria-hidden='true' aria-label='Share Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='Meeting.aspx?Id=c2fa0307-0740-41d6-9dff-ac699077ade8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='Meeting.aspx?Id=c2fa0307-0740-41d6-9dff-ac699077ade8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c2fa0307-0740-41d6-9dff-ac699077ade8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Arts, Culture and Recreation Advisory Committee Tuesday, September 27, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Arts, Culture and Recreation Advisory Committee 21 July 2022' href='VideoStream.aspx?MeetingId=c2fa0307-0740-41d6-9dff-ac699077ade8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='City Council Wednesday, October 05, 2022 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 13 July 2022' href='VideoStream.aspx?MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 05, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D68fadf4b-ed94-4cff-ba9f-3d6efaed5666' aria-hidden='true' aria-label='Share City Council Wednesday, October 05, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 05, 2022 @ 10:00 AM" href='Meeting.aspx?Id=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 05, 2022 @ 10:00 AM" href='Meeting.aspx?Id=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 05, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 05, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 13 July 2022' href='VideoStream.aspx?MeetingId=68fadf4b-ed94-4cff-ba9f-3d6efaed5666' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-3-63"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM'>Built Heritage Sub-Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 11, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D115babc3-5b80-4387-880c-8f15c68b4d28' aria-hidden='true' aria-label='Share Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='Meeting.aspx?Id=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='Meeting.aspx?Id=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Sub-Committee Tuesday, October 11, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Sub-Committee 11 April 2022' href='VideoStream.aspx?MeetingId=115babc3-5b80-4387-880c-8f15c68b4d28' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 11, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df50e0a04-106d-4cdd-a952-8856f5c11894' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 11, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f50e0a04-106d-4cdd-a952-8856f5c11894' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=e35ecae4-5067-4723-b595-7074ff5156fe' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, October 24, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De35ecae4-5067-4723-b595-7074ff5156fe' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" href='Meeting.aspx?Id=e35ecae4-5067-4723-b595-7074ff5156fe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" href='Meeting.aspx?Id=e35ecae4-5067-4723-b595-7074ff5156fe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e35ecae4-5067-4723-b595-7074ff5156fe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 24, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=e35ecae4-5067-4723-b595-7074ff5156fe' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 27, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9a7f9fcb-ae12-4780-8af1-cc508f663001' aria-hidden='true' aria-label='Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 08, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df6b436fb-9943-452c-b2c3-60a12ded6901' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 28, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dec9d6d4a-41cd-43f0-9cca-6ac807a0ee59' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D62b62418-df38-42f6-ae9d-8bc3079ef9f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 19, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list d-none" style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>
                                
                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2163)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(238)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(260)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(211)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(229)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(167)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>52</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>101</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>96</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>12</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>212</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>21</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>147</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>19</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>147</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>18</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>147</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>20</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>89</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>14</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>115</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+-+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Joint meeting - Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting - Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Planning and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Ottawa Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>51</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>106</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>90</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>205</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>26</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2017'>1</span><span class='Year Year2018'>1</span><span class='Year Year2019'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>28</span><span class='Year Year2016'>3</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>23</span><span class='Year Year2016'>3</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>16</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Special+Joint+Meeting+of+the+Planning+Committee+and+the+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>97</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>10</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>93</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>                          
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>
    
    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>
       
        var mincount = 20;
        var maxcount = 40;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();
            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    document.getElementById(btnShowMoreId).click();
                    //comment out fake lazy loading code
                    //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                    //mincount = mincount + 20;
                    //maxcount = maxcount + 20;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }
            
            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();                    
                }
                else {
                    mt.show();                    
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded") && !container.hasClass("Loading")) {
                container.addClass("Loading");

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered");
                            SelectYearOption();
                        }

                        container.addClass("Loaded");
                        container.removeClass("Loading");
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered")) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered");
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });
        
        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = "?";
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">       
        function postbackButtonClick() { 
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            
            
            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();
            
            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            
            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {                          
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();
                
                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }
        
    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {   
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);
                
            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }
            
            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
        });


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'  
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'  
            };
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }
        
        function loadCalendarMeetings() { 
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();
            
            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: { 
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    } 
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");
                    
                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){ 
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300); 
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });
                    
                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");
            
        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) { 
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);
            
            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();    
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();
        
        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }
                    
                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){ 
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){ 
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus(); 
                        }, 100); 
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict'); 
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType'); 
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate'); 
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem'); 
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict'); 
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });
            
            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });        
        function closeDateRangeFilter()
        {    
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();  
            closeDateRangeFilter();
        });

        
    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();                    

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();
                            
                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }
                    
                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){
            
            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){ 
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){ 
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {
               
                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }
                
               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();
                
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);
        

        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/

       
        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();
            
        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({                   
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });
                    },
                  
                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                } 
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) { 
                if (event.keyCode == 27) { 
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');   
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');      
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL; 
                }
               
            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });
        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
           
            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                   
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {
                
                
                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {
                    
                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {
                   
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
              
                $("#btnNextMonth").click(function () {
                  
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }
                        
                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50251200</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Tue, 30 Aug 2022 19:21:37 GMT
recorded_with: VCR 6.1.0
