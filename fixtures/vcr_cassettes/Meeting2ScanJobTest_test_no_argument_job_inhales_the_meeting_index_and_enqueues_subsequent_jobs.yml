---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - private
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Vary:
      - Accept-Encoding
      Server:
      - Microsoft-IIS/8.5
      Strict-Transport-Security:
      - max-age=31536000
      Date:
      - Tue, 18 Oct 2022 19:18:52 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=7sdLsP-6aQOfzQENdG68fizcss0Nfv6ByddRS2mIdfU1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=zvgDRt2NFldz_2Ud7qn50GD6yurLLtC8CBMDIeaXX0c1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="UvjuTxlc/WQq/hQ0n4dwYgwuS7JnhZDGwaZ9G2b5TrqCyAbM9nAlqAPqL3xTtxP6vKlAh88Olk8wUI03Zp/eCLwMKvdbqt2cyyOflkb1xWCy85iLI9r3V11ufPqgWgpol/Lf3SkFfS2yX+5BAU9Fi1KOz8bdX8lAZgWByCeay4GC67L0nu21EQvwInBdU4Jlpdj6ZPVR+1qfjzRynnbNaTJcTf6lWvixNN/1d/P4r2oV/ycxt55EXdl5EwoEbBpElwTtJOhGxPboC7Tl7yDlR1WmdKzLxXTbJncErrsUUaRY4CeLg65HKFfDs4En2K0CFAiZ94KLy3Ih+PeFIHazJj6SdLEcjGjUd0di53yVcByXFnCWGHoK8Si236oRFaMZRksWFb0QozpgfKWySAs3y+vPOfpkFlEkQCgja6oAaD1JTLz9XBmuE2Zd/m+j2Kka/RmGrN8bfSKzkWXUxgmRW8vSnSBUKdRHUBw/DjJ0eIbrVHWztHPRhjktSOwOcOQ4/7Y8ltPfCGO06pOJiG5hf7i2gEvEh2VIiBr7Bx379jV+B1GRS3MCYhP1ob7geBMlrj1kbXvuIwMtWWgNK2rO5nHhes6TWHWJisXcXPRFBxK+x+jzD+Uk0mZc5keiiubvbHA44P4AcVjfC/sQsLnRSWWicqYfW9XilN1GLoMCP4AWXFEJAFOn3HGN5LCqaFNkud/DflqzsGZva+A9NOwfdVvmRwWulJSWdqXcppwOBcEg1iWMRn8r7Dmx+x3O64V+4fORLJ9P9FztBtJL00PIMGE8PdTgUatuEYmhFmGtST1MToShdkucjJbOKs4fT4eXAtnqQmJOlL5ywFYRpUu77vIyKMHAaQ6Aqp7CULAs/VGjcOI11V5mj6pvkrI0/Q/F2yamHtOw1+taQ0jaIx62wkWREmRZbZkDUOAMTFPmN2z8fCnI3mqzzGsdaeg/8jHSmvGA+0m+Wt6wdQzcDqW414WIGbSqqj1mFHYUmd5gQweopi+Ko4JnxXdjqPoXdl1F5PXD265fJaqp84b5ijdsR3/PEb7up2W4476lIfEY0OVnFMR7FP1xrhe7fLXfRPqcuOQJ+K8C+VSjGhOwz4P8qNrXyBhqJ+cxgI1Q3LWKPFoxj1Ogx3009P+dHT1ZsegA3wa8DgPQ47oGo0qMJdh1UXWHTl5cx+ybpwLd3rxFbq5QyiOSjlGVLUyJqdCKY6NSiSx6j6YFfPyRfWAqkca15ur7Ia6Ws3aMh/UiqlHNcUUC37nzXlnUf+x/i2hAVHxxS/1azfVEnIdwey5VK2bz1kTKZDyCp35qJ4X/yq1V1tsvYMCGimUy5z7nA2GNTarb4RtzCBE+Dt1N6JbaGsCsrJfJDsTCFKL9VTRvfUIXJC2TbGssKgbBkcmcmmOvXthMMy8VhL7d30pgUzI2Cb57AsH8JtNFw//qJbza7m0QEk1A6OCNrM2tqNGzxnNbwy8Nr/hnyaTj6uPv2j7U4eidj+PXNTHP8crbO/GN+DGX8zI9ZWGOzfhz3R/0FodZudNDJPP7FwQ2Enw7tpiEHlKLrw==" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css">
   
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden; 
           overflow-x: hidden; 
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }       
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Board of Health</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="23*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-23*ef58236b-fce9-45cc-becf-c31c7a95d20f">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="67*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-7-67*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Information Technology Sub-Committee</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="126*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-126*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="39*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-39*ef58236b-fce9-45cc-becf-c31c7a95d20f">Nominating Committee</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="45*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-45*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="127*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-127*ef58236b-fce9-45cc-becf-c31c7a95d20f">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee</option>
	<option value="52*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-52*ef58236b-fce9-45cc-becf-c31c7a95d20f">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        
                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>
   
    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 03 October 2022' href='VideoStream.aspx?MeetingId=709fb403-06ed-431e-bcf1-ea2cf8da328b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 19, 2022 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D709fb403-06ed-431e-bcf1-ea2cf8da328b' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" href='Meeting.aspx?Id=709fb403-06ed-431e-bcf1-ea2cf8da328b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" href='Meeting.aspx?Id=709fb403-06ed-431e-bcf1-ea2cf8da328b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=709fb403-06ed-431e-bcf1-ea2cf8da328b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, October 19, 2022 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 03 October 2022' href='VideoStream.aspx?MeetingId=709fb403-06ed-431e-bcf1-ea2cf8da328b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=709fb403-06ed-431e-bcf1-ea2cf8da328b&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 19 October 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99222' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 19 October 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=709fb403-06ed-431e-bcf1-ea2cf8da328b&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 19 octobre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 04 October 2022' href='VideoStream.aspx?MeetingId=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 19, 2022 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db56517b0-d583-47b9-aaf2-8fd2ee9d45f9' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" href='Meeting.aspx?Id=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" href='Meeting.aspx?Id=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, October 19, 2022 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 04 October 2022' href='VideoStream.aspx?MeetingId=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 19 October 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99024' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 19 October 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=b56517b0-d583-47b9-aaf2-8fd2ee9d45f9&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 19 octobre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 03 October 2022' href='VideoStream.aspx?MeetingId=9e412332-f132-47e6-9e7e-5de53fffc8c2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 19, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9e412332-f132-47e6-9e7e-5de53fffc8c2' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" href='Meeting.aspx?Id=9e412332-f132-47e6-9e7e-5de53fffc8c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" href='Meeting.aspx?Id=9e412332-f132-47e6-9e7e-5de53fffc8c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9e412332-f132-47e6-9e7e-5de53fffc8c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, October 19, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 03 October 2022' href='VideoStream.aspx?MeetingId=9e412332-f132-47e6-9e7e-5de53fffc8c2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=9e412332-f132-47e6-9e7e-5de53fffc8c2&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 19 October 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=98334' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 19 October 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=9e412332-f132-47e6-9e7e-5de53fffc8c2&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 19 octobre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-7-127"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM'>Environmental Stewardship Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environmental Stewardship Advisory Committee 13 October 2022' href='VideoStream.aspx?MeetingId=c56bc5be-e320-47f4-9364-44ad0e77856e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 20, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc56bc5be-e320-47f4-9364-44ad0e77856e' aria-hidden='true' aria-label='Share Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" href='Meeting.aspx?Id=c56bc5be-e320-47f4-9364-44ad0e77856e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" href='Meeting.aspx?Id=c56bc5be-e320-47f4-9364-44ad0e77856e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c56bc5be-e320-47f4-9364-44ad0e77856e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environmental Stewardship Advisory Committee Thursday, October 20, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environmental Stewardship Advisory Committee 13 October 2022' href='VideoStream.aspx?MeetingId=c56bc5be-e320-47f4-9364-44ad0e77856e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99034' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Environmental Stewardship Advisory Committee 20 October 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=c56bc5be-e320-47f4-9364-44ad0e77856e&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Environmental Stewardship Advisory Committee 20 October 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=c56bc5be-e320-47f4-9364-44ad0e77856e&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Environmental Stewardship Advisory Committee 20 octobre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-8-68"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>Planning Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 27, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9a7f9fcb-ae12-4780-8af1-cc508f663001' aria-hidden='true' aria-label='Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Committee Thursday, October 27, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Committee 15 June 2022' href='VideoStream.aspx?MeetingId=9a7f9fcb-ae12-4780-8af1-cc508f663001' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99332' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Planning Committee 27 October 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Planning Committee 27 October 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=9a7f9fcb-ae12-4780-8af1-cc508f663001&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Planning Committee 27 octobre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 01 September 2022' href='VideoStream.aspx?MeetingId=e35ecae4-5067-4723-b595-7074ff5156fe' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, October 31, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De35ecae4-5067-4723-b595-7074ff5156fe' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" href='Meeting.aspx?Id=e35ecae4-5067-4723-b595-7074ff5156fe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" href='Meeting.aspx?Id=e35ecae4-5067-4723-b595-7074ff5156fe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e35ecae4-5067-4723-b595-7074ff5156fe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 31, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 01 September 2022' href='VideoStream.aspx?MeetingId=e35ecae4-5067-4723-b595-7074ff5156fe' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-66"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM'>Finance and Economic Development Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Economic Development Committee 03 October 2022' href='VideoStream.aspx?MeetingId=8bb828f4-1807-4a03-9822-5ae04ba5d72c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 01, 2022 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bb828f4-1807-4a03-9822-5ae04ba5d72c' aria-hidden='true' aria-label='Share Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" href='Meeting.aspx?Id=8bb828f4-1807-4a03-9822-5ae04ba5d72c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" href='Meeting.aspx?Id=8bb828f4-1807-4a03-9822-5ae04ba5d72c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bb828f4-1807-4a03-9822-5ae04ba5d72c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Economic Development Committee Tuesday, November 01, 2022 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Economic Development Committee 03 October 2022' href='VideoStream.aspx?MeetingId=8bb828f4-1807-4a03-9822-5ae04ba5d72c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 18 October 2022' href='VideoStream.aspx?MeetingId=5a6c74c8-7260-4b28-816c-94b6303d866b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 02, 2022 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5a6c74c8-7260-4b28-816c-94b6303d866b' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" href='Meeting.aspx?Id=5a6c74c8-7260-4b28-816c-94b6303d866b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" href='Meeting.aspx?Id=5a6c74c8-7260-4b28-816c-94b6303d866b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5a6c74c8-7260-4b28-816c-94b6303d866b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Wednesday, November 02, 2022 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 18 October 2022' href='VideoStream.aspx?MeetingId=5a6c74c8-7260-4b28-816c-94b6303d866b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=5a6c74c8-7260-4b28-816c-94b6303d866b&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 02 November 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99364' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 02 November 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=5a6c74c8-7260-4b28-816c-94b6303d866b&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 02 novembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 17 October 2022' href='VideoStream.aspx?MeetingId=6065043c-2cce-49b7-a5a6-c3b676306f5b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 02, 2022 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D6065043c-2cce-49b7-a5a6-c3b676306f5b' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" href='Meeting.aspx?Id=6065043c-2cce-49b7-a5a6-c3b676306f5b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" href='Meeting.aspx?Id=6065043c-2cce-49b7-a5a6-c3b676306f5b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=6065043c-2cce-49b7-a5a6-c3b676306f5b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, November 02, 2022 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 17 October 2022' href='VideoStream.aspx?MeetingId=6065043c-2cce-49b7-a5a6-c3b676306f5b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=6065043c-2cce-49b7-a5a6-c3b676306f5b&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 02 November 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99075' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 02 November 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=6065043c-2cce-49b7-a5a6-c3b676306f5b&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 02 novembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 17 October 2022' href='VideoStream.aspx?MeetingId=e7af1090-5042-4db9-a742-9b23f76f1eb8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 02, 2022 @ 6:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De7af1090-5042-4db9-a742-9b23f76f1eb8' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" href='Meeting.aspx?Id=e7af1090-5042-4db9-a742-9b23f76f1eb8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" href='Meeting.aspx?Id=e7af1090-5042-4db9-a742-9b23f76f1eb8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e7af1090-5042-4db9-a742-9b23f76f1eb8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Wednesday, November 02, 2022 @ 6:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 17 October 2022' href='VideoStream.aspx?MeetingId=e7af1090-5042-4db9-a742-9b23f76f1eb8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=e7af1090-5042-4db9-a742-9b23f76f1eb8&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 02 November 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=99117' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 02 November 2022'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=e7af1090-5042-4db9-a742-9b23f76f1eb8&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 02 novembre 2022'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 28 September 2022' href='VideoStream.aspx?MeetingId=52bf58a6-97a9-4392-8afc-51c799c6bb02' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52bf58a6-97a9-4392-8afc-51c799c6bb02' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" href='Meeting.aspx?Id=52bf58a6-97a9-4392-8afc-51c799c6bb02&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" href='Meeting.aspx?Id=52bf58a6-97a9-4392-8afc-51c799c6bb02&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52bf58a6-97a9-4392-8afc-51c799c6bb02&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 03, 2022 - Notice of Special Agriculture and Rural Affairs Committee Meeting" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 28 September 2022' href='VideoStream.aspx?MeetingId=52bf58a6-97a9-4392-8afc-51c799c6bb02' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Board of Health Monday, November 07, 2022 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 16 September 2022' href='VideoStream.aspx?MeetingId=d5a96450-49d1-4b4e-a4d0-ab1f6a665c0d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 07, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd5a96450-49d1-4b4e-a4d0-ab1f6a665c0d' aria-hidden='true' aria-label='Share Board of Health Monday, November 07, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, November 07, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 07, 2022 @ 5:00 PM" href='Meeting.aspx?Id=d5a96450-49d1-4b4e-a4d0-ab1f6a665c0d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 07, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, November 07, 2022 @ 5:00 PM" href='Meeting.aspx?Id=d5a96450-49d1-4b4e-a4d0-ab1f6a665c0d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, November 07, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 07, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d5a96450-49d1-4b4e-a4d0-ab1f6a665c0d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 07, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 16 September 2022' href='VideoStream.aspx?MeetingId=d5a96450-49d1-4b4e-a4d0-ab1f6a665c0d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 08, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df6b436fb-9943-452c-b2c3-60a12ded6901' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='Meeting.aspx?Id=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 08, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=f6b436fb-9943-452c-b2c3-60a12ded6901' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='City Council Wednesday, November 09, 2022 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 06 October 2022' href='VideoStream.aspx?MeetingId=c84c9326-a0ec-4936-b0fc-16ac60f879d4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 09, 2022 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc84c9326-a0ec-4936-b0fc-16ac60f879d4' aria-hidden='true' aria-label='Share City Council Wednesday, November 09, 2022 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 09, 2022 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 09, 2022 @ 10:00 AM" href='Meeting.aspx?Id=c84c9326-a0ec-4936-b0fc-16ac60f879d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 09, 2022 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 09, 2022 @ 10:00 AM" href='Meeting.aspx?Id=c84c9326-a0ec-4936-b0fc-16ac60f879d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 09, 2022 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 09, 2022 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c84c9326-a0ec-4936-b0fc-16ac60f879d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 09, 2022 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 06 October 2022' href='VideoStream.aspx?MeetingId=c84c9326-a0ec-4936-b0fc-16ac60f879d4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 28, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dec9d6d4a-41cd-43f0-9cca-6ac807a0ee59' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 28, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ec9d6d4a-41cd-43f0-9cca-6ac807a0ee59' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 13, 2022 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D62b62418-df38-42f6-ae9d-8bc3079ef9f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='Meeting.aspx?Id=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 13, 2022 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 14 July 2022' href='VideoStream.aspx?MeetingId=62b62418-df38-42f6-ae9d-8bc3079ef9f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">
                                                    
                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span role='menuitem' tabIndex='0' aria-label='Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 19, 2022 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West'>Andrew S. Haydon Hall, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" href='Meeting.aspx?Id=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 19, 2022 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 19 July 2022' href='VideoStream.aspx?MeetingId=ea4bbc0b-43aa-4601-9d99-ec7f9d1d4e6a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div> 
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>
                                
                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2188)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(263)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(260)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(211)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(229)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(167)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>55</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>103</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>16</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>54</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>99</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>215</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>24</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>150</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>150</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>21</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>150</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>23</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>86</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>14</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>111</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>107</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>16</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>93</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>207</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>28</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2017'>1</span><span class='Year Year2018'>1</span><span class='Year Year2019'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>28</span><span class='Year Year2016'>3</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2016'>3</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>16</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>1</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Special+Joint+Meeting+of+the+Planning+Committee+and+the+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>98</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>94</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>                          
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>
    
    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>
       
        var mincount = 20;
        var maxcount = 40;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();
            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    document.getElementById(btnShowMoreId).click();
                    //comment out fake lazy loading code
                    //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                    //mincount = mincount + 20;
                    //maxcount = maxcount + 20;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }
            
            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();                    
                }
                else {
                    mt.show();                    
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded") && !container.hasClass("Loading")) {
                container.addClass("Loading");

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered");
                            SelectYearOption();
                        }

                        container.addClass("Loaded");
                        container.removeClass("Loading");
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered")) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered");
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });
        
        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = "?";
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">       
        function postbackButtonClick() { 
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var meetingType = [];
            $(".MeetingTypeListbox * .ss-value-text").each(function () {
                 meetingType.push($(this).text());
            });

            setCookie("MeetingTypeFilter", meetingType.join("|"));

            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            
            
            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();
            
            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            
            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {                          
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();
                
                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }
        
    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {   
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);
                
            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }
            
            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
        });


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'  
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'  
            };
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }
        
        function loadCalendarMeetings() { 
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();
            
            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: { 
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    } 
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");
                    
                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){ 
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300); 
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });
                    
                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");
            
        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) { 
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);
            
            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();    
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();
        
        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }
                    
                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){ 
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){ 
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus(); 
                        }, 100); 
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();
            
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict'); 
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType'); 
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate'); 
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem'); 
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict'); 
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });
            
            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });        
        function closeDateRangeFilter()
        {    
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();  
            closeDateRangeFilter();
        });

        
    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();                    

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();
                            
                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }
                    
                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){
            
            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){ 
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){ 
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {
               
                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }
                
               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();
                
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);
        

        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/

       
        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();
            
        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({                   
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });
                    },
                  
                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                } 
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) { 
                if (event.keyCode == 27) { 
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');   
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');      
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL; 
                }
               
            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }
                
            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });
        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                
                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
           
            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                   
                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {
                
                
                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {
                    
                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {
                   
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
              
                $("#btnNextMonth").click(function () {
                  
                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));
                    
                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }
                        
                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50261600</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Tue, 18 Oct 2022 19:18:52 GMT
recorded_with: VCR 6.1.0
