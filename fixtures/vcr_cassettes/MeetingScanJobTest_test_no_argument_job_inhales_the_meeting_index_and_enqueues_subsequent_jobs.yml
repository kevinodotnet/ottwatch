---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 14 Jan 2024 14:53:16 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=schbltmht3ytodc2bszkqwbp; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 8456b4c95b7ba253-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+DQoNCg0KPGh0bWwgaWQ9Im1hc3RlclBhZ2VIZWFkZXIiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiBsYW5nPSJlbiIgeG1sOmxhbmc9ImVuIj4NCjxoZWFkPjxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPjxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZTtjaHJvbWU9MSIgLz48bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIgLz48dGl0bGU+DQoJZVNDUklCRSBQdWJsaXNoZWQgTWVldGluZ3MNCjwvdGl0bGU+DQogICAgDQogICAgPCEtLSBTeW5jZnVzaW9uIGRhdGVwaWNrZXIgaHR0cHM6Ly9lajIuc3luY2Z1c2lvbi5jb20vamF2YXNjcmlwdC9kb2N1bWVudGF0aW9uL2RhdGVyYW5nZXBpY2tlci9hY2Nlc3NpYmlsaXR5LyAtLT4NCiAgICA8bGluayBocmVmPSIvL2Nkbi5zeW5jZnVzaW9uLmNvbS9lajIvMjAuMS41OC9lajItYmFzZS9zdHlsZXMvbWF0ZXJpYWwuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+PGxpbmsgaHJlZj0iLy9jZG4uc3luY2Z1c2lvbi5jb20vZWoyLzIwLjEuNTgvZWoyLWJ1dHRvbnMvc3R5bGVzL21hdGVyaWFsLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiAvPjxsaW5rIGhyZWY9Ii8vY2RuLnN5bmNmdXNpb24uY29tL2VqMi9lajItaW5wdXRzL3N0eWxlcy9tYXRlcmlhbC5jc3MiIHJlbD0ic3R5bGVzaGVldCIgLz48bGluayBocmVmPSIvL2Nkbi5zeW5jZnVzaW9uLmNvbS9lajIvZWoyLXBvcHVwcy9zdHlsZXMvbWF0ZXJpYWwuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+PGxpbmsgaHJlZj0iLy9jZG4uc3luY2Z1c2lvbi5jb20vZWoyL2VqMi1saXN0cy9zdHlsZXMvbWF0ZXJpYWwuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+PGxpbmsgaHJlZj0iLy9jZG4uc3luY2Z1c2lvbi5jb20vZWoyLzIwLjEuNTgvZWoyLWNhbGVuZGFycy9zdHlsZXMvbWF0ZXJpYWwuY3NzIiByZWw9InN0eWxlc2hlZXQiIC8+DQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLnN5bmNmdXNpb24uY29tL2VqMi8yMC4xLjU4L2Rpc3QvZWoyLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Z1bGxjYWxlbmRhci8zLjAuMS9mdWxsY2FsZW5kYXIubWluLmNzcyIgLz48bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmljb25zOC5jb20vZm9udHMvbGluZS1hd2Vzb21lLzEuMS9jc3MvbGluZS1hd2Vzb21lLm1pbi5jc3MiIC8+DQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjQuMS5taW4uanMiIGludGVncml0eT0ic2hhMjU2LUNTWG9yWHZaY1RrYWl4Nll2bzZIcHBjWkdldGJZTUdXU0ZsQnc4SGZDSm89IiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9tZW50LmpzLzIuMjIuMi9tb21lbnQubWluLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9wb3BwZXIuanNAMS4xNi4wL2Rpc3QvdW1kL3BvcHBlci5taW4uanMiIGludGVncml0eT0ic2hhMzg0LVE2RTlSSHZiSXlaRkpvZnQrMm1KYkhhRVdsZGx2STlJT1l5NW4zelY5enpUdG1JM1Vrc2RRUlZ2b3hNZm9vQW8iIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPjwvc2NyaXB0PiAgICANCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9zdGFja3BhdGguYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvNC40LjEvanMvYm9vdHN0cmFwLm1pbi5qcyIgaW50ZWdyaXR5PSJzaGEzODQtd2ZTREYyRTUwWTJEMXVVZGowTzN1TUJKbmp1VUQ0SWg3WXdhWWQxaXFma3RqMFVvZDhHQ0V4bDNPZzhpZndCNiIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL3N0YWNrcGF0aC5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC80LjQuMS9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIGludGVncml0eT0ic2hhMzg0LVZrb284eDRDR3NPMytIaHh2OFQvUTVQYVh0a0t0dTZ1ZzVUT2VOVjZnQmlGZVdQR0ZOOU11aE9mMjNROUlmamgiIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiIC8+PGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5pY29uczguY29tL2ZvbnRzL2xpbmUtYXdlc29tZS8xLjEvY3NzL2xpbmUtYXdlc29tZS5taW4uY3NzIiAvPjxsaW5rIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuMi4wL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiAvPjxzY3JpcHQgc3JjPSIvYnVuZGxlcy9tb2Rlcm5penI/dj1pbkNWdUVGZTZKNFEwN0EwQWNSc2JKaWNfVUU1TXdwUk1OR2NPdGs5NFRFMSI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iL2J1bmRsZXMvTWVldGluZz92PUFWcFdCcGhwZHh5QXM4RW5WcUlnZkdQY0l5OTY0eUNHSEU4UEJSNVc3eVkxIj48L3NjcmlwdD4NCg0KDQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAvLyBSZWdpc3RlcmluZyBTeW5jZnVzaW9uIGxpY2Vuc2Uga2V5DQogICAgICAgICAgICBlai5iYXNlLnJlZ2lzdGVyTGljZW5zZSgnT1JnNEFqVVdJUUEvR250MlZWaGhRbEZhYzFkSlhHRldmVkpwVEdwUWRrNXhkVjlEYVZaVVRXWS9QMVpoU1h4UmRrTmpXbjVlYzNOVlFHVllWVVU9Jyk7DQoNCiAgICAgICAgICAgICQoIiNtYXN0ZXJQYWdlSGVhZGVyIikuYXR0cigibGFuZyIsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoImZyZW5jaCIpID8gImZyIiA6ICJlbiIpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAkKCIjbWFzdGVyUGFnZUhlYWRlciIpLmF0dHIoInhtbDpsYW5nIiwgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiAod2luZG93LmxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygiZnJlbmNoIikgPyAiZnIiIDogImVuIik7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAkKCJib2R5Iikub24oInNob3cuYnMuZHJvcGRvd24iLCAiKiIsIGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9ICQodGhpcyk7DQogICAgICAgICAgICAgICAgICAgIHZhciBkcm9wZG93biA9IGJ1dHRvbi5wYXJlbnQoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIG1lbnUgPSBkcm9wZG93bi5maW5kKCJ1bCIpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZHJvcGRvd24uY2xvc2VzdCgibWFpbiwgaHRtbCwgd2luZG93Iik7DQoNCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24ucmVtb3ZlQ2xhc3MoImRyb3B1cCIpOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXJ0b3AgPSBjb250YWluZXIub2Zmc2V0KCkudG9wOw0KICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyaGVpZ2h0ID0gY29udGFpbmVyLmhlaWdodCgpOyANCiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbnRvcCA9IGJ1dHRvbi5vZmZzZXQoKS50b3AgLSBjb250YWluZXJ0b3A7DQogICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25ib3R0b20gPSBidXR0b250b3AgKyBidXR0b24ub3V0ZXJIZWlnaHQodHJ1ZSk7IC8vIC0gY29udGFpbmVydG9wOw0KDQogICAgICAgICAgICAgICAgICAgIG1lbnUuY3NzKCJtYXgtaGVpZ2h0IiwgIiIpDQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIG1lbnVoZWlnaHQgPSBtZW51Lm91dGVySGVpZ2h0KHRydWUpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVudWJvdHRvbSA9IGJ1dHRvbmJvdHRvbSArIG1lbnVoZWlnaHQ7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKG1lbnVib3R0b20gPiBjb250YWluZXJoZWlnaHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJvdHRvbSBvZiB0aGUgbWVudSBvZmYgb2YgdGhlIHBhZ2UgLy8NCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lbnVoZWlnaHQgPCBidXR0b250b3ApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbm91Z2ggc3BhY2UgdG8gb3BlbiBtZW51IGluIHVwIGRpcmVjdGlvbiAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duLmFkZENsYXNzKCJkcm9wdXAiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdCBlbm91Z2ggc3BhY2UsIGxpbWl0IGhlaWdodCBvZiBtZW51IC8vDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbnRvcCA+IChjb250YWluZXJoZWlnaHQgLSBidXR0b25ib3R0b20pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vcmUgc3BhY2UgYWJvdmUgLy8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd24uYWRkQ2xhc3MoImRyb3B1cCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51LmNzcygibWF4LWhlaWdodCIsIChidXR0b250b3AgLSA1KSArICJweCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9yZSBzcGFjZSBiZWxvdyAvLw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW51LmNzcygibWF4LWhlaWdodCIsIChjb250YWluZXJoZWlnaHQgLSBidXR0b25ib3R0b20gLSA1KSArICJweCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSk7DQogICAgPC9zY3JpcHQ+DQoNCiAgICA8bGluayBocmVmPSIvQ29udGVudC9jc3M/dj11VERhZEFWTjJrWGd2X0lsS2EzOElvTEJKRURoSnlxQkRfMFNPNmhPV1RnMSIgcmVsPSJzdHlsZXNoZWV0Ii8+DQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9IkNvbnRlbnQvQ3VzdG9taXphdGlvbnMuY3NzIiAvPjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Ii8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1PcGVuK1NhbnMiIC8+PGxpbmsgaHJlZj0iZmF2aWNvbi5pY28iIHJlbD0ic2hvcnRjdXQgaWNvbiIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPg0KICAgIDxsaW5rIGhyZWY9Ii9Db250ZW50L2Jhc2UvY3NzP3Y9b0NjTDRybkVTOGFkeEtCOWZpVTRGNWlvRUNVNUxldUU5SU1iZlI3WV9rODEiIHJlbD0ic3R5bGVzaGVldCIvPg0KDQogICAgPHNjcmlwdCBzcmM9Ii9idW5kbGVzL01lZXRpbmdMaXN0P3Y9ZTRQdHVuaTdnOFE4djhjM1JSazQ0WTZSNnpfVl8yTkgzY01MWmpvVklVVTEiPjwvc2NyaXB0Pg0KDQoNCg0KICAgIDxzdHlsZT4NCg0KICAgICAgICAjZm9vdGVyIC5jb3B5cmlnaHQgew0KICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4Ow0KICAgICAgICAgICAgY29sb3I6ICM5OTk7DQogICAgICAgIH0NCiAgICA8L3N0eWxlPg0KDQogICAgPCEtLSBUaGlzIGZpbGUgbXVzdCBleGlzdCwgb3RoZXJ3aXNlIHdlJ2xsIGdldCBzZXJ2ZXIgc2lkZSBlcnJvciAtLT4NCiAgICA8IS0tIGVTQ1JJQkUgR2xvYmFsIHNpdGUgdGFnIChndGFnLmpzKSAtIEdvb2dsZSBBbmFseXRpY3MgLS0+IA0KDQo8c2NyaXB0IGFzeW5jIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS0xNzg0MTEzOTctNDkiPjwvc2NyaXB0PiANCg0KPHNjcmlwdD4gDQoNCiAgd2luZG93LmRhdGFMYXllciA9IHdpbmRvdy5kYXRhTGF5ZXIgfHwgW107IA0KDQogIGZ1bmN0aW9uIGd0YWcoKXtkYXRhTGF5ZXIucHVzaChhcmd1bWVudHMpO30gDQoNCiAgZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsgDQoNCiAgDQoNCiAgZ3RhZygnY29uZmlnJywgJ1VBLTE3ODQxMTM5Ny00OScpOyANCg0KPC9zY3JpcHQ+IDwvaGVhZD4NCjxib2R5Pg0KICAgIDwhLS0gVGhpcyBmaWxlIG11c3QgZXhpc3QsIG90aGVyd2lzZSB3ZSdsbCBnZXQgc2VydmVyIHNpZGUgZXJyb3IgLS0+DQogICAgPCEtLSBlU0NSSUJFIEdsb2JhbCBzaXRlIHRhZyAoZ3RhZy5qcykgLSBHb29nbGUgQW5hbHl0aWNzIC0tPiANCg0KPHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMTc4NDExMzk3LTQ5Ij48L3NjcmlwdD4gDQoNCjxzY3JpcHQ+IA0KDQogIHdpbmRvdy5kYXRhTGF5ZXIgPSB3aW5kb3cuZGF0YUxheWVyIHx8IFtdOyANCg0KICBmdW5jdGlvbiBndGFnKCl7ZGF0YUxheWVyLnB1c2goYXJndW1lbnRzKTt9IA0KDQogIGd0YWcoJ2pzJywgbmV3IERhdGUoKSk7IA0KDQogIA0KDQogIGd0YWcoJ2NvbmZpZycsICdVQS0xNzg0MTEzOTctNDknKTsgDQoNCjwvc2NyaXB0PiA8Zm9ybSBuYW1lPSJhc3BuZXRGb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iLi8iIGlkPSJhc3BuZXRGb3JtIj4NCjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Il9fVklFV1NUQVRFIiBpZD0iX19WSUVXU1RBVEUiIHZhbHVlPSJITVljQ2tJYkp5UklVUGh2WFU5MUs4UVNoMlZrcm1lRnhlaENoOHgxTU04T09ndERFYUZ2c0l5eDRycElFYmtFREREZVdoVnlJdFBaTzRqNHJES3k1Y0Y5d3MwOEJ1Nlo2S2M0RGdRU3ZpNjlRZGtnQnBsYnpkdS9WeXRlMDlaTUo4encvdTJLYXF3VDRmZWdOM29JTHBuU3BlalpGa1ZiZG1qZkYrZndmVmJrSXhVMnBrSEdrR1Q0cGFPWFBqVVJHaCs0OEh6b1VYZ3RjYUhTWTdScWxNbGd0QVNFOVhITXNTOTltazhDd3lhQnVqWUZENlR6Rm56VHBIVkxCUnFINWxoZThMVk5pUDkxdlhiOGxMc2FsZW5KOTBoSUJzZE9qQi9FN0Q4ZHdYWjU5TFhIRGJPdkJtRXpKRW5DUmdaYTZxOGZNdmlaUmUvd0lVRVM5K2R6QTNCVUlpcEhDb3FYOWlQU0U3dm1rTGxkSEM4UlVqanBZWnhnZHorWklTenlDL2tZMkszQzlrdFV2YmF4OVdJK1RwS1o5Ulh1Y0UyUUkyWW5ZaldacURWcDlXN09ZU2ZRQ0szalZTanlyQUs5aFoyRnJMRTBiTWdRd1lpSHRwVnRqNjVIc0RYanJXUjg4R2hmdDVYRnRXSWJTMU5hWDdkbTA2TEZ6WkZTaGJ6ZFk1OEQ1bnRPRWVESmQySkFMTSt4WWJqb3RlMURZRk04T0MzMEV4aGk1OFVhQUVSdUZWdlZ3b3EwMjVMcXVrbHpOM2tXRU9zUUtwK3N1U051VGFRQWs1NDE5NnRHOVFVYWRLcDVvYTNUT2t1ckhGbEZ6VjkydFIweEpWYTJLR3Z4SHI5dlhyRk5zenNlTUVxZ3F6aXJtUDN5c0s1Smp3VWxYbnNGNXFScXR5RVN5MzhIMFRsb1B1ZDRZUVZWNzFad2psR0pGdjJRL1ZaVU1FNmtDWWEzNklBdDI1bHlTak5VdE9YTUFwZmhlQ2tLRUUzaUJjODU5dWZWTVpmbXVjS0VpdnQxclhqcVlQcmkyL2xEZlpFYlhyOGZXSTNFV3k3QWNGL2FLbXRabFZIMUQ1WExsZDR4c21jTjdzNHNSU1Q4dFhNWEdBaDI5NmFrRWh0dzZqaDYyREgyVFQ1dTJjZm5QTjJTa0RrSm9zcllneVczbWhLbUNCNkhaeXpTMy9RdFQ1MERxcFVLanBsMDFRalBrdGlkNG9NNzhPdkhwVXcva0lSd2pzVnVVeWlYcENYQzRrdElsMzVZRmtYeWZFWEtsNG1OeFRtaG1jb3FqVS9mRlA5QVZUOXlOMnVLZUxwSFVtSFd2N0tWR2c0Y210Z0lEdnZuSlN0TUlMQmh0aUkzeEpVbG91aTlTNnhla2NoR0JUa3BhWS8wN1czaVNtRjhTc0Y0TTdJVE41cFg3Z09nS1hIWXRsWmo2NlUzWStLQlBuU2o4RzdSUmQ0SlFJVGE5VEJhOXg1aHErWkdqZEZyR0dFM0RRYm1maDRkbHEvZDJQazBMaDhIYnUyQkNHMW9sOUFEZmVMUEZwWml6NUFtOFd5dU9CVS9pQ1VnZlM4L0JvRVBUQyt2b0J3WVVpUUFycE1uZ0ZWR2N6TkYwRnVucStYR2dLcm5HSE81TzY0UjZDVjNpamZGeFJhTjBiTDFzMmlFODB3dWF5SHdKdWk1YnRTVUNCbjJ0RjZoUUpSR09VeDNQQVdKUzRzaTJDUmtnVEhka2VlVEQ3NWlJNTBOOE9RckRKNnpxdGw1VFRGS28wUEJBZkljR0V2MlZETS9jb3lyK0dxTUhHRkVSOEdnSS9iMGlnNjREQU15M3lNVkY0NitBaEFuSHIydmdGYkFvWkFXOTF1azZKOEdES1NpUEp5dGt2UExqbzJKRmhiTG5Pck95UldYQ3BSbnU0aFFDV3BWQVdWaFN3cWlDaGNTYVpVQUlIczR2TnlkRkFFUDdBYmJSMXZIb0FRZEpGdFAvNGwyeXg1Z1l2LytSbFB0MnZpWVZwNVhFU3pmcnVGTmtXdVdQYklnZ3kwNFV5QTBVdGtEdm9QajBYN2V4THJ6aXE5VVgwaElKWjJSdW53RlZ5TUwrbFNQMW5zREc3YkxScmUxbXdYcGpyN3djenhVSHN1TnkrNllTMlRFaHRJL2VEYlpSellsb0RoZVRqajE1VWNtOFZ6Qm5aU0w4akhmdmVXbUVWNmt5S0lqYy9mckdITDVDWnlORHE4OXp4cnlHQmUwWjFDZGxqVjc5MlJVRlEwYXRRb1lZalREK1dkUlJidFhzRVRnZXNTa2JjSVB3SjBUUGJRYjRnaGJhcGtJOGVicERBWTArMDAvMWdCUzBhT25tcXRhaHBWeVk5ZUp0MUdad3p1REpGSWZ3TDNhNnovOEJvbDJ1QWNFRjhTaDAxZU93aDlORFJZeEdidzhJREFKOVVldXlqVStwOU9NNHl4b1JjVm5GYUdhRWRGY081MjBKNldTcWRNSllOY3BtR2ZzY2pHNU9QbWxESHlONGRxVGNWSEFIazRVQ3lFTlN3eFNFREs4WW1ETGo0MllnK0lXZkkzSW1IemxmM09HSTROYnZoNGtXbVFRc0tNOCtqTTltRXZNVHJ3U2NaejQzUXhtbGFtT1JubXczMlhOSVMwaWdWdm9EM3Y3UGlLSEE3cUpTUVlLclZINVUzSnFXNVRXNEFZazFZTFdBRFRueDQ4WUdYcXlMK29maCsybm9XODdQY2pVV1A2aTd4RFFKcmw3dno2djJxSHFwSStRRHVkWlBTM0ZGNHBKOG9wTEFNSGtPTzRUYlBLNVZ6bWFKYk1jQkJVZEs3cHpkbVcvYktRM2FBT1RseFQzZGNwbDVUUVovUlJRWDArRU9PUFM4Z1ZkZHNnV29lMVJORkoyMmFaSEd1ektiVXlDMW9kODBCYXJaLy8rWFpnWFAzMUoyTDl2UG9KaXphRVVmRnFweUNUNUw1SlRxaFFvVUlvSjlubnVjTWtsTVNHQlVKUU84QUtMdGY3UEprTHNZcHV3MU9EcnJxTUljR1FMN2JGT2FiZmVhUjlrR2NQelZBVEN1cG9iQ3duVzI2WXZzWlBHYXJSWmdyNWI2TEUxdFZaRUFxTE00NFlTWUNmMGswb2xFblV3WU4xYjRBbmFBbnQ3S1ZSOWp3SXd4bndlek5PZWNIMTZoZXBUcmc4eGhxOXhOYlpHV09PdCtwamh1aG5PZlFlK051eW03U0htR2Uxdk5yOWNLREZJajd3cmFORVdNVzZzUlFjRVB4Mm5EOTlmdDBDU01peGYxMUFCV3ExcmpiOVBpbVNJeS9UclZjb0s1UGFEbWN2dmpqSGxaRng1ZkFnWk8zMmhTMXlVcFJyN0NpejVWbDduV2tTTmxqaFcwQzdNd0tNNEdXTFZQMHlQKy9aVzJzL2JuamU3a2dLQUxmbmtmR1hGaFd6aG5XRWpEZWc4aE1LS3I4QXZ2RVp4YTRNR1VtZjM0YUN5TG51eE5Od3NHa2xoZW5icHdsaEs4dXM3cmlFYUhnNDkvRFYxNStyQ0NyWW1pVnY0SGlRaHJEZ2FVb1JINlRGQlRuR25leHROOU9iOGg4M0VGc3ZPbGxVUkFQS3RWd2UraW9ndnEvQm1lTklPZCtjTFZJR3A4YXFjaTVNbFQ1eHl5eEp5NFU1clVVT01ZTHlCL1BvT0duVFkvbU9qSnpQdmxJY3FueWIyL0pvY1p0anYvbmZ5M3dSNlVPVU8zWXQ0TURxbXYwdjk2cFZ4WmQ0c25XekQ3OENVRFpKK0tPY01XbHd3RnIzTEZoclZLcy9FWWtRMW9EK2F3VlV0UUtUdE1xcmZQTndrOVVlUU9JWjZBenJ2KzZPZ1l0ei84bXdOYlZQNWUxOWRKam1lcDlnV2txUDV6TEJ5N1ZmbHE1UHRBMEFRUFA5dFlYWEtIbTR1d21Sa0ZxdCtPT2VaUWNZMjFxQTFOOGJ3MDRjYTRTNndNc3owSVJqRlpJU0pYRzA5YUpNWkw0OUxGVTBnVEVxcHpQZElkaG96VmdxM3Z0Qy9DSTQ5cnpVWEs5cjJSSTRXM0NscVJhNHNiQm5CdTdDK2txLzY0ZGYwa2hyRXZDKzRlNDhUa0EzQzRwYnR6bUNiM2xaWkFCeVg5VXdXWWVEMGRoV3pQVzBWT2FkcW5kZnhkVmxQNDg2R3JITjRzK1lmMmx4WFJ2Vys0MGFYSnRWMy9aWmFDOVFLc3cxY21zS2xYc2xuaGsrT3Rmbjg0MVhqdjZZdkJkcnk5NVgrR3pjMGowYTl0amlzdjIzSkRrTFRWK3djeHl2aUhJemNsY3pHd2p4YnhPUWVreVk2dG5lTzFJL0VBS1NXc0dZQnIwY1JrTVNDMFZ0Y1RsMzVtZEU2QTBKYytvTFk5K1dOUTc4R1M0VjlMVkt1b0trZ1BMQ2FTVGdmMDNWbGU0UjFackRuQ3hlemZtTXVEK1I3ZG9GYUFsaTBvRll0Tm14L2hJQXErL1FlZHVscFVDUmI5cVhtM1BxSU5HdFhOTVoxdVNBU01BcWV3NWVSaTVMY21veGNBR2NnY1IxYUJlcEpjTjR3L0ZQb0FhNlc4U0JFelpIYmZHbmtZM1l1ZjhKYnBiNG1VbzFBRmkzNm8wZXNzTjk1bXRDeU1iajUvKzZ2Y211SDJyOE9OZzgwazRtWTMrM1V4V0RZSjBjMTQrQjR0ZkY3RkdVM2ZTNisrbGNWNHE2VmhrY0o2b1dpNVJldjBsYW9IQ0sxdUhYWjVLL0Q3VUVTOUg5ZXN4MmxtWC9ieUdiZW9DWlg5WlN6S3RrL1diRE1NRFNsbjY1OE1tV25lMDE1a2hIclVJMjB5UWxya2ZlUEsxcENJTmhRL2RHbXBLRmNsUWw1b0RLZkdyaUR5WEl0dW0zUFNKSExYbENwd3NtOHVoMjNNNStpL3V3amVHN0JVL1lUOGZUTk1pWXRFTmlydXVBc1pDbjdTVTZIVXBLeTFnakpyLzBjMHNWdC9USWdtWU1YQzBoemhEbWV0M2Y3dERaN0VOL2ZudW5BRmxtdTRHTElwM2NDb29taHIvTkhERkNGcEJkd0FzL0cyRVRrbHR2R0ljeVlIT1NXd0xKTmdONDdwdkJ4NXFvSEV4QmswUjVGYi9uMVJtMjNHdTJUeTRJVFhnNkpIeWJyTjBUVU1Lb1ZsTHY3c1BJV2VQWGxIdHZJa0x6SGZZRURKVmFETTBFTERQOHpyRll3eUJDeHJsK3BMYnI1ME81eG1XUGozZHprS054QWhadUZIN0tSTG00eHdnc3ZZcG5OQ1NXdWFPWFJha0w5aEluQUxVTXlQYVhmQlpvRW10Z0szLzdRcVhzVUVLT2lvc1RjRlVVRGpmRUhaYSswYzc1N1NjM0NJS3R0ZnhiVFNpWXhoRzdWNmdjYmRueER4WnMrN3oxbkhWVGxqZWg1TE1zaEVQcXFmR0NyRmc2c25EZmY1eG55aHZPandIWnd3bHppMGVGdWxrT3pmcUQrRTNvd3JjWUlKVE00ZWpqM3Q2U2RhWFNYOHlZNm9DWDVhRm95dDI5OTRXYXowck9tMG1xSnVYd05rMGVEVmp0b2dCM3lWSUpUNDBRejM4STIzKzU1WWtlZWVzRVlkZmZHeHRweitOTnJHczRjNCtDWmtQVzlKdnhwWExncG4wY0t4eWVWV09CTjNaSmt2MVBqL1dHSW9TL0tNMnZiM2dQSDhleExxUlFFWXZBZ29ZajBGK29OVjdXb2JFMkpwQWZabDFBOUlqQmhTTVNpTzJGV3UxMGFZM0NXWmFDbXdOa1o3MWxqajc1N2tZMnpBK1lwdHlhTmNiU3FmUnNlTjRXMytOcUY3Vm90YlNpblNicFZtb1d4eUhNdXU1dHAvQVlLanAycmU5Wi96S3VqazdkUnd3VWM2SHpSQXZHV3NHQTM5ZGdkTzIwcW4wMXAzb2Q5SDVrbjdqcjlmcWpMWlB2UmpnOXV5b01QaU9SeUFGemdpaGdkamtyQ1lia3NqR1NJeVF4TVM5dWNIemFiRlF1U2E1K1ZkOTN0NDloN3RlNmlKY0ZQZDlwWFNkaURkSVlOVzRRV1VobThkaDQyU1pPaFp6VmlUakJNQ0lkbFpuTlNZeWV0UGc5UUduWEhGdGpzWGxyKzRuOElBUWQrRWFuMG5IS3NtSmVHTGN5ZkFCc2dHbU5DZHMxak9RNk8yeGNPay9nM1Y3Nm9ONVpZOVJqMWNNaVNFQXJ0cGlubFc2MUxhMm96anU3S3diUVMzU2twdG9aY0pJcythZituQUc5ZHlaSG91OHAyVHBBQjNwSG90TzRMcWJEUFdJU1VFTWpNTjhETk9VZlppYmhFK296V0FrYnRwNm1scWViVHY2SU5SRW01b2t2NGxEdy9oWUpCeTBpbHN4bXpTWU9McCtBc3EvdWdreDV1OFNiR0J2QzFUZ3d5WjY5WmRBNktlcU4yZWhITEFPVzlja25UYkhIUllobkg2M1V3VWpzSy91S3NhYVFaYi9NWEFpd2VHbHpaV0h3d3J1ckNnbEJFYVR2TnI1VlE1SHIrV2FPVzRFcTd2Z0ZPeWpYWnYwODh5bnhQelNQaG9icURjVUNaZlZPNkxwRTJ4NllPdXNlN1liY0hXa1d2NkpLTStEKzRvNVBlZDVoSkJKTmJZaVJtMW9JWmNBVG9zM09FcUNOSFhMcDNqbUtEQTFDakI2Z25HdXRPenI5SnZ0RlVhQWxJRVFIdjd5UTFWbXJMYk13OGk1YXEray95aU1BTWM0SVJjZWMvc0lpV3E1K1FkRW9LQkthMmVWWStRSTVPVm5ZK3NPYSs0bVRHd1d6R2xLSzRjRHgrV2haemFrdm4vRGl2bG1YVWZmWVpBS21GcmlVcndwNG02WUVHYW9EQzFNd2tlNUtiOFhtM2ZGMDRYc09xWm5qUnFKVjVYQWV6Z20rMnd0WUl4SjduM0dibzdOL1VRN3RrUTVpWjIyck14KzNEdVkzQ2tlK09OVGJGN1hQc25SWFBVcVF3VmRsV1R1U01iM3BWZ1UwZkQ3UU5DRjB4VkthNzVHeENvUlRXUXhHTlhhbHlkRisyNStPRmNhUlBUZFJSQW0zYTM2RlBFZ0pkdHBOMUVpM2RKaFdKWFRMZVh5SzgzRE5tWW9KZEoxT0RmVnlteVpjUXl1Z0ZYSXVuY3dMdWZMczY1c1N2MWN4ejNUdyt1K3o2QUxEc0d3RmFCd2ZHN0VMM2xIeXg2L01reklsbU4zdktQaVVQV0dLRnJlTEMvYjNxUHVMTllPQlBqS3JGcm93cGVOa2ZXV0hSMCtrNXk2cHVSZ2Z2QWpxc05VclkyYWtuUUM0a1lUb2Y1ZnNOQ0V4UzRSc2srVVVvMTU5dXcya21JV242NzdGZkFwTnlLTFg3Z04wTEIzWmppSU0yTlZRWTFPeGxMeXhPQ1VKaDRWUmJHaHIzeTU1aGxrZi9ydVJRcW9qalFCMWY3T3hBMXVKeWVJRmNwdHhTK0tCeklVMDIxaGp2SHdkbmF4SXFxRkVDOFlPSFI3MXpDblIwUlpWZW02UkhWU3VpU0pKa1dJaUErckh0UHR6enVndmpWSGNkdnFRZ2tXRWhCRGtYTXNUZ3ZGRDFVc3hwUFNnQmg3NThLd1V3L2hyQzBVWlhxVFFjaGVkZ2U1aVpFUmNpWEFTazBieFk3VHVvS1ZuNk0zY2JMeWEyNGx3aWZPV3liWkliTC9rNUREeW1KbUdrU0F2c3NmdWNqUkIvVWViblpnbE5ZVFdVM1k2STZIOHlBZ2NpNXJrWmIrMjRNSDQ3K1RWZjVaMjZKL25VdUV1em5jWDY3NlF5anpkMUg5WWlUUWNEWStjQzViQ1o1NkovbWU2eEJEQlplbzBBdkoyYUk4SWpNZGpHT2lmQjl2SCtYc1JxdlBhQkI1YWUxeW1Xcm05U2RSbVdnRTU4TlZQcC9LUktKNGRiMGEwOTcvWHM1LzJGd21CbE9Nb0ZnN0VqcTRqMG9UVkd0VDlMT1RabjVlOGpkSVR0VnNwenNhWUd1eHdrSDRtMDVYNTFoYlVIWmNPeGt3eENFVmF6Z05kaCs2eXl1ajlDanQydWIwbUZicGtBU0FEcmROaTFlUk9GMkJLTFRMbmNYK1V5OFlXeEtiT2xhbFFOdFVvVG1HenlQakNUOS8vOHZqVjZacWxmbks3RyttWERXMk9hUnBSU3p1RnZQU2RtY21LZWZpUGdJS0FEclZyL2x3UktOWHpjTExaZy9IYjQ1clVYS1lvWHR5MUt5NHUwN3p6SmlIRlZaOGIxVWtLMWdzZE5IVnlyWGh3dUk3SEY0SXR5V2VoNXoyTWxuUG04aDlXZ1FPejgrelV1NkcrRFZDNDdCVndOSFBOMiszK2JEY3VkS1NPc0J1ZUlkTi9qYWlPVkpramZZUWg2YnFocXgyQjQ0cjk0VWxMcXBabTA0Syt2VENBUE1JM2JadytuSUI5MFVQMFljSGZZVURRMWpkakV2VTh1UmRZTzFjSTF4SmxIWXFsUVhiNlFmMVZwajNQdGFVN1dKaXhKbUF1RDlZeEE3bVllMmtuTHVEbEFIeEtNYytPMHQrS1lZTmd3RElOblNoMURwUDI0dFJ1RWJUbytEVG1nV2lVSXZZcWQ0SGltNmpuQjJKTXpmL0lmTnhuQ0hxT0RydUdhYU5hVkNEWFFmWEVpRDZQSnNXTVhPa3RTT25iRExrNTk0RXpXQ0FoeU92L0lPMEZLVFl6TWxNd0lZSXd0bmZZZHVmM1h6Ymh0RjRMUW95czVDcS9rUkhKeHdxZE1kMms4eXc1V3JaSEkrWFpOaVN6Q3BNdERKL1k1cmh1dGhzbFl3NDhxbnN2TVUxbm5jeE5Bc0Y3YU9CYThiZHpiTm5jZ2pFbDdEUFFkR1RwMUwwRUV3Y3FHdjVEcGgyZjAxVVdMVmxZYWFMQlFGUEp3VEFGbjJYWFNqcThKNkpUUDhNOWszb1hQMW1JQ3p0SmhkakhNc3JtUUxZelBCbjdjbkJLMUJvNWl3Sm52MStXRDcveFgzY1hBUVMwaFRXSmNCZnM3V2trazB6TGpLWHJJb3l6T2dOZ0dMbzlqVUU3bmVOVTJycmh5eU1pOVpDQlJ6MkY4MFRqNkNDcWNzTmFsM2RhMzhpbHVmQk5kR1J2MDRvakR2SWE2UXlvSi8venVKVzJGNHZzYlBwZm5pcmw2TllUTWxuQW1vZEMzc25KWDNhSFlWKzgxYllqclVaNW0rTTJTankrVlpNMjBtMFRYTDJESG5mRjhVU3V6RVA2dGVudytCWk5iQzAvOXBtb3hsQWVzaDR5OHByZm9ocXF0ZmJIUjE2aXhJeTNtbFlQTk9pc29nVWZ1dTFsajFjQnMrdGZUdXNUT1VNMEpmN1labmFzWklPK0t0cytFbHM4NXJVTUNaRHd1eExBS0RyZUpLWlhRejJWWkU2SG1ZZjV0OE42MDljRUJaWEphVEZQODFYbGVQTEk4V0k0bzF1em1PR2wyMk9USit2MmhDaDVVQzZzS1NTNE54YlVJQ0JXL2hvL3FZNFVLRFJOaktWMUJtQS95c0Y0Nzc1dFo2bkZLbVpNL2o1dzk1Wi9pWnlReFV6TVNNNFY3R3h5S2I1anhObUw2SDBLcExtMlR4TDJSN2N3RDQxWTBsZWp6a0hLYXhMSzBGSXRwTGd1dUVrd3R4TjNoeVQ0ZDI3ZGdkQ3UxWFJXVGU4RXhFNlhtT2Y2bjZ1RnBpL3lDWmpPT0lKQzZ0MUIrMTRFS2orMTVyWjNDSDQrY2ExNDVPTGJidG1rdHZhTlQzQk9WaU5QU0pIcE5td1pESExXOGw3VFBiK2hGZHN5MXdsUE40cTYxOERkeXRocGN4RmpjRmdxVFg4ejBxWDlYNWJUKzdlV3dPbFFWVUJPOEVHUHpwWTZRbU5aK1pSdnFQRUVWUWJNZzVhU2I3Y0YwVXhWcTRxSjhOdjlJVGpCYXZlNTBOSDBFZENGeUdMMVFlQ3ZLNFhIcGd5L3psTXliTlRkM2VydUxISHJhRVhhRkYxaFp3VFFINGpYTlVNckI4ZDJyVG1hVUZzMitMeHAwVERra0JaakR5N0FiNU81bDRrMHBLMkJHaGczeW9CM2pLaVdQakt5NWpTYWdmZGlZclJxZWV5Vmt6NTlieTIzVzU5MzhMaCtEN3hHSnJBMGc4N0dGK2FTWEYyZFFYeDJjUi9LTjBablZaREtLTXpueEtUUWpFTnJOTmg2RG5WRGRlWXgyL2tWLzh0b1ljZkc3VUhRTUR4SjY3b2JqK3lnN0VtS0xPMzhwektqdVVheDk1Q3Fxak4xRUxSR2JZUGFMWDNrVE45S2JabHpDci9lLzJVYlQxemlkRjVTS1BHdGZPcEpSTmw4dHZIanlDbXM5YzlOTkxod1hBZDArV2Z5RzhwenppcDVHUmNOdWtCNGdWODhqMTZ1c2pVdENlMVVaamNjTkNsZU1ZZkZNNzEvZG1uN2xZaDZtNlF5c3Q3a0E2TTZOZkVHWDM1Q3JNVGJpZWMwUjIzV3N5dFg2V1VzVjhYdCtNTUVCVDhxZmZIWlJPSXJ1OGZTUVE1NHkxUG1vWUZCNXgwRExnZ09TNmtmeFFOMTZMK2FUV21kc2tuZ0xTOHJpRzEzZWhFTFdTRWpFT1g3L3QwT0FSdGNaZ0pQbG1JWStkK29Wd2xLTVFENjZ3K2REVmMyK3NIL25yb3ZYQ1FoTWpCMnNnYWk1THE5MThiTXY3azNvaTlVT3czMndrY2traVVjOVBZQ2pTajNHVENMcm1UVUJuZm8zMnB0WEN1cjg5a1BlRWpzenhrVFlDVDVPMWJwa0t4Vjg0eVErNzNBbmVNUktRbDM0NXJhODB2QkVJRHBweTQrdnVyQWwxV0JwTnhIUkt3clJ4OGZYckJGbzg3YVRwRngzRGlCYWZ2bGRacElHVTdXTHBWMFMwUk5SMVVDcGhabldQVkdOWG9JNTA2OEt2b21tcVVEZHl3R1BQbG5QU0wvQnZ0aE5OTGxPaVBCRmZwd01uaWlpOWRpbUlSSjRlOWVxb0Q2ZVhiM1pKNUdadmJ3ZXp6czJiTE5XQ0JERlBPTS9QNXNwTVZSM0tkMmJvejdDWlF6bzBKOVlXZ1ZEVGh2VngwbWx6OEtZS3NaZ2VsUFk4bFpZN0JvUkJDVTFmbXBUTGU0VHVkd2ZlQTB6cnBBdHo4R3U5ZWZlQTF0ZXB1TDh6M0JxU1RQem83OEcxRDFjMjNDbE44SmRSSUVGUmFZNTZpN2hWWEhIdndpMDBSVHBvSlE1V0diMlp6WVRwTlp3aWY1VXNTK29tUHduVU9ORFBYOXhmdVNGQUdXQ0VHb1hkRUp2S3BXci9hMU03US9hdi9VWVhDWTZKajYzZi9lZEpCVXE2Ti9RMHkyYVk0aGxVRTlMcllxM2srUE9OZy8xa2dRSm8yVnJZaUdwR0xrL0wrNmRabWgrbTI1QzA3MkM5d2ZCeCsxWE53Y0RxNVJXU2QrTklpR2lIaTVIdTQxMHQ1engvMXkweXRPbEJ2a2RNdVJ2SnppNVIzbUdua0pqWW5nb1V4WU5sdXVmNEIwMmRzK1ROdWdzRlZ5WGE2bkpHUTZHbGkyMmVuS1JxV25XWEw5aUJLTFZJSXFvV0wzenIvVjhtZ0tWUk9tQzF4aUxIQ3ozaGVFSStra21JdVFSN2ErR3ZwdlA2SWkwODRWcXEycFdod3hJVGczbm5WdHhrQTgvaGMxQ0E5Q3FtZUwwTGhaWVV0eEdQUExLK1JYN3FscHkzSWt1cVFlQVFVRUlMak5zYyttUzZHUE1mS2NwcXRDaHp0WGFKVlQ2Nlg2NzBWT253RjVtdHJlcXdwWGlkdFJRdGUyc1UzWDBPY3ZITExDWUR5WGNWL2ZDT1A4VEZLV2lOT3NFT2JGWjFhS2xTdmhzM1BpZzMraWdlSzRoOUJrNlV1eDBYZE1nNHZ5THd1b0hXZzlCSW1wSG1FZGliWGtoK1ZaOVIxeUpnbmE0M1hxRnhXRWdETTVJa3Qra01WZHl5cHNmS0pYelVtaVFuRlhVQnNkOXdxNml6MllwTlZ5bjZiaFRrNmRvQ3RQQ0RmeFovWnZkY3p0S0xMblJrQ1hIeis0OVdaRHhYcWVOdzRFYU5XTjNPb1k5UURiQTV5YXFDS3JsdDBsN0UvSWVmZWdlVHFjdGxVSmwxNVljRk1XbG5YOUlreUFMZTMyK1JXcDhQV0RtcDZHS3pFNDA0R1FxSE9nTVBnbWV2ancxczcvODhsSGpNdCtIUWE3Zjd4TG5FZEg5WStMb1BMN3hGbWIvVnZKaDIzdkRYVEgwaFZIU3A2Y1psSTRiT2ZDRStoeXNZdWQxc0h2Y0xZRit0ZzByMDRIRU1EbWtYMmVjV1RZTWNva0pxRzFjMk0vbFYyU20vWGd4TFB0VVRxdEk2RWIyeG1sNUY4bytzK1pqZEJvcHBxeFhOOXdWMzM4dVUxRmFCUTgwZDQ2VkFsVFEzdXArTDFiVStBczg2MW5hRHFZNU84dm0xOGxMV3hCZ0VHZlJ5aHpNUVZQVHhsN2pWb3BvS21IdUdsc3dWeWdMTE5haUlXbVBKcndzSkFqMnoydTQweHpVZUxqWW1MVy8vdWtXWWdXKzF0RGxJMDBVMWpORXc4OWNzQS9QM29xZHozSGtjdm5VaWZiWjRqc3BMVW83bnppYlJJaFV0dXBvOGp0dGJFcE1QK0dzckcxQSs3K1pBNzhRTmVKTlJRbE9mcE5jaFRFOGhLZ3lNY2NZN0VNc0NEaEo3MTlrMWxRWFJIU3BRV2diSXduQndvRHJsMmJNcWZDSmhlcVRBODM1NEVVdnlWZnB2NnNqWDZJa2d5a2lIVlR5RGdSTmM0czVIcUZxMG85RjNtVmdvT0xNRTlFdkFDWjR5amVRU1YrWHg0YVN2MVh3b21TYi8ycW53NUVxd2lNUXEzSlhhclVncWdkL01XZ1RDc2lhTytINExVWjNtV1FGb1ZNME14WUpOYkVaL2paYnhZeTkwZFh0aURlOUdvdHoxdThVb3U5OCswT0lQb1ZLd2xYR25mWTRrNEpyWU1oTTFFSjZyaW5BNXVXY2gzRHF5c0JqOWZnZ3BjUkFtN1pJRkRuaCtYVEVtOU1FQlNxem0zWXVnUWJlcWE3OE1XVnFicmhBcTlJclc4YTZHTkdDYVpEWUZtcUFuNDF5QWc5QTRqYmRSY1lXaDF4cjVOdCs1NWY3c1RCdnRaM2xuR016K0JwUFVJVSsvcXRzbFNqS2k5WU5BV2NTVWpaRGV1eEk5UlZtNmlHbm5wYUF6U2xVWTVPbGZSUlJ2eVVJeEFRK295c1R6QkNDeklJVUZUcWFxUC9jNy9Vd3FUMVVQUU5nWTc1Z292cnBFRDZTOGdxaE1lQUsrVFlZbmlxVHRYR001RloyV1lLaUR3cm82dHI0SDhBUU1qbWxXSFV3dTVnQVJwYlVrQUJXaUZidzZaVTBBZDdNMThacVNJZ2JzT2N6SncxenpwQkxxaDBtemFUdW13Wm1PNlZoSUg2YjFENVRMeWlkTkZ2aVllaHgrNzk3NVZIbDB6dW5ralRRa0dCUUZud0U2OFl2UVgyQ01XUmhHMjFRcU1zTTFHd1dzdytyT3UyMGx6UzFHYjJVUGV5WkltMzBwY0ZBUGYydUltbUVWejRSSnVMd29qb0tMZFhKTE40ekp3aDNHWDYyR0w1MXNEL1J6L3htZCs1M3AyeHF0YU5WQnBUNWN1WWFGb1hSNGlvVkd1Uy9rUHFRSGdPdlU3c2p5bzBRNGg1RHRvaXlZajVFVnYvTXlia2pQWEpzUExFcE9IWjlycmFXbDZBZHE0UHoxTDl1dU9td09rSVRhUXRXRC9nY1krYWllQnNoN3FoQVFJVDBlaW9HN3pDTTZxaExoTFZVTnRsVVpoWm44eEJCVHhEL3l6SEtjY0U1VDRxSHkvcjgvY0QyWmVNRS9sRDZ1NVN3S1FZdVhOUm5mV29QYVplSDVaWmVUa0UxeDVvc2NOdzhBdzJoUEJNc1dXR0l4WDRrMFVMN1U0ZUtxTTI4QlJ1VGNZRUNIY0l1Q0s1VXNNWTZmaUhXUGFqVHRqV2QwNGU2akFHKzdSVVdUOUg0a1QyVlRhMmw4Lys5NE5nUlFRRklGRUFacFQ4Rk9CVnRZUGdzRnlqOG9Nc1BzTmJKQUZycXJzazRKS0xDR2laRE91blRpd1J5UmZ2ekhqbzgzWXdWaUtxMkdxZ3lEMDJCK3MyVkhEc1pJMlJkNXNqU1oxSzFuemdQSG9Bc3hEeWF2T2hvNHl1THE4ZElxcmxBZUJsemZqcE9WKzFMTGpRUmlVMGJRbi9JbHM1REZvaUhIOHhES1g0aFJUaEtobEdPSmdYREUvTElpckxpSWE0alEvV1FMZ2t0Vmp6TjBQbnhFWUNjRktJT1JQTlNzWjRsMVMxNW5JRzdWdDB6bEFYbEFsZk5kb21ORWVrdnhaYmw4SG5kNzNzdDRTVkxaM096VHVoaTBnVXRVRDlYT1lGRXNpSTcvMUV2QWpmbWRiZHgwbEpXc2RIOEo3OG85RkxSbDBubmFITjZrTktlRTJqSmloUjQ1MnJld3MxQW4wRkN4em5vSSs5aVBRV3NXVE56L3d5WTBlWWo1ODNZZzI1WVlRbDJuSXZPeUp3SjlGWEIyQjRkSnhiNlhjVGVmTU1FblZEOVpITVJIeHh4bXk3Vkc0STNnRTBocnZnenFZWmZQeVZic1ZLN0Z2a1Y3QmpVMEY4TktxTzVUcm0rbEJVd3U5dnhidVgrQmJ4bDA1K0lxU2RuYUJwQ0dWVC9xK2VaeHJCamZENjcvQ3VsRHovNEc2bmNjZjlIVzl1NVdtbk0yaU95ZDNuR0FCYk9melZINVBMNmRrM1laVC93V2Y5R2lQYmVONXJFcXQ1Qlp0Q01VbDVZMTNRZGNUUlR0cElQUGhlRVJoemJEOHFwRDQyQVJQbzZIV25RRkE4YXc2d1lGclk2R202OFJoOW1ValpRU0tZNTl0am9tN0hHZkl4V3IxY25WMkZ0ZitVMGYvMkdQZ2RzbVB5aXRhQzdEb2hTNXE2US8zaGhPK01FZGoxSFdHc2VYUitId0l4QjJEUVZIdnVUV2FUb3lwSit5Qm9pNE5oVythTmwvazhMVlRlWjhtSFQrbktycDlLdWtacEVJeDdZYWtYaTBPYkFtUnBIdlNnNGdlQXk1Y3hhOXBtMWtkbmI0bVJYNmRTM2M2SHV0NXdNenRoZmdnTllnTFdjaXpmS3dZMzE5VmY3WWFJMlN6SHpwOTV3UnVRVzF5UWhUVXRrNGR0MS9sUE84V3pJSmlySVFSSXB2MVFjaHN1Q0k1cDJkdUFidS9Ya0EvK2kySlhGMGlGQmdPQW1ROUltZ2NwZ2psd2J6VXhwSktuRUJnT2FneUt1WDhOU3lVWWlReUJ4azVLNDVjRUExSFMySWpqS1Z2cFJtZ1F4SXYvSlR6WjYzWGpmeEU3V29lM2VKYVZPZGE2YmxzaFpFYzdWVTJSdE5DZWZHV3RNd2tmOG50aTR0dnV1eG1SZDRYUWJCenNzRmdWeW5URWZHWHlvWGg2YUUydEVJdUhVMjJTVTQwRkQ3b0FSN09jSkMzbDJEWTZjVU1Ub0lha1B4YkJJYlJnYWFleGQ0SnM5aytnbnFpblhWZmYzYVA4SjFjUXkzNm04QTE3MFBQcnBCdWJkRWVQQ3I3enBmdlNMUTR0aGpxRFVETktaMkdVM1pZa2NzdGFXVkxUM1hBcFhZWlhTaDhWVXQ3STErTzkzVG1NRVBzUGpqV3U2TllLVkJQa0RxenRNQ2ZOWU93SjR1UkpnUVc4QkNEa21RbFJTeDM1Wkd2VXgvcWJOdndVTWsxdFU1NW1QRWUzVDRrYm1OOXB1NFRwb25ycHIxOFh3SlZJSUJkck05WkhNek94Y2hVUnNRSndVbXczcktpdVpjQVRNc0FXM0YxUGpsempGSWZIN3Q1YWk1blF4M1FTazFxZnppUWpySFFWZVVQeUp4QVNRMkpqS09Mdk9kb2dhSnE3SXR6VFlzL3BGMWhUSDF6UFEvOWxSbHo3cnFEU1g0ZXhzM1oyT2pGUnBrdUFlWDV2ckU4eTNmK2dIRDR6aHRlUTJWTXJLTWRScmltNFdsNWR4cG5xSHVwUHI4OUkxMi9TZTAwZUlZREFuM3VjOVhjSEFMS3FHYTVWY01kbTZUVjlOc2JEbGQ0YjZXSFlUNytTRzQ5UncvSnFOK0hOVlhLdG5QY0hpanVtcGtueWZ2em56cnlzdjBNK3JxaDgvMVJvZ3g5Mk5abDdhS0Qxc1I3YWRwMVJLUFpLZ1ExWDViSVFEUWFWOGp4S0NrQmcyYnAwdVQ4ZzR6Nm9UU1ZQdC9DVmRLK2N3VW9jampidEdYMWMwWVlWeXhXNGVXVEgzVFp6d3NBTG1BUmlhMTJuWXBZdjVJUjVkbGxXRlVyRTZvTGd3Tng5YXZHSXRENXUrNnBHNG1lRTJqS0ovWVA4dnBRbXV6ZThPY3JLdGx4MzNHT3U1UytPSnoxZ2x2Y1RLenp6allBUytueG02S1dMekJZWWk4VXNERlpxb01zMUF6cEkrbUlocGxwbk05K3BZekZIaVF1UlAwZUR6bVhsMm16bVptRktaSU9Ea1F6UmwyTDVRd0gvNDBBdFRBN0sxL3U3UkJ6aTlSSGxSK0Y2QzYza0ZJa2NraWVWOXlyaXV1aXVMN1V5a2hLVEtBM3ZLWWtLcERRUndYL2NDcFppVE1tUkNYM2loTnVDWUw4T0UwMlFlYUFNcGpEUzJQSDFiaGlRcndVb2JlRmdHaHhMNWw0ZUgzanEzNFBwblMwVC9CMzJwWFBKVUU5amVGendSclRDZkZkeGF1RkxsWFpZZUp1alpTMmFHNTdmVVVReHQramoraGU1akxxNnNsUHZLN1Btd0ZMekNlUHZSYnZzRVNySG4wLy8yVUdOR0ZJc0l3OW9xRE9RZThTY2czbW94djlrVGphWnVxbEc5aHlaYkdVZ2R1azBDbVJkek94RjRzd3oxQmZsMVB6SlBNV1dSRXByZTZMS0t6VFZ1OXRETFJJUU5PY0w2MlZrN3dGRTdOSU53S1JTRndXQUhxbWl2UXcvQkdTRnUwZUpWYXVGaWxwdlBvME9pWnNrYWI0UDJ0UTNzNW9UV0MwNnRBa29JYUtRMlVKU2VEV0g3b1JYaVkyY1dUMDFxRWF5NTB2OTB1KzdVRkpJeUtuZXh3S1Bxd2FId1JXVm9rL0xDdTBaVlVXYUtqaE9BaUllc203OGZ0dGxuWDBSTThZVHAvaU9qbmdVZEQxelZ1U1V3dzNkdkltN3c0Ymc2ZXZnc0Vsak1TUGRoZXU2MWYzOVJYRkZ5YkxHUUxDd2hITXRVc3JWcjFCd29jYWlYWEFsblVvUnlpMUdscVBJUmVaWGUvci9IcVdacno3MGVJY2F4bE9ZVmtWRXFibTZ6Unh5T3dodHluK08wZ3IwaSt0R0ZvOHZ4YzZqbThLcVp6YmxFSmdRNUR6ait3d1dEVFJMb2FwTWxScElyTVBCUWxIb0NCSittdWhiMklWUVFtNEozczhSMFVnZDdORUdrWmRFTERkQk43THRCb05aMFhSc3hUejhZeVNJaXJ1alpkWDZsVldCTm1qZzUyWjg1Q01LSjUzRjBWN3ZOLzV4bkVTajdwYXdYMGt1eldQcVpBVFpReXByNktDQWdFMkNrWjVWOTF1L1NtTUh2T0hWdG05dm5vRkhJZUh4Q2RiTTVycm9rR1hOOEtOTnVYVkxNM1hFRkg3Ni9VeW5zZ2V1Z1dOc3Jxdzg3bmNwamxFWXVTRVk4VUY4N09WREhvbHFZdlFRRG9kQUZqdGJFWEZQOFEwSHplM3gxTFpNK29SUkREam53amI5UDVPVm5HN0o2bkhiTDlVSWFLWDF0UlozZjIwMlRYc0NFN2Y1TEZ1eDFjZWlISXBFalBZODRIZUwyOTIvenBMTmhZMUUzQ0lQRUFQTEY4MFBEMndRMTMvNlBKQ2FZUmRKT2Zyd016ckxSb0FKUWtDcXpuWEV2b2hjNFIwbnJ6VjRQOWNOZ05ZcTAxbkhFK0hrRHl1SGlXenVKb2pOUDZCdXMrREx6dnFsZjdqcmRUSmM1KzZ6ZklYbTZrNkxFbFhnNEZSZ1VhOVpSa3FFYjRTRkg3YzdPc0puZ3V2c2FBczJZQXFNbzZsV2hEVlR4d1JUc2tOU0UxcDNoRnBQVFg4UDd3bzRsVSsxcjhxNlQzUy8vQkRseWhSY0VpZTFydUZPUWJzTGFhazFRdTFzZisrZXBKY0N6SDRtVEY5NXhmSWdJeEZ5bkpyUDQ3ZG4vK0VlYkhBK0ZOZ0Y5ZDI3RmhOOVNaL2poaEx5c005RUV6S2ZBL0wzNzVqeSsrRlhZbmlIT2FRVStBd3AzMkhJaUlhSk44ODExMmlwOWg3cjVMVDlpc2ozR1hHdGoyWVAwUVhRZzJyN2F2dnRUeTloZzhGb2t0eUVZOEppMDBZMEIwaVYrbVZuNTNHOEtWVlhTSThaMUpwR1hpNTFWMHhBSExoTEcrWkx3ZlYxVDJBaHBuWUtZc2g1cFpiZUxFOElwUWZTeU80cFMrUDNJSitHUlptdmQxMjZEKzNSak1ZZElqUnZpTkJnWCtFUDBFcXdiZHZWSzRCT0NxcklmKzhFbFcvaGdHTnQvTGVvaVBic0lkRk9MWW9MNHhMalNQKzdtajZlenJHL0xwSVhDS0JoUUZLbC80dHl0a0VUZmFOTHJNNHpDS2tPQitmWmpvSEZPcGNkMXJzcUs0azk5MmNuMHgzTlNSVTNGRnB5cHRTRDdlZ2dHRmkxLzB6TWxXeVdFRFZtUU1XeUNmYnRxOHBvRWUxa3VHSmRqZkEzQ2NrRXpRQWZmYUNCYUV3bXIrWHdhU1g0R0hNWUJZcEI4R3FUd1A1eGdINkp6cFc3SktOMFpWOTBjL09iellkOXRnaTZEMjFuS2w2cHBacGRSb3FpRXErVEZodElFWnh2dllGQm9YeHlDRXNtN0U3OHFPMi92dkIrOGRUaDcvTy9PMTB6ejZUWXlSelBiK050ekhVSDFZanQxdnNYaTRVVkpJV1lTK3hHa1dvbVNuMU9SMy9ZbUxjT0xTdzcxKzFLa2pJK3c0a01Fc0VpbXdXSk9HRUxGelZ2VVhicktDR0RaaVJNaWVFSThhMENtR3Izbk5YWWpuTC83TXBsMEFsbHJtVjhCdjJCUTduek1hL1J2YjEzVlY1U09DdGdyUCs4YngwVVlrQytNZGpOSS81cnlmSWk4SUYvMk9HeGRtTlZ4L1d1dGE0MlNpMkF4Lzd2L0dhcld0aWlrc3YyQlg3YUxQblFhS2xlUXdTVGRMZ09peDZEaW9zMjBacmZPRnhqSVRna0dxTG5iZ0hyZ1BPdGt4Q1A3WmRLcU9pVXRCNnhZbWNuak9FZnFNelk0MC80djU4NENOd1lRSW9qNkZZZ0tOQzl2N2pvbW9UaTZCVXJ2RXBIcktadmVnbGoxVldsaDd4ZUZMVG9FTmsyK3RJSXcxbWhHdFlDcUMzUVNycmZZcUVtMEtkWU9mSHphYkV6ZXVPZnZ2MVNPTGxWUjVWYWxIUElMR293LzJ6M1dKWVJEVDVIdHYxRTBQSHJDbHd1T1Q5S2t2L2t2bnA2VTRaTW5vVmdrSlczMnBpRUlhQkY4bTNOd0xRZXZ6OWtQWGtvUldqMTVZOXd0bGN6NVNwYTdLeGw2SVVTdThlUWxFWWVYdG12RWRiVmtLL2pzcWN1WCtpTzd4YkRpb3pXdFJ1L0xiZXl5aUpYUnhGSU5VUVp4SGdmNklScWlVaHl5NEljdjlKU1pDSlIySWNucFJGTTR4eE9TQU14dlYramdtWWgxV1N5UnpWQ0tqSUxpcnBoY2wxL1l2WkpnVHd6QjZ5a09yRUZNTENDNXR5d0czU1AyQVN4RC9Xd2lGaVIxTVd0bkNZVnN2bU5ZMnBhSFBVb1dNUlN3aXRWWWFJbWQzQk1DbHNBd3BSd0RyNG5KYkZ3bzJuRCtFeGV0cjdjVUxodTdOeGlpMjF0UC91VmRIZnRvOGVzT3dPTzh1amFnQ0liQ0dEL2FoTE1tY1Ria2N2NDJhVEZzUFlnV1ZIZW9JejNpTXJmRFdJZlVZaTRkNDRsbmJ5eHc2U3ZiQUZxTytUa3MrZFZCUUJHVEJyM05kcVRZOUtKRkczTUE2NVJBaG84UHlEYW40YjJPQmgyUEFMYUIyVjBBS3BqY0pZY2lqaXJkZGdrc3ZRUFBLU3ZEOUJJR0lGVVZGY1Z2RUd1ZW5NVkExNnRsSjVZN2pjdG5xdlUyS1dLcXg0VVNTV1oxYlNlM2hnZjU1aWtYTFVGKzFyeFZZZjhXVU9KVGJzKzVoMklVMUJ2KzlJdGpXUVJIdXh6RnJjOXFIRUdnQ2s1OXdvVFR5Y3Z4UktJZS9NazMzRURsWGhiMGZTM3lnTU9HbkFnaVJCVGlVeE9sZy8wV0YrellsRjBObWc2eGNHSGxCTUJtcGJYTXBxZmVsN1hrNGlBeEZDOEgwSFNEei9veDh1S281M1Z5YTlMSGg5ZHI4VU82M0dIc3IzeE5WYXNwaHZRV3dCNVM3UXpkaVpadXVPQ1U4L2JLWU41WEZ0Ly9ld3draHdHYS9uNkdIRytYd292ZzlPK0xpNjRlMWZwcUFxRmlyVitLSkxiV1hxajBrQWk3emxmM3hleDhveXJ5aVNlbFN5dml2ZlhJK1JKd2xaaWptdk11ZEVWVnhSRFZ2bzBTMXVrdERpeEgyWC96eDlUYVVtd0ZwU2F6L1FGRk9CWFhCd08rc0RELzE0RHZ3b3FzRUtGMGFNOFNqVlBmYmhBU2FSTm1QUzNpVlFROEkwU2FKWnhTckQyTFk4bTNVc0U0a3JzSUg5SWxXU2pyVGhrWitYdnJTcU5jRmZtd0ZyY244T1BGU3czNWVuMWdaWUVGbkExYitDOHEyazdYOTZ6NXRraVRndlBBNFV0OUVQWlUrOC9Wak15RWw3WFRpVGJUK0tJcmYrN3MrMHlrRDZZcHZORU54SWJKdjZwUk4wVVMvT3BJRS9lNit1VEcwK2VJRWZaV2N0dzZQaFVPbWxNTXhtbWJ5OWhBTGJFTTJ2L1JlcVh1RlJSWHdkelgraU12aEM4WUhlRm5EU3J2QzIweTBLRUY4bUtxNGRpck9hbDljYVI2bkg4dEw0NWx4eXBiTzV5V2hEV1BiNHVqUm1VK0tWWm5PejExOVRsakNudmJoUnE1MXA1VjFVaWxXbDRjdTVyUkxrNit1QysxaVR6OHlLcHUxMVBLWDFiOFY0c2pEVUR5amVFUEk1VjlIL1JnQVRPYWEySHkxKzcrSFVrdFF5bGtDWEtwbXBvdnlSajF4UnJzRXFKU2JIM1ZXOFJKK082VlUwclFZdTJEZlN6U2tpMXNNUmcrbS9GQzkvTlFCQ0txV1h6OHUwa3BWUmh6bVhjZjVjd3BaakZiMGlTUXVtK3c1MHE0N05laWo1SEQyc01yZFFxVXlaWElHNlZuWXd1NVZ4K01wK015RzVoRTlaTXFESG4ycXNhR2tOOHpxWVFBbGllQU42TStwS1Y1RzhxSUVZdlRidTVxWUlBYVFlRTNLQ3RCb0Q2WFV2V2djcVJESHlGc1pVTkptNS9NTjVkc1ZaaXlEY0VyUTBJZFdCbkphTjlYQyt3aEVoYjhTTXlxL2lEaXl4TnVZOHJhR2Z5dlpUS3dkcDgzR0RoemZhZmV4VENnOW1ubkUwV1ppcExzTFpuSlJadS9ncjQrVEFWanoxbXFpZ1ovSDBROG9KRFJQQk9oMGhENE9VTGRaaEt0Z3ZqOHJVRVZsYkZ5SXVnWFNoak4zWm41T0ZvOWxqWEJNcmk5WllNc21kclhpN0VIeTlHYnFtSnBmeUNZQy9ISUpMNUJLNXhGdFNPeWFwcFFOK01GMG43aVRMaXJpTnhKVGRqM01tNlpCVUQ3c1F1L2RKVXhsb20zNWttcnFrVHpNTndhb05USGNkMW8zRjJscnQxWE9JNUx0TEx0Skh5YllrUWVoVXArYWd2cG1VK1VGRUJ5UXZCbm9QcTFUVGpsRnpwZlhpQkFyNzlVejJGSHNCWC9QelJJRWdUTE1SclZnN0Q1dkpEclF2S1NVaEZpaE9qRDRLTGhtaUE3bFFHZXpqN1V1MHQ4ckRxVDI2UzJGc3BPNWJrNTBNem4xL0tCN1ZEZ0Q0Wkgwam5HM0sxTkxGRXYyWS9UVXh3dXJzRC9tLzc1cHd4Ri9XaEYyTGIvdXhxczRCT0gwVHZ6NURtRkVWQVljQTBudmlhWUlTUzVUaC9WQWJyckpVajd0c0tPbk95RlFMbE8xWmx0QzBiUngvZHZ0Sy9pSHZXRHViQkRRTEJEL09oQm9DZGZocHFKRUd3ZU5uWUh2WUhTbHR2Y1dMcHUwQWw0L3FqYmxaa0lSQVlzTFJUenNlY0NVR0VMRU5tQU1QRmlQMTZXZnpUWGpKS0Z4Q09iMnV2c3JIeUF2TGk4Q2xvZEVxT3JRcTFRMnF2UnVFMCtIOXVlZ3d0UTc4eG1kWkhwUDl6ci9Qc2hlcVhrNnRQSG5lcExYeUNMVDlsREhVelFUbHk3NFowMHlsWkJmRHY0T0VZdkdyUU5HSmsxdmxDK1pnVGxKSGRsdE5nTWVDQ3ZYMUVsbnFxZkNIV2dqY3JPazBOV0NObzdsbTFjbjU0RWt3SHVkYmtSaHB3N25aM2lpSllySW5PYTVxeWFxTEFnakl1cXV5amVybEVyQjFyZ2RULy9YYXJFam1ZY3ArRUdVaW1rNnd6cHhZcVVvd0V1UmpNbmIxL0crM1RRMGpJYUpOd2liWHdGcXpBWWovZUJpcyswZ1RGajd4dzQyMEs5UlNCcU5Na2w3cE9PNG50MC9OTGNCemlYdW9ITDJYamVFV3ZmQ1FxMzQySG80d3YzQjduUXFRekJxaTRyQzY5YkswcmVZRmN5QTk3TzFYb2plZEhmeVNtdkkvZnJEQVVQa1FxaTNka2dackQ1K3NhMDNzM1h6eUx6bFk1NlR5U202elJiU1pHNnBDNlFQNnp2NzdYMGtTbGpkTUp0UG9yQk41cVZXZnJkU3Zxc0Q0RHA5bXN0a1ZDQjFPTTNVUW5iSU5iNHZuT09ENEhCcUFRRzZkRmlsQlRHeXZVSjh3MDJiRnNhK3p4c3ZSMFpEMFVNRTVHU281L1p5TGJjOVBXYktHMDduV3pzVjdTblBWUGZpbVMweWUxbFVPaFVoVG9RM2VsaVYyZCtnWE5FZXRmZ1o4K01rRkoxdG5qcldmQWhscUJkNTh1K3pkd0JleTltTGM3QWZ2K1oyeTV4Vkp4RWxKMFl5QnpmcmpON09jN0tXMlJKanByNGdoUHNuVnVIblVERksvck1JR2t6OC9vZ2JpWHRXdjdscDQyc21OdzNhRjcxbk9FaDM4UWlxMHNIN0ZjZ3ZuUThTQVhvOUlZZUJIWjh3cGxhR2tMd2VBOEp3QkkzYXFGU2hyNi9mVkNUMDJub3lwMEs1SE92emZadlpiM3FrUnBhSWM4bS80ZlV3UkUrQ0NpL2tTUFNDNTdtekhFQUpGQ21YeFpkUWkzb0JEUEdOOXJDanM2OERXRDh0N2k5YnozUnUva3cvcktEbGNiekJEWWlWZXVzWCtGSFlCdlAwKzljQ0NvcWI5dkxwb0RHV2NIR3AxMXVuNkxXdVJwazJ5L2V2SDV1YjMzVGRldXBhWE1jandsY3J3WDNSck1uRnhEeXZNTmhnb3VKNGs3L1hPQW9pbFI4WGUrL3hVM3pLTzNkRVhsS0E5Vm9wUnAyTWIwWlpSM3hrdG9UNmU1MEIxa3NKcENhbmorNWhoYTIrS0VXb09FVTlMYk5meXNxSmJjZ3FVQVpSM2hBa1J3a1czbFMvRlBuL1dtL0F0QlV1WkdCZVdWQVF2QWs5S1gxa1YyS3JrejQ0N09EeFBoVGtBK0VGVE9SVVB5QjQyL0dUM08xbnZvakVWNTlub3pHQmg3WmRXSENlV1M5WXdtYjFPSmxibnNua1Q1L3VGWUNHT2tkejJOcmdlcWVVeFc2SHBGWnpzNnBNUG92VjNoQjBrTzNpMVJhSzloZENQZytFVTJLNUlVY3pxMElzVHdRejZWYWFpSlJsWkg0TTM4TmpkaDRSYU04VTduWkdzRW8yVzFsdEpMMm9YQ1M3N1p1cjZzRWJ1MW41aml1T1FhQVp1TkloOGZTSnBFSWdzeHp6czBHcjJ4MU5RQytRejhrb2ZKQ2RxNFR3R1ozeHVUMW1ydDUvSXphUjJrb01oK3VncDJyTnRQZVJlWHRvc0h2YTI3V1BaeE1ibHJ2ZGVUdy9VZHhPUnFPWVBzaVh0ekF3bFFoWHo3VGlMTG01T0dINUxxTUp4M29Sc1o2WHlONmJYWjNQRTdBOHdJRWVxUjNyKzFtS2FQbjJqNTNuWmdCNFlvZi82S0RKWlVwWHVRa1FUNmlVUmdlTVFvczBzUVlKbW1FQ2FlWUJNQk1QcnBxQkI2TXQxS3phdHhyanhNRTA3Tmd0bmRBaERaemVZVDA3bUlyd1RiQ3JwcG1jV29EY2hySGR4MDJVUVpsOUI0VkxZRUZUV1hGVEd4d0t3WEJCMkJnMnpKbVcvcTlwQkF4T2d3WUZ3bDVKUTFCWldBS3BFQisxZGpneCtjNHR2cUxuZHc3c0E5eXgwWjRyTEdpMmVtem41a1VmdnNNL28zWVpmVmtXbDBjSGJ6TWpYNVZ4Nll3REYzNmdxdFRjd3R1STd2dGNiOFl2OTJjYkNSK2M5SzU4cWxtdU5tZUI0elZybEFWWUNEdXVCR1daQVFocEdpUGRNZ1ZNcGlhbU5iV0ozdmUyQlh4OWxvWWRZN0lPaDI1YmxEYk1MNFZ1VklIM3dIa2ZIRG1PdS9Sem85RXV6MzhZQ0VvNFBWN2hVVnBtbjQ5RVZXcjJzcWloNG5EcG90ZGcwbktYaFdJU21kWkNhOUVSc0J1ODJibjhFLzQ5UTFtY2pFQWRrWlVvK3hXR2plbEJvblJkbWd0blR5THBxOG9hMisvVnJSdGVXbFliakRvaUNZZ0dXLzdKdExEUnJ5cXhmSjAzcko2bnJCSTVzRFNNTDZTbWtHd1hEanFkZlZvclBHOVlEazR5Sm8vT0pJRjlHbERHWlNub0JrcVpESDZDaUtteWlORmtQSUFSa3FCdUx4QWNVRVlTbGdQNEJBcC9GR2EwQU1OeGc4bGQwRFByN2hFMDBmVS9HNVdreFZmSUt4OHBSRmdQSGkva29HeFZLQlJsb3V1blIxWjNCTUlQNStvSHQzRGRjTXFmcVcxSTlBc2F6cldraUM5NWFIdnM4K1gxYjN0anJvSzBhUS9jdDZMK3ZYRXFzNktRZ3hJRVNaVm8xUXFxdmtjV2Vic293ME1HaTBZZ2c0aXk3ckJ5Mm4ybDZhZjJVeWZLV3RRZ05jcENLZWI3bVUrOTh2eUt0Mnh6cmphM2dkVWpUZjlCK3JIblhob2M2RVdlaGJtMXNlaStidmlzK3dWSjFTM1E0UlBJUVB6QmtRWktXMFhpdndtNUpldHZoYm1ub2lHeUtnZ1p0UlBZb0Rhd0h4dmZKN0NxWUJkcnUvVlJpWG9vYVVjUjJYd2pMOUNLUkFrRzgwd1lWek5qK3hFY1pyUktSZUZxSmxUdjZoK2N5a1FhWldkaFpTTjFGenJhZDlIQ1NDSStub2l3bXdVQWtTQ1plazRuQjNReW1NTy9YUkpialVKbm9DWHV3T0RUdzllc201MWVqT2oxUXh3NUk3bGFLTzNiT1BTd21WNzRuWDFlbGRFY2lGSUNtSWQvTHdDZFI4WW9xZ2RqRmdIdEZlQmZZYjZOT0p4NlhaR3V4RjllUm9heGRUQWdFNlJwam4rVEROTDQ0NXFuRGJUVktEeXBPUDJTa2pzQmlEYklwREFtS2hoUGdQWXA3RHNma1RuemRGc2hoYjdhL21qK0ZoTmQ3WjYvM1JaeERIY01ZNWhZa0NkelhIRjg0ZnZHNSttQk9Id3B2MlFOU1ZKZUJ4N1lEWE5wY1hMaFVRUGkySnBWcFZYdWJHMFJ4SlVhV1NtNzFKRVMxenZpT2hjL0J3TUVaVlpBd0xHQnpqUTh2SkFpUjlVYVpiYXVnakhydldlYlJKZFVaUUsyOVUzNUllRjNKclI4N3AydTJVWUJDTDFucU0zTUoxaWZiTWExcTZHaUc3Y1Z0eHArWU1vaEZxa2hCaDVDYnEzYkJycWFWUEFlUDU4WnJHbkRsTkh0QW04QUc0SzZFajdFRmRQMGxMUzNzeFd5eVJLZjdIQm9YVGN6WE1ESDBsaVBjdzZCYmxubHRQN3p3TnYzdmlyWC9ubElKMk5LeXhaVVh0enhDRnJWMmJsRVBNTFNzY21NZ0ZpUStzUmcweGdjd2VCYzg2QkcwaUlKT0RLVGphNlpYbzlIRWlyZUxsL2dlMzljMWx6L3NyaTBvaTlmcG5xOVFXbjZjTDYybCt6cVREekdQVDd1ZnRBSGkxbjdrWm9JakhzWmV2WnBwdEM4dFVvV09wL0JCM3RFZ2FOUVo3SFl0QUFZL1oyTXFHWWVhZWdWNXJYNHFnSENGRjlwbWpBUHNHQmZ1bXo0ZURzYzJxSnNSbENGQTZqTnBCcE1TSHR2S3NxTlhhRHk3L29NdkJERXZuNFkyTXVBbElOSitvMkpCblpNeHoveEFNV0NXb2JDS0txMEgwQkJMcUVXYzVncE9pdyswRFpjU3NKMVY2cUxQM21kZm5QVTFDZkVLeUR6WEdTU0xXaUlEZ1pZYjd4Z05yTzJ3STc1MnQzVnllbnRsSWFCYTE4WXJuRkhTUnNROEJBMWQyKzRUYmRMMWl5ZU1Ea0dZWHFNbG9KdEZoRitIMUcxdEwwRUs4TUxNVGVLRk1GT0dzbStuWDF5N3M4U2FLdmduczdFZTZ3UXg0bFplY0FwSUFEUUVUMTV3KzhMdW9WaWxEaXNvNm95bzB5aEhWbEhUTHZ1QXgrWi9WVFVYUzVUNGlvTXM4b2prajQ2aW9KTkUvUVo3NDVZWGhkNENFeEZ1NFUyVjVQYjJUM1poaElnQk1mQXQ1SlFpbjVvUnpiQzB1bWkxbUFlY2ZOVndjMzl2RklVYVlzRmxvN3NyU29HK056UlJ2ZzYrNUtQMmpyV05MNjIreHA1aXJQb2tuTzd2T2YvQ3FlWjQ0T1JEc3NsOXdidUFBZWlqbHNBc1ZJaGZUSndmVkM2SzdmcERHYWRmeE5BZUIrc1VsVFBPRGQycUl2eDFVeGxMMCtVdWNmcEVIL0wxVXBWVkQ1Yk0zUlNwNi96dWkxbzVnT3FCeVc5MFJIajJqTUNOVktGbHBtdmpMN3VXRFhxZ1pwMEhtSmtBa3ZQUW9KT3dwRFF6K1ZKUUV0dmpDUWMwRTV6S1FyMUpWcThrZGczemZ0cFJWcDBjWUlxWTBEMWNRSHJRdmlOamt1cVpWQytXRDI3ZTdjUkFQSElVMVBqUng1RnBGODdOOUR2ZGxyS1VmSHZYMGF3TzhPd1VPaXBsdUpIWjdHUjQ1cVdiWXdsM2tPNXNTYjNzNzF2VXF6OHZzYUZQWjNtU2JuNU1DQ1hWeGtUNk5EMytWeU9RZWJmdVVDNGU5TTB6QU9QYUtLSHpOck1sUG42U3ArcVMyM3ZRc2ZKT1RIUlBCamdZcjVpK1JEcWtJQVpaWGJ1WFRidGhjLzdEV0d0ZWYvcW9PLzZEM2k1ZHh5Q2s2TnJCOElqeGVUSmU2VWVyWFhSZ2lQYWtqQ2t3ZW9jaHp6V1I4T2pUK0RnRVR3djBZM0h5R2RWSENJVnhTaFNNTzkrN2pJaHhtWHdySDdGd0UzZ1IySzNEN2ZSb2JvN0IrRkFzc1ZnZHlDaGNId3phc2gvakVPU0Y4YllCRTcwWFlmdmpaeGRTdm1MUFFxM3laSWQzVGhrOGNTSHNLUUxOeGowa1d1L0hYdHdHZk9aZ01LWTQ4WmdjZWk5enE3N2JablVFMEFhNjFpd1VQb3VYVXFKT29xRmIyMy9hR1RWM3liR3lMZVYzakg2SHdaVUoxSlkrbXdLaEJBOGtmSzkxQW1jb0piSU9QSmxnSHcxUU4yb2lXY1Yrei8zSmE2YTJueHBVYzRBUHZoREtyZDVPa2ttaFY5Wm0wN3JidWFsNDd0Z09pSDlGYzNhQ3hCN0ZyTnJSeU1QNWN3bnQ2T1pYTEJZMnVycm1PRkdOU3VIVDBnVnBJVENCZE4yYXFTcnNRWHVVMXVpcTV6Y0pKdTNXZzZ1MVJ5MHIxRnpOSXVjWmpxM2lWZjZvVHBOcVJRWjVpblU3WGRydFJyZXVWTkhWUDJRcWVZdWZxcW5OWVRQak1vd0xCcHRuMWFpUXk3QnJHUVpER2tjRno4WUd5ZVNZa2lrNXJVVWljVndrQWRCRS8wZHpubkVtSUVabWFzblBsN0ZSekExSjA1V3BxNDRWSDAyUG1OOGFSb0xySUtvME44aDA3ZFk0TTZ2QWgwVWNVWkovQXlTMDA3NnJpL1kyVGQ4aE1kNHJNaStxOXNibHJ1WGpsKzMveStFUUN4MWg5VjMvdGNNOVVuMksxbDU1QmZCeXNmUHN3a01ZaW9rRHp4V0FBRE1XbVYxWENhcjQyc1oxMzNtTmgvMjhHWGRxZENQYmw0b3JoTm4wbCt6M1Q5R0xVU3luWkoyWFVFVTYyOURGc1JVSm5ZSjkxUWJRaDRXMzQzS2Y1MEF1cTY0V2pjclU2Si9WakJTNHdmN2x0R3Y1OWd2N0lyZXdMK25rQzR1dElLa2pESWZtOVVhMGt3a3pETHpRTEN2MUtLTUU3R3N1amVkZEgwUHRZVUEvQ3NvZDZVN2RyZFlKMGljZy9SdmU1U2xWNHNFQ0Rvem9NeVlOdFMzZC9lZ01qSURqa0o3bHVTR2NiOTYxMHJnQzZLN2E2dEVmL0R0TE9jUUJhdnFydkp5VUcyQXNxSEQ0ZDc4bTFCUXdvZUg1REVlcHRzVHhEeEtkOXl0ZWRqVncrYkJPOEQrRWhZcjZpWUxibU5PVllPR0UyWnRldG9iUENRR0xvU25RZkt4eUtDU0ZCTEI4ZjNpTFEyL3h2cjRZYkk0bTZhUmk2RXVnWGlrNVkxSkZxMHNKRmlhbGJ1MGgwV09CQzFlMTVGSU5mdE50aSs1VHEyZkdqeExzb1UrQjJCZmtvT0c5T2dwUjJDOGdNZHpCb0Z6SHYrWHRMMXZvTjMxYm1oTytxU2E5VDVmQjdmYTJ0V21FTGN4ME9ZTkgrckdJKzljbWhYLzJRdHcvcndxTkZ2Q0VOeDdRUXRQVFRaNVh3VnMvQmR1OU1lK0MyclRKcE5EalVKcVluZUQwdjY0TzZGbkdLdUZEcGhSemYrNm5PdFZhUFlmc2dVTWN0WGRvd3Z5QlJSVjI3ckd0TjhjUmRkdjlPcjVoeDVPWnJKNlYrZFBYOGwvRnN2S21KQkcxU3RiZEpyM3VWeExyU0F2a051L3VTeWp4cXA1aVFhOGc0M0VDNUkrdE9LbWx0aEt6SjNuWDBpMGQwekxnSzg4YnRMMXpoV0w4c3UzNzBmdVFNeldrUVZVbzk2MUJSaGtLZWR3Tlk0d2FOT2NXUjNYaVFEYWt4R2hRb1YrZWgyZ0QvaW05TTk5VHJMckJCUFJFU3EwdWQ4UHdxaFgxVkdTRHMxczJqeDk3anJqQ2Z3bE84RnczenRXNUJkRlcyV01oL0sxdmg2ajE2enl5Wk1EQTBGaTZGNWJxMEQ4OElGUDRGVVdpNXUxQVdjNEp6V0pmdi9sVWIyVE9uQ3dVSDU2NFFlNXNuRVZ1Z2tWQWUycVFKRUlqQ3ZNaVNYSzFSN2F2SkhvSWxqNkJWdTRDN2NMa1lENWlVY011ZmpENWVjTFNyMjRUM3dQeG9TK0JZdXhFK0Zkd0tsc1hmT3lFSUE4NExKWVFac0lqdGJFOWd1UExzbHQ3UWxEajNFTTJ0TlBNVkZaMUVQWUNENnM2Qk83UGpkM3ZqVmFaNW5DaktBbVMrTVlFU1JnZTI4K0cwWmFBcHF0amJyWi8rK0lHYkY4Zi8vK1ZzQ1lKQzVCdWRnYzRCQ21pKzBaL2dHSEVHeVlpSW5aSVMwaCtoMnFKYVlpeGFPamFqYUlqWDhIRHZkdk44UW5sYjMwck00WEJ1UjhITlBCODMwcklKenk1YWkrNkkveHNRckNWVUw5dUtvNWFTL080V2RXVHpGWmRNSHZKTXBEelB4aGFodlpkYzlDWkd1bS9mQjhyNXVna1RtY2thWUpONTJvWnlDTGFlQTZsMk4zcVNmSmFPQjVRK1k1ZjJrY0RzZkMrOVhTTUVxc3V1Wm80b3JqajNBaS9aNi9TNXBKL2FXV0NJUUJBU083R1MwejZ1cm1ObGpuMDJGNytNWGliOUpaTzBPTVdaZWEvcmhJb3ZjRnl0ZVgrMkhKTFNXV0NmbGY1MXBPWkRlaHBta1RORXQwenovb1EzbTJ1M0ZTVkJ0YUlUYjZvZEVFWUd4R1Q5QnN5OXpTN1BIT1BRL1YrdUtDY3NMV1pmRlExNVZIL3ljbFROZUlDNmc2SVBDeExMUGtkUTBtcEF1WEtPZ3lhQ0krTnRSK2FEbjZCeVlNNGRkbklnMEdWU1JvMmFIOUFYcmpZdlJpVVFQM0tTZWd5TG9yaTcxY1JqRUJITU5jaXZKcGsvdGVvZmdSNFFOa2E2eXFiNXIreVh1QTdYL3JGM1JvQlppOXRWdnA4YmhWbHhMeXA1V1FtOFJqQkkvZDlSNUhwckNlY0JLQk9EYWZvS3J5YVlJdmVUUmQrb2tNN1I5c2sxN1h2N3lGWExHTk5BZFlYZ0RtcWNxb3cvVDVwQjFDWFQ2bENhaEZmQjZPM2lQMGIvSVZZTS96N2trK080VzZNV2FXYmxrQ1lTNXBxL3FNYXdsZDk3Qno2T3lIaDFUYklhWm5QWENaTUFsNngxckQ5WjVhUzM1cnk1U01vRkJERFhrcHIyVzhaK2xzOUE2Z3Juc0puOEYzNkd0T0lMNFJ0a2g5MUJ3NFlQU1VDb01YNzhETVJzOE8ydmM1VW5LMGRvNWl6T2d3SzR0K0tKTEszNkUxQVRIRkNITVpHMENYamVwemVoZEpFU1BjR0M3V2tpQTZsVjBxTHJPSDZoZWNWaFVuOERHajFGOFlWMzVzN3RqblJhRnNPVHBEL1doTVpncWJFUWZodGMxMUFOTFcrTjlSaHNnaGhOczZiaWt2aTJqYWlCanBHTXp6R1pCc0tMK1NnNmxQUEVDUTZhVkV2UWJWQTF6MHlEVGphVU1wbmdBNGorTDNyRzB6UjUzNDlUSzJoZWpuYVlGYS9KOWJKN1BTendRZXlMTENJOWhzc0lQaGc1ZFA3bW05NEFSdEs3c24vZ2RScGdTOCtEN3gvNUpIMEsxbFUvMGh0MGVkcUk2RGY2dk1VVGxuQWhMTEVSVk9TMkhxMTdDcWtVYWVnOGNmQU1yVVM0eHZLaUkzV0ZFMzMxOFR4ZDlmNEc2MVdwQWY1UU90Q2RJZFV6VWFIaGJ3OC96SzFoQmFtY1RzZWlESE83MVk2dUhkclEwbys5dTN2czVyNm1iMW83U0tXakI5S252L0JTZlNqSFd4RjJ5RVNkOHBMSkU5QkxqenRiRlFtSThwS1p3Y0RVcm5OWnNzVlhXVG1WbGlIZFNJdTB3Vm5rTlNqQ2lPRjJ1cHdLZ2h6Y040MmJhQTMwWlpVSko5Y0NNblprS0JFeTluUi95a2lVbUg1Z3RtVTNZdHFvaVJFU1VDdWxQTHVPZ1JTS3ArMUJObTF4VVZqOTFRcHI1N1R0THVYbWxYZy9kVHBtSmdvVmlmcjV6OTVDVVRoT1hwZEZyN0dyRFJTdW9hUkpmNmVYRlZabnhUN2hKeXIydWxEZUVyRlBML3RuekRWb0VWNUhCajFFT2RwTEtQRG0rRUQ4STZtT3paNi91VUhBRldwbHo2bTFtSWsvTUp4a25hK2oxTjJSTVJtR2Z3MWFhUmtIR25LMDNJeGQvYWh4eFM2UStKTWs2eUhhVjZSZDRYS0FDbkhHSmpVcG4xT243bHVia1NzRjZJbmMyOEJQMzNBbWpDNUFTV1BkSnpPQW91TXZCNlQwcVBubGpCdUlXNWtBWm5uK24ydFlqUENsOW1CUU9iYVlQMFlSVWE5c2g2b1BYN2M2a1lRTWNpVUpJS0YxUDJHOHFwdGhVVjhzRDJSYUhhMWI3T2JtNU5NcStzNXluODZRTFN4S2xDYmhkVTZVajVHZkx5dEtYYmFPZ2JqbFJJNkdqT1pkb0oyc3cyZzVIcEpRNEdnZUtoeTRwU0RvNEVCaVRBNXJYMSttdG04L3c1T2tnbHNkN0JBTGI4bStiRHRJMmJGZ2NvU1p3aHh5cWlFMjhJeXdPYjViWm15S0JMRWxkektpNGJUUHhSWEg4VzM1dFAzTXFrTWVueTg4K0QzNGRwb1RudXJZN1R3SlZmZlJndVh1QWlQUlp6ajRkUzNKVTY1Uk5QaiszN1pCUnFUeHUzSWlUOWVoWnlhRXFBVThlV2JKY2lPWU5JZi9kN1hEMnhxb3FFVldJME9ZRmRJbEViTmhyc0ZlendvSlFkbWllZ0lSeERrVVNKekZxN2wrcXptcHdRZ1BwNTAzc3lnY0R1aGh5MDQwS2NBbVdjWXhrY0FGNUoySDJlalRvZTJvRzlxenFQY3ZUdTRwUlZHdGMxdzdtbHdtZVdBSmZTdjVDTDlnNTRacHpMejd6OVIzbThqVlRTQUpkSzFhUURIRVkvMUdTVisyYUp2YS9TelRwRFJuVWhMeGlMV3FzRVZiQlYwdkdpUzVPZTJEYnNpeW1pUWxtZkgyWHJTMSs5NFJKSkc0NGRrSGl5aVVzZTdSc1NBdDJJdVZQVTZzTk9EVEpFbGlVcFc1c0g5UStObVFxL1RvWjF4V3IrbE5RQkg4ZFVyYStRbnMzNUtCaVVUcGtvTXpXa25OdnFhUTVtSTM4cEIvYTdsTFlNUGg2bUdmTHczanYwYnA5a2tJYWNvVmU1SGM4TC9sNFFSWDlBbWE5WTY0Zkc0LzlCS1hIdVJQU2JqTHBwMURwbFhLUGNFdURrNm1kUXJzZS9zeWY2SXJEWE1PcFBqL3lvYUZOa3VBdWJDUjh5TlYxQmZ5T1FFK2ZodjlKYjNTUEpmbUsyN2JCV05OK2tJNmtkY1k1NjRFeEZaVFh4YnVJdDZ2ZlBadnM0VWRubmR4c1hHZ1hlU2JxR01YbnpoNUMrWWVOeCtvV3ZMeHQrK2ZSYStRbURQdEFST2R3cVZEMGx4TFlmbVFZOXp0bGNhVkhpaUVOdzBJUzFYYk4ydWp6NmdXZjM2dVhXWTJ1KzlIT0NJN0tSMDVMb1FSM0c3UmtjekRpVnUyS0JwOUMvelM4QUUyNDdNT1h0WTRVMS9MK3JCbWtWb3hiV2JoQnRKM3lYdmw4M1VjdWNveG80NFRwaE1rZE9JT2xMNEcvVk9wMTVCbWVyTVRnOXR6N0hHQm9RK0JQYUpWay9Rb2R5Nng2SUh2QnBZcUdiTzcxT05yQUVSamdlWU5aMkgwcG1NYURha3pXdXFXT2FUMWp1RjZoZzBWZzBzc1VQQTc3Qk5lb3JRVktRdWdRcWNyajM0OWZhenJLM0VJSzVXcno4cm9NVnhwZVdmbXkxNVNHUW16eC9BVW5pcEJUeVlRaTk3Sy9iZkJoNVZLVkoydkJ3M3ZnZmZyVkV1SUNlTE5pc1A0bTlFNzNFUndSZU05eU9TNjE4NFB0RUx0bGNBMVhhQ0l3bWpkU3FsVTdEWS9YUWlNdUxvSHlySEdMOXR5dlJBVGFLTW15eTAvd3A5U3F2SlkyNjlzcHFILzBzYXVDVmM5dTRCd201RzRJTFp2dnk4M1BsQXlqMmVnU3JOSjdPdVgwZFdzaENqb3JkTG9Qc1VmTXJyY3RvNUg3TmpObFJCTnBUOElrSyt6NER2d1paRG1kWkF3UFl3OFpnNFhKc0tIMy8yRXAwc050VTNzdmE1MU43dmVyTTBCMXpaQ0JOU3RrcnZrdDNVcHQzeCtzdFVQOTEvcWowYmVBOHNyMzdLdVBPazdIMnhTMFY5M0tvV2wyV3ljUWsvVFNReDJlOW1FdzhhQzByOURTNG1wdkRVU3lPUGpzdnVwZDlocUVmS1VlRW9EN0NtYnBmYVNDR0RxRXZVckFsWVJQOWtsblRBd2N1QnppSG1OaFdjS1Z1UnpTa0c1YmFNRTZ4Y1hpRGlnNEJIY3FGSk9EZE5Hak5IL2gvTGgwQUFWc3JQeTBTNG5xOGcvNi9FTjgwbWs1K3QvditmMjBwTzN5bjJwRTZQT1p6dVd3UTZndTBOUzhqcDdjN2FST1Zpd2hQZWZsMDgxbWwyMVYxTWd3akp0K25YZmpGNkZlbVpwOHR4NHRaOEdnQUdUL01wam1JK21UUnZBUTR6TGE1V29ub1B4ME5VdzlvRW81b0pYTmx4L3NBTnJUbGRGMzhnVVMzQnZyTEN3U0cyYWRMTytVZTh6UWowb2loelZXSXpCNU9HdWxtdkNmd0hDVVNpQ0hQN2t3ZC9zK01WY0ZmSkttdkVUby9OUWNoMExnQ2FkNVVOYXFBZXJrT09uUFVhUXVmT2J3U3FFRXdUUWZuTjNVOEw3d0dkUUZVK3R1cWlVRDQ5cDJFcm1DVk4xZUl5Q1ZvNUFIL3RuSGR3YXg1L2NxckVreHJ3UDBCL0tQN2tEc1c1RS9Na21JV1l4L2NrTFpRblR0UnY4QWVrMmc0dW9HcDFUY3RHWkRIK0xCUkVMSW9INTZMOXUzSk1rSDJySDNEVVQ2c2JUZU5raUREVzdVZXgzYkRUejVVU1NZR2lvbjZSN0RlaVhsZXRhb0crRFpRYjd0R2VrU2J6TnhsU1NIZ0R3YzRUVE81RFd5akl1OXRhWXlwMHJTYU1BUzFRYXpNbDJVOUs1N0RVV281eG4yeE9LRDF2OGp1dGpLa0xhM1pscW1UZUdCT0lBK05kQ3lhTFFyWjF1aC9vK01hdE9pRWdyM2xlUUc1NXdZQkdzTk4yTVI4aHlpczcrbkY0cm1KS082VnhscW5ZMGpTa2ZCKzFiZVdNa1pzNkFSYmN6NFdtS3h6OTI5ckRjUSs4ZG4rUFp3bnZtTVc5OGtrckZ4K05EdUcvSWZwYTJmMkEzaS9GYkpzTklQMW55L2Jpc3pkZVAxNHZVRDdNZGJiTDg5UjVMSUJuQ214SnZSaWY3RTB4TkdHRlVObHNoT2w2MjhKaVExNkNQNktoRERwMWZ2RWFZc2RQbGk3cnp0aW5LTi9DTDlUUlI3S3dGQmw5cWlMSTBKN2NXRG9aYWN1U2x3ckp6RHBFYnQram9CWUFXTXpVMmxSVFY4MnlMQ1VLdjd0L1RWT3l6WUtGaVZGTU50QVpuenV6NGJ0eVl1TzBNM0t1cWcyeTgrcklHLzk3R2RVbXhzYTVjbDZjQnE0V25obm5yOUdhM2V0dkYvVG0zSjh3L2p1R3RvY01sS1gxZmhPUml2djdJMDFqWVFSVGxVYWJtTWV3L0x0Z1dMQ0JJZGgvUFRRZDRWdmI3SjdNREtNV3o3RG1RdWg3K0M5emo2SmFoTExQRkhIQ3pHUUhGOVdQNUZ1YjRwbndtMGJRcVdwSmJVSno2YlBXNEJmRmNlL3ZEeHBUQ25MeTJGQTgrUzZSU2piK1drSXR0K2RlU3B2aXhYK0c1dGRVaXBEaTVxa2p6aUFJSERaYURwL1piNXFMN1lqeEdFdlIvMEVNL0cxOG1zdDFjUTBDMnQ4cHB6VFZSNElxVjAydWw0bE85RTVZd2JKVVZlQWxsUXRHSGs1L2lpdDRnK3BMNVQ1SHNnTUE1b2FaMjJzdGtQZmRnWHJGVjArRUJ2aGp5dnd5amIwSktmOTZxdVdYbTc1bTJRRVd2MitrRTRpbFBzSHBTK2liN0ViaVI4UTJRVmxxL2ZWZEtjUFNtbFZpbVVLTERnbnlwYkhQSlpiaDVMUnIzcFhWRS96T2tSV2p2b3Iyd3RBUDZkMkt0ZS9BVWpGek1FNnRWYjJ5MURiZUozRnQ5YnF2SFNkclhMbGRRVUE1UFE0Vkp1Y2d1SUFKVlpKTk5KTHJzcFdnOG52S2RhellRU1JKSkhxRGpNR0xCYW1XZnc4MVF3UmJiNC9aVnZ4aVBua2h6SDBCYW1JMDBSaFBDY0FmQmpDTi8vdFBwd3FGcW9VR0JIZnppUVJvcCtOdkh0bXlScFhkUEhGeFpDTnZRWjJlcmhWV0xuenBHMGlreXlYV0h5VW9ZSzRyc25YUEZpaDF3NFBiVVdTd2FJVVY2MndkRlhFTFZ5WnU5WEFBNS9yeG5rN2w5WnJiaUdKS1UrVEdtRXVkdHlZRzBaOWxrUDEyMWpsazJNSno5Q0RsTjQyWkxyaTBFMmFZbjAzWlg0WlNHVG9WekxKM2dUTVRqRzNFOUY1TE0xb2xaRDlPdTdYVlR0OHBFZEh5S1F4WnFrcWdpb09DZ0JrUm9Udkk1cGpNK3o4T3pkT0VsWjFaZzVuNFRHKzZjbXFVSnZOZktWKzJFZmJRU2d1Y3k2VUJkM2NsbHRZVHl1RWpYVDFWd0xDNzRjSXVWbklXUjdLMktaN2Znb2FCQ3RFUTZLREM4Q2NKMFhUbnlDc3N0MktKSlcvWUZEZWlPNHBMWVpiK1hOWVJ4UHh4MTRtSFlVZWp5M2VMK2M1NGVXcXJTZkRKNE9kMmtvTDdQMVE3Qzd6OW9TZmZYbTFOWGg5NjU4cm85czVOR2lSUC9yQlJCb3Jmamx6QjlwTEpheW9RRkxxVFExempVRUJVS0ZpcnBIL3R4b3hQbE12SmhmWmh4d3JCREs4R3Fkc3hFREM2UU54cnJaT3ZCakxtVU13by9hcVE2bkY2OE9JMDA4U05SemJhOGZPQ0NYSDB4em5zY1F0L2NIbDdkeFN3aFFjOTZJYUx5RlBRT0EzZU44ak5zc0VNTEdlckU2SytDdjI1aUw4NS94Q2VhbjNFaGJNa0tGSFVMcXh5SWdoTlVmK1p5Y3Z5VkFUSXg3QjROR1BVRStYVHB3anMrTmpaZFViU3h2dk5mOFIyaUVKL3czOHRETUEzTmU1Q2w5Y1pzalpOSkdyeWg2bjc3dFdscjJ5ZHR5M1VWdmtwY2ovenUzemVyRmRBZVo2d1pLR2hORHZPb3JKQ0V6VHpWQTJ6SzdkZkcxc3BWNW03SyttbFZCL0ZuOXdnKy90TnFXSW5MNGlVOGN4TGhRY1hER0hTdFhGT3haMFJTakpQRjRQK3dBdUpwUmxoZ0t6NnZ2alV4dzlpTDBxTlpJMGtURFBKY2I0ZFpWK0RTeXpLMzBMUlNDc08zcFRJOTl2b0NLQk5VSVgrUmRCQ2RIb0EwYWlYNDlpSkJTR1ZVNlB5Q2hZTTFaSi9pMGlaTWVUcFErR3hKaTlTTzBuK0lreHEwbG9TdmtoR0lsWGc3NFltT2F3MUV1eHdwU25GVG03NmlmUVYyeE1BYk1OdFhRb1VkS1dOLzJsVk1vd05MVHVsMzNtKzZNbjJWNzd2ZUFLajZ3SForcGdiRjhrc2hXd1BubkgyVTQrYTJjZ3NEZHFPUCtxdGlKazZYY3k2cndoSkY0ZUxJY2RPVC94UlJPQXZpakVoMEt3d3dERHd4T1kzQzVuWU1QbmwrQkhHTFZ5TlU2b3RQVkxwY1RQY3lOTGt1dFhFdFBjTlExWnk5eE1BTGtkQmozOEtCRDVmZktUVEhTNXdUVllIWG5PM3M4UGt3enphdm5ZdXlhODVXMVJkTW5JbDhZOFNsYnhYK0lrc0NzOTJzbUE4ZjNBVkJsOUVxQ21SSnpmVXN0ZjExR0JGaW5MTGVjcDdmTjQrbVFuTURNOGFOYmJoZ2JlVmMwMkkvYUt1K1B1eUNvdG5QamM3aDAvWGxVRGlQcEhDSUhsbGtGOHBIWXVMb1hvYnRjQ29sMVhxOEp3d2lMUFlHZkFkRCtTeGY4NGhUdDFuY051Tm5QaTQ5cktZcUl1TXk5WUhUeUJEWlBwYkpPa01POVRJZVJFRG5Hdkwvc0cySW96WE84RHZCaHRVbDNUM2hHcGZtRCtmaENnbHZjODh4ZEMyeEtwaXVMRGRHOG9xLzBFb010ajFPUnhlS09jYlZxQm51VEhQejFFWXNoajhrQ1lOOTN1Qml3UDlwUW9nQ254cnM3azhDZEgyR1VnMEs0U0tZQWNWWFN5MjFZWGkzczRUZUtFcXNReEtpMVYva2gvMkFoYmtTeVhLQW5nOEMwOXFDQ3BWSWhUUmR1M05oTjhzalFEYm5qZTNjRjUwTFVOSHpKTUpQYlU4UEV5UHRmc0JLaHJQOWp0WG1rSEhvYVQ3aGFDZktXL1p3QTViWEI0ajAxQjNCOVZCaGZwNENNd1IrUitxN2xuc2RqajI3T1NOWTFzMXVPWEVScDdJV0Rtbkh0TFp1bUNWdUxSMnlkMTFMNDBxVENCUTFNcGlwNjc1Q29WRjdraE5wUkNXRmZwS2ZzMkNKb0QyQWFUMHdKYWFGRnM0enBoS0M2SDI4czE1UGVjVzJWSnRQSzVMTXpzMWkraWkyQmo2ZUMxVGREc0ZaMGwyc0FRVm1WUmxWUlg3Ky9DUk5RY2pNSXlTSHFFSjRRWHZSMnoyNy9yUlV5RUZWVzNpa1lZbnBzTDk2cmc5YitCeDBIbGtLT2VnTm5EOXFGZ0pVck9iU1JYUVZxTXQxc2tqL2E4aDZIMjNIeWIwY0YyenpjbmxaN2NoZlNOTTVqT3BlZDRtNTlNekxxSzY0bGpSQjZPQW9EQ2xXUkpYbFlRemxJNHcvRW5ZczkwM2lPTjZHRjdxeVMrNk84NkMyYnJUOUFBMkpudFRGRlY5bU1VSUswL3lWMy9LUStkWDN5SEJzNk5oeGg3ZncrUVk0T2lZVVVQWlRrR0wzSEpVSDZ2MTFGRGlSRTJUdy91UHNRa0gvd0UwNGNtUXM1a2ZoSFI4L29MZGZaOXJSOEtGeklMZDVCRjFneDVDNnNxclcxRU9qanZyZm9rcGg4dnQrQkRoMldtQzhCVTN4clhPMzNjUURmazVtK2duT2R2TSt1WHYrU3ZlOWN5b2EyRjVSMm01Y1JYS3JWaEg4MkF0L1JSUWc2RWFVNnJhWWlCR1dnbHB3bUhUMTlKYjljYUFNT1NpM0xFN3dNankzN1dqNkMzQkhBb0JESi9URS92WHBnOG9jcFU4aE5SS2RRNkhRQnNRVVVmbFlKRDBVU0hFRHlZM3l1UTZRTi9OOFZFM3lsWG1ac2h4Z1JKU21YQzFDRVhYSFRGOVZQV3M4emNycHdLaEdpWDBqd2I5ZjdFdFVKMUlhckJmR3dGWmhvZGtkZFJURys0bHY2bHZVRDVYMUs0d0wxLzJvOGt0aXZ3WGxQUUc5ODVNcGRSRnc1TW1iNlpoZGo2YnRKWnhYbkJaQkxZSDdlbFZHLzBmbGl6amNsa21VbGxWT05GcXpDZUF6VUFveFgyY3crNW9PRXlDNWNNREpJWWRDNUhQYVhUbWd0R1dkWXczaU9xZHNjN3ZrZXMwSlJ4UlpXK1FCNEk5QlpDMkd5WjkzRW5FQWhaL2tjbkFiT1VBaGIxRjU3aGNtMnF6WmwrcmUyMWsyTGFydXladkpHUW5odWNvNEZvbEhYWjVGNkhtUG5yTHNBczNvV01WY3lBd0F6aFpCbUJwaW1XZ2xoeWhKUTRxSk9uMDlIa3lxL0tWY0duMzFURGlsUVlmM0hOc2h2eHBCWm1hUHhkTVdBRE5kaUFlWUc4R2FkbVpUVS9QU1ZsSmd1cER4UmpydWtjOVhXS21QS3F4MXZNeHVBQkx5VmdqaXZvZE1OdDJQTll4UXdaTEl5TndiRDY4VGsvaDNzSGM4T2hHdWxWd1hWa2JYZGlxWDFDN0k0SlJJNVo2azE0a2hZcDloWjUwSkhDOU9MUmdXWUFJUWJOSnd2NHQ1YXBRNHNqbjVPUUpzeVo4OWdBbElGcm51TUtaaGVlb0duRmJpdFpiOVdRSGhGVG1OeWF5bVVrUWVHbFlua3BiMlhrd0FNYkwrNjB5OVlPaGdHcUIvTUk5VTlONS90MVNUZmRkcWJaRDBENVpVYVZFa2dKVWQ1QlNDZWEvSkQ1dVptVzhycTBIY2szYVFIUVA1L2t2WjIvRjNuUUVjOExRYjdqOVVLQ08xZmJhWmxWT1R6RjJmQnYvckgxZW5aZ0RTV2pQNjRuTCttVlk4WWpiSTlncVBLeHRIeWk3L2R6NERSSDZjR21QRHNTQ3AyazdaL0xmcmdZOFpmbnpRMVNwRDJWbU14UzcrWnNrSGNDckt5bXVUNVRrdUJCeWJZVEZtU0d6U25CbWhYak1ES2VvbWgxYmNPc3QySXEyQXE2UDJrN0g3aVVjbWhjQWMwcUlkRm5IL2wzMWt2cGNHa2wwME5XbFY2dkJBWVRVMGlia3MrWWdjdi9IN3VSck9tNVZmRnZwVmtBc2JPUDNrdnRqUVJFd2xvNEt6U3dzMUlhOGVxVVBteVlCRjhmMjJKUDBvdjdLY1JVSWNUQndIcklQK3ZJNXQ2RVpMNzVzaWV5NS9zdy9UNHM1Myt1MmMrdHNoMWx1S2xadWN6dmtuMnFUcHVETW1WOXhuc0p6OFJLR29ISDJFM01Nb1Qya3pxbTlhaW9SMU83MVMxMWtSWk1yVUt4ekVYRzJQalNWWFErWlExbzJXR3pRN0Jvby82ZndOUFdqdkZLMGZnVmVMeFZKWnZUTlhGeUFGWXE4SlZYRGlVOFRSZU9sMitvNS80MEtXRm5GdXo2czFTRUpwSkNXOG1JS2w2VkVOc2VMOFNneWZyT2NjdEJ2QUlLMG5aT0ZXMGx3dHZYdGt5bkNiTDVBNVZxSDZUTUw2YXpZRStURzU2dTNkd2RaSWZjUlZNZzNCMzFMeEJjNEEwcXhYN0RScW5SeVIrbEhidmtkbkFIWjRxcHkvMERxeEN1MStKa1JidFNuNWNkSnBGU1o4Tkx0RHpsSVlMUU0wRVlzN3ZCaXNGcnJxekdoejBhQlhoekxucE5WQ0VZNGh4dEpqd3VGdEtTdlpiWXhYaVlYUVpJR29DVzJmNURrWUZrclpQbWg1eVE1cjlxZmNaL1BYYUwwSytJMXZKdGV3dXZJOVh5M21vSk42UmtlQ3E5OFU1MkFEZzVPbFprNm5lcTEvQldVNDdud2c1LzJFTkZia1g0bzJBV2UzREpDSGw4dEJWRzhoT0FXamlXYTJkOFdPTFQ5MTJMRnppQjA2RnZ2V0swNmNFUlNic1huTkM3ZGtHVVNhbE81OEhzUFlYWmJVMGl1SjBjV2xzT0d2a3VDTzZ0SGVjQnF0UkR2T3VQbDRZYTkrM0dxK1hFVlkzc2J3UGw0Y3dzL1hHMlAyTnE2bllxY29IeHRWRW1GR21HWG1JVXhnaTU0ckpaY1RoN0ZpSm1PL1RXazFCc2M1SVRzWWJ4Mzg5YjlOZm9WSGExOWZRejhIU3p0NTVyTE9TcmNLRC9sTWh2Q09XdGdUbHJKYjJPOHI5OG9xU3RNMlY0TERQRTFjRklWT01DSTRmd3FXVE1FVlZUUkRwU0NrN3ZqQm1ZL1QwQWZlUWV3RTlyKzdyVUw1OFBrMFFER0FLOWZ6M1ByYzhub3NoNHVmRDdaWFR4WTF2czhVNldlK2s0VWkzcVg4Wnh0QmQ5cCtUVE5FdnVBNXpEMjVNN3FvOTNYYWtVem5sMlMycGRvQ3E0NEdtc25nVHY5QVZQYkVDS0N2WmNSSFRveU1lWTFjQ0k4TTlGZTNvcjVrS21MVGZCdGVQY2dXWmNqKzFxODkxVTlhcEZUZnRSZTkxME1MQ1V3YlVHVkE2R0poaUF4cmZteWhGdVk1VHlvSndFL0NsZFJBTVdwQ2RSVjI3TFhiZDkzUEE2eGNHV0ZkbmpMK1A5VmNvanlnaXpzZzJFWjZuNTZ3d2ZwY3VENUVVckVzR3NWMDZYYURjNytDRmd3S1hPbm1zMGhwMDhtQWszREIrL2V3eWQ0UktJWHF6SGNNeFRqWkk0RVBSbm9iMFhWOURBcm91dGQxdWtFeHVqMTZzMnpSY2E5MFFzQkRTV1R1cFVUakhXbHU4cGtFVExYZTZXVldiLzIrOU5LU3dEYk5MeTZKVTcvUDlDWjlzZVd6b1VGK1FlSFVlQ083SUtWb21oV1dpL05Ja2RFU01sOUJFMVEwUFU5SEtKV2RjcVJCa0ZCTWVHblgxRW4yTURqSkxkaDdyTnk3Q2hwQnJhbGdMZ0FsZUREOWI0R0IrY3NRVVVjMVk4dUVSZFY2NzNkWEU0cEM0ejVHeHgzSFZXK1A4Q3hqYVd4YXh4VlJ5emxDaFRKRjg0U3RQUEtUbDBwYy9xZGhydnZHdEVONHQ5S0M0RTh1UUFnUitEVTlOWGQwVnVkdzkxYW50SWJmeGROVGMzUFZVYTFYdWtRMlptU2tqU0hqTS9rK09kdWtraGt5RXZJNTdveWwyNzZ3SGNSbzRsZXljekJmZENRZ2xiRDIvWVV2dVhUN2tUQ2JuakQ3WWpxcGRab2VQTXIrZ0RMK3ZSVkxTYzdFelk2L2dmMER5ZHR6U1ZUQzBvd01NeXU3RExid2tQcU5PdFZxMGhWNzJmOENVQ0I3V1ZYOGFYV2RIWUQ2NTlvVDFQSncrM1VNeEJyTHlFd29lYW5mWnVYQzU5RWIzV0lmTmhzbGhVSWltSGpZeVJ1QWd4ME8rc2lkRkQ2TXVKUG92OHdBR2duUWYyZTdZT1hhYXF0Tmt2bkZpcWdmeFZ1ZFdwL2FEZTNHWEdGNVZ3aklkWjU3L0MvSGcvWDlrcEpvKzAwZWJqNjhXZ2I2TVZiSXNRclZiTTg0bG1sbi9ydjYycUIya1lBMHVKQVBSdEJvTE9LeVk2N2xtWFAwby96U2VTbmpUOXdvSjBRMCtFVURtUy93SGtNN1J4SGUzeFhEWTNJN0ZhNXNmYnJEb2FWR2RmbWhTNklERXI5NWxEcVVkaGx2K3pyamY5dTdia3FPeTV0ek9CMnd0R0dxNFY0SEFjN0pCcUJWRzg0U21hck5zVUkwUXZjdHZ4cUJra3FIUGZlckRHVENXck9GdWFwb25LS0ZUd3RRbTd2NVFlcUYydGFub1dnSkd3QS95aVE0ZkhvZklrZmtmV0FzU3J5TVkzSjRRTXZqUU9QY3IvS0FWbjQwa3YvZld6RGNaNHFxeXhwd0p3K0RyT09hQmlPTElKbzMvd3BSRHhicHNoNWh2Qmx3dWNFeitlS1czMmlZUklpK2owMFVObjVySXh2Z05YREtEOGZhZEhwRUlOMEgvSFFYMjVNTzV6TW10UlRUb2R6NHpQS3lmenR3aisvMitvR2duc0ZEZHY1cHptRmVRMXZoN3AxSDV5cFFCeEFvSG1sSjFCYTFxVzVmc3dGREJZRzhyR2NSbkNPRy9ucUdCRXA2cWNHaGlRTTBWOEVkdHI0enB6Ris5MkNDdG85c0JPaUJzN01zaVhIaElMQ05iWlU4WktFWWpPS1ZFL21wWHc3T3pmSkF3cVdhcExNUEZpV0RUYkRlY3FEaEJkSSswYk03ZElzTDZieVNhNjYweHJjZmQ1UnkzZGZydUhzZGZaKzdnNHJ5TXQ5OVNYWURCd1lObjhRaytYdWZYUXkwS2ExaFdaVEExclZhVWlyWnczZ2V2Z2p1ZXhyS3k3dTNTd1hod3lJeno5M1REdVBjcXdUaDZMZlZGeHJPMXNBakpYM0pvVmJuQ3FjYXhpZUVWYnBNTjZXck03N0hFRUJ4bDM5S0NNNTZKTWJFU2ZqMytheFBkOG90ZHdWV0VubzNTNTBkY2pDaVFnUVY2dGRDM1EyWXAzcnJkdnhLcWFuUTAvSUJuV1NCclVZZVpDK2NyTHVwbnhKU3Rac3V3cU1ZUWI1Rm9qaDZyaEdSYjY2d0l5TkVPc0JBa3dlSnp4NlhLWDc2SmZ6MlR4cGRFRW1nWm81UmNRSElGYkJFcUFxL0Z0MWVSNkZSL2E5V3Q3THd5dTAwNWtGMGpoNUtQdW5RcmNQY1F3d0JjRXh5bDFRRHNCRWFhS2xpODhCc2VPV0E2VWF0Z09Sd3JtMlVPdzczOE96eGY4ZEVlTG14VDlMcldpYU5sa25ZbGhaeHJUYzNLSmlzaUVSNFBvbFJ3SGNZNWNNSFR1Tng4b2NSMDBxNWR6dmg1MnN6Q3k5dlZtN0k1aGJpTE44QnIyTlY3bE5lM3UyNVFzWmgxVzZxQjZoR3RTK0UzYVM3SVBXVktYUWZweDE5TlRMRVJQdW1iVlk0OGgxUkJ5cmZoL0RzN1czRzBVMHBlUG1ubjlSOUhmZndBT0F0S3lhWUk0ZlV3YWNZdllRcnFNRUlTaEduQzYrVGJZSzFleXZ5SEJhUU4yeSt1d3Q4SndEajhkNVdWcFJsaHZsMVNkUHduVFNNeFpFVmNBYW41WjJCNUZIZEptQzFoS1hwdEUzWFEyUzdiVDNjOVVMTGdMMmhvQjBJWmRwSFZId0NCUVcxT2VPUWN3MFJLcGJ5c2hsYTNoSE1NMEZHc3pCMERFb2RONXNVZG9VQzl2cHFSM2xydDU2aXFTRC9PTFJiWHhIOU1XbEx2SzVYR2t0bGJNT0lFZmdBdk05Ny9BaUN5Ykl3bkxnYk80akJUZmdkeXREUVM0UTRMaGRnUzM0SG93aWhWYjNDM1QrNUphVVRlaGNyRi8rUXJjeUxRczgramV1dDRXMDZ5c1dHNWJYNGRRUGEySmxJQ1V5ZkhJbUVQWWROeHRtOXlDWEo0RWE3Q2d2MWs3OUpXQjgzN0Q3bUNxaXhyclAwOHQzaXZILzgvWWJzN1RSdHIvV3pNZmlLdnNra1FsYTVnSjlMOHgyRHpZaVRCM1pxSEZ0N1VhdlN6ZUtEQy9pZGRicVpybk1HRGNUYXlYWk5tRHpZTkg5UWJ1eXA2TzZ3bmJGYkJwcFAwOXgzSUgwMXFTcUVGTUU5RXpTdENwYzd2bkY4SjRYajVTVXJVdTNNQ1plNTBWY2ROOGh5UWFmWFhydkpLQWVyVmpYMTBKbXU1NHRrV1FGVUU0cEJRWTZiQ0RrMkM2VDl3djZCb2ZnR1N2ZGZVTGtaajAyb3M0YndxZ2FtbzRwZWlJMk1MNzYvZHFhWFNGRmFpQ2NDeU1JQ1JFVzBwdDMrSE9XaTdHT2JQUEJvdWwyN3pJOHpoNnBiYVN5M1BKMStmUWNaODgrd0lBRCswVlZmd3NsRmc5c1dkYXAzcnVESXVzQWh3TDNuRDZ0UU1YWS9td0hObmlNTmxVdjdPZHBpd1JEU2dCNFVFTVNLTitRS3B4TzVpenJ3RjBnZ1RUdXV6SkxwMjBCRHBvUll5RmRjcVBDL1Y1Z3FET0tlVTd0UndJRGVnS1hUdzRGZVhlRmJma0daMEtoQmhlME9iWU1rVi84bWxjOWVGb3lTTFM2bHVWS3haa2xBMHZhdUtmK0lkZEVsTEpNanVJMjlWaEVvdGdJZEx3VTNtS2k4endGZ2VBdy9vNEIxSGhNdlJIZkxnVEZhVDgvdkhMU0pKUHNlUWpZc3BFZUt2OXFUY0xKcWwraXVvYm8veVFJRTJiWGFzcUZuQUVBM0xpcUhCM1Rya085eFFIQUY0WTdob0lybmQrUXZjKzFYL0ZjTVF3T3NtRTJXd2lhcjkrSzVtbjFXd2tKKzBSV0NlWnYwNnUwNVBET0szTE5zQS9DeEtldXpmWCtCMDZZK05UcS9FMFlMYlZQSlRjdDB2d2xlSUljM3o1VkJ3SEhrU3c1eXdGU3FHWHJjaHpDM3Y2bnBma1o5cC9FdEZDbURTaVpOOEpmVVFZWmhXdHgrODUyanJwT1MzUUR4b1BmaFlSaGZ4QkpNdk1LbU5VSXRCRkNkaXBrejV0ZEM0eUNXaE5tMlVITzhxMGthUHQ2TVR1dkhsaTNsZVBGbHcwOXdINGdFK3h6UzhsUGJpS1llcDVFZGpZV3BWeW5KU2EwWWw0UDdKV1UyRndGV3pwSUcyNkk2WWI4RFYzd0pYMEJDeEpFTHdsRk1IVllIVEFZcnptM0p1NGZLWXoyam1EUC84djBtRzRlZXB3enJ2U0tnckJUeXhKUWZuRlF5SkNZeDFxT0JpYmRmbURNcmx1cnA0M1Rxb0p0aHNKNVBIaHpzWUdDckZzWWorWjFMdjh5b1h3OTJxSjF5ZExlTStqV3ZwSDdxeHl2V2JmR21UQ1I4ZXdzRXpwNnpkRzc4d0ZpMThTSmhHMC9sb2hDSEhKVHF6aXNkWGxvbU9INWZEU2xuZWM4Mk5ud2QwcFZOQ2EzNXIrczJOcjkzTTd0RE9HQXZrRGRubi9LWGhQMzdzamxSMXQ4aC9sREpaUG1pQVBwanlwSmtudnNnOG4wQXZZbGp3aUo2TlVvSnFuOVhoVzBPMi9kRlcwL3FpMDhIRnBkQXpDNGYxcjlBUUJVMUNCVHduejhENGUvN2lBakF4eEpUL0graTdubWw0RG5OeXd4V2tSenFVWkRmcWJOOVc0ZDJYZThwYWQ3VGFyc1MxcEVvTUpsSFljRmpaRCtjbU81K2tjTVlTRDlYNDB6UG9ZM1RvV0RzTWZET0wydW1sREVvMG9SMDRZVStJTkhzWlBzYTZLbW53a29KYUs4WEZiN3pSbVJmb0hKekF5ZmM0eVhld0NtaWNlQzdNTlBRVHY2ajZxQ3FxQkpZeWhSR3lZUHh6aGhMcXhGNDlmaW1ESk5MR25kaTZaclByRHVaU2ZITWl3WDBwcUlKaStLSktwZDJqYTB0S0o3SnUyeksxNm02QVRoSzI0KzBIK2xWWHdTVlRmcnFhaTVWeC9GbjhCenJRTjVOTXZIdjJFMldNZkN3MlFyNkJuYjZiMDltNGRvWlppVGtOaVA0b1JJNUdESDd4NTZiR081enQ5ZCs1ZTNOaGJjdm95ZDI0Uzlhc3NKTUpGTDRhRzJEczF6N3dBU0paNkNMSFNqNW9lTnBmbjhPalk2SGZuRWthUWovVTFoMmhNbGRHTXlVTmVHUjE0OXM1WVpYZCtUOW02UkdLYVpyWU9vS3dOQUdSN21VQldjNFhlS1lXbVp6cHdWdE9CSlk5eW5SaUtIZitvZ25NNXhMYXZTTGdRTklMZ0tGZjdYKy82YWhqZmRPNEw4S1dGeWlzNkhkeS9XTld6QWJKWGxkSVlTcXFMTXRxRTFlN2FUemdlcURYY3VCMkNYQXNyNEVJa3JZNTlUY0k0MW81bExoNFdLcDZMWllpMVM0VGRQSFZQRVRkd3lSNWpPR1R0MVhZZ1NyamlnYk9mSHU2R3ZXVlg2L0hEL1F6YklYME1jY3MxeXIzSVJ2OUdxTkE5RG9GTWpWcXJQSktxRnRCUUZncGRkcmxHR1J5MWQ0akRLcmw3NzBvdnFEeW4yUXpjeXZzbHFIS3F4ZGNlVFdUSS92Q3JsbGdBQTcrWjFtV0JmZGpxMzk3aW9ibUpUZzk5Z3RDQ1VMZ0FWMlJqRjFTSGwrcU9sdURpZS80eTJLeGJycnlnQkYzZUMzcWVZenVNd0RFbDVkdU1oMDZCUXlTYWxSNGg1eUpQM1RSaUsvNkRoanNmZkNFNDZWL3RHR2lyUEZJc3ZTVEs4eVNFVm1ubGQvaEFHWUlhVlJId0hGenM0Y0xNSENrZ2U5OURXb1FGS0o4ckRNMFFlcDVHandQLzJkaXhhaDhLZnlZeHdEeis4SkpXTDN5MUtpWTJjUTVWZkhncStrNkJJb2dmYXBaU0JIYTN1NTd0Z1lJUmNzdnJnZys2Z2k1V0J1M3NVMkhOR28rZGZsMFV5SEtTM1o5emJYYWJMQitxMS9KWldUSjEwcUVJdTF4ZlFSS3diT09seUFWMSswM1FMd29UVVdGSFNVQmhueWQ1YTJ6alVUUUoxODVBRjJjUURZMkhwenB4alc0NUZLbC9zQ1VHcFZsbXZCOE03S2JqSmtHTE43T0xmMUkyUkd6blNGbFV4Um51ems4czNxVnVaMzZjUHhGYXZLTXpxMS9NbTNsNGlyM0tUbzNiUW9xQTV5T3MvMmdHZXJXUURHbDc2QVJ6dVRNVy9NelpNOW1Ud054TmZGa29rSGJhK0YrYUxCSVlNbUlUQzNKeDcwWkdtVWJUYmlHMmdUMHFFSWpIcjRXY0c1OXpBT3RqVTlWeTN0Y0cvNkV1QXR4SkZKOFBNOEtuUXdUS1FnbHhJZDZZOXpnNjhVbDdybDFUR21qcUlsWnZ6U0RidWY3dTdqR0hJUTN6eGNjZDAvZU5sRXM2cUZYU1hrM0lsTDVCRDNsNnFtWS9xNHlWK05QZkNjKzhGbHFqNy9Hb2xNTGtHbWJ5Mk9neG5XaENOcmV1MExtWVNYUDZwNjQzYURxdjV0TzZGRUNQTE1zbkdtNXlXdW53aE1wUG1sdU92K0VZOEZUdlRDWXg5N3Erck5EN21VUk03Qk42M0xETjlINGhLeG1DQUhSdlN5dUFPcGNOTkFPQk0xcGpyenYyU25iVDhvUXBrbVNpTUZodTNxUlJqUGc3ZmgyN0s4ekZlcTU0ak1NSlNpNU93UXJaVzZuYmpTZDlsbHFpaUp0b0EvTDZ0QkppNmU2UzZWdjdFY000Y0lpZVd5MkdkemhCa1ZMN0JtT1ZSNG9qSUpyUklVRU5CSTR3K29MVy9wM3VNOE02QlM0QUxpL0tsbU9yd25iQnhzc3RRc3NXUnd4Y0FWZFNlRE9kRmg4N3F2Wm4rUk5zeDV0bk1JS29DaUpkWVF1Si9wTzZyTkQyU1ZGMC9VY1grc2lmaFdTRklzejJtWDRqTXloRlJlWjRCTVNKZ0pOVzloVzg1V2tTSGduMk9mRUs3dW5HbzhzT0t1UTI3R0dINkdsV3l6Q3dDV3Z1RTh6eFhwRDVIV3RQQ0k1Slp1M2VCUVJCbnQyMU9KcjNPSTEydkF5K0o2YmE3RXF3MXkzT0FyRVBMNGNUK2VoVExpTjlXNlcyTm9ISWtzeWVsdWIvNE83N3V4K3hTaXBVM1pyZjFZNjYrNDVKc2xxSEo5K3dvK3FYSFR1c0lRMnZLcEVWamFMMGtUSjdONzNwWVJBM2pPMldSRy9ZdEtYYjNWNnZ1WkgxSG81TVIyMXA0NksyWVlqQ1EzK3RqVGdiTmFwSExZK0Rkdnp3dlFhM3MvS1J4VGtmWmlEUWVGaWtpb0hHeWtpQXNUSzJZeWdIZWx3REJJelJBdktqcVVJNVZFaXNWMCtzRFEzWjdaNWszeDJtZFEyOEhseUh3RTJmMEJuZlNlaEY4Z1czS3BWbW9FWFc4Qmg1WHc3T3ZiQUxvczc2aUNOQ2UwYnRrM2pHY3VBNGFiUWZKV1NuQ0o2NHZEUjg3SURGYVJBOGJPZHRQY1Z4SnRNNXpXNFIvcHR5ZitNcEpiRDR5S0NmeXJ0Ym5Fek5OZlp2ZER1ckd6TjVLN2tmN2hMa2hnWW1EWHpad1h0K3BwbVBMUUlEV0traFkwOE83MkJoS29nNkZiSnozaUZxRzZMSFlkQ28yZEZrTGlnMW50MHdXbWw3VE9ZRTUwUG1xbVJEbnVkQmI1QzdFVTdmaW1JSEFzTGMvRkM0U1ZrYm0zbWU4RkM3ZENUUTBQa2kzK1BTK3hWczErOXBseElTS29zQUhGZVNSamFUM3RLdUI2cjh4UitaYW5oeGVGRHVYU2VjSzNlNEJ0dnRwM085RG5TSStGOFM2TlBuYm9zSEZmRDJnNy9XTmtkTCt6UTNXQ1hIRDV6L21vVUY2Rmt3a0dFVFU2UFZGeER5QVg0dk82OFhVaGlQQVhuVjJpOXQvNjB6anBld1VjaWxXdDVQcmY1bWVMblQ5aEJZQm8rVEs5Tm1OdmtiNDhlUGozbURRZHB3S2l6L1hyUDBVTFZ3cW4xU3AvS2lmbUFwdVFCK2NLbDYrbXA1b2Z4WWdidXdHQlN1QUloN01kTnpPRi9BM29nR0dpR0Y5bE91WERYaWhobHg5YnVKalBVUHZxOGhNWkM1T2Z5djNxSWppNkNKQVdiM1ZIT2xZOENtekxVSEhlaFovWGo4UGRSQThERXJGTWdWTWFsTXRZTW5jYnBHbnAzMHZMNEtDcXFuOUlvRFZ5YThqODJSKytxa0dWeTlQU2c4dzJIZ2NVTEhmSHp6aHBUM05TSkdFR1dEaGNHNkdTMFNhcVJvWFJWMU9VZ0RMaFRCTGNXM0tMUk4ycWlKWDhyL3VtS3BMNjV3QWRsVmxiaEhBd0tNZ2Qxa1ZZQkpkT0xjSHpyc24zM2xrRTJhYlpUbnhpU3NVT1piSjFOd1hqZjQ5dXRKNFZ3dGVQR0xxN1lsZXlBS1oyRWdkUGpjd1l0U0YrWG9QUGExNXBSWWtFa3lmVWIwS1pmTjFESG5KMTQ0RjdRSHFUTUd5R1VmOHNPaW5qS2Mya1E2OTFrd1RHOEhBK0VMUVljamtpV0R2bzdKSUUzRExGWEpHU2wrdWJ4UmRZTDVTTDdEMmJaZGtmc0NQa2t0U3ZpRUN4RmsvZVo5bnlONHczYUJ1UXg0azNPSExsOTdXclF5T0dTVlM1Q1VodWZTclFsK2gzZVVINm13bHhWVmNJS1NqUmI5ZTcrSmxkakJUZ0x4SkdENzJXWWRkRkVMYWFsMmhzK0Q4K0RZZWZlOS9HV0JUQWJrNC9ncXlQMHR1WXp4OG1xWVZERTh0Q1p6QlR2RUNLWGpkTVh5bUovM0QxbFV2TE5jSHVXZ0I1b3kzYjBXVDFEb3R0blBwRFM3R2U0Ym1EZnRJdWQwRVpOd3VtcHM4U1ZOZ1FhOEZUQWdSdzFxNEd1SG53ZllQVHU5S3hENjQ2YVQxb1VqZi92dGJ4emZNVHAybkI2RlB5WExGSXUySjNFcDNhbGJXL3BNU3RTZFNRdlk2TzdMb3pqRGZSTXdoa0RCNVhTTkIvYzYvSmc2ZElMN1pDcVdZYzdmN2d2dUo1SXNlWWNycWRsSEVNOGdHWU9WcjlQOUZIM0k5bmpGNXU3YXFzUHJGUEFLY3Q2aEpuN3ltVm9RbE03dDlOL1lSbG0vUFVoQlRtWnBBYmYzcFZaZVF4Q3pwY3Q0blhMMnhadHQ4bzkvd2VTV2NCSEFmZy9ZSHhmRGNaNWtZd3kzalBzM3g4SXg3WTNOMmNoenN1YXVXZWxmN2ljMW5WU2tTWUFGQ2xnYkdpeXFkb2VnWVdSSGFhekIraXF0RWdkYjd5UU9DOTk3UlNBT2xpZnltbm9JRWoxdGpaYzc3T2FpanNSb0xBak9qcWdCWVpnZkl2UDRKVmVsNUx1amEvU0hhOTJSTVU3MmxVckpNM2pONjA0VHFJaHlGS0U5ejdMVnZPRHpMbnN1dmlIRE02RzE0L3lMV2pVWGNSU0owRTdqbFByeTZ0N01GTEgrRzJKV3NHV2dhdXdtcHc4WWMyc0N6SWNydnJ6R0RyUFNhYzR6QVhUenZNNkxJQkhzQkFVMURjVHlsdkE3VWNzOTdWSXlaQytGS2hmM1J0a1RSbUVOVzNBZVJ5VWd0cEV4Z3JyZG5FcTBiaDdNL3hPd1RiRzE3b0JsOE9IbnMvK0RaaTVRaUNvMENSTUtFcFlKbXM0UEJpZkdjV0VvTXdWQ1A0VzdRMk5iUGJjMWFib1FMQzA2QVp4QW1xd0dSVlY4dDZqU2piYUNQK0YwM0d4Z0tmNmQ4b01LOHkvOXhHQ2tJWWFhKzBqMG9LT1JWbGNwakhwWVFsRkE2SDZZVWw3d0dxTXZZM3c5bm9WaUsyTFVNUDFSK2FtWnViNUJkTHQrS2ZmRmZURzhzV3lwUUxZYVVKbUYvcEhJQkJQY215aEU3eGpGZzIxTStmcE9YRVdsdUcwc0s4UXBsWmZjRmlST28vLy9ZQ1ZNbFZyRmxCdC9KWnA3NWNnd2J3WWtwdnBLTzBObDNkSm9pd1ozbXQxUFdEdWxncmdtRTBCSy9Xem1KaklPSHUwa0JGYWRzSzJyYkU3bzN5djZTMjlLYVV1SjlXdVkwRWdGbFhRTzRVNWpYYkFqaXpIYSs4UHdORm5EZzVyUE03YW5SVnBYM21xY2ExdE1jUnE0MGZDckwxcXFiNEtFd0w4QTFTUEoveWxpM3pWcEs3aDNOVFFRcnY2M1RDRG53MUJpVFFwczlNbjlxcFVQNjhsNmkxTUV0L2xyNXUrZnRzNTMxOGNFZzJnWHJFcHI0YTRxRUJxMkpIajBTeTZjUm5DQWhxTzBwTWhlWGxlNWYwQjBjMSt3aEVXdjdRR0xDL0ZBWWRlTCt0WXI5K1VMUzRhL0VsMW5rVklaVUs0N3h2Z0tObkM2K1VVbWFIR1dpdURna2hQWkYwK3dNMEZsVlJCc2Izai9Ka0wvRHJOMU1YM2lSZEpDSGtDcjNNemd2SEhBMUp1cnVIR2xuSVVGSGRZalVCeFNxS0F0T0QrT0s0VWJmUWtJWkoreEhaei9qR0F6eTJKQlg5SFYzYmRMZXdtUXlyaVpiaGovSlJkQjR2QW1JR0UwQ2w2akh1R2E5eGVGaXoyR1RBMDBCbWo4RzFOMURFU2Vwek5zM0doRXVjeGY0bS9FRTZPWlJzYW91SjJRekZudk1DdjlSNlRwb2RINWRueEsraHpNeUZKSWZNOHN4NlphcWVkcGdQTDkrWUdmMTlpMzFZcmZ0NFhkVUgrbzRGUzZUNjFQNFZDRktuMnhxQjZEakZtQWZnYVdqZCtVQU02WktTanVjc3NKVnNSZzBubGNMSnl3bmxPRzQyQ0lqekdqOHowLzNnOUhSU0VJTnlkeEszYURxYlE5S1oxZDUzMkp5dnNjSVY5dG9aNTlaNEFkUFB2engweElKVzgvTjR1cDZnVm9hRm5yaUpnSDhZUFM4YUs2alFaNG1KTEVoSDJtcWlTdlorcVMrZDY3Q2xoOU00bFdSVm55RXlMVit1N3h2WElpL1daU1ZIVzRRbElPU2MycmllMFNyS0NkL05NVEdVUkxoOFo1dHIvc3cxcE1kcERHSkxtM3lML3BFVFp0dnB0cTdaeE1tRDlQM2JNUkpkR2VNMzhST2JqTFJuNThXb0xPUG9zYUUzT2tBZE1HUkRxbGIwVU9mUlpkTEtOSFNoQXR4ZEVCdXNQa0laRmt4NkFiZWhGRTJtTnBjU05ITG9YQ0ZiMXNxZGJpTlBaKzFHVnBnSG42R0Uwc3dOSG5VU25HV3cvZStPOVM2cVRlRkJwODdOdXBuMVhFVzNEWERuWThXM012OVJDWkZCcVQ5dnJ3anRLU0tBUjF5YWVJbUpHUG54U3R6aHdPcHUyTWJRRzhGaTBwNkVWTE41S25CNEFsMm1hcVFsUUM4RTlhZEZrb2p4U3VkL0gvbXNrRDZ5UjE0YTZjcGlkS1Zub2w2NDBOWmJWdU0wU1MxNzlEa0VGNnJEb3l0Ukd0TWQ4bkFYL2ZLQ1ZPVEhLS2ovTUJqcEt0MVVxamU4RGppQVcwWmlnVlMwYjZxdjkraEcrb3p5QjAxNVVVQW5ZQ3B1YUtkTzR3NGZ0TUhva0ErU2JIU3JqUEY4ckJGY3NLaEpKN2ppRzBaRWtDYldhK0dORkpHVlVDdklFYjNHbFhoSWRlY09hL2VqV0pOTVlrZms2c3NQemRKTkNpeDRnMVVJcmhqTjBSUW5yT1ZPdDJsejBCS0ZDUFVDRHRWOHRESjdPemdWSk5jYWs1STBTT3hFOFZBc2I0U0x6ZzU5bUdZdXNPL3JYaXE1UkV1MTRvR2NqS1RyZWxBNGNabHBHUFZDQmNHdFhHOVV5WjRpNDA2cHdHdWFxUERaeWNZOURBM0hSYmNQZWtiTTZXZkU0dnpVSVIyM2JhSUIybVMydVhMNG5qOVVlSGVXZHFzVlJ2RFk2dDI4ZWpjZjgxQzVGY3dhUW9nYm5QS0ZNREZCQzJhSWhnRjEvTllJdXhybjJxUCtqOUFmUnZiRzNUak56amxVeGZQeitpUEN2OTJUUGIwWXBQQXZTNTJoZGY5bDA4VFZibXlDSFM0OUV2RmZuWlgvNzNES1NRL1hlWDY5eXRCS2syZjBzb1ZINFIvc0JSWU9wYTZjbXZnTmRrVVUwbWFSNERGSFNwcTRoYnROUlIxZHJJRjZUeHhBUnFOVnlRU1N1eDhlQ1ZYU3FZaTA5ZElQanQxejN6dnVjbFl4alRFR25LMEh5MHBSaFptZ3E0bHZ3WllQZkJVN1RGS1NNMURhcDBLVCsyc2srYWhXOGFsWGtIeWRTTXI1alUyamo3WDZQTWc4VnI2OUg3eG9CcThlazZoV2U2Y01LQmI1enpPTEpUNVBkeWRCcWNyYzVrMVhySDZ1RzlwaDg5ME53VzhTV2xaa3Q3K1AwdlZDRkZ0bWcwa0YrRlFTMHZ0ZElsM1RmdmdWY3lxOUZKUUMrenFXcWo5aysxQlQySXhxWHQ2ZGVuOUlpeWcvM2pHU2w4TlpDUjBOKzlRcXo2MTRGeHhENW1lU051Z0U4dVJ2U3lYd3Z1MUNvRGRiODg2eHRvUGJndmhPUis0OGtkUjNGRnkxbmtaMXlEVTJtcWJSYmtFbjRvTTQvcFM0VCtyaENPRlZDOEdPb3FJY25TYkl6MzRxemRkYmk1TjkxMS90WHNNQmFMaFE5cnUyMHhqNDBVS2xGdEVlNCtmaWowdUFtd0YwV2dkNFRhYW8vUFp4QXNVWUdXUTlxQzljck15NTByb2pUakpiMXF6MFdLMUMyVkpuUm5OY0F1RnR5NWZVdldaZFE5Qk91REcweGZXeWFZWHhzajFrcEFNSzVwb1N6bTJuSGd1a2p3K0VYREpINllQYW9yWThZQXFzd1NoUEc3SGtmMkJUcHdmeXd1TzFmQnJvaFFPNjRBSmlxVlVJdjRxaU50VFdBbFNReDAxbXFHUmEzRTVqT05WTnd0Q3NBWUJXMnI0MlZMR3hsOGVkUm92cVlseHd6Q0VjSW9xZ2VmTG5mY3dqdlUzbkFDeDRWTXp0ODNkdVA4WFR5VVBwa2lYU0VNVjNHVVEwZlJoS3pvWUxRN0JaQzI4dm5MUVk5MDFFU3Z3KzJLeEQxcWRabmVnTDh2eVdySGcybHJyNjFuTjM2cVlWTFJvQmNNWmJPWHVtaG9MbHJoQW9FdHp0bzUxV2dycTlRZzFXdFVHaWhuazNkcWxNQU9jdWNqWCsrTWJkcU9vSHZTbU9zamRmc2JHMFhWTk9WM2lSTXlyUGZnSHFaYUgvTi9ZUzhHM1ZzbDlKeUw1bTVsY2IzdVViTXF0QklVc0tHUWxGWnlqbk9paGFvYWJIcW40MEpTMmtmM1Fra0JEU0ZlRTFtdE9mSTFiMlp3N0dCUUd1R0c3Mm8rOGdRZS9LNFhqVWl1ckZUM1JoTjI0bzdCdm85b2FPandBMCt6WElCSFBDTDFpVmJJNFNZY20vbHdZS0x3YnlCQlBoWnIvVlByeFJkNitta3pKaFQxdTF5NEh5SDBURjhjbG50dDZTSDZSMFdGTzdPMm9KTktrWVBJYnhhYXY3dmVYVkxlWUgvYTB5MUQrL1VxdE9EV1hxb1BnamQ0TVR2cTAvaUg1MXJ6V1NvbWJQZnl0bFpqU0NMK3FEMkZpdFVSSW1aSUlWMHh6TmdYRTh1VlVQbjdrNWljbkJzQ3pJMmdCenR3bWpxUm8wWStyVjVteTBOUWxEa0FvZWNXSDg3dUVNcS9LbnlzZ2dwWHdVZGpwNnJHR0NyQ0F1bWJGUDRydkFBU1RKTFg1akQxMEVCTnVxL24vTVdLempYQzQrMmtDby91UXBZczk1cEY4SEh4eTFycnJEclE3bzFHaHhTYk5wVVpsUkdvZEo3TDM1UXFLZnBQaXNPOWx6QWRPQWlocUw1ejFsUHM3eGRPUG1sVVdaRjlRUkZhSEhxOENwaHVpdEQrdzUxSzcreWxuSno2VXlVNG1pR05RWGRJVHBzVlU4ZFp5cmhZcmUvZG1OdUIxTkZhQXpWQkxnOFRvRzBYY2V5UWxWTHpKOXpRdDFJQnltL20yeFVIMGs4dldjRGJYTTJZQ0RPZVJVVVpCemhiSzRsOGZ1akNJQnJmR2c3c0EvUHhmaVRKa2NuTHByNHYxUlN6RjRKa0l5bWhWZVFWbkVHREE0SzZ4QWNadEFOTDZUUjIrNEF1Z2ZaTDErV1lWQUF3emZJRWtKeTFIYmE4cGhDSGJlQVB4UmlvcE1RdS9CS2hEcUZ5bWRnWHVQNjVWZHhIVmlyOXYxMXZ1NmlDbTRUVlM5RmlyOVVRSlBvVzkxR3JLWmVKYUtFNitLbVRFaUFwUVBLN0tPdEdlYldHMG9Jd2RHQjhoejJ6SXQ1Zm1OYlFSREtEbklLZlZxdXB2K3lzeisxcitucngybXFvVUQyTUU1aWJWbGp1d1k5RDBqVzRkUklhT0xWQktuWVY0b1c1aVk0U3c1Nkd2TERJUVJQTnVaWDJIbzlySnBJNVVXVStEOHRkNkhvQlFrSG5RVkpQMzc4bXlZNjRaV0h5bW1wdGFYVnZuSFBrTm1rcXlScjM5MktaUjNiSUpMM0xaNFRhSXNJbnRPa2ZoYy9LaHVzM0hJZmlKbi83cmttU2FiYnZwRWorMDVkZ1cvUVJOVkVMa21OR3ZSNzVxMzA5K3dubHNMTG1sS25HbDNkNDNHdVYyL2dWcXB6SER1cnNMNmw2ZGNEbjdUQzliWktzZGIzVnFpSEVTU2JmaWppRVR0OFhYN1ZUWHo2VFBzLzY1V21rS3pLWEhZQS9zeTJwbzdyQ0VUaWQyRFVodElLc05EcUVTNWNjZ3ZjZzZtdjJNZ0xWZmtBY3R2WTJpajd3YVVkODkvMHhESWx1U0xHMmFVMjVJc1NhMXFyakJSdWRzUGkyRlh1emJsK1kxYVdTY2NpalNMTjljRk15d3kyWXZ4ZTU3MUVNZUhDSFdWeDN1QnNmYUVGSC9TQW9pUjNFTUF2N1YwTWRqbEY3UGZBUGNIMWNzeCtadHVyekJCZWxmc3NpcTB6OEptVFYyL0hkMERIVFJWUXJWbThHbUpzcXdBTHB4NVRGNS82QTlkT0NFVktHS25acWxXM0YyNkJLRkhIRUpVYld4WTJCTktqYk5PQWhNUjNRK2NTMlpuN0Z3Y1FSMEZmOVlrK0krSytldUo2MTd2TWhkazBFc1cwNTk0YnlxS2xEbUR5M3VNdHhCbFhMdUtRYUJiM1JYZUY2cHR0eW5neE11SGJVeElDS0dyU1hwTlRidExhUU9iWWh5SlE1bTlWZDdXTDU4d1ZuT2FFeGNhOFFocWlXMDBrODlrZktveFJ5T05YVHN6ZU5JYUgrZFlDQnRCRlJVRS9KRm9jNWVkTlFnQ0NBWUVoZGpGWW13Z2RDUG5XR0xXbzlZWC9kUVJzckFFbVBNeTE5S2VNM0dOaVdUdHRKK2VGRlIrdmEwNjhubUxHZGFGcDZpRkdwQ0ZHWXUxeGNuMzhTcW00eVI1NzRiMGt5WnIvTjlWREtEMkNkK2JSWHNSZkJQbmlObUtFekhiWlZCaStoZ1BIWG5KUVlrQmk3MHZHeE9XcE5yYmVHRVk1TlVsZlFtN2t6bFByQURGa3pDeTQxdjRHWkdXUytrWkwzWHNEQ1Rmd3EyK255d0JEN2F5eE5nK3FHR3FzajVSazg2NnFsaWQxUUR2U1FlMHo4ejh5eUhMbmx0djU1ZE95aVBQRFZpZnBKVWVycUxaY1pSMXVUYnJWQWZHdXlqV3BwTVcrejZaa0VHcFRpZ2RiYzk5a1hJYnFkYVhDWm0wcVQrNFBucVA2WDVNMXdwZG05UDk4YnJIajBMdTNTYURXMDNWUVJYeVNHZFVkcmNOUUhTRW9kNnA4cVMycENxVFEyb3E5TzlqZXRiUkJEdnlNT3hMRXQ2Y0NzTzlqei95UjNkSHJMbnVRTFNPSDlsS2cvWFFwU3VWZzN1aG4xcmErQWdIOEZ2dnFCR1FNa1gzQVJCZFJiR1FES2U1ZUJ1ZjNuYnp3M083aHFqeHdhdDUxNWZZK2s1WFNYek5jMFNlTGo3T2xBTUtjMFVsSCtaVmMrVmtIejRqYUJsL3N6eGkxSGFscWI5WFQwYkJjMkdzR2FUNTFDS1BmTGNobUNNcFllUVFkeG1GSytWM2VvYkVXLytuRXlKbFlUNWhXMXJVZHlEUFBFdjl4eXh2ZWt2TXZ3UnJ0QmdSMlUvd2MxMTJNU1Z2bFlsM252K0NEUVhzeFplMWdTeHdManhXZVdKMVE1dGExTlN3dTlKa1BLYkhlVUE3OUZSRXRuRnhCYjZWcWdFcXgwR2YwNDV4MFBZRnBlMWIydjZFOUhhSXA0WFB0dEY2VW1HUDZ6ZHhUVHh1ckNhZHU2YkhBSFQ0eHFwS0V0TFZia3daKzk5bzZPWDZzcmllU2hETEZoWkFPZU5nVGpodVl2MXpHZDB5Y3BmZTRGdzlwTnFINzcvcjZERkl5UGN5Q1kzS3BreUZ0ZFB4UU0xNjVMUzdDUG5NUXpJNFFnU3lnV1p5MTdSM3EyWmhEZmdqa1AxblkwOHY5Mmc2Q09qTUtrdmxZeHY5cUhUaDZvS1RPejNuOWluWko2VU1MT2RlOHRQbDFTT0VaZHlVZDFjL1BPQS9GR3ZRampXdlFZejVrZUsrcVFjRW9jQ1BoekZwd0QyRUdkaHRubHZxcGxwYWN1c1VQWFlJMTFHc0JydVp4VUtCcmNQeUQyWXV6QmxvUHpINkRXMjRqdURUTTFmbzBSRmJyNEk3K3YzaThCREY5Rk5hS0t5SjdZRkhEc2oxS2xON3R4d1BXYStIalRNS1VYQzEwTmx5R3prbUYxT2VPVmFLSEd6S3RoZ0JlTHQ1ak8zdFdxbjZxYlc4TEd1M0ZvQUJKa3N5N2NFT2RaZHRuOFRZUVl4L2xQK3pSRVRLcXhUaENOeEtQTXdwd3ZwR3BvamJTQ1o1U3p0SXRWUjFoOXR1SmtzaVR1RDhmWVVHd3crRFlRZVoybnlrZitxV2lzU0syT29XYjFmOXFFSHZvUXh2ZDltUmJQbzVub3pqWmdUS0ZWc0cvbHFGL3dGSEFoUFpLNTVvVGxOb3N2QjZRRms4ZHVEald4UlowaVU4OEN3QTJDZS9sUXRhdC9UV3NvVlhaUnQyRjVUeXJacTdkbGFQckRjWW9MZnl1TDdpczJ1alIvMUdwY0psN3VpcDV2K01keUJ6OCt1b2lXMEJ0eHhWbCt3YU1PODE4Mkt3UHExNFkra25UZVE4VERKbUJpUk5Rd1ZGNFdKcFk3b1ZsV0xhRlJuckVueU02dG9XUzlzRGhvRk9WL2tiUC9pSjlnUS9TeDc2cHF2ejBVZlVoaFZHQXROVm0rZFNzbkg4ZXVyYU1LeFRvTTZyMGtQZ1NRR2N6aVVKMnZvcDc4YjBxNWZmRld1TUJCUEhXVW1DY3lqU0dmZURReDMxLzVBSk9ETW9ON1EzN3NnaGdRbnlQQTJLaGxTcHU4NUxnVW14YjZscUk4dXJiMlJ4bXFjdDNhcUFDK3JqTkN6bkhheStzZWhNLzVqa0pHRkU1UFV0Q0dRQVRxcEd6V1ZsSEZkRmlzYW8xVFlrdHYwVHpEYVZhcE9MTldyWWkvbGdJSGpXWkV5QmZRSXo4dVdPME56b1pSUDhMQUNKOUFLUUcwZDU5eDlycjRidktlMkRFZ0c4WGlXR0loOTA4MVhwMTVwbTZaZHVSV3FKOWlMN3FRdmE4VDBxa0J5eFQyNXZoMlZnbkNGcDhRK2VFekJpMlpqTWFlT1dzWUgraHYvejNVRmtJQzM3T0hyVWFuOUQ4MUZhQ3ArU0J2dE5oRGZVbldXazliU0FDdDNVQ1BmbEpHbnNFTFo3b0R3RUIvd3BpN3puTjE0cllhRGw3VkY1WFJudThSK1ZWeFdFRHBRaituQkRqbk92c1QvRTU2VFhrT2tKNlZSdTBtVzg2alFsVHFBQm5HeXRnNldpczVyRE1xYWxMQ2lGeDEwTjl0SmtSRVVuUk1nUjFiSWYvVDZMQ1JwQkQ1bWZYZGk1YWlKTEpzOG5ZM3RBakh0T1ZLNmR5SlhoU01zeXJJT2NzREgyR0xVNysveFJiMnRIa1NaaGtEekl6VUVoUk54bDU1ZUN4NHNqSGNGY1Rxa2pab2owaUtoU0pjaXFpeXpHNXhNYUhBNkFzZlQ1SGlKK0tWSm5tdDNTK0dGRkNSYkNETDlnaGhEODUzUSs2SHlVOWF1QWdGQXNjWkJTV1kzcUtQM0V5QXVmZ2llZU1aOVdPbWZHMXZqUkczZUx0emJVQ3VSbXlENzZnL2d3WHFOVG9NQ3FRU1EwVDRQdktZUDJqMWYwZDRyS3pKaHdMTDJwKyt6RjUyYVl0aU4wM29TNXR2TWdkY1lnTVVSNlRnMGNGWWQySlNnRzMxdUFpZWFySkxwOGY2a1ZZbTZ3SlkvMjl2bjE5NmVlK0lhb2UrMGVWNVhqVVJ6RTREb0JLaFdMYkVhOEZyVDNzU0dDQU9vNWN6UlRhUXlRazVaaWxKQk1zNlFaOTA5MWlqaXlzVjM3U2hSaXAzRW9oeVVKRDZqK0RwWG1hZDI2MkNTZ013aWExN25kMVVsVlQzRkNVQmRheDE2STUyZUF4aWlaZnNrRE9tYTJmOCtkL0R2dlp5R2hCK3htZmsxTlo4YlpRbWxnRkt0Nkx5WTJIUWM0Vk9tcTcrSjRDQXJzS1k5bEp5VnRZTGZ6RE9hcER6a2cyK2l6RDh4S2QyK2UyRnpkdlJuTDhuY1ZsR0VOYlVMVXF2QmVwTDFuS1VwbkVQYkY2RW9KZ3pBcklud0Q1bUFDaDNNMEhnSFVBNG1NZ1l4emxFZGUzTkM4N3FyMDl5WldUeFpQcCt4eWNqSUlWWWcwTlJCYWorTkdvUExUZFljanR0dVVxUFBhSzJTMzJITkxaR2VFQkRFeEQ1eWxYdXhhTCtsS1p4dHRGMUpvamU3WnBwb3F1MEc2bUNFalh5TUlGWEJrY0FVaDFjbit3THVVbGZja2ZYYjZrVlI2OExuWS9paDlzSFBtYWlwV2pyd0ltSjNPVHNRM3JqdCt1am1uNDJ1N3VTVjE2K1NRa2l3ckR1QUJDNVc0SDRGVzJaMjZDWkZ1d0RSMy96VFZUbkpBTkxNalBOOFUrVC9aNm9sMFFNekRrMDBKN3Nld3BMcWZDQ1J4aHI3Rnd0WVUwdWovODA4dHFhZlhtb0EwTHZpVEwzOFFCcFpLNG56U3QxNTZoZHhIanJqbmd4cFgzdXdSZ2NGQjlNdGRRWGtGcFZQYk5QeFYvRnluZ2JyNUpPaU1qZjRnVjZWR1R4bWx2TUNXOWxGNXFMUGQ5cmVNZ29uUHZyQU40ZUhVT1dyUy8xZGFNWmFreEx6Z3pHR2RHMkxldnZXZ2RhNndjT2M5SGsxWmF4VklaR05tVFh2a0FDTGtGNGpQeVhkQWo2eFNzNEdRTEdBQUxPZnNNT0ZJaktwYjV5UnZ1RGxIQXdZbmdwbzk4c1NWNDdXTWtpWWtnVDBwTXNiOS9Sbm9YVXVCVUtyL2ZhSTVZSlp4QWdXb05lYXR3K0U3RjRUempHeTV5Ykt6YURJMmNCbEZjVjZIU0RFWkkyLzNudlk2Tkpldk9UVzZQSmEyWUV4SUdaYmlpSi83UHdLTnl0QWtGZWdoY3g0RVhwS3pzZk5GRCtXL2QzZzE2U1pIOFUxYXV2RG5vSzV3dTJuT01yOThXZUJzRS9MWk1DaEJkU0hzWGRnNC9ZcjBOa29PTFQwODgrbG56UllDT2ZPejJ6NkRhYUM5cWZsWm1PWHJDL25sYksvdk5QWmZNekM3UHNuczY4Wi9wME9NVTVMQWt1czRTYUFucnY3U3pLUWliN0UrZy9lSk1BdTFZRm5hUVpKeHZwZlAxSEYzTEtzRHVzY0lvQWxFMmFOOEpTVDRnaU1FNzdDWGs4aHBRdUZrYk04eWR5Z3kvZyt6TlFrWjZMNE1CWWRqQm9GdlE1U1M5YWZxNWtEbzU2N2FHTUtFT0ZaclJJeWFLcjBvSHAwWUwxS0lNd0RDMFNVcHNWclRWWmNITWszeWZqMUlzVDJLSU5YT00rbUtveU5aYUlZakQySm0xdDM5YVd1aUo2OFdLd3RrMjhqa0FudEhmZzNpc1B6aXM3SHY1WlZXZzU0aGU4MmdiM2lGMmx3aURrUVJPWmtOTGthZHdCUnJOcWxzeXhrQVplUDlxakZpdWQwRy8vVi9NMHkzVnNDWmR2d3Q1T01iTXJkU0JhM05iaktUU01CTXZURGFZbm5SS09TdkNMMjFqand3d1lGWmR6V0taS3k4QVV1RHgzSmJpdmFMUGF0VnhWc3dnSkZSVWZJSFRsM28xcERoSDE1OEtYMlp6MlU1YXgzdDRWSFBKeFprcGYrdHMvdEQwb1g1SFp1dWI0NmJEVHAraEQ2SHI0cTRDYWtoL2lEdmxseHJwaVp6amJzOWE0UlI3OUx6VzVGZzZKdUlmSndrUlNQRmZIbDU1ekdOVlZ5M2JXWnJrRis5MG9OTUVXcGhDTC9IcTRjWjM2RU9jMGVZRks2MTlGdjlFTTlwZjlHdEdad2ZxalBBbUxOVjExTVo5eVFGOTdjelozQXNPaWN4aXZxMXNacG05K0hZd2FXdWwyT1lEZThsc3U5dWpLdnBPcURNaCtpZExlcWdYMXBPSDIxL0o3UTNnNWd6NVNtRm1Rb0Z6M29ORHp4ME1hMWthVjlWNlN2ak1lRXYxZW9nMzNsWFllSDZ0Q21uQXI5MHlYZ1pqdVozNG5BUlVGMjF6U0FZMmM3Tm5RNFFZNHZPSUlFTkFvTGxOZVRLbTh1VEp0WXpPYnhKM3pUd0p4UzIxRHp0bnVrSFBlb0JVTHN3YkVuOHJ4N2RJMGlFcXBjN0xDZHNLcXk1QS8vUFpTemVqelJGUmZ2VWU2Q1BzdGRqSGpHT2xFMzdrcW1oK0ViTnkwZGJ2TkJRQUlTNmJ4NmNUQVBpU2xPd3J4N09FSllTOEJDcFhaNmtjTDNyeFRycXlzMVJ2SVdTZEE5UWZRVDBSRkh5Z1NSbWprajE4QmZrclVGTTlKWVVzSFV1cXhxR3REYmR6SG1xQlhjbE40M2FaTXQyNXUyRDVzVUtLSTRLV2U5clREbVpnQTBiSVhtbmZmbDVtSGRRYmpEWjlyYjErMUdiQThJcFN3OU1uLzl6UGViNnhwUjFRaHp0TitpRFNmZUxjZkVZTmhsYkZzYVN1ZWduOGgvQjlSQXQ2UWFMMHRPM2xZcmY3RGJzNG1NYlJreVdMWmpOdFFXUy90aXNWSlkrYnArS3MxZERYM2NWLzhMWkltSEhOYU84VWI3eEJGdTR4bzBOZGcxSU12VmZ1NlBFVEhvZU5zV3cwUGlKaS9sbHBDbGN0TW1UU1Bpc1VTeDRqY3Y1aXRJSXZwR091a1dpekdrR3BPN2tsdW5KUkh5WU9BamRxeEJWSHovTU9rajRhWDZidXpjMVZCU3N1ejdUNjEvd3NzdGd4VVV6L3FILzFtd0dUc0VPRzFZNy8zbklXQ1ZpTmxXcG1oSUZHcTBvSTFaYmxOd2llWVJiamxHSUNkN2gzMHVOSWkzYWxVUys5WVFIL2RXN1Z5VUlSU2F6dHZuVGZrbWJ4Yjc3dXJDNmRmWlFPOFFPQlFtaWxwY0NaK1NWeXFMR3kwRVNOMnZ5cGlmWWhtY3l2L0g0TVBiRC9kMlQ5Z3gyNG0zVDdmVURIYUpyMjZOOE5hWHE4ZWRQQ2JJZnl4ckFKMEhuU3hUNG1qVzh5bmc2MCt1ZVFXTVNGWEhHOHZjWDlnYXR4dktGTjhrT0NkdkNTc21Ja1laYi9vU3R1NURXanZxT2FDQm90ZzNGU2swZmZOWkdBN2N3VkljUFVYTW1VWGlTRFdCZVBod1BkaVJIV0NPaEY2Y2twYThyT2NmZ1NNNkltZUFYSmZJd2VKZ0pEak1td1hwMzZQRkFHOXdmeDJJWEhzbTcrMEE0ZXVRSk1XS3RrRDdnNitMM3k5R3pBbkttN3BNQ0hkZnFpK205S2tYVFNsY2RjTWIybFBLZ3oyZEJVTHpjb1JYT29wS2N2bTFibUVvajNCZjkwSi9jNWxxZmJjYlB4b0RLN3ZqSGl2Nlo1UnpCdUZ2T2lycEhXS2RnV0YwRDMwdXYzSHNYYTBRUWErNjhxVnduUThBekNpdVZtbUM5TTA4aGdtZzZjaXlWUUNySkZpNWdjdk9mNzR1aFlQckJncUFKMWNMaWZQekVZbjA1Z0J1VUlUMmY1SmNQcWFNaVY3VTZLU1FnUHdLRkY3bHY5MWtGYnFweEFqNnlDWlZuTDVTdXBEekk5T0lxVkJGWUplRktJekhRZVBkZUM4eDYxTllwSzBrYnFTT3NPNUdJZUZJaWlQaFlFOEh1ZXl1NnI0b3IrN2M4ZXp1MGphTklDNXB3bThvam1TeDE1UGRkNTZHcEwwbDhqSEhoSG95ODRNNklhUGFGL0FWNEhFVlJ3UEtYakpRSVpKVFVMT3UzUkxiVmhLWGJtTGpqL2g2dy96MmdPWkV3RENNL2xYdlZ5VmdCeGNnSGhBOERwTjZQZ0M2WGV4UHh0UG5tcnlxMjF0YUQyY1RuSG1uNENrWVhyeEN0WFFTb3RmWm9kSVNDZmFSTHRLamZDd2tqMi9YUTc2c2wyQTRjRmdaSlBBalZyYlBUd1oxMVU2aEtjeGJGR1E4b2NSTkRta0wzMHEzVlNnemNtV0Vaa2JuRmVOczkzVFJ6T09ZZTRhY0xmWSszNmliQ3NTbUtIYXFLOWh5WlBQbm5vNVptOW5LM09Oay9qbmVBTUV2djVLczdIcVM4c0ppZklLeTluZGxCSlRPQXNLUjFYVTlKOWtoK053S2l5MFA2dCtOM281NUZDQlBuU3l0NzNScnRQRFBlTStDamxEOG1QRE9qbGxMWU0zM1pFYlB2bUFoQUFMVlQ2SFFEL3k2SjJYVlFHUk9aZVFGZ2pIZVJOQTc3Rm1ueUpZT0Ewb0c0eFZZbDl6RS93VUVBK1V2aG1IVzVaNkcrUGtISy9RYXU2bk8xUWhZTkpDYmtEakRFbGRrbzIrN2paczBLVTk4UHlOeGRpNkEyQjFQd3laeDFMcmh3WUlaRUNLT3JpMDd5MU5wWVhmdXFCam8wRjNkMDlYVUY0M0V2eUg1cUI1NDhCNWFKdWtUS3dxQnBwSG1KTXBrd0tzdnZxbTdhL1N6cHQ2SjZ2RFlNQ3pCS0FPUWVCb0dTMHdnSHc4eVRITmpxcGY3bjVuTjlPdXloc1JrcUtRc3c4RTNRL2FWOE9rYzhtRmYwWnR5TmVjMjYvNE1EcDhSVktuQTJqSmNvTnBqV09NdTJVZm8zc1NzSmQ2TVRiWi9tRXlwYk1CcVo4Y1pNWnRpckdLNklGYWNUR0lCN1J1dlV3QTRGclBHaXZBMkUvbTZBTHdTL1lNTHpVdWRyOWZ6ZVhZZUxSdU40TG1wWWNtVGpSeHJhZDFER0x1d3RGd3N5WUV1enIyK2UwNkdpNEF0Y2p2WkhjZm04YVpvTy9BaUJBM0FRd29tVGdvK2xnTjVUVnVOZ09IR1BsQllUbmN0RFRralZ4b1M1MmRRT1R3ZUJrYllzR0VJbVBlRnh6bXRNeW1uU2ZpdVUvMkxScjNlT3VWR0o4b094cE9wR1o0LytIUEVGSGhvUGJaQVNDU0Q3RG9XT3o3eFdPcm5zNS9kM0MvUFQ1YTlhdEJDbWFvdk1tZGYxa1FmQmdaZ3FsL1RIemVDK21LTjFQUDJNcjJhdFZtOW5TcDNsOUJQRm5IaFJGdUlqUFRrVlZCanRhNVFtdDZsTVQzdWsxVFpwMTA5OFphbllxdlNGZ0FRdU9xaGlhaGlpZElWYy9VbzFFU0RSR0NOSU1Lb1RoN2xyWElvMzJOVG1Wa25ueFZ5cTY3Y0ZtQ1E3TlNQbGJmUWtUdUZNMGVrTTBvZ3YvcVFDeGoyNWdmU2Zmb3FLVURod3psUzJYYklqWjJ5Y3JtbW1pbWtTTEJpTkxuaUVXeUFkVEFuRjUyVDlCNEdMSlkrTU5ZY09PbjA5ZkJGeWZaVVB0UkY2dDlhbUFPQllmbFB5Z2RTNmtFb0EvOTk4c0RmdE84bzRtWlVidGFvNUFjTDVHQVFnSXpUSzZTZXFRM2J6VzdNQ0dnd2lpNkdtMkdETC9SKzQ4RHdWN0ErcDFtd0JudGNPdUNvVENjeFQ1ajFPczRyN0YrZGVadFFGcUMrRk1JWjFkVDNscW5FblErUEtNTTBTQmUvamJGRE5NclVLR1JuS1JkUXR0K1Nwb1JGWU9tbiszdzkzQjh0akRUZVJaVGtQdzJENzk3aUZSc3A3Nnh4ejQva0N4aDhDVGFDbUlVaTloRDloSFgzM0ZxM3RHcEwwM0h6bG9lTGZBYWJJMFNGaXZLRjRObUorNVpGSEVLQ0F1ZlFWWlMxcDNPQXVtU3RLb2RWcjNaZmtLN2k5ZCtWRXJhWDAzMUtkaUhUZ3lBTXF4N20xY0tkalZiY0g0bkE1eEJpUVN1NzMyd2c4NFFacDhVSzB2VVdGTEpXNzdDTEJWSjJSZHFkYllmM0lFWVBpNXRHVmtSVmhmdDRzOWtUcThEQkNwTWxOZ1QzUm41SHYwWUk3M2xOYWdqSjhZczF3MUFXS0NRb0JQR3V1bzNoMUtJK3lPc2xDY0g4eHQyeW55ODZLaGhJN2pIOFRhRmVvT1A4NStudkpBRUV6WGRmV2xOZmtZVGpxUk9jTVZOcjlaMEJNcWlvTXJXWGpTbjIvTE9henV0L3M5eXMvMG00aWNPNTVWR3BiaE1aMlVTbDhBcldUYlZWUzF1RnE5REN1ZnhZL25ncWRIWDhWQ2NrcVg1V3h3YU9OZyt3bU5EQ1p6ZTVJSCtMTFBoNFFZUHl1dk9waXk1VlBycE9uL1dOanp4M1pkdUtZbEhxeWNGbjF4V0lCdTNUM2RpY200ejJ3YWQ1TFhsL1I5TE1EV2psYnc1MjlpS3RRRW54b2lJK21zSG9Ic2ZwTlVESkUzcjB3dTNQbkNXVGtXTUJ2cTlHR0RRZXdrbHpEbTJvM21PY0s0WVh2WnJOdS9KOWR4WGdzUFdFOWlrZFdhSlN2UWI2K210OUh5QWloUVZlb2Y3ZHE3blp0QUU5V2grQ3JLeldSSXM2S0kra0Fib284bzJhM3RCK09UT0orNCtnb0JtRURacWZodlVMZXVQWmlUTVFoN25OZWV6Z0VpQlVQdzNVNjRpTGxsai9oeDZERzB2OW5yOUVNQ3h1NTR2bGlIZDhOVVRNaHJQa3pnNWpYVEJ0bllsczdDUTFDVFVrMDcreUQyWGMzK3o2dWFhbWNleTdTVml3VW54SzR5QkJmMytFNVdjMlRlUjd1d3dGY0ZIdTIyMEV6bmNwWjNGc3RWOTA1OVFIcFZ3NzRzVzBDZ2Y2dXRZWFJZYkEyMG1Qa0JlaFQyeUlSUFY4ZHFxZi9nZ0Nnc3BlZVo1Z0RXTzExWkZEVzVQMDMycllMTkl0VGpWeGRISkphaWJsb3daWFZ6aVhENjV1MG1CZDJSa0JHQkR4Tzg4V0J2ZWxtNUZWWEJXSGgwWURCU29EMjdXRDNwdmxMYlR2dUR4c1F2N2t6aUFCZDJQTzAzTmpOdlA0L3ZXRlU3N0c0d3BwaFQ4c29UN05OZ2ptNC96dGI4dFdhcU1BS0RTMWxwdHh0Nk5tY0pmL3BzbW8wZmllRmcvSTB4YkxNWFdpRFRrZEJ3bXNpUDBrbVR1ZEV4cFlXUVRDY25QTlhwRVNPR2FIcW9rWHFhOGRwc0tNcExCQU9TVHJFaEk5Nmc0YzR6VG1vSlRyV3Q4UWFXeUE1cTVLREhCR0dneEMzNGNNWDdqQzBOUnJUejJ0S0QzYnNISi9iaHlrMnkweFpCaWNhTWtad1g2Rks2S2RSZWtaMWcxa1BneEd3NDJucDlnSzdQNnZ6ZjdZSUpkZTVNakNqbTRWZXJpeUNyOUNKZTAxMkNJREtjZ3FxNHNvYm55Q3QzNklnY0pLSFhMYTVTU3NoZWt4dTR5dndFY1RkemdHd3lhZDVueFVVOHIzVkhuSmdrU1FyNlZLWEFhbXNmKzVoMjJ5cDd5VDZ1VzNqOG1wSU9ybWtNUHRqWWFOSjV1UTlqYXZTUUJZNFVFQ21CeTFRSXlpQms0VlFPS3JjTmtNbjlXeVFJWGdiV1ZLS1V0VEJzY2tZWUdvMUdZREdvZFQvaXdlSFpDUWhpY2llTTQrM05rcXozZDZ1RnIzT3dXbUUwRDJ4UTkrV0FrMEtRM0IrQXlqRXYvTHk3MmszaW9TekxwTWFZcnNvWTJ2M1o0YXN5L3dTUnhqM0Z3UG5GSCt3MkxMTjNUQ3BrV2pDbmgzU2tXQ2U1UnlLRWlwZlAvMkFsN1BzME4wRThtNDVqTjAyRVZJZ3dPR1ZOSFVKRmdtMm15V2diRUw4V3pNZi9tdVdOTWJQZGoyeVR6dWpUeG5MZ2xBcDFKU2o2VGtWMlZVVnQ2eVhxZ1VHVmJ3bmQ5Z0RwdWo1ZWNoRUZ3dEtXSnFQbkNEejBEZ2psMUtoeHdxdjA3ZFNCK0RiOG1hNnRxaW1qVzFiWTNJUThGaGdldXU4M2MwM3RhSmZma1BSTHdLNWV5L2IwaXRmWHltN01UMGR0NzZQN2g4TUNqT1E4Y2l1dC9MWjMxN0E4Vnc0YWc2QmRILzBYenAyRjZRUG1IakxCQ0V0Y0NCeElCODEyc2ozaHh4dWNOcHpNTXNBRUR2S1lHWEZqTklscmREeWlVNDUxY0lCakJlOGcvbkt6YlY3bFlMQ0trS2QwaUowZEEyd00vaUlyK0dZUGNwWnhHTE9TOVJZcllQRVVSQlp2NFhMZmtFUmNTOXp1dDJoR3V4d21UMERuL2Q1ZEw2Mk03clRYclJ0M2k0R1gxb0puUTRoV1FHcE51VTBSOVN5a2dYSHpac2tsLzBNM2NIT2kyZGtubld3Vno2eVQzMkZlSWpDLytET0k1NWdUNnJ2V0QwNGZpU2h4MkQ2S2tGZ0daMVVrL25JVVo1SDQ4R3dqN0JyYVAxYzlPYm1pYnJsUUxwc01WVTRWdlgzWE9ENHJXdjg0Smg3c005YnY0VWplYWhVZ1REaHZGbUM5cEFJb1hicmx4MTBKSWNJQkdJSmpjdksrQXA3Z25IVmJlbzExVk9MRFFPbGl1Y3Z6d3hFeFQwRXRTRnJraGpRMHY5dmFxQm01VXkrQTJtL2lmREphcm1VM0VBKy81VGtMNjF0WVBGSG1jbEt3QVlOa3pRMW54Q0Vtb1pwSFJOcmNXN3Bpb05UN0pVVTd6R3plWWw1VkZiQzM0czBIK0s1aDV4ZDQ4RjY2MHAxcnc4SkpCZmszOFJWQzZyckQ4S1plTnY3RG9Ib3RGeXVoeDIwRkRQejZsd0JDaVRZbWJKcnQybDBhcjFzUjMrcERjZDEyUGJMVWRzUkVuTTdaZ0lQT25wOEVJU2N2QTFSRXo5MWl1bWdxMjhFc2NPc3pvK3owUnRaMlptMDlBd0I1WkxZMERNeHZCUDFaR01hT2hHZmtjVEROUnRmUTlSZjRmUXMxMlk2TmpkdnpTOW5CMFBYM3l6QlB3SjFoUkpLZEVqOHNjZFlNS0NMNzFzRlN2OWRaUVBUcWIxNmx6YVV4Rm5CNUdVWTNtRkVPYVhUK3gxWWxqZzFOTCtCaDE4ZWpHYmRJbkczcUNGd29JNFpkUTlYa2dLb0lERHhSZVdONkJjc1FLTm1CNlRkRjJVOXV5YjdKNkc1S2lrSjRnL1pFdVRSOTZhU2RxMVh6RS82Y1F5dHpqczVPNWdLRXQ1RG03TW96MWdqV1p2VWVSejgzTFEzQTI1VHZKRXk0Q2JuR25Fb1owckR6bGdOcFlxYUgzRjFNSmpLOGdqN01pVXo0Tm5Pb3lxT1doS0dHS0I2WGZTaDZ5Vlp6T3l5MTg3NlBCS2ZzSmNucHpUTTdWeHE0K1BwR1Byb3RJMk8wdVR6WDZXSU9vR0ZKVU84S3ZZZGprY3g3V1ZQd0lZRGwxcE1zT3crVlVNVG9VMDlqN284blpuUTNsMFFHWDJXalNjQjdDaHM1MjJvVVQ3S2duOUtZcElFcUU0NGtQdTN1WS9xQUpnbG9FR3pmTjYyVGhzZk5vSGZQUlJ3SEkzazRTVUtRRlZJRTRackFVOTAvVDdLK0NYSGw3bXFUd1YveFZQcFdhVVR2UW5Kc2J3enZLQXlLN0wvR3lQdm4yS3Y5dno2VU1rMVJqZXgzSERuSmtOWkcvams4WWpBSU1GK2lzWkhweUx3S1Jxb0hPM05vQUN0Ly80U1JtN2tMVFRMSlByaE8zZjRnVDJqcXJRSFpTQ0FGVWlDY2IydDZ3WTY4STloUkNyMDJTOHZPVTduUkpldWxtclBxdVVwZSttaFdGWE9QMStkalRJQlZXTS9EZk1tb3l5ZENzeEFsUVY0ZFdQeXhnT0ltcS9samV6TWEvdEdnT0R2aTVMRlVIZ29XTXI0QUdqd1dvSUMzWjgydmgremNUTERvUlJURkV5WFV5U3I3M1pwS1dSSWRlQkJ2VmZUbEoyZDlxYjhuSFBoVlpFY0tLeVJZOUxIUnNtQkQvbE1hdzQzZEtWbnU1UW51SURZSUdaaG9mMFFxdDltbm9nWkZmNVRKTXBqSEJCbUp6VUpiM00rZUdNVURJSVlUU0U1a0I1Q2ErKzJkbmU5azVjNzlEd0ZkcldhZFFKQWttdWx4Zkoxb0FZazN4TTB1NHRGc3pEK0Z4YzVaMWdjMnpZWEtCOFZXenFxWDFuSmVVMkRtNlltOEtFMndrR0lnSzRnNlVxd1MvQ25rZWdUOG8yRktybGpIQkxxSWUxbjhCaUJIcGNoY2FNeVdkT3R4elRBajFSRXJaR3REekQxTG85WjFGTTBoOHErSjRZSThnQ0ZLTEZGYkJJMWxpZTlUSGRJUzcvRGoySTRDaERnbXk5ZzMwU2lZN1JMc2dJMlk2MStwdWVLcUxzcjc3Vys1dUtkN2QzWC9yWjJ1Y3NSWjJ1Ky95dWFNSmhCMzRpN1prZVpmWXVPL21jTFZ3TmcwZWZTK1Vsb2dZZEQxK2RkYUsvclZxZ29Kc2w1bmZRRXVLU0U0bkxmYmVxMlNJRmR0bmhLM2FCRWc0ZHROengwYURQM2M1VHFKbWdHTGRrNjZ5MDdISEVTWUhjYmQ1aCtFM0RhY2xoclRRYTl0bndLekR3OG1ENy9MSk50eGdnYkFER29ZWUJsNmZYVFdrYiswREtydlF1cWpwRVVra2s3NzgrNHQzby9Ra3IzRERtQ3ZrVDVXNDltMXFsMmVLQ0JRYjFZTFM5a0E5a01DcFBCNEtXRGZlb3NwdFBYbWJVZVdsZ09vc016NW5VWWU2bFVDRzNMUVhmTEJ3bHoxZkNubEpwN2dIaDJBOGJ3OWN2MGxFckFHeFNJcHBNYTl2ektiZzY2cXdNSlQxU3YwRUl3cU1PVEtXSnZFNm5kcHM4U3R3V0JUalp1TzRhTGdRaUw1VGxmUUZydUpDQ3lveFdrSG9TVE9zQk8xR0hLbGEvNEtKWU1oKzBCRHRTSlNTbVFzemtkTjh1Y3BLdVAySUduMGNOVitzSDYvM0xTUjFQN21XOUt0SFVNL1l0RnBVc09iYTQ2U3gvSk44QkRFMXJYSzY3TVRkamRDTEZGb1dhVWJzK0xXTzZmR3h4QUFRRHlCUUpzSDJaUGVUTlAyUElmNVRCcFdlQzFVaW5ER1NJdldZemlET2ljSnVnelBTaWVRK2FJYTNoSlNBYnlubEk1eXpFWmt6ZG9jU3l6RUlDTHVSNzYvVm9UVnIxUVhLdllLNE02aTh2djV2N3plQWhkYjB2dzFtWEJUZEd5OXMzd3N1M0s3QXlWeklFVEttUkJnOWdBdUxNL2wxZG94ckU2aEcrdDBXTXFScFFibXBVdVl6MG44V2h5V1BhNUZ1cHlNWmZHOXJkL1Nyek9QdE5mcVBpTitQSUNEVmNsRitWOEllTUNOYkJGd0g1R2VmeFdxd084RHdOblpVeFpNYys4NExvREJqVFdLUFJkdDJ5alJ6bmxTd0RrNURCN0RzbzIrV01QT0NZMkNDc0wwYjExbU1GQjVTeW5ORXpFaVQvakczTlBRQzhZckJYekNMTXRCVDMxMVp0SUZuTnhLbXQzTG5DTGw3ZTRIWmNoaUpjZENSNmZFV3ZRWmVKSnlXWUtUaEtqOTJUTG1ZREI4d2xTajJZZElVb1RvOTI1aDk0OXFVWit6VGFoSFJ3emNWZkZQa1RPL2MwYmhSSkhEMmtzY21IL3htNE1xazdoOVU0VzBlMEMvM3NoL3oyZkFsTFpkL3hsVi9wQUtlck96a3FrUEFBNGRoTHhyRlk2OGNOMUFXaUpBNmhjTTVtTXdZbWVoOWYvTVF1OU1FSnNrd3lKbUw1UXc0MmhQNUEzSW1QSWxEOWdHb1BicDdqWmdvL0hCKys3YkRPOU05UTZuaHgxeXoxaHN0dDRzajdKRFRBWk5mcXhPSkZuWWdmajFzWVY1VEljUDBZS3oyUWdzOXV4RVQrV296MTBsZnR1L2h5WGNSZlphbUZDbnVNdEx5WkkyTTg2ejVUUEs2WENvL3prcitrWWswR1dHM1VYSUJnVWp3Ui9PSEI0bGhlanQ5VHg5d1dvUUJqZjhLOXpnblJaSlNwMnpzbWpBYlYwaEQ5VzBUeWNhZENoNVM1eVdrTmpRU1lING5LanJMRnZydWlzVEJ5SkFVYkIrQjhOSGhkcXVFYTF6SmwxdTRrbmcvckYyQ2VwQXNqMTM1dWZMcHJ5eXE3OW9WSEZxcTdqVE55SXdVZ2U4SS9VbUJYdk8ySmJ5NXBoWWxxVDdNS011MFVZd3craUFjMHVuS1B4Q3ZaNk52Uk5xSndLZkJXaXk4cXN5OHZxWXF1a1dRVS9DWTBzNjEyUnZCRy9iaFB0L3A4cHo3ODI5NE5uNEM3WGlrdTZScFBTQlU5a1dWUTUvNVZ4Z2NtTFZBUGpxT2VHUkZyUldsSTc3SWgvcjZtdjR6S0VPOVJjdDVXdFhkRXg2S01aWTFvY0pud05NNmNmV1pIU0tkSDB2VklKd2NGQXBEMFFjUGtMKzByL0p6dGpNU0FtY0d2WllYekJ3Y0NyRVh1enYxeHo4Zi9zejdQVTdidXY0WDZZOFFBdDRSOU5hVVpQSE5zNVFvcTFwVG1DQ0M4bTZ4UUlQUzhIRWRqR1V2UXRzSjM3QlBoSjNBTWM0TFhMMzh5TkFNMmpxcUgrNmlmOFBqT1B2VjJqL0xkV0xtaDdjNGUzd0M2K0ZvODB4NnFBaU83VUc1T1RXTWVJYStENUl3Q25PR2dnajBGdWdzdzBIU0FKN2lEeFZJRzRqK05jV3ZMNFc1OTZBMmxjSDJoWTB0MVVkL0cyVGplbFNjRmJkYTdZd24reGhYa29GYXdEaHlCNlU3TVk0YnRaZk1NV0pXL0tPYUMvTDBqMm50OC9TZHVhMlNlL1BGRmJIaC93VHF2ZWpsVVJ6Uk94b0t5QWhUbjNLTnJQemRKRGIydmlKTTlCZW1ERWRKcEVaRVhBY1RUdXgwcm83aXZoa0JkdDFhMGl3UWtpVm0zY1htS2JPRmljSUI3MDFDMWhLRXVvYUZpUnk0MTUyV0tYMjN4TnREeGQ2VWpSMXFmYUNNL0o1KzJURnFUTUVDYUczaGVsSWxwUE1YYW0wN3o1UEtZSXgyVUl5TjMvYUFFU1BBMk0wZmhnQU5SOFNlR3lNV1hpYnkrTkFUTmY3YVRmcU03cUF4TXNoRDQzQU1HazQzREsrQU5VWVZVY2FmZ3RWbFhnN3E2T2hhUnMvVmRZOWZraU1vTG9JOGQxeFJzSWNOaUgxTmhiVXBkT2JyVjlqZmJEbFFvaUFUS3VBanlGb1lKTHBJNE0vOG9Oc1V4V0REb0JjbjJWaTB5amxGNWdCOVRDSzE5ampGdnBubXlHYm56bmhIbkFmSVFENXJqQ0FheitWYjBscWt5d1dUOVBjYjE2dzhENmhrRkN0Vlp2a1lNU25sRUlCQmVSd3A4K2FjVHV0dS9mcjZVMG9KRjBqTk9uS2N0UXhTcGx4YzFTM1pueitnMmIwTUx6L1Y1UlhFWTBtSk51clUydmNlb0IzZUlJbkxUNjVuR2NibEhXTG9xOGRDdW11RHdEQlh6akk1Yjlnb3FkaFpHY2NDa1AvT2gvNXU5VzdtK3FVNWJOQkxCbk1xU1dEcGE2RUN4UHhBRXRpMXVsQmx0dllUVlJrLzZOdFJSbnN2S0Iwa3QrQ0pLYmVXYXlxRGFpQ1d1RTVYbjVEdUhkWkhKamFOVGxoNlU0ektoOUU3REt0bEY0Y3NXN2k4QVRVcW1POWxUeHFGMWRZTWVKSUtWQXVlS1h0dzRzK0U5NWJLRmg0Yk1oSUtNMnFxOGF0UnJHNEtCcERVTzVGZlBBcnhLY0VUc3c1MmtCbjhrSzNNVlpBdTI0bkpBMnFjc1JKb1YrZmFOZVNQNWhFVWVIN2l5alpXTTUydVl6dHJzWm14RVd1QytvQVhLeU5nVm84ZnJialVnbmJpUUZ2b3NNMWVHaDAzN2ptZWxCRm56NVNHT1pXckIycVlYdTFJclJXU1dGTlhMRi9vTzNrVWgzL01kcis1NGtJNGk2L3BVZ1NUS3VKdlhCRXM1S1B1ZklLeTZxd1BadmpTVzJhdFErTzk3K1RHVkRkdFJJSkRTUDd4MUdTQ1JKUFlXRTU1cE5DWlA0TWxXWk5FeHl2aGVQb05MaHBwelVLdEoxN1RwTVh6eFh5bmozVHZNb3ZybmJ4MTdoWHNMUjlwWjE1RjhIQUhzSXZWT0NPcnZBZ3NId2ZyQVkxcVdmQ3JZakVFVm5BeUZaanVlSWpncHdmQzZMMjQyUm9VZE1sRmxWakNtaXljUDVObTlIc1E5TFBybnBCU09vczcrWWZ6aTZabnFqcytkRVBNVTJUdDhUQWRhNTNEV2xZZVZTNzdTTERBYjJOYjBQNEJDcnE3Zk1SRjNMcHdXVisxV1NiUzZlMFJyZnVjNWprODJRcDFEZTNaZHhKcW52MUpSN3lJNFRLWFhhNENjTzVjYUUxaFpoNHdTeWRRM3FJTFUwZU5HRGVzV1RZREtkc3dXUGJhdUIxcXYvNjAzQk9hTHpQRFFQOEovbGdrTENhRmFPRURqYW5oZjNweHBMMG1TUEMxeE41ZnZ6ZWJrbjlHakxreU1uTzB2eEp1V2g3dy8reG5JK2VTVVN4TklqNEhIZmxzM1paWjJ6SENtRSs1MTY2bHJiQWJPaXpkZ0c5ajdUV2JtR2JYZndlS0kwbVBYYnpLeHN3akVkbTBtbGlHRS9mN3AybCtQejUvcmJaWGd5SUkxUkt4SHhLdXBVcmo5UWwxc0F0ZDRJL0JacFpnaGo2WStVcTkyeDBwaUhIYUJWTHUyTElLbGZpaGFKRmh6UnNVaFN4ZGwwUjFYTWgzYU5YUGZxejEwcjdlMDlxa0pXU0UvWkhONXd6TnBZa2RQMEhpaC96NWIvWFNkR0RaSm55VTZFVGY0c3hmMEc4a2l6cFNDQ25PMXdVSU1jeGJpcTZSc05IbVF5QnEzSkQ5OXkwT0llaFNxVCtSUXNCOVpNTDZITFRBZ1hCaDRZOXg1TyszZERNWDVNaFR2RGdpWmQ0cFk3cUdtdm82TzRBTXNjSzdyaGpCVjAxYmpxZjl1VkprL0dzUW5SQkVYMm5CbWlSN0FFR3FTUFRtNy93RkpZVTA2bG1CWVRNS3gyRTl6c2ZqRlpxK2FtMVpZN0Ruc0k2a1E4am5pSzZTOGxSU2xVU2ZoRktDcUNkeXZkcXdaZ2VGQzd5QXBPYk9QZVR2ZEJqRmJZeUtPazZLSTRpZTFSVm9kTUpNUHB5emZaSUhsWmpFcFowcWlSdVk1a2k1TEV3REFqLzlBS0p3ekY1ZTVucmF2d0VEbnR0L1ZKTG5Va3daTGVPUEtZYXM3U2ZLUnVzTkd3WVI1UkEzb3pJbUxCZk1KRXhadm5OUTYyMVRLT0xucm1MazMxTGF1RXp0Tm9kVnI2UExDYXE5Y3dpZk1CcjVOYWdPRDNUenZhcjdDVFFPUUxYRmt6OUFHU01rVDV1Ynl0MDVSQVhuM2RnVmZ2aldka3djZXFQUENwbzRuWEFJdlMzck9FU29jWUFDM3R5ZVNnVTNCZjBZVGRGbXNlbHRlalNXZmdabmlHSHRXOG0xTm5mTXlOZC9xUFlycEsycXM2NmU5ckptRlpYRUZubHM1bDRTZk83YTVBR1lWT0Y4NlJCQ2ZuR3dwK2dUallFTHVFSWRlOGpvVHB3a0w0SUxBTlJjVjBGUW9MNGw0VER0OW0zeEI1d0xPNURBYTJvbW5Ec1ZTOUZDb0FheEgvLzlFem1ncE1jcG1ZNjQrdFM1bFJwZm9lQm94ZzVGU3ZLUWVHV3RJWFdIRTNmbTRJZnNobGdmNStDY0RINjhOUlBUVjFJem90MGlGRHR1RU9zQUdZSjZGQ2tGUVpVTUpkcVNlVkhTSDdsS3plbDlXdGhsYSt3VXFPSHdUR3JOZ1U1NG4zZVJnaG5ya2NYQTRtdjNUWkpIK1lpWUdndjlpTlJ3ZXlYTDRYWjBqaS9NV2RqTERkSTlxS1ZsNUw3S2JtTTVrd1V5aE1TS3g4dERzWnQ1NzRJZ292cGVteVBidHNSK1BPcXc3bXRZQ0QvSmt5TWFFMlI1clB1aVBmT1JxVVVDVXBaeFhEOTVkY0FtcnpqbDgrRDhDUm9rYXRVNHV1OU9GWFhOVXY1T0g2K2tDTVR3YVEvT05idlJDSm0yaVJoNUhkWTMzWllCLzBaTDM1dEhMcXJOcjJMSFgzd0NUdFk3WWVNcGVjVkM3MmFETzh0QW9JZWRsV0p6d1pBeGxCdEtWWVdHNkY2YVA0cFpJN1VLSXBkMGN6RVplL1VNeVY3RU5DeEkxVlNuZnhYVDRlekc1VUU2MEh5aVEvbzVNZkxoZmJDelNVWW5tTld1aklXb0l6UnYzcUFXQnF5L1JuY2tPNVFoSnhLN3JIZUFQRVVMSEI0S1F0QzhESGpWcTRjMlZHR2w1S2I1VXFYVDh1TkxKVk81R0Y2TkJjSFkxTWZLcm5sQStUYXo2c01ZRm5teSs5K2kwVWptd2E2cDJYUTlvaXVhb1RLV1YrUDJ0cDV4a2xnSm1DRGY0b21OSGo3QnZVME1OUGFIYkdhd3J4YUFLRGxrOHUzR2ZPWFpmRE1Ic2FHZURNRnp6MEJyaXBnTkpob2htODZ4a2orN1hWZjg4cDcrNjAwUGZrWktuYzdUR2ZDcDJoeWhUOGhiYWNlRTZNeHJiZlRqVnV0aVhEZU94eC9vYXBIUUxTaEFvZFZPMUNoYlgyaDN6aGJva3pObXlRSU1Ob2JNdVRFVWtxYXcxM3l4alR4ZDRuMUs2ODU0YUtqTkcwNXBqdGwvQ01WQ0RTWmpWd05HYVVDRTJ0TG8xOGVXOXlsZUhJaVcwdlRFNS9vZEU0YS8yeHdFVWNyZkhFN25UUTkrSTNoVC9NVExYamx2S21QWVRUN2xZVWMwOTBoKy94MjlxOEI2YWhnSkd0ZGdxMFRkeGQ4QityekM5dGtpU0EzMnNuWm1SVGpsMzZ1N0dMMWxJMmR2MSt0QUFzekVzSVNGNjVjWUZOZ3I1bFhybGtuVVhtMjRRaWt1OU55Y25qTWNhZzVaTnRIclBQcG0vMHlVeEx3d3NXeWE5bGJ1MHEvQ1dubFZsbDFpQ3ZJZC9KaVM3YWRSancxbGFYazNodmtrT1lCN0xXaEY5YVNiL0YwUUhBOG5BaGZxU1hnQVE1WWlzcUJyREFCd2xYMkRqajM0VXVIZzdwL2Z6My95U2QrTENLUlN1aUtBbC9oRTdRSi80bFRMSWZXckpLa0VYa1FMQXROemlOUkVmY3JxenJEOTM3TDY4Qzlnd0V3RUx5Z1Y1MFdaOTFHRmxzVytPT1FkL3RSMU1tRzFnTzBxTHVPR2pjRTJEMVlidmU0UTB4MjFLdHZXQW9rNjRoTEliVUIxUno1MVBBTlRaZS9zeEc3MFRnNzRRT1FaczU1UjhtVjBFNmZPNWhVZ1hyWC96RTl4dGZwMWlhOHlGa1dmcVBDUjV3RDVJQWZRdDdFaTI5cjlta0RNemNVdWhrWmc1UjJkQ0RvY21ZSWs3VzRML21Da0RWdDhFUjAveUVvSTVIWkFQaEErTmFFWjNiRVZ3NUVFTzBaUW5jM0s4Z3RLVVl3SzhoMG1jWGY2djNUcTlxT0lCTzd5RXVDMEZPc0ErRGVWOXA4KzE1S2xSYldSamhGSVlkbk4raUl2dTFwMjdzckZxTTZiYWYyVEJmcE9SVzRIUmJIZy9sd1I4MS84L0Fxa0R0UDN2ekRwTDdWM3dYWC96TWs1UHlYWTBmUnIxNlY0WGh0elNLb01BSmFwSFdsb0RnYnM0cXNSTGtBWlhYeXZ6U09uMUtsOTRvNEtNY2hxOW9wM3QwcUlCRUVFNFR2SU5SNnI1c0xyaGFtbXJKRHdBeWJGK1BIWWNRdmtTcmZhTE1LK012N3Q2bHJzOUNvM01mWXJZb1hJSUNZSmRmYnUvQmo3VWhiaHpJT3E2Y2wxeHg1WVREUTF0ZW5CWURHOW1xVklGY0o2WnM3UEFwZGlxb0RicFFXRE44b0xUV1JmTzVJV1YwNW90MWVwRVc4TWE5R2Erbk5UZGI2d0h1ZStxMGt2aWJrR294djVOamxGdFQyRTFjS0Z1QnRudmhpRmhGSDJzTWJ3aTIrTkRmeFZ2dHF4WjJhWUNaV3J5enU4NE5wdmwrUThvRjY1b1V5UUw2UnNpNDVQNS8zTFV3blFtaXF5eVBkeVRrTkFZWWhqbmdWNGhBSWN4ZGpjRFJNV2F2NUhWM05kU2kxZUtzSXo3SWhJR2hIVTNDNS9LUzY1L1VITTVMcVlVVWhBZjkvTUN3b0YwVVQrNkZxOGNDSm1sRnFzaTdnMi9nNEQ2RFVkTzUxQmY4S1J5V2pERXZrVzB3bFhLTEltM3RWNGp2UVlOblorSUE2SjdYbjJDOHJrT3lhSnpvRmZ3T3Vyc3NGZ2dnNUd4OThqektIaUtTcHBQdzlKMTVndkw4cmlpK3NLVUFSTGV6R2FGYmRrUy9ZRlA5VWVSK0FsSC9SVVZSNlI2Ny82SC9iNVVkOEJEcGZWMTJYNjNlbm9YYUMxMzdKSWgrWnYyM0VsdzlBdDZzeThzbEpvZUtuV0FzSEhvZGh0VmlPWGtOVUxGQWRON3dHMmNma1JjeGFaTFRxS0IvWU9WeFdsUzgyeHdsTC9mZ0IxSHk2cW9SK0xPY09YWW9YM0lOL20zeUgzYlJYM3gwWFVQTXFRNi9TYmNOTlhLZVVpVXY0V3JKSENRWUtJZndQQ25BUHJCVkJxRzFXSVY0U3pYV1VDOGM1TjJTZXlMaEFDYTVWd3RzOEhxcUJRSFdiSERwa2F2bm5zL1VFN0NuektCdE9Jb09SYll3Tk5pWmo2SjBId3ZVbGJ4eitONjNqdzhiTjc3U0tsMlhmMjJ3VlFZM0lvWlRodHN6akw2SHdwUUJLbEFzN0JOTndYb2wxeEgrZXVXWEttSlFDbm9BTVJPWDBVUFJKSlM2SjRjVlk4aVNHWjNhcml0OUlTQXJOeS92V2FVODFqaXdPUlVWMnZEUTlCL3EwSzEvS0VsZ25OL1lRajFiNGZZTVZ4b0hRSTB1ZWw4dTVmVXV4clRMR1lMOHN1NTA0bzFTV3JHZjh2QUVIZ254QS95RGhhN1M3TlVKMEFVczFJY3ZKaHpIbGYvU0tncEVUU0VPVVEya3VHcG80eEV2LzFtQ0dZQmZpMy91byt4TlVEb0pBR2JWUFNFaXVKVldUVm13NjM4RmQ2ZTRHMndEeTdhZzczTGVGdGNXL3VmS0ZtQ0JPQ1FQM2lHMk9HSm83UnJQVUkyWGlsVi9YRGhmbUpvVzY4aFZMbnVhck95WWJHTk01blVsSXE5SWJlNjViTjhwcXZpTXlKbzZITVpvYU9xVkFRYjdpTTd5OUx5dk5jdnlHT05STGZkSzMyUjNPSlRUU0pTZUhDMHFNVFlKOC94Z1Zhc0o2dGNDZEN2VFRsZVlhTnFKL1I1WG5zcXEyczdsdGNwaFJ5VmRwWXkyNjhhZW52eHlMSk11ZGxRZlNHN3FhbVZ5dFloZWFOK1F1VlV1enRvSWNMMjJ1Q2dxbFV2WDUxdXZWZU5Gd2J1Mld5L1NmZVJnVXVDRlRlYTIwTjMraWdpeVZGck4rRmJ3c0FoalREaXJkOXJyMFJFVWZPaWxJb1dKWnAwQ0Q1cGp2U2c5Wk1mTytYZllvQWl6UkZJcVQvbUZXU0EyWmNLaHk0elJMeWhKMXQ1MnRqZlVjYWsvR3c0alpPeGhJaEppZnp0NDV5ZkJzY21Jc0ZRNDU1aENDNEFEOUFHejlPTGMxdkdnVnQyemp4T0pVcm11T0hrUEs3MjRhU0RIL2wzeUlKeTFaVzQwOGFaMjRxczdjYzc5dVlKOCtoNlJITVU0SVRFcDlDRHcyWC9nVzM2SDVtVHo4elBQeFhWODM3NFlxWmJJZjJwUUdwcmVlZUdMSW5UQ1lSR1llN0N3MkRXaGtjRXMveUN3Q2Z3eHFlT1NEV3BsZEUvVlJ6UE0zUkpSQjFwVFJ6RStQZDdLT1hZRmUrbGtjdTZpUDMyR2lRY0NnT0QzSHhrK0IyWSt2R0hyMFN2MzV1SHVyNDJlSGtVdlZSYWF0eXBrZFVTMW5nei9SYlhiVzdCOWEzQStvdEpXaHlJbzY3eGYxaFdKTlU0dEdLZEV1MkZMdmVhTnhyNUR0bG9rM2dhd3c0bGpOVzlubWZteVEyako1NGlyNmtkbVVHWCtBS0ExRjJpZDFsZVNETmlGZzNVTlEwbzBCVEVDM3pKVHhyWlNuT1Q3dklKK0w2TDJUSTRBa0wrZ1hxSnU2b1V3MzdrUmRTL3lqWDZLWmtnSnhlSEpYeTk5Qk11WGlka2hIUE1Ga3FzTEpiL1BJYndNWjRMcWQwR1dNTGZrUFpCTzlqSGRQcVlHU2ZDR0NsQ3FlY1dXOWJSSU1oTDl5eERTTDl4bjUySXU4b3pVRHF5TmQwUjFzaGtmeVFlRitrYWg0a2RoamFuNEVpekpMVjRXOE9Fa1ovWmdLY3ZZWG4yT29lanZPL3crNXBXTnVPWlpoMjdxcmtsVXdsTk54QngvQ1RoVVNOQzJ5T1E1ZjMzOWd0YXRFazhnSnNtTS96SjlwSTNnUityTit0dGxDeGd0KzhWdDQ1M3dqYjNHUlJYT2NrUWRiZXJKNzBSeWtxd1FpWjQ5ZEtZK3pYK2tuY1ZqckNKaU1KNkplamFQaDBaU0JobEh6eGFic3ZRNDR5WVRpN1Q1ZktDNnVLalFEdnBSQ2t1cVRLMjhFQW9ab3ZmeS92UGhleHZZWkxTTXdGakVGakJ5V0lBUWtQTW52OVBnc2FPdzA2QXBKbzBobWNsYThmaEM2S3krc2JacnV5QnQzYmIwT2ZuUUZXalRwOGlycHF5cGM5dHlVQyt0V1p6c3BaUGgvRlVoL2pWMlhoYXFDSHI0b0E5TEhCVmtKNVJGRDNISVFuLzBUYVdqTmVaN2hHQjYvSXA4OGdkZjFPMnE3ejNiaFRHdGFjWTRValN2NFRFbEdzYWE2Q0dNTi9VcS8vbFlneitIaGYwb1JlbHlVeTN3YjczVEVjSjFFS2NCUDFZTUpFQVBVSnpZWGNHUStLdTA4c3VZYU1vZWMzZGxSRzB0OUZ6SmZaaFR4amhXNzhmc25Pbk9kaFVXa3lzVjIrVm5XaWhXUEErMzBoSzFYMC9QRTZGaHdRcUpSWEVNa25aUkVVdUZucUZMcnRwUkFVcWJ3ZTNzQUp0dEhJMktCSkYxL25EVWVDNmh5MWVMajh2SDFyTExXbzhkZXhHWTBqVDkrckZNNGFsRnQ4aFJVakh4MkxlMWJSK0lMYUdPOUwrRVdaNVRpTFNLc0hROVFVc1FPbnZUN1lKTHlYWXJwZUlYdklsU3pBTUxveWNVTlNmNVdZbDcrTXdZN0UwaGNDYk5jek42UFNzVE5laDhGWncyUUdMQmJBOWZDSVhPSGwvSUw4c2RjY0hMcWtUQS9Fb0pjVGpiUTE2MTNmdHpOOU56dmlWM2tSUHg1WkZVdkJuOFdEUEs5eUR6U2Y2VGRQbG1ReHNHdUZ4REFSR0M0dlFrZ1FUM2lCVTBuVEV4NG9aaUlqcnR2SVhmOERETDBWYTRINktWeS9nWlVRZk5tWWtpdDNjSGlYM1hqNHRMUVVzeDZMWXBiL1pBY0xvNFIzcTA0bnEzU001RmkvRFRpejFnN0MrdjM2YUUybThQRkZEbzE0OC9ZY2ZrVmpqMitFY0xZTTdoU3dCNDNRWUZFYktPMU9PTzJaeENiTUlzLzhhZlZXby9ybzl1NXpEZnhjWU80NE8xZnVJMkJlMjRWSCt5NDZIVlNRckRzMmMwTDltbU9TZExxQjc5MlJ0Q1A3bUFFdGhxSm04MUZiTkh1UzRtaXcwV2tRNmFhNjZXMkZleW16L0R3eG9GQ1htU1VUMHQxQS9LTEFDbzRza1lYcEVBOVpmVmJ4N1l5TDVrZGdDSFF0YUFKRUZBSlZuWUQvSEVJWXN2WTRHWHczT0lSR0J0RXdUS0lpOTF4ekQwcnp0MG1lY0xnT2F3U1pSSmpMcXhzc29tbkluTStnTmZVNXdkbHpUYUJDZ0dib3pOR3NyaDFIVC9EN3hEY0QzYTQwL1BoVGZqTW9tVjVqMmdNZFpwNGd0eE1RWk5VaGNsVDVNNFBZTitJK0djdVFMSHRjc1o0dE9WS0F3QTVhWlM0VHNTR2oxSGdtYXVKOVZWeDNJRzNNUkNYcEozd2dmVTdrdGlmTjFMcXJwUk5Va0l0L2lPRmlDVExpdEVOSmErT2NPcVlSdEhpRm45MXhYRjdnb0FFajJhNjJmSTBPaFdiMm54b3dDSHZINDhZdkh0eTFEWjJCMWlFM2h5VjRubnFnNHE4SUtOaVloOWxlMm82YnJBYmFReTVVMUZxc2tkZzhtWUJlSjJJYlhQNEczZ080Mks2dEk1YWdDYUhZZ3RWTUFMb25jQXJ4T0QvZURKQXBQSW1kQTU5a0ZZQ2NlZUhhNHZPU2lJSmw3SjF4aDQxSnNUdmN0RkZ0M2sxYzZQUzdTQ0Rmb1JEOUc0bFBSVjI0RFZSOGhNQUNoa3BWRVFRQTZqYXVXVm5UMGR5WlViaUdSUlM1SHYxUDYwYUxuNnFsSnUyS2RkZ0I5ejVpRXVJQXU1dFBuYko0bXJ1UDJQUExCby9yeTU5dVFEVmc5aGJDS2V6eFdVL0lSamNYU3k2NkZkVkFZMld0RHhpZ0hVREZJNWo4Tk1IRlVUZEl0QlFPamkvejhGWEFQTkR1K2pWZVdDamoxU1lyVVFSbmdLbXRNTkdjc3U5MlgyRHhyQ3JwK0dZYlhTUEdHQnVFUGV2Q2dMako1L0dMTnJjQVo0OGpSSWZQK0dnTHdxM3lSTGtrbU1yeVlURlBXVEg5Y2pFYWU5VWxQalhmN1dJb1BrL3ptSjcxRkh1aUNBanFhSGhEaUtpZzRGeis5VnhDanRaTEh6NHh4YTg4L24vd1lOTi94VUo4cHhHZGR2cG96VWZNYWkyMm54OTZqZkh1R2pQK01uMC9SNC8zLy9kYkZCTUhVbkxvdE8xbCtISThhZElyMi9ZeEZkY3pYMU83dkZ3ZU9ObldRL2NtNng0UnF3SUpEN1IvNG5GWjNGVks3TXdZNS9IZnFYNzk2VDZBYlBPbmpYcUVXK25IL3lCTS90aysvZTZmOFpIdE5vMS9DOGVjbE9IWWVERGJyM2tSR0JZWUlHYmJMd2RlZHh1QWduZWdvREpQWmRCK3V6OG02SitKcDV3QkpjMnBhUjl3VEtCbmNqU0J4eHZDL1FQM0tiRzJuNmV3MlJXZjBqY0ZCM1p5dXl5Vmd5czdPa3dFYVVNbE1la2toR1V1MFYxRzVXazBlb1lEMWlBemFxYmhhVUJnRURwTzJiKy9TbkRIbjNocko2RGkrdHkwY3BIKzlPQUMyd01kU1A0Y21mYUhqcDJxSzFadmVjUzBZVXBaTDhhM2RMbjgyN3U2TERtVWp6OWM3NWhGR2JaREprWjNZWEk2ZUtzdkQ0ek9xNG8zRHgvdi9OYktpeWhoa09kbDFuaktOUFRNZEFwZ0NnS2d1R2I1L3NEZUxDeDExVFIraXd4VlVLM3VpaE5UYzRWa3JwT1NFV3lZNUwrRTF5ZTd4Mk5kY2lpWWhCcUFDRzkvMis4Q3FuUDl5eDBVZUFwVkRuOXAvWmdVbUZ5eHpJVUtYd25kbDZJQnF6OGR3Wm5mOGljakprcFJUNXlkOWo2MlZiWmZ1VHFLVEpQZjBRY1IzSjFvVWJXMTZRVUlVL1F3TXNSMU1DcnZXNFlwYWFxczhwc1pjZCttR2xVQVlUVmxSRm0xM0V2OEV6ZWlWUUUzanc1TnF0MytXYTJHcGtPd1loeFFYM0tJclptandBdEwyTlJUejBEYnlUYzMwVXltR1VCY1pOc1g4ejRhZzg2bGdUUHlleXlGcHdLSW1vM0dwNVRoK3doWkg1MmpvQ1RscXBTVklTVFFhVmN4cEVYdFdieDBpOXdBLys2elNtOTJXMmhjRTNNWm5EU0RFU0hZWlpOVVRZRERYY0NPeVc3SWtlRFJkWVRSd0Y3UFVyZFpPdzhhZmYxU21zTklWL2ZTY2VQNEFsR2cvdDk5YjZCejdWRmZTTmxIM05YenpSbHg1ejM3dGZsZ0lDS25ONCtFQ25USjJISHZSZXVITkt6dUFsSHVrOXo0RUgzalVacUUvc0szVlU1Mk43QzlYZkQ0WlN4WE5maitnZFVtNmxHbUZuMTN3MThaWUl6b1NxNW1jaTFrT05VaWJzVWhwQnJXVVVYb2NVelJOTXFicTBMMzE4NisxcDNKc3ZFdjRFMHBJdDR6RTFsUzBLZ0RvTE5mUm84b0JyNWhaWnFCNDJaUE93QWljYzZvOG50LzNUK2tpTTRReEZJaUR3ckxiZDFlWk11dnMyZkNGYkJtdVlIYXdnRVR3dThuMGl0Q2hrUWMxQmtQY3oxUlpkaEFyd3dTYTJwOEVVSjN6ZkZBcnV4YnpFcjNGeXVRK2tVNDZuUGhJTTUrQjVobFBXVXFxL0V3Q2ROVTlRK3A0TXB3NjcvajUwdUtzOGRKZnV3TzJ5Sm1OeWRPeXVzak1tQ2FCMGI0R1dlQ3VpZjQ5MTR4UTFXS1NFay8vWURmY0xsSWVkc1l3bmo1Qi9qWmozMWQ5cWEyUWhXWDYrSEIwaFg4UkJpdUVIMVVWUkM1QTY2Y2UzcXg3UkllTFpqU0hNM0xwdjdpZXZDUkx2MkpPQnFnaWYrM0JHZXFoSm5SaURXQVpuWVh3UkQyaUtPTUpEM2JRU0NTWVUyRUM3b3ZUQUJIMmR5dVk3WU1tV1Vxc21RWW92OGd2Q1BZN3lzaHhFazRuUm9LSFlsNmpFcDVta0NGekZvWDhxRHErczBqcENObDQxeDhGOE5aWTJja3ZIa0Y2R3NWTStpd2UrR29pNTRkMEppVllNV1JxSmhScEtvQUQ2ZWp2ekhWYTBNU08zMlkwd3BPaHphWUhXaC8zNkhSZGJJb2xBTVRkUVNmcjUyZFgrb1ZBbVNiTm9QZjFaL05KcTVhUWNvN3pRNEtJOG9zNlc2M3hmL3VPZWR1VG9aV0NnWXA2SitvT0NRMTBlWUlRc1NCSDdrZnROQnkrcjQ1KzlvYjU0UmEvT090Syt3QXpjUnNUckRSMzAreU5vMStrbzZLSUFqdVpOaDQrM2t3RGVnem9jSkIxa3RUTzlCMkVWM01oNWJqcjNCOFFrb3A1dnQ1SC9Fc3VkUXN5ZmoxK05ac0JycTB4c3k0MmpRYzMxckJHSnQwT0NMZEh5emk1ZjA5YTlRZVcwcGVkNEd2QVJVS0UvMFpJS08xYnZwMkE5YXNXMlVRVnFDOWlucjJBbkdHOVpUVlRzdUk4R08rMXFuOTdxdTRLNmNjb1RoY1NRMnkzOUpNQWlsbXhFdzdyZERvaWV5TFhvdXJDT2JpT3VydkJUS1kvcEljczNRRnpzaThJNjJQN0pSMnZKejVCdE8xWWFpTG5uNnF3d3I2cHhwMFlqVFJoTDgvQzN5UnZEdi83dXNvcXRReWsrclQ5OUF4Y3d0bUdaNFUwU1V0V0plbXhQWEloYzRyU2lrUEJoYTRPM0xJT1dyS0s1UVFBdFV2R2lGVG5tazNMSUNkVjJrUVlRM1BtVnlmY29RM1VmZkdEdjNwVVdESzBiSE83VW9YNmhVdEtraHNFeHhHL2g0QmRiZTB3Z1ZWOExkZXExZ2t3aDUreGEyY0lzd0FWTVJzakFPOTNsYlNuUkhuQ2t1Q2ErVDllYmt4dzBaZU04R0Y3dWlrZkNQVVJEb0wzVlViUG1GVlBtUy9DM2ZSd3RDN09NU2IzRW1DN3BiT3A4dzBZRDRMcFZGZy9naHJ2K3BlQVFwNnBacS9tVlVCSG9XSnk0M3hmOS9Eb1BWdWpjdHJJdFptdmpwaVNiRm9mdC9qdldqYzBCTFRmSWJYbG9kcFF2Q1J5UzJqZzFWL1JraVZ2c0duUm9ldmV4VFpoaDRvR050Q1l4K1B3RnV2bVMzdkk1S3c1Q25pNWRiek4xZTAvV3Fpb0pUamU3dHp3dkRERVhkWnN6SnlmczJ2RjNHSHpBVUMzTTN6ZHRFb0hicDhac0ZWL0lOOG1GUmdnZmZ5ZGFQS3FRK2FYODc2bUwrTHI0QVBPT2M1cXY0ZVBYWDZUYWVMK0hUZzJVR1I3dVNSdllRNXh3cUR3eGNkNFJLbVpySm5vaGVnZkhzSUpIdWlHbGh3WmxBQ1NhaW9vQ0ptL29LaFo4Rk1qSFFvS3prdlJhQnYwdU1DZGR6N3czd3p0WWdwVUgxSmFLRlc2WDExSE1HakpxVDJDZFJqRFlkNWQyYVZDakJmUHNRWEludEF2R082SXBweXk0SGUxOXh2d3A5alR3TThWMnozdnFNSzhIdHJEdlpzNVlPWmlSTFd4cDRRaEIra2VtYXpEemt2bld2UFBsakdneEZFdGl5RitZRjN2dHBJQktrcVlpS24vUml4bWFsVkVYR2hIMXJFVit5VVFDTm14ck14VFFFSUozRzdrUDU5WUJEeGNKQkdGUVdGOXJZTlhyUHdrY0szQXdTMkYzQWNwYi8vVy81Skh6dkxHbjNtNGYySFZlTlI0dGVXeUpaaTY3dGNwMFlPS3J3ZXc2a2JOWGNaNGxzdllpUXdXZDVuQllzcml2NzJoSkNlcThyNUczMjdPY0I0eHkwVXVHOEdNM1JGd04yRitlbXIvaFc5N09oK0R1OVM3NWV2SGJYOEJYaGZ3bVFPSGxHdTV4djVXRGczREM4QmlSUGljM0o1RzZhZ01nbDk5YzFhemZ0MTJQWHEyTnhFa0REM2dUeDZnWm80T2h1NGg3ZVpzeis1Z3d6VHpuVFlWSmRya3QwU3BrZ3l5WFgxL3JtY0QyM3lLZnp6TG1jOERiV3ZEenNUQkxxMjcvRlhlNCt1a3k3VzhvWk40UGVjNlNsVzRNTzh1MVJDa2VuMFZra1c4Qk1TZXpXL3ZIWSt6cnFyV2p0VURubngvdW5wZ0ZoTjkrYk1vUTlUbjNYYkZydEVmVnFqUkJkZWt1YmpIWlNxVWhWOGoxOFY0dHpTUFU4emZBZDk5SVNsQjFlNk41dGY5RHEwOFlFWHYyYjlhZzBRM29KL3puTXBQUUNNSXpxMVVXK1hFdlRtU3I4dmdKWm9DN21KY2FkVlBJRC9PRkNRcGxFVW4yZHhjRXBXQWpyckd6NytXTzV6VFk1Z29LSWJzT3U0Zlh1S2lGZmRZa05vZ3Vnb3FrQ2VSZktBcTR1UTlwem96TDRhYVNoUHdFbjdzRHRubmg1Q1g1cWNWeHphZVNKL1JHQzBFTnNzcFhQRU5ITjJPSFdLQTkrakJ5RUFNclR4enh6cVB1UVU0cjVXRTRxajNLWVpHNWo1Rjd0T2wxVGk1Vmd1Y2ZZZ2h4ekhoZGNDQlFVcGlsTkJzK1ZyMFZsUjhGT0NmRnpWMENqdGFuUHdZM3NpaGptODhuMkxGaUVMUFdkWlVGSmFyczE3bTVPMXRTSkFVbkhhOUhFQXNqa1VmNDV0L2FPTWI5aTdveDg3WTZsRm9iKzZuZWhWelpHZnJIYlRmc3NGcDA0SytOdHJrNnk0MURVV1FaTXJWRExwT0FlZU9IZG9HOFpQUkdnL3A1Yzh3cEdWTHE0RkFvUGRocS96bUdXSkYyYmU3d3l3UVo0L0c5ZUVnNDlmWngxOEQyV1BvRXZzRVQxR3V5ZXpMMXMwY1pSQ3dlSldaTVp3UUcwNXB1WTJVWDU1MG1kVVIxTWpzQUdDNHVGUVViUUFOSUVNYytyL3JXU0ZGTUNCRWpxRVBpVWlLTEJUM2xDOVFDYXlGZHgwMmlrYTU1WmdNcGtYWSswY1hOZng0R3cyZ2xQditycG85bW16N0dMZG5YYWgxdGIvSHdqVGp6SnRMK0tNTkpmMTJBY0pid2dveFNzaVhScTR0RHk0bVJaTmVKbm90d2wxbVJNSjU0VjBwSytIY1IzbU54UEZTYklud2E5Zm5LSlQ5VXMvdzlRNGNBekQxQktFMDNGZ0hiL1AvODQ1VXNVUnVzNWFqYmpOaG9tOHdpeEw4OUh5TGZnUEtwUW5Da20xVFI1TVRwUjhxaXRpUmF5UzVqanprbnplOHUxU25EYVExbnVNejFUOElxb1FZejRDWnB1ZXpBdlVnMzVzanM3RENHNHF4c0lLMk15R0lLVG1MVnBybzhMZ0REb3hRd0g2dmFsUUtQQmhqWHJBWmlyS1BkREtUcFg3anBCTVBVaXh5QzZOTWpYM0FXdWdDcjVnaGFDR0ZOeEhpMUNVNi9FNE9QK1BGMEg0TTQwN1MzcUhQSmhRbGQ1bk94cDdYcElCcVJ0VUk0djB4MHIzRGl6OVlhWHU4dDhPV3dSR1J6L2sxMGoweENMZDdTUHhoZEM3dFdXcWFtcXE0bmlZOUhMc1I3OW5DVUJqdzc3cU9IaGx5SnJxZ2lSVVViSTkvN2djM0FOaHlnZ0Y4ZSt0cnQ0VnlhTmI4cm5CeDdzLzhJQjYvM2RJN05lMDBpZEpoZXhjeXpsRndzZTh3ZFBRYWY2VlBQZERYL2VQakhDaW9QQ1NFVDRCb2NGdFduTENUQjlKckNJamR3ZExiVlRWQnVEdm4rNUF2UFB0NUZiRWpnVHV2QktKZkF0UXhoNXp5b21VMG9RWVVVTkZSTTlvVmJVZDNjaXA3eThKcTFBYyt1QXF3VkxLSjh0MDVaT2RoU0JHcHBDRlExWmg0VVJ3YnJyeFJieUJMd1VTd3U5Qm8zTzdBQUJ6Y215dUNhS1E4T1RuNzNEcUhRVkdCQ29mR0JkYWRpZWFuUGNjTUpoa1doNUlnZTRHd0F1by93NFpqV3lmcFZUeTYyZFJqd1cwM3Y0VGhTUHpsZWZTVzNidzA2QWxkMUNKQWl3dlFlUXNDNUpwQ09lQkx5ZDBSdmZXS1krT2JzVmkxSUlsZnU3VzI4Ui9qKzJqOXpqQkxqS01sQzRkeStZdFU1QXhER0tENktQa3FDbE5lVGthR205b2xtRXVEM1lrMzBsVzBoL0RkTmVKcURIbm1jSnV3eW9VQWZFYmNYalVEaGhKY0t5MzRGOVJGTTIxeUQwKzRsYzJyMlAvOUNRTDhwUUJMTDFwUFRrWHZGVGpVMXJDMFdzWlVPek5pUU1UaU50bXBBaWpLN016YW5FRStXQkJZaytrcjZpSmNlenBQY3F5UCt5SGJIL0NjdDN5eTRrRElzOWVvbTAxcDBPbzdlOXlLQTZhSUJHWmdtWE11eVdLOENRSGVqSTB4WnNjdWhjK2FGNEhaeHhDTzBBYkZ3SlQxY2QySWl3ZE1HTVRnY09tbmlKUjNPWDloMUk3NzRkakp3YlZldGhkYVhDL3BQMEVtdGlUZDdlT2Q1T1duZ3RCem9JalN6SnUxc2FGRVI0SXhCQTFIMmdUOVlUalNxL3lubWFjQ2FIWERETDhFeTVqWExzRnFUczZYdTd4dDY5c0VyWSszK3pQZzNvUWkvQTdoOXNjelVNMmYraGtDNG5WMGpNRlYyZm1EaTFaZlJTa1RkelZib3JKZG5ldlUxbUpVVlJycGJwWEY4RzY3ME9relc3T2pRbXJJWmJBS3JXTkFPQndsWSs3UFdQMTlZM3h0Wkpqb3ZIU3MyTFdIYnlZUWs2aFR6cGhTN3U4cWYzUUVzQkhnWW52KzhmMVpDTFdISVl1ZlN2Tkordy85SUxGZnJmcm5LRm03QUlKa3hTa3FidEFvblNUVEpaN2FnTkFGZENudEJpVmhKeC9zNVhGa1VZMGduK0xYbCtDa2I3K0tvSFIwVVRVVTBUeVBvMDBpRlhqVUZiUzIvVmpBVXhQOG9KTngzbVFlbWJncWppQ1U1SzdvdDhoUkV5dk44SlJlODhYeGxGWGI5MnFpU056cUpUSlYyRnUzNEkxbm15Z3BVZnlPem05Kyttcm9TcVJTbW9ZckdpYWZCaUV2L2xLdWE2OUxhTTlFWThrV1NkeUpkSG1QZWM4blU0SzdDN2Nud1lhbTl1TVl5TjlpU0dpSEN5VXB6aHpGK1k2dEwxaDV6TFM0WXF0V0p1anUxeEJ2YjVrQUdjM214cE96QlcyaFJoQnIvQlNkdGkvUkZtTFJrMU9jU1BLWDg0KzFuSUdLOGJSN01jYWxlVUkzR1V5bXhDQWYxa2NmWDBSSFFzclk0UnpXUzVFK2FRa0JyMzFRK01KSUFHRUtSM2pNZlFIcE1IQTVmN280emlpd1FYNkdYcXRocWYvQUhjcTdGNFJsRmFXUENZSk1FV2pzVkZFUlgveVdKUEZmMmRRdkprbklqZ0o1S1lkYytOTWMyVUtwdHpSWTJhTVY5LzJUd2I0K1RrN1BjR2FTMWozTWt4Tit5bEMrUktjb1hpSGxrSlBRMGJReE5CVlhUZ25zck00b2x1T0tpTXhCbkZySk9zMWJWemVQQlFBUHdYaDdPVkN3MHhzUVAzU3o4Skd6TnhSeER5VHJVLzFkZEd1cG5UY3JTL1dpUjFEV0JUaUp4Tm1Ic0pWWXhvZ2RFUmxuTGRpUVowbmJqU1FWOFVDeG12U0wyakplN094WVFVQlhuK1U5cUdLa1ZLaFc1d0I2VkZjcHRSTE53YytBODFKdmZpaXQxbE13U2cvY1c0RkFoam03SVZVOHZFNWJDN0dWL0lEUDNFUU5OMFRacXRzRnU2Yk5adXVmNFkvbWxITUhoZEdNUWtsR2Mxc2dvb1k4Wmtzc2d3VzJ1RDJxeGVrZElIR0xPTktvQ21GaEpmajdQTUdmZ2w1Q2cwRm5adGUxVlBTRGIxZTZTRm44ZlNEM3RwQjJORTNqUW5KOTBYY2hEZlRVWjR5MVFabDIrMXB6TUhOUGdCN0dSY0dKSWxiSVd5YUs5enIzRTFSUUNaQXJhSjFDZ2dnRFhlaW5GVlRWTkZKTm02eGV6RWp6S1JPUGZTcCt4NnlVOGEyRUNzdnhOLzI3UjlDRS9jOUpjSHhnWUVvbXRTcFZuNU03K01YcEp1WFhBSG8rV0FPdHB4WmhNbDRHMmk4YU53cWpnQmxlYnJ3dit4TmdhWHB0VzViRXRYMGRuc1czVnhGUFJtMkV1VjM4c24wRUFrL2M0aVRZM0lhMkEreEtJSEREaTR1R09lS2JLa3cxQzQzbkkreTFXNTEvSXkyK00yOGRBc1JKbW9XTG81SHc4TXJybExsM2xDc1c0RklWUDFtQXI5RWRWVjY0N3NSZUgyUUovTENiVnZLa2hWT082N3ZYdCt4WE9DQ0d3ZmxDbE1OeUx1SXE0T0luQzcvck9Lb1JYWnVnUFUxb2lXMURTdmllcC82Q3kxNVJPV21kaWE4SmpjSlFtaUFwdE9CdWtlUG1JWm1SbmhBU1FrczBqN2phalRPbUxRNDR4UFc3ZnJRSkxZMWNwTDBPTUxiSkRlb0w0U2ZDYXNpcmQ4eTB3SVM0Z1kxU3BXczlnZFBDcS9MZGg1b3NseUxSd3pWQk4xa2hmYW04NUd4YVJkYnJ4by8wS2s0WUJ3SldVKzBuK3RQSzRoY2hxK0NHazY3SHRWR0dkMmVzaHdac2hOOUJrTllCeWN3L2R6Z0F5T2xiUVFKRktZellSdlRjdnhmS1NFR2x3T1dhWS85RWJVVVhYU2hLcWhBcDdOTzBBRjhNMERpUEdVQytXb2VGNmQ1YUtYcXBCOFZSZUVWbnFpbEJmYjBRT0Q1RStodG1mZmtSOFJjV25HNXpLV2JzN05RL3lRbTFsMCtraHk0a0NwcTErTUJzS2FLRzBhbDVpNHRpT1UzRVp5VzVST05UVFEzQUc3Wm1rdllxbG9zYnJDWWdHSzlkaUtDZ2EydHFxTFgxZ2xCb3NXQlpYVVlGQmhjeEthUWJld2lvWTRoOUg2cjlhK2twT1VtNFNBSVJkbXhTOFVsNWZiRFdiUlZjMlMray9HdGZFSUFRd0V0Tm14MmhrbjVoaGVMSVQ0VzV3aGIrdGpzWTFUaUZzZUhwbUF1SnJJMmV2N05SZXJxempBZjVMVTUxL1Q0czBtWnFmeXp5UG9XaGY1enF6dFl2NEJoWUJPdjQramQrbE5HWGxvT01MUFJHVG9xZmxvVmJ1MERHTkZJWnNsVWxVZ2duenVmMit5WXIwWnZWcjYrMjczTW9ZdXRkYUFyUnJtZU8zMlBSTFFGeU5uRDBPWjhsRmVWd0ZiOXpOZGEvWDluL015QVJmdWw0MEpESGxwQ3FqK2Jpb1g1a1RlUjJkVWNsQjEwUVdZUDFaVEd2emdsaXdkaDA1eFpEY2dYRDFqK3R3blFybXZiTDh5SDhZQ0ZuUE5oWjE4TlJnYWV5SllLbGtjUW85a0dtMEtHQUthVCtPamxRRE9qUHdDZUQwcFdmNGozSVV0ZXhtMGQzbHdTQ0h1Z1plaDVzOUF5MXVJUzFRNnpYVm81T1hsc29QOTkvZ0dZdkJ0cVg0ZlY3bzh3K3RENmExMWdzamIrd1RycGlLWjkrcVVEbWttNkpINGJwVXhydmZJNmg1Y2FHS2Nvam5wYk9uWjVJTXhIZ1ZZUWx1MlRKTUtRTHNRVWo3bWE5WUFLcnhvRFl1b3hsaFdmR2UvWWFlblpkNFM5cW9xS0p1TGdlYW85MStuZmFvVGwyZTVsSXZUOUZTdWthV2YxZlhVbGRJdFJ6aUtnRVNQeEFtZERWdmYwdDFWUXByNXljL1JpMXljWjdnWDllUzZmVWRsME9CMTFqcHh1ZEYwM3lEYkJlYzgwRXp3VjdFczArb0Z4VlErSzRON29pV3RRQUk4RGplc1pxb09jRm8yYzJ3OHVNbDZhL2ZKWUNaYzRpNlRrN25NSDFGNHVSTmFSa1d6UmJhQnRzWVhyd1Vmd2VZZzkwNWpEL3g0aWhLVlpxaWdpbTlYR0h1MktrUWluUHJGZTNtYUZ3Z3d3MnpJQkt1aWs5NURibFJyaFBNUFZ3TjVEbWRQLzNRUmtWQkdyTEUvS1VVbnVKanZWWFFUUHZHbWN4eXVMT2JqR2EzMzJtMytTQ3g0UnJzb1I2VHBtcm5SSTNsV1lYZXQzSUcvcGY0VWpQa3Qzd1p4U1JkYWFFbndsblh0MC9EVVkzQnJPNFZ5MjdBSnp0VTFCUzFEUEs1djZMbkJTMWNKSHNrOEY0SlVUYkFnZ21Eb1JXSTY5QWxyUG9xSU5Kb2p2UksrZVI0eXhTY2V1U1dRYWNrU2lUZ1k1aCtROCs1aWN3bkt0K3FYQTlYMWFaYmhCTlNUZGRXREFxbCtuMXJNZG9lWU9jQVBhR1lVdEJnSWJrUHRsdkhxbW1nNVVxT0FCMlM3eG5RdUsxR2oxcGFrTWcyUHpkY09KTjA1aDBFZVlJNEtXRDZmUzB6bzBONXYydUYwTENTbTNPZk1JMzhlN29HQ0E3N3kwVjQwUHVqUXZFcWlGaFA5VkhFS09odjBIeWlvcm1IOEt4dEY3TjRJZWhuRGRqcjc2bmNqQmFURUlSUUQ2MG5KelVzSysxTkV0eDE0WDc4bFpsUEJKeWFZVXdhb21tbGxreTU5anNaV3R5cjRXekhLR2k4OFlYamtpK2dCSDY4K3VMbU56RUdTNzJPbUJVNEZYSVJMUGtJUW1BbDRnbW11aGduL1kycWdPZXdUVWhHQmpOcWpBVTU3UnlpZm5PS3BRVGpML0I2RjRjQm1mdmtPeWdNM2pYdGYxM0xtVFN2NHlsUElaMy9IZGtRKzhVWEhsTnRjNDVubnlIQmU5NFJoUjE1dGNkZnRaRUhOZGlOa2VWNkNOcjJNT2E2dXlyK1VmRkJCa3lDWG5YbGxuUnBTVENndFFaYVBZZlZ3bCtza0h1OEJwVDlSM3NmdnVNL1lTS0FCNDdlNzdOYVQ2a01tb2VqZVhGRndya2ZIWHRTYWh2RnpjY01hRGVHdThsZHhTZVRtTEV3WEFjanEvSEJSM0dYWUE2M1VhRDdMa0xiTHJ0R2JFUFNqUHhtUE9nNFFwaE5TWGttcW5zaVZrdG9xMUsrUTAyM0dGeHdHVHJUN25PZXQ0aFQ3dWVhclMwdGYxZHNveTlTd3g2bTV1MkY2TFlGVlJYZ3MrM1BZTTBFUEJCKzgyc25ha2N5QnpLU2RGQThCcC9wT3NvWkJXbXdZOWdmTFVNRUcwdzdINFJVL0NlTU8yU284cFpyRWRIRWlMcDhKalhLak0zZXBkZ1NpdVJUUGFHN3lsb21tVlNadEtzNGpDSXZVUlRRdzN0K1JiK29PNWd0eFR4aFZKdXl5Q1BwajZCcURLSGVIV2QvTFpMdWxUVU1hS3gxNUhhYU11V21LcHpMOGNqLzJQQ3Y2a2o3eTFIT0NGTlFFMkNJL1VaZzJXSDcvUG55S2FUL3Vzb1grc3ZtQmxxcmxjUXdVSlFlcEtpSkN1ZXJwTHNmM3daQ2VMYzZNdUpGZlhoQTFydVp1SzdvK3lvZWVPT1M2VXNNS2x3bUtuRHJJcmtEbjBoT3dyUE9aTXhVay9iL09JbXBpZGszT3NGQ250RFlMK1ZuSUFtRE9JOHJ5K0pqVitpZFhGM0dydVhHK0FlQVE2RHpqZTN2VTkxeVdjRE1kVnZkeEM5RE1ZWFhnVGZObUJZdDVFWlFJRDVTMkZPMjUwS1E2NUZqVnJHMDJFbmNBV0dvTTBPYWJWWmNqenIvYWFjZldyeE1PSGxuVlp3aS83eGtMM2ZXQVQyMUlNaVpmUFNlcGQ1QjNhbDg5T1hwWFJ6UDlBV3NaSHczQjFKVUhFbmlQdXN3SWlpamJEWFVxMHJhVTlranRQZ21NQTU2dXFmS3AvRWdOeVFEWmxIaXYzWTl3OW1RUDViMEhrOUFTd2MzMnBYSVgySS9tZFNSOU54ZUg1WkFhRmk4WUxxVWJ6QitndE5Yb0liNmV3UjVqdW1SRlZTNGR0T3UrdXIwZzVYa01xa2NCWlFqM3hNSnpLUEdPZHIvTXVxUlc3aGI5aHFJeE5yNDdUWE1XWjdJemM5Y1pJSlIwKzIxcHJhRURrb0g0ZFlsRzIvbk1TUENObDA2WWpic2hCZGU1MEFseWI2RFFwTlN0ZVQvZkwrd2hmS1BHOEhNQkJrMW9sLzJRMDBqWW1ObnFUZVJOeWpKWXU4U3BZekFEbEVNMmVuZGozd1BpMmJzbWZBdkNrUk00cTVUcXRDVzdkbzF1WlZJUitMcUd1cG1IZjlkREoyVnhldGlGUHhwZHAwT05HUk5MYkh5TkZFc2x4azlsY0tXRUpzaTVYcVZvTDhXbGI5QXd0bjd5dkZxOG1qTG9hRk9WTjFaOFY0cGRIK3NwQVV6ZlBRcjBpcXJPNUJIaE1ndHBtTnNBbVIvTUVvY3RpUklXajFsKy9uUHZBWlhITndSb1RBOG1uZWp3VEl0OXkyWm9TMzFCSTZJd2QrR2NpVS9QWGNhV0dhQlRNcncyclF4VmdjdVA5TmNrbE1IcS9CNC9pZWt2VElaZnRHUG1hM1ZLZis0WWx4V0Q0T0p5eUdEV0lRNTcxZ3ZBVmhxNUtzbGRMVGFTR1FkSXFWOWtxVzlhd29lL01WWlcyOUtYT3lRWFhPZDV1ZlhuNzgrRTFjQ24xVGZwZUdPdWlUVjRUOG9rbFQ5VVJTQ1JKdWlUWjJ0QUlOL0tqRSt2NUgwYm9qVW5ESTN4ZnZtT2NKR1pzWkF5Y1RZaVRMOEtISnR4aGJMQnZOVVhJclNkY1dqSGVtUWlMRUxMeWlKejIxMEZPV0djOEVHR2lvUVUyR3B4MVUxVHpYaC9tNVZTOWNpSnhzK1pLZFU4TFNsdzVkd1Y5WGRlUXpQZXRuV0Z6OXZCRndrdFZ0ZEdYZzNmRDVxT2ZiaHZ3QVVjd3VhSEpaeUNOZXU1SDNkODM4dWhLU0ZVb3NwYjlmTU91b1YwZUpKaW4rV2VQYkkxbGJEWlB1QWFsV2lPczFkVzlwS1Zaa2dyNFp6Mm5wNVpBb2NzUnF1YU1WS2tJcHo1U0FVNC92L2U5ZVNhZ1Qwd3hxYkY5eU5tRlBkY1lRbTJZbkdZdXZtaGNOcTlJYVFsanB3N0tDNXFKNWVYMTZpVWxyUks0MmU3RFUvaXdQVXF0MnQ5d28xYkhGNXlRaUJMR2l2M29TZDdLSE1sZUw3SllRK09BV0dmSjJyN1pqVVljVFF4Vk52blYyRjRsVmFLYi92cXBFdXMyRCtISkkrNmRsajFrbk5IV2g0aUIzSHFMZnczYm55c05LUTdRT0ZoT3pJakhWcktNcjZwdmhqOFcxNEpTd3lZS3NDMUNtQW1pdnpQWW5pbEMyanRlMjcvUUZMa3RwaXN6cnYzTkZEMHJBZDYvSVZ0bFJ6QkFwN1JNOWY3bVpzQ2JYNDRBdDZvMVYvdDNZa1FpWGRKMFlLcGxvN2FWY2JsSk5oNnkzTU0xZTRrSHFBNmZDZ01RaVlzdXhoUDJ4OGNUbDJBNUZRMm5BVXJVb3BhM0lEZ1JpY2xsL0xKRzkveFV0bXlyNHZKNTdqOElWWjFxeXdDN3FWbnRTNUZ4ekRSTFJsdHNCRjBpUEErQVdPYkUzNWFOcDlOUmJTRWJTMUwrVCtRTUV0SDF0ZFQ1VmI1L1NWb3ZFY3NiNmhwSWl5Nk1pVmhhRFpNbTN1eHY2aDZGOVpmTS8rZjkvYTk1R20zek9pNkpoaFJDbnRndzk5bTA4WVpjWlJlRkN4V2hTeDMzdlpqeVpmcHJjdEhJWlI3Nk5vVTJoMTFvbEpOS2JJRTAvQ1RRZUp3cmpxQWNabUI3cUMvZXlsK1lDcHRXWkphbGZXVlJ3VTBKZFkzd3UwdHlEc3RrL3RhaDBHZG9nSCtYbkFwV2FKb2I5T1ZsVDgyV1RIaWp1bGJhVStXU0hRQlJqZ0JoaCtORXhZaElXZXdpNFNNcXMwajBwQzBRY2RFRE42TTFuUXlscjJuTlRvSHRsdllqV01mQ1Z4UWFQK3RDL1FzSmhzNGp2TmJNRjQwbldXZC9UaEtPeTFiZ2FkdytndGV1eHdabWsrenM3VVoxSXNtWXRpcUlyNDVCbGJBb0l3d244em1PcW54dWZjdWlQQVBvd2xDOWNaVEV6TXFwRk5obzF3UFE5SDYyWGd4VmM2OW1sTHVkdUxOUEFCZzdjK1Vuc0MvSHJGWVVRMEYvTU5jdys5S3haZmI1TXlQanVJbGdhdTNXVmFtSlBBM0tJYjgraERYMTlvSisreS9hZE1Oc0Fra2FQa2xXSFBoeHUxTkF0alRBQWhaVEhRT2VkcDEzZlk0OVF6cER3a0YwVVNCOENRVng2RFA1WXVjaGdyNUlpMmg2NjhtM0dNSWdBUTZLU1RpSGZ6RXNVcWlyWDBGcERZMXluOFZ1M1hidlBtTjRmSEIxaVJQY3JITy91ZThDOTJjdEw4bE12K2J4eGVSWU9CR2RnUUFSeHFoMzNRVVBmZzhsSlJDTXhDSUtCcHBGdFQyYVhMZjJUMTNndFhjdDhRN0x0LzJZdHZVcTZFMmp1OEZOY0p3b1pUNGY1ZCtMMUxiUnV4OUJ0SmlhQ1dheVFWS3d4SXBUR3lyd2JsODNsaUJvREpNYXFSQ0xXSm9IS1EyRmtQSTQ4VHRhMUk2YTBTTGp4UXU3SzFTbXFjMi9JeU4zTU4wSnlnKzhBVG9yR0pNWmRaV05CU3dGMzFqMUZGNlVUekd4ZVBpMjE4bVErZ3VrYmhDTmUvNVlpZ2UwNEFNdkZ0ditTUWhKeDNGRmszUTRjdkhWbjZSUVJTMXJmZ1dWbllJU0pKOSszM3MvcGtGQUFySENMemNOZ3NJM1dZQVpTUEtEQU9WV2RSeHc3YzZnNjJlWlg4cktvVno4UjJHNFdZR3JZaVBsd2tXY2RCclkzTDdJMTlOcCtLc1lFMm12UzNnOWhNejdDQ3FzSXRrYXlIdlNHRnFLT0d6L3BwRldsYzFQK1JieXlwRHFDQnFpa1ZYbEszL2NpY0RPSkJ2UmU1aGgzTzhSRldKQ0c1VkwrcXlWR0tYUGFkMDBieW1QaVlzSDFUOUFmUUNqSnlnU2NkcmNSNjRjY3ZpaG5nQW80QW8wUmNZOXhkbWtkNnlSTjVEcnAyMnBxSXNUTllTcU9pcWhra2Y1WGRIYkJocmdwWnJZVTVQY0cwSHdsQzRjNU1NeG1keEpwejJ2cjRXWTgvWHhFSnZkbk51eUlQOE5FN3puZjE0b253cG84RExmZnc1MUNmSHlmZ0lKN2szNGJRaUJVSjQ1a0ViLzJCZWVuRFNaNFlkMFRCK3VhVTZBMytISmdXZ3NDdStWb0JPWmF2T2NBd0JiVVpQWDVQRFlLV2dHYnpjVWJMeCsvMEYvOVl5WncxTStxR21NVm9DTmhkeWNjN24raUM4MTBwVzcxdnBxazNvVHIxbW1rZnR6UjFQdmJKZDFxL2tUZ05uRzEyY2QraTRscUkwcnlEY2Y4NndybzBnbmhHZGJwaHN4VXpvSnFUOHRXdlk1Sy9PeGI3SmVZYjlRV3JrelBlblVRaVNrTGtwR21zLzFYTjFUcEpMa3ZQY2hrT3R6TGhsWFJKaWZ6ckpjQ05sK3FnYmlGMGc0TGFyT3Y2cmlCMW5GWjNmTkl3U2hWY1ExY1dRQnFsMnM4bDFHcU42UmxPZXJ6aXdpRXhUcDZWNGt1aHVGRThpdDB6MkFleEpxNkZQSXpIeStXY0F1dEVycm8yUzlBSkVvWTU3a1N1QnNyZEExUGRWMHdXTThpbldoenNtQWNrb3p1QmIrTW95REY0L0RNbWZPRnhXOVlLTnlwZTZpcmx3Y1RVTnJabWc0RFFodVR5OUZBbDl0M2FsTS9mTFJraVRsS00yWnkvTGRCcGZUTzZNOVhyZjZIQlFndHNHcE94THRobURhMkRBeHVwT01xYXNkaTcvek5Dd05wZnlHOEk2SjhHMFNYcXhTN1ZETVY4aGRkcWNjcE9ZbkpmOTc5WXJ3Y2FQWlJabDd5TkxnWDkrb1ZyM2pzeTgxa3IzY1c3c2l3cThBcmk4UzVyTzNFNlA2Zi9hK2o3VU4wZzAwVHI4OEE5eHdUWWpseitJUmVodE9OMXdwcFkvQS9ZUGxNbjhMc1IxcmphVC9uMjVCU3J4a3dOTThxMWRVVTExZ2wvZWZPNXp3ZHZCc0NEK1BsOGRXaVJsc2hvdC96OHdiNXppRUlTZndST1lCWG8vSGdOYkRNd0o4RzFuTnhwMUJXdmRQMmZPQlRmbGN6TFQ1MTc0elNydnBTSTBVZzJOb1M3c3JuVlZvOXFHZzRVMXp6T25wTk56V0w4dWFzVUQraVVlb1d5MlNjT1dKQmd2UDlneEFka0VtWVBBRlR2bWZpdllzK25CR1NmZVdNcGFHV0ZKeFNzTFpoMzJSTXM4bDlHZzhsWTc0MVBMUWdQSlZyb3lzSXM2bW9XMGd6SDN3VnlRcXBEYWZESVBvdWVudGdyVjltbHgvWXVWS1VjUUJ5a09pZnE1NTFJQ3YzL2cxbU5OcytQb01YanMxQ3FPVEM2cndWbXhKYWxzTzZyRm1rT2p2dGlHTHB1Q3FrWWJldk5peGtvN29xck5aWDdxMWdpK3kzRUpyNWZxME4yVVZjYUZITHJPZzNraTFsK0w4cUl3bWFPS3pWaHNNdG5GQ3BqT1dRZ2I0U3p4Q200Z2JhQnk5MzNKQlZGYlVDVld6YW1ybDhCOFpDaVJvdkkzU3BMd09pNXZDUWJJVUJIWG5rYXNsZ0dEWHFQN2RSTmV6QnpGZFpmUnNJMklua0daZTJYY293N1VMcnVqUGZwWXRkQXpVUWRYYm9TRCtWVVNvVy9jY2ZSUDFFeFZ2TXk3azBVWHZwOHVad0Mzcmh3Z1U4OUI1T0YvN0l2RkNrRFhkSGhrc1N6VVo3UTVzNjhiLzJ1MDNmSzFQYjFoKy9MMXA4aHVGendRR1NDMWE1a0oyOHc3NUdDSnQwWkVwR2g3UzRweEhhQ3NRd2RMZnRCVzhHd3dVSmZwaEdGa2xSZFptdVFuOXU5TGhMaXJkak52eGlRc2dkdlpvWHllZXMzUGFpUGJwdmdtM2tzeE13TkJoeXRyZGFyOHF0WE5GcmNOMTVvcWR6VTNHMVFhdWM1T1U1bDdhVkkxTXRYY2FmWTQ2OWpMdkZnT1pUaWVWbUcxWjZ6MTBMQVFUT0Z1VmtyMjJkVWQyaHVBZGlQSmJQSEkxM0FqYld1Ujl2ZFNmSVJUVUNWTSthVC9EaVVpc2tkWU9wM2c0MVFJWmF4K0IrREVMem5nL1JqYmhkMVkrcFlXNDkwYmVBRTFWZEltYWIrMG80MkdSWHdSOHhqL3hjMDBHTVBSSE56NVd0dS90NE5uUnZETnErbnlPM0VRd2lrNExwMHp4OTZObjlaL0Z6QUVqbWVtb0pWcWhHY2hWZmgxNkYrckFRYXRTK3IvWnprYUh0VDF4YWY3MXBWOWpkb3k1dnZ6bndDNHU4N2JPSEp5MVQ1S1lOWEJMOVc3aS9xbnJuZlFnekJSc2JNN1JqWHpWTHRXVG5UaWYzeDMxdlBmT2RndzFRWncyU2IxWVkySUQ5aTlSL2VOdTh3Zld6bnRGTGxOZU1UZW9QVTJBV3pPL09SOU10Um51R2JrUFlpRFN3OGdoSkJnVDJaUXFjcTFINUlMNjdVQUZRWWE0VEUvY1U0UzdNaWZ2TG9LWktzaE56MkhLWHFBTDREZXQrYzRzUmJabDRGUGdDc3hwdkdFbS9YUWhaY1hiOFZVbU9nT0JtK29PMUp6SGcyWjB4Vk9jaHNnZkJ3ekt3N2gzVWhqYTgrMDJ4c2I2OGxrelh6bnZsTUNid0F2ZjJSOGNtQWJDdjQycUlvVEM0bHJzdTF2UjM1MUNDajM2S1I1L3R6RkFlVVY2UGVqMmV3cnhlRURFWFdiV1ZFQW9ka1lzMEpPQ0VOT0pCUTNhZVRUdTJKSXp4VHE0UXNIdjVRdWdEYWg1OGlqanR4NlJqUlEvbmdlUlNkSWVzVEtpYXVMeDR5b1dMYVNoTTRXZ0JIZEE4NFA4STJvNGs4SEVXSU1iYkI1LzdhSjVNRWlIbVZJRzN4Q1RtSWZ3YW9PL29DTld4OFVSemxuN2psbXBZVUlFZHBSZWJtaE02MElXMnhIWUE3MGJXZmhNVFl5SjhWTTR5QWJyWFRnczQxVHc5SUVtUFFuSm4xTHdCTCt4T2ZRdlBmMEJkVzJReEQ4eGc2OWwwaHhDZE96QVV1bnlCSXJGUG1wb3NhLzNqL3FMeGE5VWhRZHlXaEFNd0ZKcjRGMHZOOXJNMm9waFJ3OXFybmJhK1gxMzNsRDFHanN3dDFyTkExNDdPM2R3TkEySFB6K3N3aWVRM0RxMzdLSkkzRGVkRVNSRXhLRzQ3Y3NHcXIxZnp2cjRjaHZoN0ViM0oxdXdRMXA3bnJMWlRnNVNBMitlQ0ZDV1M3VmRtUGVUSHZSV09rTTcxNUdXUDFvd3g3L2F3QUQ1czVFL0xyRVlqdCtZekVWelZIQXBWRkpmbkxRdU1hOTJUWW5qdWZ3RFVpRk9QZXhrTjlNMVBhT2l5OTNKRkIwUzhXVDVpNTdRdmk5OGViY08zRUVqcmhhaEU1SzJSdnkxWE1HSFNPL1RWc3pka0ZiQ0lRTmcrZ3dyTDIyMzNWNjFBbzh5TVdUa3dFL09kSHNCWTZKbTZXT3hKRnRRM3AxY25TMkVWajFGZng5R0hNSmVjZmVjamN1NUdReTJxTlRIRE5hUVdwa0tSanlVRVp4SEdPK3JZcjNURFlmRzZsSTFIRFFDZjNNSnJzUzMxanR1V3I1VlpQWGx5S0haQTl2TGtob1B4cEFiWDNRUG8vdkR3OGxncXk2M056RUYxUFNwMUVmTFdYMk1Mbmx0aGlYM00rSm94M0xGMU1heTcyVEV5bFNKdFBMOUwxRm00WEtIMjMveTFWU2V0cVZCaEEzSzdmSi91Qll1VUhnSGNpdEN2TmY0SVM4MndjR1lRY1MvUkljVUtyRjBlS1J3Z0tHYmFKWXNLNHY4VUpRUWpQby9LY0x5cTM3WkVEeGNYa3BpZXc2VDZVVXkrdm1TMjNsemxEZDREVjIzSlJYZjltSHlQdGNVdjl2S2MxQXNLY25jTXVCbk1rT2JhUFdCekRGNFNlNmtMZStCRGpRemNqYTlGR3NEY3NRZS95TDNtY0ljSXhEU2tEYTBCajV6WFJERWhJSmdTZzJzOEtYSksrbDRqUjhoeVkyT1ovVlYxOXBvZytraHgzUEkvRUp3WmcvZEFzUjVlN2p2TVo5U1FyNUV2T3l0Nng3V1daV282dWkvWW5NdHB2QUEwQVptOVJPMFFScmtYc21RcFFpMTBodHczTVczcTFQb3pZYlpiZmU3QnViQ1VLVEdqRnZMd2FLelVEZGUxZkVzdHdOcURMRjJLM0QydUdBR09Nc2RWeGJsMGVkdWhTcGk3VTlmN2h0dVhORGNxSHJWM2FldmExaEZJNmRGbmdPMGZIcURHZGxkSUorZWdxdEFuTzlQVHFDRnRydkJGQjB3UmpmQUszeTlFVmViSDdrMHMwZTJQOTRZSXVFSzdidlJTdWpBWnpkZFhBeENoajRjbjBaRnhublZuN1ljbGNIWllJSWRJeEpPazFaMG41STZoN1pKeDRUK015Zit3Mi9OK1l5M2FBcjVWNFVvcWlUZTUvai9KNnU4RjAvNHdsbW1oYnlHN0gyT0gwbTJmdlBaem5jMHVjMEtkSXRNYWYvdWVkOHVHVUVQZllsWndEeWpUMzZPQUxGRmdJSTRCNXZkME9nL2xhZ3p6NzdzWmMzM0RpTVU4ZG5HWmY0WFNXeVljbXk3QytTOGdKM1AzUTVYSnJvQzF0VVJFVWNEOHloQXl0eVVpZDk5MUsvSkt1NStyejg2WkVKS0MwNUlFYkdFRkV0UFFFQ3hUL1AzUkhWMWpWajlPNk5NQkovdXFDVGxwVkRONTRqVGdLaXY4NStzeDFaeTlqM1J2MFJHVHNmVHJEYXF1UFJodVRXZEpHU0V1b0wreHp0Q1MydHJiMkFLeHdyK0tQSGpmazNVZGJSOUxQQno2OVJ3aWEwOW9ibTNrT2hxU0lvU3B6T2d5bEVOMTVIa0dzbjQ5T3Q5MHpwN0RrRWFQRDhsZ0YzS3JuUG5UWTVid0kyVUhaTDVSTENtd1c3QnlNYk5CeHRGa3I0REtING5rRWdDQ0dNZERPd0hWbTdFWitqNGNLZEdvclp4enl3R0RpU29aZjRzdXZDcjk3SVhZVFM1Z296dHF2dVFFdCtoMFNaYjRUeUJjRUhScGJGak1rLys0ZnpqTjRxOWNjcGFtTFZFSitKR0Q1L04xWWlqYVdySmJKSWY2NFdkS1dVWTJGbDMyNER6Nm9xUEx4UDZNekdMczVicmhLQUd5MlY5dzlzVDlpYWM3UW93Z01KbFVhaUtzRVMyK09BUEQzZUJUb2lSb2RpNkVJajlscHV2Nlhibk5KdWw2ZThwdm01d2hsMnEzQk1QWkpULzdDNjhQcHZlNFF2N0pybGZzU0Rwd1U3dThES3pWc0tEOFVoaDVkYUJhU2x5Z3YyREk2cXdhTDRCTW90WTdkaWV3K20vSGU3V1BaL2VhUTc4V2IrbDFORzJsaUo2MmwrUExhQWxzQTh4MGdLcXd5eDZaRXlIbWsxY2VmNGErYnRHMGF6clBranJUQUZ3R1hxZVFsMTJpZ3F0SkJ1MlVmV29kZ2lEbHFJRGNwTUxTejVGUGtKN1hIdGs2cHRCYWFRcUtYZ1J0cVM5OWZjZE9Kc0dwRUNzV0lKb1lBQVFpeEd5TkNieDhidkhZeHRVTGVMdWk4MXovL1B2VGlMOWRYOTNORDRkeGtQN21Vd2lXZnN2R1hKWGNRYlFUODRuMkpMdElKSmwyZnpqN1B5MzRtNGtOa0oxS0plWjBvdWllMTI1L1JDdWNsTzN0ejE4RU9CUnZPek5Ld3BmdnRWTDJLVUNUcFc0VVBQQ3dVWk9wT1dFcUJNa1d2NlcvbGFTeFpFN1ZkVTBnRkx1Nkt0UER1bEp5ZGNYK1ZqUTRzSXhURmx6eng0ekhIS1NPVkdvY2JaNy9QM0JjbVUyYnYvcnlmWVZFQUxEYTNKb0ZPZjNPQlRPMzlqc0NjMWE0ZFJKY2l2TEMyRXFiVlQvQVE2My9FTloxcHZ3aTQ1dVE3d3dVUVlwY0R2bmRmbjB6NTZJWllYOUxPVG5GTkhYaW1WK3c5VlYveEo1dEEvZnRGbUVsZkswQThCeEJtQXYzSXRZYlFNcXZnRldRQjN5Ym5lcU9zd0dmWlpnekRhOE00VzZZbDdCdVZIeW8wbnI0c1pQYWYwdDVXaVVDNnF2Rm43SFNSUHhaeFRtckRDQUxxdHlKdXpEaDV2WUdEVGZBTG9HRThRSzhpcGhCUHFFc2pNRGxGNDYvL3NlR0pqc3BscFhkb0psNkJyN3lmKzdEVUhqczdPakJkZ1RweExnOC9nTi9wcGNTYXBhM0lYN1JTdzNCbHI3bTJKR3RSK2oxNUNhL3ZHRXphamZMbThPYXFBMm9OOWt3SGE4L2hJU2xOd2NmNG95OUtzc1JIYXlIQUpuUktkeDByeDdVMUJXNkYrUmpVdStLcERqbzVzWlIzUGtjSDQrU3FCcXkwRUdiS2JwVkpkNjdkYTNiK0JkSnQrV2Ntek9zSERxTHE4VmxBdUE2cWZwU1c1L2VpSjBKNksxanRsT25yWkFnZndPdGU2RFpnaWxSTXBVSUs4Rk1oTFpTUXZDWkRwMEVISGh0WHpVYWpkUmNCdDh3czZPaVFRUm1QUytOUDlIc01xbjJiYmJTV2gzQVM0OGl2dGlwTHVoS1J2c013NWZPT0o1MTZQdzJnUDRubUdjVkltQ1FMM01WYUtiSjNOYjk2Rk1XdDRnNlBSWVRDaitOVjdpWWJReTN3WG1Bb2ozR2cxR3Z2MERjMUVwb0lHNi8wL0xUYjN5WVV4Z0pNdlUwNFdobUFSQlBRbHYwZXZBdTRzRkVtT1lwbEtUNEFLaks4R0JqQWY3ckZTenJFdk4wOURFM1h0a3hpd0xqc3FGaUhQelZXaTg5RXpOZnFndmJKYmFsRlRRVlMzNHJ4M25jRzZNSlFCSGNFMmI5cDI0d3BrWTZvVmM0NkdzNlFUQzRTbWsrVnp5ZThQQTN3UVVzNnZ5MHVaTVhzMUlaRzZvZ1EzUUx3NmhjKzVFdkdkMnNiTjBSTVBHSUk2dVN2SVpma3E3ekFUWlM0L2k2bWY1VlUrYUZHZ1dpemNZSENSSXBEd01uRW1kWU1sL2JoY0dpTXhnOEp5QUs4QVhoSDUyQVhjaTYvZGlHTWo4d3ZrMnU1ajJKZ2djZ1VZdDRCenBsWWtHdzU0VU5RSlc1RlVNTWI4Q3ZEeXFXS2JPN0N0UlVDdFlhaldoeStrVzNTWlk5cGdaQyszdmtVQ1NzL3oxbENPMHg0Z0hyZi9jRExadkl2T3dRcW44eHJuL3JZWVl2QTduelEzdFBMMEFCdXBSaEZzY0xxSldjcWxvVG5oVzBJYUVpalM2ZWJ4ZjBpU1FmeTJkaE83Tms2Sy9uZGx2dUVTWXdiTjBVQXVZN2loU1pYVk84bThzUFZkcDl3L1BZN1E1MG10eklJbk02NkpUWXlFUkp6dEI3aDhWVGJQYm9HWUpDb2lUYzF3dnJsV1ZtbGM0L05UNUV5bGxlRnEzYkJwcmZLZFdYZ09tSCt1cytOZlhPL1NUYi9CUWlIMkJaV0d4M1QvVkQ0cHgwdGQ2dFZEUG9sMVFYeUxDajFlSkdsRnJrZy81OEk2b1ZiYkE2RitDeS9HaThDcVdQTThXSGx2MmRhblVrK0hFbnFxQ2QxUEZ3RW9qcHRERTAzSW51MW1yNnZ6bUYzTC9USGFWaWd0eG9neGlIdmZ3VEZwNVJRcERBUngzOUl1NnVpc1A1K212TlRVTjlkT2VBRXZacTBKREladW12SGo4WXlrOVdqWUFoTG9DSDhNckg1TCtaTWpRR1RUWVIwUkppb3RiYXQ2OXdESUNodXJpMzRGTGUzdXE5UTkwQ2xtUUtEeEozSENiWEJwWEdpU2RnUUVlNm9Cd0ZsOVpLRkNnd2FmR0h6K09NWVFOTWdnOGxGeExocnpLSWMwcVpEU2JXN1dPYUdyOEJGUm9yWEJia0RmZ3FRZnFtYU5uVC9JN1RvcVBjU0diYW1ldVhWODM2K3BydUVneFYwK1JWSFN2UDhJUWZyMHhaUndHWDBDeXdsZVJPM1lPSDhodlFtR0doWFV3SHZmdS84NVU3VS9meEJia1pQTmpjclA1S3pVUlo1ZnhNc1VqbGNCRFVXNVhqbUgydFVBVE9EbVJ4V3JkMjU3V2MwL1oyMUY0L21vZVVaWXVycDh2K0U5OUdWMXNxVXBaWCtvM0xVS0Z0Wi9IbnUrQ09nS3l0NTR1RHhheDdheU1rQlpTaU1zYW9DSlQ2OHFIL0RwUHR5VHo2WElWSndiU25SbXppWjUzUzRqdW83QWxJU25GMEpUL212dEwvSWI1SVYvTVFQRmkxUWsvQnJhZzNBVWdKMGdjb0YzWXArRmsxSXFKYXhWVUpoNU1xZEFRR1k3T0Evd0tZM3o2TllmRkNNditycXVScStZY3dhemFodW9EYmxsWE5WTjc3RmRGQWxSMHBRK29mc2QwNTZzTDZpb1hubmE3cExLa2lYRjladzdPd1o4Z285U3RxRFdPOEFGYmMwOHNpWDlML1FCQlpvNkVsbTdBK25USnRnejNvZ1JoYW5rWVZzU3FHTDRuOFc0RHJaYjY2SStBbW9uNFFjQ2hGWDFhbnhRUzR2VkhDejlpQ1FmRWNGQzdmMTBFNnpjTjdYejh3aFIwVFd2bUU1dnlhQkQzeEJWam91b3lLWGM3QkR3VFVUMmJONUZTK1E1ZWFYYVhyZk9OZG4wZ01jZ3dwV3ltYUNDY2RJb1FiUGJJZkJBRmIrUWRJQzFJNUhrUVBlUXZJaXN3MS91MFQ0UFJZQlViZ3VVNmU2cWJxNC90OHo3SlhYY0ZVbG12TCtNV0VLV3hwblVFdnNEN2xzZ1FRU3UrOXRDVTM3MEpTME84OTFDZEg3QlZpb1JYZGkzVTEyemdwWWJFY1hCUHdyT01CQ0kxUlY0b0tPV3czMDhidjBTclJVcTRjU0NQaWVFWHBGN094bGNSRWx2enZjTXVONFRwRkFFV2tZTWNPUFIwM0xPcWRlbjNEOWExSHFrTldrRnRmajlOdEUyNjFRc0FlMjZVeXExZHpRSG5VZGIzL2l6eGhsNVY4eEFBK2E0czJIRlNlN0JJbGJCUmw5RmtlQmlrK0t6eFBhanE3eGNXZmtuTGV0TUdpcGxSdktiZU42cXplVjBobjVJZHZMT1VHd1lBbmxhNUN1THU3WCtRL3ZUNFVKRzVxWjR4Y1Q5WGF2bFZEdDNGdU9PaFV1SzZSSHNsVXMrMFNNcDRJejR5K1R6eHYrZkJUWW5xaGlLVTlmYU0zdzBlOHovT3d4eDA5SG5jRFFxemZDZHhhaEE0R2pybXh1NjdycU9ac2lIRU1yR0hBM3drQ3A5ZHFQUysxU0dZZFRlT1lIWE4rSEFVTHUwYlZPN2Y2SWZTcG9WdWNqS0FvU1pHeVJ0T2x3WVI0clBKVW8vcWROWWRRcm5yb1FrY3g2TWpneFBKTDEzQXBpTkhjamJSVmdSUkowN3cyUHRLV0VUMmZhZVFtRDkrUi84VFFTTmJqRm0xQ1hCMitkbmRjWmp1ZGNIZ3N4MlA2Umd3ZUN4SHJpcHhpQnhadWF6b2ZCNkI5dGZ0c28zRHdIZDI4UVV0U3ZpQ2IrZ0dsa2diNGxsZHlkZmNFaHNkTkRZZ1A5RXpURmNlQm92bE5KQjcyelI5clpxU1lmSGFYdGFZeW5NOWFiMDFmUm5naE53WVgzNWEzNHM2NTJqMUJrdytpeTJEVFdrd25kek82ZDZDZVBKUk9rS1FISUk4SWlZY0szUEFaKzF6eVZkV1JtZ2RTdjYyMEZmT1RjNldTdjVXWjFJNi9KaGpSZVZVWFl4Z2N0MlovZWVvTHVHb3lKWkNDOERXd1NTZzFrWGdEWGhDVkVHbHJIRUpuTUlvZnpWeTE1L1g4TUZ2WXpZMEdvU1YraGxheUlteXBBemRnU2htMmNaMEI4dWp6bU4yRVdCU0QwUDI3Wm9iSXNZazVMOUVScGVTM2ZRajlaMlNBTktzT3kxZlpHTk8zbTVjSHlqY1FURTFuWDFRQW4weU83SE8wMkxLalhwT25pcThxZVhHOXRoazFKMXp3VldsOE03bDBEZlUvSGVBVHJHek9TZVFEVysyNjRRdm5HUkxlT05icC9DdUJFZzlLSmtiYW81cHlLRnFYeFNtRUlTbWxDM0oyNUtJaHVUYWpPZDI5emQxSlJlM2hCVElMRVFib2wyUFJTSFhvM3FuR3NDOGVzeFhkYXJ6SFNtdk9GMVZPcFc2UjBLelhoTm1sTzdlOE9IQUNLVHU4Nm1BM0tjSFhVVXhYODFGWndwQnJ3SUdmTTJidHlKMUJHVlFGell4ZlJRVFQ0SUZWMGNaL1dVZUh0d3VBUk8yVTdDQmhOWmYxb2gySlNONkNxamZES3poYTZTbjYvZ1RXajFybWluTEdkKzdkTXhHNHRuUW5zNWMzdDlLRXZRM21Jb29Tajl3dEV3cHNGb1ZvUnhnNXdMaFRQaDUzRWlZRWJrZWtLcDArQ1hreVI1cGFENmJwREEvSTNnWlZQcXllZkdyN0hnakgxWSs3L1BzZHhoRVN0QkpiYWxMMm5kT3R2QXAydngxdlZDNlQ4YUZKc0xkblBSRERWZndUekI4K2xLRnh3Q00xZ3U1eWpqc1ZMY05WOWtrdnlpK21FcDI2Z2QwZVB0K2lqWnlKRDEzR21LQ3dHYVJ4S2JQeGFYdGgvTnRBVDNjbzdMUXJpNzZQZmE2MkkyNkF1ZFlHZUk5UzBMTVpGWnhEMmFsNTZNRXNINWRHNWRsRHlvWlhoZzVxdC9vWlFIUHp3TkhRNjNsZDVwWjBid0N6UTRwRzMxL3Y4eE50Y3FCNFRTdEZTNUN0VTdLZVZ1ZGtrUFRVTWpnWTRrOGVNWG1ackVrMSt1RUZzdGhZemIvTWloWmQ5alJ1bDhtN0RIVVViVU9qc1kzWnpEUHVHUmdoT0ppZ2tBRjFmT0JVZGw5b0FRTGlwSHNtZ09SdkVRcndVbytzNk8rWVYyTWJkTmJHQzhkREkydUpVL0VZTExic1lNRVBqdXFYd09zVmFWVEtkS3lWd0JyUk5zNGtpZGVtQ1VwV1QzbXgreThCUXd1R0ZQZml3NnhWMlpWcnh5RTVJcjJCTGJLQS9CRXp6N1UwZTkyaXJieWZKZHVkU0pNL0luKzgrTS9FZU1KYTlNL0Q0eS81TWRvK0U3RlA4VzUrWFhtT204VHV4LytIN0ZYUDBRblRUWU9MejJEQzl1czd1S3dEOTJaOStnZ3lydGtFTUJ2ZHZJdWRwaXlESEwyMTQ0eloydFVLWmx6WW1rYVBuR056d3pEdGlLc1FSSGZMd05NckxFRWRqZWo4OW5NSnhmUlg4WTU1Z3RyTFVDMUlGdEJ4c0I2cHZsamVJbUx3TGQrUkVmUm9BSklZYXhsZ3JjRVhCZUJPbFNpUFVlYnVTbStDQ0hyWEhSTjNkbi9Yb0xocmd0M1RzRFZSMFprcFoxMmYzdnArVVhMTEh1UkxwaEJiRmtnM0RGWXd4OFducXVuWTd0Skp2dDNvTG5NdTMwZy9HelgyV1hiSWl2UGR0SWdwUEJ1WURERzRNZ3I4YjJlWFhHWHRBOFdhOEJ2TWRFNG13UkFRSzc1N2FWNnB0RzNiVFJWaWl3WVNsN3JwMEI0TGcwcmkxaUx6Zm1aT0NkSXRGRGYwd3dhNjBUL2J5UmtFNjlKL0VicExBemVpbnR2WENVYWN2V3VwVDh5K2x2VkNwV3JPS2w1cmZtY3g2TFlMM01BeGVJQ0gzWWo3VXZtZnJ6YlpzeTBWeGh5WG14eHJlL3ZHRXpXLzZKQmpjSFQwV0JaQzl1enVycFRIK2RaSzV6UDh6ZDJNVUcxVW8rUnptamJWL2pOZG9uTWJOdTQ3WlhQcUUyKzA1TitQbDAwM3RxdHQ2b0kxMElhRUpib2xNMzNOaThFTGVHdG9FN0pSNVRJTmZRWW1ZRWVmN1JZa0djdXpLa3JZUDJsSC9ZUmZIeFlBc2FMMGY3VURxcVQ4K1hob3IxQ2NVcGZKbVV3dFBLbzZhWkRvZzlLMHZSUm5iUUs0U0FNSnFuYk9OTi9rQlNyZ3BXT3ZYNVBqUWQ1cVRkMmV4UTUwNklCMkU1RTBpenQyYXljME1oZnNpeFJQMldNU3VDQTgvU0c1OCtmbFRUQVFvQWNwczF1OHNUaE03Y1ZGOWpaV3VIRXhPM2V6RWd0RTcydjkvSWZPeGlnckFQaDkzQkM3TUVaMmlZb0dnenJjY2ZTdWR2L3JYeDRuMjhya0dwY0RNVjBya0hacHJRNGdVOXk1ZzZxZFhFUmVOWEhyK2VlcHV0dE5yWDNHWHRGWnBtWWduZGVaSHh4UGtxS21ZRmJFMXNtOWdYc3FNUkdiNVc5MEM2MkRITkU1UVhxTkdGc2I2Z3VhRUNadXhLUzRUS0RRaDNCZ3lZdTEzb295dTh1dmphNmRQR1plL1psTmVYdWhMRklwbHFoK1lnV0JSMW1Qc0FCeHhGK05GRy9Fd1d0SEZKT0ZPNnlGZm4vQ2NSek9kNnozdUlqa2NhdGF0ZktPaDRFWTJXWGRQTXJyZGFZTitHVWNWeUxGeVpqWjE0UkFYRWQ5bittWmNocW5iVkxVbVBmeHY5OVcwcUlsZEt1SW9mb1MzMVhuYk9FMGFIcUN0dEJFaHFodDJSS1hEMUorVURVQnE5NmhzSEloaU91dWFvYU93MHNJZUFGOHRIdTdiL2FHaFRzaFRtWnFnWVZBSW81MUVyTXFLbkl6dTFCdnl0VWxRbXhGTzlXT3FlZzBuQXYwdyt3TFVocDc3aWpZVkNoMnl5d0xpbGNYWWR2d0tteEdCL2tWVWJrWFlrbTROTHI0T0tPdkdrTmJhYWpaTVl5OXZxSjFNMjJtdkxzU1ZKOWxEZ3dubDdWVXNsdGk0VWcvV1BFaFRuZDlOMDd1QWNtdm9UcEU3Qnphbmhjcm9IeDhBWjZMVFM2UlRzME5kOU1DdVVQOXNyMlJHSUpVZWU3bEhmYXJjNkgzTDdzTjF0alk5ZlRoekEvcDJ3cWlsVlBBeTBUb2F1VGFOMU1sTUJHSmhlWUt3NmlUVHVycVRmL0lhRzI4Q292K3VGZUl4ZkVMWVBJeUk1YXBRbW1BbzFrYmZxb2FCZUtSSnFPMWYrc2sxb1Eva2ZGb1h1Y1UwTEtkSkZvVWdQNCtqSUJ3cDhLcG1kU3dKM0hYc0V0aERBNnlTRDRXQWl5NlVaaTNCZktGTG03Y2NhbzRrMndrekg1VWtFanloRjFMTk14Y2VBNG5lNWVkR0lqV1k2c0lrTU94dVNHcnBudFg2T1E4ZWdmbVFqbjZiZTJVa1IwYStUSWJiWm1kak1WTXZPVStYQ2pyaDliODBMNC9TMm53QjROQVJFM3ljcFVoLzk1OTlUMFhKc1JQQ0tMOG92WkwyNzF1THE4UkFranl2dzBtbDB0Q29pRDUyaVNNbXNxaHB3d2l3RFBPR1VPejRRSWRlcEFzSW0yMU1pV2kxSHVZUHprNkY2SkZWMTJFSERpNU5iTVFUUzhUYllGZ2JxUnh5VERlcFcrTDU3ajcyRDRFVWdTZXA5bU9GRVY4ZUErL2FuQURaU1NlcE8vWGxtdFpZVm9TOHBHVnpwUVY4SjhXRURlVktLRDN0ditvbFBuNVRjUzdsWWtDRFJNYzBIb2VJRUF0UmhxcW0wOU1tR1dUYytUNmovNlNRMUJhclNnYXNMNzYveU13SzJkODFETVdOYkkwV3R0dDRWUklmbGJEMzFzV3E1OHBjWGU3UEljK0FEVXJtQStOT1NwdVJTMUFTQjdjUy9yYU40cTZSU1dSbXlJbnU2cEE0ME0xSWR2RUN3UEcrRUhlTVVZbzBjRS9iaENlZjRYU1VyeC8rM0IreGlwQklmQ3grWmpiVUpXaVJEU2kydFFhdXkwSUQxSURScnhUTjZYOEpvcXhuTm85UXJ2RWhEQkhFaUlHWmgzZmZmNllZMXdlL1J1ejg1V0d4dWFxT0EzRnd5UGs3UW5LYnpDUzlWcERaSHNieno4bnp0SUJMcnZSWGFiMTZ6LzZ1cVZrdVZOWE4yaGExc09jYVZRSHF0WDFBclVyeWpmckdtT3RSRkV5cEprV0dpRnVMdDdHaW0rVGhlVFhKeXpESm1OQjJQSmtNc09YaE1qc215QWtJelRhNlBRUHJESlJLbDNHY1hmZ3lMejNoemNPN01Od1pza1lpQmVmRkJ0aXI5N2dGWmlMcERGV3oxelZIblFsblNXdys3OUUzVmRVWkVEaHhYN0lzSkFJNUMzcWVCRjdoV010Ly9MZUF1d0hWYS9WaHl3WGV0YkwzbDFhc0FkS01jQlNabmpZZDhUM1lyMEZtajB2akR0Y2xnUjNhbDBzc2RaejMwYXExRmsrUEdoelhVbXdFKzJlaWZTYUNqUEY0dFVKTEJ3WDN4U1lvbFFwc2UwSStscGk0eUhrV05SSlVaaWZQYS9ETXIxaFN5WnIyVFRlUFllMVZrK0gxVzRjMFNvSG1ENHpBOXRhMWp1S2RUWU9ick9qU1Vuc3lkWUxxMyswOU9kZGxBMXBNWXh0RW5mejhSNVlOTlEyUmUyelFTVjVnT2Q3QTVSRVB2OWw5TzRZVGRnSlBPUWlGTnExY2pKV2lydGYrbWhsYkFpVDBCSW1IMXVnY1RRaW5GcGRYTVBLRTZCeDJNR3hNZE1sYStwWEtrS1B6cFBFWm84dkNYaW9FOFV5ZytLZ0dQTFNVZ2hQQzNkdTlwemJETVJ5U0wxSGh2d3YwdlhqaXpNQ2J2UjBwRk8rMjljbUtpWGdNU0xzZE9kQU91Si81SjBJbWZsUGRRUldiRGlMMzMwYlc4a0RTY2ZMZVovMmFNZWFtODBaZFZhbGxlSUVCa3lmWjBSN3NIZXRGcWpQL05zWW5KZWl0VnErNERZNmlMSGYrSXJvRWR6Y2laK2tTNjE0Z2xhTjNRTjI1WFZXN2hCUnBUYnM5R0JBRlc4QlRSSUwxY2RjRkFQTFFReDZXeVNrOEZHYTBoN1NuUW4veDdYMjh4TFVWeEkwMUVRQmxJajMzb0ZFUmhhakRsU2J0RXJwc0duR0ZrV05yL04waU9MLzQvcmZsd3hOZjJncUVlcEZ6SDlMRS9HRUo5NHJaMlFwSG9saVJTa3FMTkJmcE9zcXJMVDFhSjVjSndaNlpLZjVVaXpnRlQxVHY3SnVXUmg5WXU0RFJZSUlQRDhleTljTjJub0dGVndnYmlLQkw4eWxWUDFVdUlEL0FSWEFQZis0U3pwMVd5NjRrUDc1TE0wS01rQW5wdjF4VmlKRnpNZ3VxTStwY25laTJoMFB4eXc4Q1dmdmRrYUQyTitqdVQrak50bEZUQmdZZkcyRXVKbU05eHZzVmNDenR5dFlwbkFRV1plWjV1RGFsS2pTWWpZRUJZUGdRTmVaWDhPb3BnMTdyNTBwZmdDUDE2eTNXbGpCSkRnUnR1S1lmUTJKQ0NuRWhjeVRwOEZSeUpqUEVDb0ZXbGd3WWlDYWVYdS9TNUNNNUhUVjdmaTVqOHB5YkFtc1FtZjYxSVcvTk9JQVVvTTc0bkdLYVZUazBzT3FuMkhCS2dMaXdtOTQySnoxNTMzQ1FRV1lhMHVZc2JYZzN6dkgxYzUxcStqZkd6a2hMVDZIMk9FeDhyRVFDNVhYZzcwREtqaUpVRTg0L0dSUVYwYzVtSWpGcStOQTgzcVNodlp2Y002ZGY3TVVQSjNsQlR5dUtndi9oK2wvR05QK0M0UFpaNzIxT0h3REVEOGNVbWxhL0NpdWJRbk9zMDFNUk9uN3BsNDlxM20rZlZRVm1oQ0JqWHlRWG5ackNRZ3MrV0crZXNuS0wxOXl6cmk4NHJ5alowc0lpNm1XaEJVY25uTU14cWR0NXU3WDNmQTFpYjhDcUdvMW10WFJ6eGRyUDNsM0NIaHphSXlHNGxTZ2duNEgvZnhBYUJQWTNPTFVpYWEzRjFIeHhDUE9IbGU4RXVHYThxK3JQMW11T2dkcjN5Y01IRWhuVHZ6WG94cnFzM3BUYmtMYWpaSk8ra2orR2lrOEJyVit3cVI0ZzZtYkVIbkhGeDJ3WGx0dmt0cGJobHl4SElzbG9XRGdJRk1YUFRMTHk3eUJNK0krUElzbG8rTnMzRDlBblVTbk9EZi9WNU9DTFcySFBPM0tGdU9HZzNrVndRMEpHSm1pMlI1T2lZUzhPRnVzaEJkZWFLZkFIdnJnUGFUSjdyVlV6dEVWZDltUlJiUmZ2YlZldHhKM0RpQXRRMmliTmdRc2VaTTh5QnFPQVY1WWR6OW1qbmZuVGxwSjNSYzEwZUFGU2FOc0tSTnM5TURFYkxEQmhxMEpnaS9vU05zTDNLTEx1QXhMdUN3Mi9WaTc0SlVZSkV2eFNwbmpWUVhDMTJDK08wT0xDL1E4UDJGYW1BVUYvcEhuVUxlM3prU0dUZERFREI4SkdudXB0Nkp4OVNZL1pTWUZpTzdtd1FrQ1NCaFRzdHFTd0NWMjdrMVFmTTZBclBjRm4xOERGZVVrK0ordUxUU2hBV1hweTNMUkpwV3pFVkMzTTBxNEJuNkhFVjAzYkFWdmxPYkl0WldMQ2J4WGRGNUlhR3UyN2ZqT3Z2MkdKYjRSb0UzYmpkWTY5TFFTVXdPb0tpekYvSWlaRTZsRDczMnZONm5kZk9zenEwVlVwTEp1YXRnNUdvelBvRk5ORE1VcEFERmEza2M4ZnIwbFlFWVNVOHkyZ3JPY2RMNmlYS1UyMU13RlluaGZLbi8vNmhidlk1OGxlYmpwenZ5djFpaWRkMGdBRXFzMTRkdmVQZE9VSmhXZC9NSFp0Y3lKTHVicmYyVmIranh0Y1Z3dzI3WVdYT3RCRE5SbGdyQWNDMnVGU0VIcGpzcktwamN3Nlk3R3Zzbi9GdG9hQWMvcFI4aFRzWlIrbjBnQ09vWXY1QmMwWkVWaGlZMWc2QzBudEpPKzd6UTBoejJpSzYzZWp3SDdBVWJtbmJwdFlWMEhzVHd5ZXBkZndGaGJXeUphKys5YldwMm1TWXYrSytRVTM0UHhleTIrVTMvMHc2T3ZTd2JrNFUyR0hEZjI3NkQzbVFYS0l3WjBuRDFwRWI3RkdYNTFsZVRmaWVqS0JZMmFCZVRmQ1ZMWTlFYVIzbkM4VVJGYytxUlNWV1RKdFVvN0EzWkI4QUtwNmpTa3VlcncvbmxpTnJlMURybERpSEc5QnlKTWdXR0xTQUVuM1d6MnV0eDJtSHRJdnpwTnhXK3htbzN1UHphMlc4S0Z2SWhoQURVVEJkUURPcVdzQWZ1SFlnTFRKa0s4QWR5NENwWktDTEVJYWMyc1F4eU1kL2F5ZGU4RFRhcXNDNWJmZndZWUg0TDVES0daUUxKeWR2STRBSy95QmpHMXA5V3ArMTRYYmFCUGFxTVZ5ZDBLNzlOSytoMlNzdDh4Rmp5RXo2TldyMlR5SUtaOXVmUXZQcGFJTkJ1cWZocVprYmE4VGpQL200S3d0UVlVOXV0aVZDZE4yTUFkSk5QKzlKWVRkdHh2SUFHYysxTVVlcENra0g2clA3WVRJTVk2aDFoQmJSQmVCbk5POWZGRUgzaDBGT3RaVXBSMTQzR2h3M0NZK3psbytNblZWZDZweWVYYlloaUZQL2Vud01SazlkdHRiWXh1KzRXWm9KVDlhaGxhL1pKMFBpdTE5UWNJaThyS0tiSWZacHVac0RCWWdyWlhUL1hiSkhjOHp3VXIvL1R6RzhseUExN2NwTi9vVHpVTEI3TVJUZzFVRGRUbmFhc2pUSmJ0eThwY1c3TU5QSHR2SFFFdTJvcnkxa3Q0djNPZ1UxMUpVVzF0YzdFcUxqL0xoOGg0VS9qU3REdExMSExPRHo4TzVqaE0rYWI5ZisrZGEwRzdtRVFkVFZSY0Q0QmdsZnMvSUhXckhwc2FCU2lVSFZreTVpdW8rdUIya2s3ZFpyem5DL3NUdnFzN1FTNFVleWF0dVFvTkJLSktpaUMvZWFtQ2U0U3B2aWFLWTVSSGh6NEZ4S3R4WG11M1ZhOERGUlkzRGRrK1hFUmpFc21pK0xvQWpMVGZmSWRINkV1ZTBuMWFXYmlQMVNiYlg3eXNIUUlHdTZ2M0R3WXFXSjVLU3k3UDNCWTVuR20xbW9tWEtocjdEbDMwWUxDT2dwMmtCNUJ3TUdVaHBRWHAvKzdTYk85WDRTUTQyc3MwMWFaT2xxQXdiMC9KblhVdXkzZE5rRm91dEl3bUVydGF3SVhmeThWdGRUenlYV0xxaGM5THlBS2sxTlYvanZ5SlRGK3YwcXFxbGkrM2xrWHFXSlQwZWdVNE1CclgzTnJsZGtZeFZ5YnlzcksvN0JuVTJsKzFxbE9EMlNMMzJ3d2U3WFNmMXk2M3VVaWo2Wk1hNUd2bTdXWjM5cUx0d2R6NjNkUDgzM0YvNUxFdWJWZWtIc3ZFQXlHcExwTkk3YmNkc3plR3gzZkRmT3E5REVSSEtydnh1dnFoVUtKZHNxaXhkTVdRWTUxU3ZZVjUxODV5QVdCN3FQWlo1VyszRHB3a0hUNlpNZ3pCSEp0L0tuUVhmS1J0eUJNNVVIOUMzejhqUDJZMjJsSWtpTWJtdmhGclVwMkxsNXRuc0lic2Znc0ZjbnM3NzUwZVllTmhhTHU1ZWlwWUVFOXJXSlN6YWRicFNLd21kc3lPQXN3UDB6RFBsZ3dXUVk5Y09zdG1qdWxBNCtmQ25zRzBQOGlPRlVvTUJWbS9ES2pwNXRsS0t4bTRYVFR0M0xUMFpFWEcrVVZSMXNpandWZ3lLcWpHQit2dy9HRVBYSnNYTHpYeHZYQ1VqZVlpQjJycVZDVEM1cjNOc0hzRkREQWNaUFhaMlB6UHozTHpuVTcyK1hkRUZJZTVLOUZHVW1yOFJBZC9pRTJFUmx6QnpPUlc1Z2FIRzRxUnprbWVzaDN6bU0rdjgwSmZabEhwK3BLdFczVFVwVUJqNXFvQi8zL2M0aU94UWpjUzhMOWhaSFV3djlOdTZTNUM3bE1KU1pXRWJ3aERkVVdrS3R2SklWakNHUWNwTUJYWVMrOHNuMzJ6STVnSVZ1YnpWZEo1cSt5c2d6MGRzRkV1UVFLN09UMSt4UlVwdDJUc1V6SDFDaURYNFp2WmMzTkU4MnAzNDB4OWlGUE56N3NhOEIvNSthRDY2RFlKUHp0YTlnNlFqYU5acXRyS0FaRnFneEJPTlVLZTZMRGV0UUhKa0YvQm10Y2lsRlhGbElUTFZFNnRET3JWSjA0aytQcWVNL01VYnhIYUhiVTkvbFczeWJyc2dFUlNIWEJiOWkra09ST2VtNlV6ZVh1V3ZXRVNrTW1TSHl5RzFReitkRlFDNDgxT2E5eXNEbzBTVWZuQnpRL1ZKbmU5Z1JHZ25tTzlwQVE2MVVBRThpOXcvYUVOeEFtcEhvMEVQODBFUTRxR0pmamI5SWY1M1ppb2d2UlFhTmZGTzgxRVNQWUVaajRkZXJGa0lNVmtlcXdJNWRBOGNIb1lvWlVWanNFM2pMbkgwR3Y0enZOWEZGYW94QVdXbUZaZUpTSTlkWkFkRUhLcE1SQldwRVBBbnpLZW03TWJTMVZjejRLSldYVEI4NCtSOHZZUS9HUTlwWTJ2TXV1TDFXQmpzd1FXK1ZKQVp1Sjk4M3NUc2wxMDZkMTM5MlU5dXE4b0tFdVJrNFU2d21UTGVjNE1VWk1jeWJVd3kvRThVbytqRDFTdlZaQTVsY1VWV1p1cUE0b2FtS1ZpZXNtbk9KREVDLzhzcnZYZ3dyMEppeXRpb1JwSEdGbUV0NFF6REZpYzVuQytKVkV2SlRZdVVMV1Qrc0dVN3Y3UzdDWTh3U05tWnpEQ1VBMWE0SzJOSjloWHFscGNZZ2diWmpVWit3YitSaWZjT2hvN3Mwd2JpWVRVQnJxVDlJRzV0QUNGNldTMThiNHg3NzJUcXpia1dKNjBSQVVZZVJYVHBudC9iRHd4eFd0WS85bE54UFFGeTc4WFNCWXVRSm10djFGU2Rkc1FISVRqUjNPNHF2amV5amlkY2F5bEllTzZNdDk0SlRDcForMVRSNEtwbnpTcUF2ellsOWxJcEpGQjdDZXUrRldQQ2dKV2lCREgwWHNIT3o2WHVkV2xpOWwwL3RCK0FpSTFjc3o3ekMwSmpCL2RoVW96K2tlNWRQTGtQWXhSTE5zV09SN0pHenpRcE1FVjVGbnV2Nndvbkdkc3BUOS9JUGdjenNmb1h6VkVCQWxpWHNVUzMzVTdiQmV4bXVxbG1mVFU3LzhLeENNczA1Y0tTa3RkM0p4YVdUak5lZnFnSGhOUVNjUnhRT0pjZlRMeHQrdkRqZHZHKzdhOHBIaFpYWGxOb2tuQnZqVE1iYk1Ub3lSdWNjWWNNUFJzdUVXczQzbjM2OTEyaVZrQmtPSC84WFFOR2JuQzlHckVNV3lUVURTdkJ2Qk94ZFZsMjRjR1JMZzBhMjJObEI4TmVlY3owYzYzY0JtSTlQUVRJcXJUOWwwZGlaMENPZ0Z0dWhKTzRSL09FcWtkR2NYUEJGQXZQVE8yRmpZQWxEd0RvSHI4bVlqTlBsQVJCajByV1NiWEdOWEVQVUpDWWVPeXB0eU9xd3NkV0I5bFlPaExSdjIrckNtYzBqdXdHZk1JbVNVWUQ4WFB0cCtrd2loUlE0cTVTL3lMU3VMQ3lwY05PbVhJVmFVYWxzSStabGV4ZHd6M2luMWppRGhtQlpZa1ZUYVFDOXhDWFkzejlMcW9mZEZ0TzZHcXo4cGJUN1hYVlNQTHMzT0lxY0FHR25ITzl6SnNKODYxb3pjM1BGb2hsYnhDNUpIOThRVHViSWhhbVQ1bEsrWW1jSU1VVUYxV1JIcStTdVJValhPWkV5d0F6dUJtVlZpZUVLQUJhcWlQL0I0V0lvWUpOcFlXeEplU2oyc2dOcGtwWVM4cEZacFVIOEZOK1FWS2hjRDB2amtDMVhiNHovSk8rYWg5a3lmVk50anRUM2tkNzlUYXlOTVlBZUlvTC9KMFlGWHBiUlh3a1k3aGVnUzZzMDY5YUw1OVRmczcwaC9zUFd6SjV6RG5RS25HMm1SRXdOekU4TDhLaEN0WnBhcUV6N2Z1SzAyWFVpOEFVdC9KYnhOcUNCSkhaRzNpVVQwblNiazV3WnpDOHl3S0RmbUNTYlF1SHJTSGg2NjRFRHBJV3pmellQcGNQbDFUeFl1Uk5pRDlSdm4rcE50VkJ4UHNEdlh3VDdyWEtvbVRCNVY5RGpqWVJXSXpoQXZRdU5FMURvdWZ3MDJSZUFheS9xTHE1b1JLeTJyOUF4Nkw4cXFIZGt1MVVCRmVQcWVOWTN6aDJDcUNlNlNxT0o1aVEydkNCR3JFd1JSSEdrRGdpNVhOb2pHTU5LSmRncFJxTXZwYUdreXk2NFVPcDBvVEFJcmhvbGJJb290RjRnQW50SmUzSU9KQ3k1MGVCbUszVmd1U3BzZmlZeXFoQzYrRHQzYlZicGpWemo5d01qQ0ZuYTZqSGt2YXJYd24xSFI5ZXI0UTMrZlljZWxINDRXWVVqRFBVM2tuRlZCc3E1UThDZmlORm9xZmduWXRneHR1SExPYnJDLzFwQ1J4WmVoSW11ckw4Um1jRnFpOFZxaVQvZXcvMmZOMEhYWktUZGxQSFBqZkl6MzJxdy9yMWYyN0l1VjVJRmhvK3ZYRmZlV1lib044VTA4WWlRam9LYWR1NityMVpVbzVJQnpyNXREN1hRM2IrMStoSmZEZnhPbWZXMkNudUIxMFRseStqVUl3eW4vOVFIeVoycTRXa0NhM1hsNkNIU1NTU2RYeWRxSHVtNXhQUEFOTlduYkUwV3htWmNnampwM2REREJvNjBndURmaWdrd3NJTzhDRGhzMHhQcGh0NmJsVWwzUTNtT2NqZ3pFczE4WWlmaXVrWWtSZDNoTXF6Q2RDN0lldlRoSTNkbzlBUHkwVHVWd3Zac1kxNzNDUXlXMDQ3bWNnMEYwMyttRWhXV3I0aFVPZ1g5TkRoUjRhbXR1QVJ5SVdsUjVPOWxKS2J4bEt5WEZESEQycVAwcEE4S0tjMDQ5akIyQ0dldFNWY0VXNlc2czhjMmg4cytjdXZoejhNNlJnY1JCNHRkOFJXUkMrbHVHcnJlNzhkQ3A4MGZnSEVmcDh0QzlOYytpOHBzMVlOTHBIKzJsSzQwR2REK3JVTFVLNWJaQ2UwUGpEMU4wYnFaemVCSWptdkk4UU96VVRKd2dCZDVmM1RGUUU4ajBlZkhEZkNmSk1tbjNqTUhBdjNFd0VPTkRTT0hXWjZDcllnanlEbW83TVd6anNnUXl3QlFBNlJMd3M4Ykxqb1lmZDJ3V3pDT2FrRTMzSDRNN0RMdVE1ekFLSzBOWGNzaTgrUFh0OElEUFR4bUZkQVhoakMwM21HekxnemtvdTh1SmRXam5wc2QvbEVtWGFFbDUvU0dyY1dSUTY3bWhyZUJnZ2toODVicERaY3VwUmNCMnIxSUFyNnhJZ0pJNkNxb2Y4Sy90bmt5QTZtVWpxV0V2aXdIWHFrNVFpb3NxWGUwbTQwRGhUa2xLTmJUeEY0bDd3S0U3MXJZdjJUQTkyVVZhaW9PaGtod1IrNG9zUC9HdjlWSG1FbVE1THJmMmFiMUFvd2dIWTNhSDhQbWZUZzN5MXcwMS84aXdhcElSQUhsZ0lKQU1zaldQK0dCOVMwd3NLYTJCSENzWmNscHJtUzl6Y0prWFNudzZuWFRQZnhXM0o0TlpaT1ZjUFcxQ1ZPRS9ZRmJnOFFma0RhQlB3ZzkvNWNFa3FLeTB0Y01KUk16UUJpdnJFOTN3VzhSMnhDRnJIdFQzaGlvVXZET1VEbk9JdGRReXFzYlJDcU1WUFdLRVcyK1FUUG0vakNtSDRzZllrYkxucFFGejJENm5XV2FuM3p4R2xyNW5zUDArUDROb09ZTVZGY2hPeHNzVlpvTGlMSDM3VGVOMU9kM2ZYZEE2SEFtMjhIcUtZYzU0bmlHMEtSMDR0MlVSb2c4MHZBYW1QV25sdHpSbEh0cDhueTVNT0dRY0xyZVlMQm8vLytPT2ticmt3NHFEZGpoUC9tK0dRUHFld09mZko5Tm9KdnJaY1UwNFZwNjZ1R3loWCtsZVpNYlp4YWZFcUVlNmFQMEFXVlZnbTRRNWRYTmdwRjJ0WW5oSGYwRnpqcGViRUJ6TGhlVkFFMEpSQlBEYmhvNitiVWNJSFdtaWZZRGJTVlp6d0xrQkNCTXRLQVpJQ0VJTWQxVHprdlpDSGtoaE42UGx1aUdHN1RCN3BodDdqWW4ra2tTOWJGb0JkOW91YVZRRy85UVcwSGRseWNzZG5CNUhqMlIydWk0cS9TQlRLd0pJQzNUdktabFFWMmNZUFRjWlg2M1IrSWNnS3dpdktYYjBhZ2RpSzdvTVlIVTE4b2VGWk9hUXUxcFNSWFVzYTdCblZaWncva0VBYlBvVmZTcWg5SUJ2QzVCOFQ0a0EzcjZ2bjhWdmd5aHpRS1dYMGpxbXpPQkxJY1BONlJJeklZaGt3eG1hL2xYbVhYU2dWVjdrNjA2RWpEQkdFR25FVmdJb0I1aTFtenBvOS8vNjU3R2pMV280aGRLS1ZYcnJMZHB1eWx3WVBoZmZkbUEyNFd5S3pobFNnNm4rcXM3TFZUY2NBaHNKTjhIQU9wMUtDakVXaWo3RUhYK0F1QTh4UFNVckpqdGZxOWZPUU1FWlN3V0E0RjN1cWdvU0RSWDRaRzd6bWVzaGZrdENjdWpRNmU0K3Bpbmxhdng0ckJsSkJuNWhBZWFmMDJBanFaczhtcytsbk9vSGtaMUNXbU13YjJoMjJNNFJXZElZYzRQOUpkYlEwdjhxM3ZnUUxOdFg0OHAwZTU1VUtENmRENnRlNk5QYzJpOFIyZHB0Q0VhOFg5ejd6MXB3Ykc1OUFWa3RoSStzMXV5WnE4VlhrakJYcmJsY1g5MXVZNmlGcVcveDc4YTNydWpjdWFkcG5kZE9tVUZ2dUd4TDI5T3dhN0E4YUxVYTlTZlFuQ240eEw0OG5hU29NZEMyVWowSGs3YnVZZVJKeGlOdTN0czVTazdvS2ltaCs5U0FBcHNkUldES3I1cDFBTkI4VTErbVVxOE5iTHJMbExYUUdwSmJIRDB1SG9KVWltbG14dDJXN25SMXlaT2czdXlTeDl3MzFaYy9SZVJhcUg2R2VoQkZWQTRadUd1OTNaelhNNmhFMXFYR0pjZW1yTXRwcmtjWXBSTDQ0T1NJVDJmbWd4YzlydlRCNExuczR5bXFrL0Nsb002bWIvQy9SQjJua0NUSlFnc3BiWDhGY2E1L0lKUkF2SGxCYWF5YUtlcjRwSTVlZFdCZDFBK3lIN3EwWjFnemxiZ0FNM3ZLRWw2bUVhem9jWHA3TWM2aS9MMzRRUWRtNlJVdlBXb0h2eGNnTUg3NW1ZT2NNUWpJRURCdHNkSW91SG52MkFzSDMzQlZWMDVYR0tDQWREUXFuWk1iZDhQMFlvRFFLYXg1ZTRLZE0yOG1GRE0rRWViTjd2V0c3eVhTYm1MYzU2R2Jhak10OTA4UENBNjRKYWxiQnhUWEhzSHZub0htK1lDSVNSRGVqOEp1TG5oK3hGU0NKWmo2ekdqUEJqZmppWjZNU0RKVnRVNUtNWEFmb0dTd0MyL1VjZHg4R0Z4L2ZoeitxdEQ5YzhGaTNPa05MSTJGOUVFRDNtRzF3Yk11ZmxseHFxSlU4YUZLK0lub2gzYUFSSGowbHJRM25zVWZMZGR2YittUXFrSVppbFM2S2JtamxNWVdQTXY0cS96R29LMVNUN2QrNG8wN3dNbW9IUjBaY3l6biszckJsNzdIdVp6S3FNOEJRSmJjQWxYQllSUzVkbzVzUk8zL2JDdXAvVDZ3a3BrOGNTRE5JSXF2S20xc2xlUGQrRnZTSXJzcWxVODNWbUNrQ2V5aUdxVU0vN2FTZ2kra2JRbSs5Q1dVbEMwUXdOWGNneHV5OVk1Z0VkY3FIRVo0NmU1YVgwaGRQVmIzWkpqcWlZUTJhdHpXUitSbC8xSkk4d1pLZ0pqcUQ4NWN5OVZsSmxDdkpSYmJMMXVhSW1CcWYxSS9BRERvRjVIc0JRQXFLa0ErOXhPTEpTU0E1cnFqTUxuUnQrME1RdGRDcE16dE1hUXl4ZGUyd1BzeXVTeG52SVlJWmNIQ3MzNmt4N0JEMlJUTWhQRnNYdDA1Z1dOYzI5NjVaV3J5SFlnRG4zSmZxUE9JYVJaVEdvdFBGQjZFU1Z5UnN2c1Zuazluek12RG5TVDVkUk92c0NhdkNvWUtWOEd0aUJXTG5QeUVrQk1ITDRSOFFtVCsrSTB4Zi9rQ0EvTE1UaFA4L1RLUXAyVzAwUGdYZktIcjZsSDFBZ1BpTnRCTXN3Ry8vL0w2bzBlQ0l5UWJEelF1eTM3bGVDZ2FFaHV2Y01oOFovdnYraUJuNXJ0blEzMTFBdzBCZkJReVZSR1dHbmJZcHJ5VUEzWWdqZEZXblVNeXNhZXRLbDFaOUM0SE1PK0Z2N1JTVnZ1TUxSTWtpaHVuT3lOMmhUK3RMWmR1QzZnSkVZYVZHYWorYm1PR1g0K1B1cFFMeWtQNS9Pd0FJd1lneVRFRGNTTXBSODVjOU85Zk1QekoxS3BmYTh4SlE1RmRFYk0wSUhFZHl3VUcwR0J5MVJqY2MvY2NNY3FIbjBPdHJBdTUvUHVNM2daKzd6RkMyclF0YStHL3JFS29MOTBuOXhCQXlvMUxiK2w0WFhLZkZ5RTNDeXZMWk1jNmFmeS9TV0JkT01nbnk1Mlp5cnBXbmNOemwxRWxqaUFzVWd2QUJ6blVhTFQ5VkpBU1dMYXhTTkNKODh4K1BaUUVLODNUQ3lQQ2FUK2UrTzM4RzNKbDZLa3VJUjlHSEVlWmFjTC8zODh3UWwvZ3dmZ1Q3QnNzOTduQ0NPMVRRTHErRjdqQUw2a2F0enByRkRzNnJPYmFxSTRvM1BpQnVuVmxHalFVcDdTT0dINnBuZ2pibER4UCtwR0xWK2w0RVloYm1YMWZsTXpSaWl5RmNTTmhSQTVvVGY1dlBGTjVXQkJaTk10MDM2V0JUWC9yNEdZY3NCeWVaY1JOOExOdFRNTXEvcllDUXdMOWd0cnBTQS93VzNncjFjU040VG54TVF5bEZkQll4R3piZXlXSkJYaTU1VFZkN0Y0bnI0czVJSTFRQVVDNFlsNW5ZcVZVTzNxY3F0LzRQclBFbjBqdXhPc05DeHJtNDJ0cTlkQTlDc25oNEZpUzFQMlRXbU5OeGNXKzVIZzBiSHBhZDRScGtkTEw4bndkKy9NY1RZUHYwMFNvWFlIbWxIL2xVSXBPazZidXpWZzNxcVhGd2VDU2dYMkFrMDdFRFVBM3p6eWJrYWdPNVg5VjExOUdZZFE1U0o0SlVDRzNTWitUU3A3UU5GZlZmaCtzMlVVRUZCa1ZmZzFZQmhqYlNCVHVNS3lSYW54eGZxcTRKZ0s2dkpKbEVHL0FqaWdLck94blZYWVlMYi96WnlzZ0xoa0lvK1RsQUxLdGR1bURQU0dkUXZoN0JKRGlDZGh4T2F3UEs0ZmpaWkEyZjhkdktiaG5uSWRwem0zeTA4WWdNaWM3aXpqMTVnSXRWN3NxZ05jWExMNzZRN2l5VnNBdkYzZlRLMk5JUm5RU0hPRktvdzMvbW0xblJ4T3crTU1sV2FOVHRHRk0zZHdzN0g3dGI3dnRXcm5YRVBQK0JMR3VjbXZ0VHIyL0dKVjVqckFvMHA2cjZkbGlDRkVEOVgyS2REYXZFRGZoeis3NTVNcHN1cjY3MHFvSHBuSW91WmhzZUEwVjZjK1lxWUhwQXBTNEkwcXRBVlEyS0R4a0xqSHRydUx4aUw2blQ3QmsyVVVyQjNsckcra2JoQWlOS1dnYUpYWmJmVWNJRzNuOHFCM0JHcy9xRFQxdVVETGJWcmtnWlkyU0dvNVd5ZkIwQnZNT2JlNnpOYnRtWTQ4cTVLaTlERTV6eTVmNHVIS09zM2VGdDJVZDZUcUY3Wmc5UWxpOGVQa1R0UzJYaDFLK0RHcHl0OEFCTC83dzB6YWNiYWFXbnd3ZXNVZy9oNjVGby9IZVU2MHdPTXdCQ25nWUlYRk9aY1ZQTGJkamZUcjQvb3F2V2RIRE51NWNaTXcvMkZscWljMllSU2VSWEtZM1hrZlI1QnJLYVFOUkJ0UHlmdG1kWGpYczFsaUtYNHhzbmx4VTBhWXphRlNrVXpwU1NBOTlmbzVMY3paMmxPSFJLTThXeGF5eHZJSytFRDFRdDFnazJiOGF6RThGU1VWVlMzMkprQ3hXRXh3eS9KWDhwWkJXRFAwdFdnaDBBOEhpYU1qdEU1bTNMTGdhMy9CMGVvcFZDQWQ5WE5ZU0J4V3pVa0Fla1I2em5Nb21uUm14LzlPeTV3R3FmdGdlSUNwc0lWY3N0akxvVXpudkdaN0dKQnVsdEkvOTJGQzU4eDNlS3N5YmxQYnBxMzJ6bHdDd1Fzdlkwd1dWcGFWS3ZqL0pBTHlFVVlHUzFOOTZmL2pocXRidVNhaWY3LytqTXJBdkpldjhnSnlVYWxEL2RpdVNsL1hxekJGTi96NzFzYkJDTytGOG1ZYjh1Ris2dHBEeDZqTHBvVFhrZnIxOGF0SncvbXltQnNsbllIUFYxQ0w2ZXZzZ0ZNSmtpQktzRGhHSFZHK2hvazJDdExhQTlnZEpycGI5ZWlMUnMycU5yTXJ0Qm9JTGxLaUVXem5ibTJSNFAxVmI2UzlmSjNpVSs5U2tBVnNzWmtMcjArVUgwMEc4cnlIdDFzcXlYQnBYajhnd0JxLzlOVWQ1SmtjMFZTbDhxMk9MMjNsa0VnVGdzTjJac1NrOXR0ZGZmazRrdS82NlJhUkZRK3FsUW9LODdsbVVBaTFCV3hBdHJJcU1oSm5TODU2ZHUvTEJ2R1cxdFNJaE1aOEI1YXhiSzN2LzBUQW5Fd0NoTTRFRms2ZWNpK0E5TzRYZCtzK0V6MDFNcEpqT2lqK3h1aDIyV2JTNW90UHJ3L2JnREJmY1FjdmQ1bFExMG5xR0kxM2FXUGdkWTlSUjN1Z1plQ0VTYktUL3lndmsyNWdtdVIwWEMwM2tyM1pvUFY4MWpDU05TeVl0Rnh3TXQyTHcxUzlZSmFrQ0lGaWhuNDR1cGFMV1djOXBlb0dzNE15UndsU2h0WnVBcnk2WWFaWUZqNWtscVFLQmpFYVBVSFFjTmFjaFBOV29kK1Z3Y0NodGVPOWhvUkkyekR6VERldVo3b0lBL0F0aHMveGhjYkYyeVNNUmM5Z3NZWHZwRjhkQmNHRVNhS2VNakpzaHR5cVhESXpLRFo2YXVMZEgwSVBWOUhBSk83eFlmSldQb2pwdHFBVG12ZnNnWm93eWhoOCthN0loR2tmYmVFdHlSNzZhOGxEUGExR3Y4K1JEa0NXVjEwVm5Vai9FN2FmS2xMeVVxczh5bFVneFFVRW1BUEFEY1BoT1YyclVIbFFsUXRuWkU5YndxR0x0WXlnRkJKZzFPTGYzamlLdVNERVRHVEdTc2pSNnQxemoyZ0N3K2N0U1poNUl0ZDN5elAzSHdQNmFNM3F2MEJBT0xYL3d1TzBpbVdQV3hLbUxpVUxQZTdiMHN4U0hpRTdUR0tWeVQxK0QwNmFVUzROaWx4enhIU2h0bTM5NG1iWVZKQkxYeXZ5ZU1FcEpVMHhrVW5qRnlYZlRZcW04a0RpYXNUTWtXNGRUU3ZURHhRRUEwS0ZHbWpvUFdma2pmMmpFUHhzVDRhOThQcXpRUmIwQkNtZmRXdVUzeFM0T0RNNWlFbGRvTmViRmw5RWVRNGlMVnlsK0NJT1VZYkxLL3Y5eVBIdWgxaEdHMTc3Z202RDJrSnJQMEJadVd0RnYxNExydVhOOXZydHNERzk1ak02L0JqbVEzRitobGxKZjU2YkR4b0VnQk0wd1VuU0xzbFpzOEVKTlBwc0ZscU1zR2tsMS9kQ3EzNG1iLzVSSDE5dDRXcDh0RjBkRGFYenhBZGNiaytBOXk1d3lvelhPaFlVdi9jbXY1cWJONWUyem5GNS9GZTZwaWNiTmNUOVhEQmZHY0NmRDZrSHVSeCsvMWtrdDhtM05vYW93M0k0ekhiZjdCSE1SOTd4bW5iTzFTeTlMNm1HMDBmRkFicEpMcytrMVplN05PdjJKWjdScTF6OVhiNUxqSHR3M0JVY3c5ck5MMDFudmZzQm5pN2c2WmRXTGtPU0dpNlFaaFdoaEdYR2ZLYmFPMDF6WEFBTmw0WW9Ld0F6QzE0TDZTeFA2OVovT1kyK2xIOVBFMHYyN1lVUGlXakZsTDNNWDVXdXdjTTZGMGRhV1drZCtBK3hwUU1DWWpIa2t5V092ZUZlRkxFUTVGN2hRVldxN240eWpQeWwzMFJOTmhPeWtadFVKWFRsUlFzWm0xc2lJMmMvWnFkd1RYMUE0V2s3QSs4VlF1cm5odzN6SGU1MlprRjNVWmRCcmprSEE4WXBCeXYxelJMdXNkMi9vdUFrL2VxN1QyeGRKejdUbjU0Z3RKb0dPaEh2S3duWUs0L3lpZEp4dC90WW44ZGRFVmFYbGxMMEs1b2NhZjFuNjIrMm5xcnNlVVUrYmlvanF3MGtSbnVMREJWYWU5R2s3OTM3djhPU2J0N3hmV0lSUHc1ZjBvVWlKQm5aaU84RzZlZExPZlJwN0Erci9ldlRyb1pQZWYyTGswM1Z6YWJHdHBXck10R1pxcS84OGo2RmdISkhMTHZoTVF1YTAwNjZuZ01lYmhxRXpOcGt3ekdrRTRRNUNkWmRkV1duVnpubHFCZ3Q1dis3STl1dS9TWDdKNEZLcEExdXFCWHMrQ2dMN3V4Sm1oSThQRHNRS0EzTVlOR3d4WFJrMUNsZCtkNndqSSthKzJRS1ZlWFJSSXlPaEpxcjJtb2svUUZTZ0ppZTQveTVtcE5udmVFVjVLTWxka3ZCUTJQWURqY2ZSZjI3alBwVjUzeklzMXZPbkxqSlBkWVhkV0FMaXF1a2ExMm0yUHM3bmJOYThFeFA4b2dmZzZaWHBJRDdXNUhBNHJDYVFFWmZOVy83NkVleUE5cWZjdHBKMWsxRVVtMHhGMlZ1eTFxSUdJMWN0ZUNFbER2c2hlQTFQYWhsTUpudjN5YlRHaEVkZHQ2SlhOVjUyT3UvN05ZRHBVNUYzZFNlNnBQcnJzaDNsa3NLdEdjL1VDbDFMSGZ4cFMxY0wrT2UxUGp3RVExU3p4VDhpVDdRSHJsSXZtNEMzdXM2TXMwQkJ1WGYxOUI5cytqNzdGZDI1R2d5dXdFK3FYOVdkdnREZTF0Q1UvYnNEVzRXR0dKaEtzR2JCenJxZUNQSUpkZFRDRkNDOHgrdkpzcFZablZ2UlFDSy91Ni9WQnJLTG1HejBXa091bmZHa2hrTUZiK2tCTS9ZNXhYVU45TGN1Y1J5cEg1Sm5uLzVJNG03MVM1K04vY1IxUlVMWVZ3UEt4QnRHbE5GZFdScUNqWENyTXJ1VDZzNk9mREtHRWcwd1VTR2srNFF1Mm1ZWmU5UE00Q0JUTXdMY0FXd2p3Zlp5T1gxYi95dmdpdzYxeTAwd0ExYUVDaU11QUxubEIrcXJ4eXhpdTlmQy9KQVoxVEVxc1h4QmhTTmVram12Vyt0Z3UxYjlJR0JySGJSMko0QzZWSHFYYWZBWUtBMGZWWW1rZXhFeEhZTFFqeWViZUZKNXRjNW5Kc0ZxTXptaGtkTk1CV3dtQldSY3ZXeEVpUXV1QS9YZ2ZmY2ZJZ010WStvVnRQQnNBcnpZaWNYeGM4d0N2Q04vdFJ1cW5udE90V1o1bEU5VnRGVDZhV3k3WjQzZW5PUTQvOFc3UVlwUFRjNXdhOHd4QXpHMTRWUi9LalBiY2Y3akFkZlpNZ1lORUVwcXh1eTRhcjNlV0xtS0haREM4dzVJa3E2U3lYUVN1TTFVcnZhQXpEazk1YklCT1lSWTdydzB0V2Zzdm85S1pzR1dia1RlME5DNGJaME1kQWY5MUxKZC9adndLcDRvQU1KZXp4YVJkTVhCeHJMemdVb0tvK2c3SFFWZnluang3bWQwbGEvN3Bxc1QrU0w2bkhCNTlHaEdjWXRianJ4RXpaVEs2cSt3TUt4a3RIUGhLeGRuVWY3Y2J3b3V1Q0t5QTFycndEMHNqQXpNc3lXM2s4RkZKTTRCc1Q3MWdNcWtxTzkxaWdYSzNzU2xld25vWk9XOXc1QS9LdVJCbnJDKzBtZnlnZWVCRUI4cmJ6SldpdlovdWl1emJQZU5BK0JvY0hMODlnUUM2WTVSaHB4Q0wrQmNkendNNkZSUmZyNitlZmJOZzhYc0w1bWxtYkNNNzRlaUp1a2R1akFRaE9NQVRCVTd3aGtDejVvei9pY2txdFJXYkw1TVU1T2hoYUFudEFtaXJQSEs0bXJYemVMbnBwMGNoSUdHOC9pYnptampndmowOTJtS2g0TGt3eGlLVkhBS2NUUStSK1U4emJOQS9Qekl6YmtSOUd4TmtabFhxOGZaa0pEQnRkTGkyRlcwZ0JkZVNERzgxNU44VTFDM2NZTzVYZ0pCcGhCOVByb24vQUI4TjVNU0MxeUVUN2VhMTI2TGV5ZnVQeS9hYTMreTBEbUpHYXdhaFRwVmhydDRhUVlLVmFialU3WHIvbGtYSXE0eFREYVRuSHJDZE5mWkVtUEExVnR4N2hnbklPcDJsMnhCazAwVk9tamtPdDlFL0sxeDZ4dEZtWjZuQ2V3bVNPSXNjM0MwRWxJVnE2MlhLWldvb0xvbmhUVEpZSy9xWTYwUjdKdUZKTDNzYkgvQ1JkOGx1c3RFT0lqcWphaVVWSUx1MkZhcUNPc1dJdDQ4REkrc3FhVDVSWmZlcGE3ZCtmVnpScDg1eTZEWjU2TnZpcTllUFBzUGNENHM0ZVJVdGJCU1BtYlhnK0FPdUZ5TEMyVzI1K2ZWVE5pc1dOTHYyMW5MeGJNWGRoZmJLVS9TZDV2dXN3OWFGVDJXU3dPTkNvK0ZjeWg3dnhETFFXaTJEL05xQm5YVTVBRC9DNmxJd2FwM1FLb3hXazllVjV6M3p2WXdmeVlKcmVhSW1uckQ1R290cGtVYmhxeWN4aUFzK2luOWtWV2xEUEVUc3R4aFZvdUhDN2YrNTEwTndSZkpzSnVOR1lUcmJuNUtOS0JnZ0RVWm5rM3NoYmJLMFF3dUtEbmZoOEZWa1BTWHNUUHNOaGpTb0tVRTFvdk1sL25RVitFc2ZORGY3bVpjVy94bXRhcDYrSGI3bGJlZk5LRFJOMDZBZmVHT3VFeG5pZ3phVTgrYzJsbWU0aFkvcUxqNFJRR2hwSkdKT2t1R3dTQWNCRWtnV1lRcTUyN1lWNFVMSXFFaXRpeXlnV1JOcXp4MHMzVnhKeHNPMHFGRlFodFl3amsvT3JsWjc4c1ptTWlOaDJzUGhWcld4VGFkSVkyVU9IVkdRc2RnaWdWNEJWaTJJa2RVYlQ4NksyT01iUkZDRUJFQTBBUGd4YjFtM3NwZHZ1QUxCM2xmRDR2a3ZxUTBFZkl0ZFhGMlo3UEMrS2RXajJjOXQ2S0xPYXFOdmxuY3I4SkFXMXpWRWRSaFAwQStVY0EwaFZVYmtmcmZKMkNLSmdVVHdEZkRUWHBoRFlZQkkzYWE2aHRtb2I2Qmt4MWlZVXVrNmVWalJnazFDdGx1TVY4TmQxZXczWUl5S3h4alkwNlJ3WThpbVdXeXJYNTJERHg0bzN0M2xrS2NCQm9Ic0daMEFoTXhtUzk0Z05EYllrOE5WUTJnSXRETk5wQkVqOXViWk1IN1FmdDlSaXVhVnVGL2tnRVEyekx3ekFEV1JjQTJtQXN2Kzg4RzJmcmhFT1hCRlBOLzhlNFZUT2NvYzVKb2xWcFRvdjlPc2xTYkJzbTBnemZ6MkphZm5ORHR2MHR1cC9GdWJuK01ZdVJQYUFSVWQyYUduU293YWV1NWlZM3UrWU5vVm9nTzJ0VmhHTktaaW5pV3p0a25LcFc0WnpuSGNySHZCQndHb1N5YktSaHJHZXhkcUxFdC9qT2hpd3BUbGsxTHRySzJuaWhsS2E0NDZsY3FGaFhYVlBoMytUQkwrbjNSYUNWR0tGR1R0Z2I5R1pyalRXUWJ6OXdMVVRVZ3AzZ3p6a2c1Vk5YZkVRaEgyU2ZlNHMyd0VMcG56Q0w4T1FNd1JTSkFQaEZpTk55K3B1amlrM0JUeDFTdlRpMjVzSEdiZUJVa3NpVjNrZ1p4MzkxaXFCcmN6MWhoQm42QVdJK2c2TjVzc2xPai96bkFQK2NLODFLbkQyRGxNTStPdmM5V2JTbU5kVmhkeERmVmQ1dkZnWnpRb3JyZzZ4Y3NOK001cDkyb1ZINFhQR0xGTzYwYzQxZEk5QWlzUyt6aGRzbVBpQ3ZsMlUweHlZd01XNWo1VEszSmU0UDIyOTltcjhBd3VBRkhZL2l5VE8zdkZnMEI2b3pmWGgvNUQ4RnNFL1ZEcnBXQXhFYU5aczFuRjdzOXM1MUQzazB0MGFEU0JVUjVRMnROMHhEL1ZCWDRLSTdHRDU5QkFyYW9ybUI2VHNpbTVsT0I0eWhCMU1CVklOd3htSEJBS1czR2dISVIvRWxWU1MwZGFJVDI3M2k5MHdhNC9MM2I3b0lIWlBMOTBpTWtKb29mRnM5TkxkMitPVHFiVlhVdmpLN3lpSmhxMGlUbGU4NmwxcWs1KzFDbVRjS1RWQi9rL1lqdzVoL3A0SWFtTUVqNm8xTkV5QmFZaTdkMEtYQWpsaGRweUxIVmVzUlljRFlPVW10VHFEK3JiTU93cG5WZEhzSzl2ZEtjU1RuOHEwRktHQ2x5bGJzRnVjbmhySHd0OFRDVkE3S2MrenhrSDVCOU1yL1FwRTRYZkJFaUdPS1FGRUdLNW9ZZFB1VFZ3bDdKQTlKWUFINDVUeWVTZC95bW4yZ0NkU2ZVekpkdFU0RkJUdCtNUW40UzA3S3krTGcyL0YvVzlwR2huZ3J3UVVmRHFmejdLUXg0VkNrcHdUdmRteFRtZ1JCZk0yQlk4dzZseFdOcExpVzl3QVBCeFZXQm9VdGQvekhpakkyZjZMZnZkRTdvQ2NjaExSbWJmYjJ6cUVCbk15M1lrUEpMSDBYSDNDZlZsSmNZM1FFNDh1eVNYR0RxR0EzSTJNa2ZhT3VmWkd1TlpOSDhBMlFVczBXZkFnVGxON2RFaVNGTzRyZ0htSEVJWEdMM0tZdDdaUEFwOWxFZmw1UXFZQjJxcFlCdkdUZWhZSDl4SktzSWMyQ09lYUYyVmxJc2VaVkdGQXFHQ2kyOFZnK0Uzd2pVeFNGMWo5eVJDeUJaRkNoTUwxM24yU25QcGZ5bkpOTEhsZzZCQWltNzJUTFptZmYybGI1S3JDV1BHTjBvMVVLN1hHRCtiKzAxdFBiWVhzak9FbXVLQ0NLUU14dDB6eEx2NmZXQTZRL2RmMGVFYmpUODg2SnI5dEttUXVrTTNqYlJEQ1FOY3VjM3A5Q1pRY1IxNS8yV29EUS9xNi8rVlliN3ZnUFozRkVJY1JXYmNIa0IyZmhQZDJRdU9Oa0ErbkVMeWREZnFvQzNVUDI1VjdQYjlXRWtHejZmeFJyaElTMGZyVkJCQzdTS0NMNTg1c0RXSWlyNnNCOWpYYTJENXpaM0Fqdk5aZzVGUm54WTYzTzI0cHVISitOT3I4aDlmRzhFcTRJTXREdzdXWndaNE5uTWR5K2tlOHFtc3lmNmRHWnpYUHJYSDcwVVR3UXhKUzhLRjdhZC9qVkdxVnN6ejg4d2svMzN6OUN0R1R1TllkTXZUZzlQcG91aWhVL3E5aDk5U2dMaTdxNnlKVjA2ckQ3cndDTUZVd1J3eS9HTitZUStiVmRSY1pJeWR1aHIxQmlXSmtXbUFnamM0M1ppVHRzM1ZXcFg2Y2dVWHJLVzJ3RzdpY1hWMWdyNjl6SlFWS29NSTZXU1ZYQ1VzM1FHVVpBc2E5SVo5L3VBWjJPSTl4amZrY2gzbVMzeXhBWGtFbGFpMDBXYi9NQWpIUDF4S1BhemlXb0FDTGlaU1hCQlRXSUZPbXlsNTlTWXNuVUU1QW5QYklPemUwUkFlNlVIMGZlSEc3WE5BVGNjS3U1NTZrc0oxVVJEK0gxYWhlK3FVQlJuSHJPeDRJcUpwb1VIUVBvSjB2eEFFSi9WRFJubDhSMUdmK2xSZDRqNnRJSWtIMy9hMG9SWnhSbTVBMWVaZmNZUTVGRHl0OG8rZ002QnE1SVFxRklYQnp6cWdTVzloaStGc0Y4QnpNWXEydWdJTldPaDNRd24ycm1XOEhqUzFJOTV4bVZBV2tnVktiOGg0K1JDQm42eEV1WS9kZzZwNHp2MkNGNDVsd3JleHBPMm9oRVZ5b0ZwN0dKK3Q2dkg2aDcyaHMzd1l2emhDSVBHUklQWUxXR0puTU5tUWxPTXEzV3JJRFZvOSttSkdrekQvOWE5blh4dmljY01jd0FSN3FoY3N6SG1SSkt1Slc1V1pMMEEwaTBveHdGSjdReEVBQUh4VW9NR3pQZDlid3A1SC9SeHpSK1lNbTlmWmRzRm11ZTd4TVp4VncvNXBNQWFHbkp5ZmMwTmJwZ0NEQzVGaXVnSk85RVB6cWNISGkxUXU5elFLNWwwK2t1N1BNZ0dZRGROaklGYTF1V1phR29aYU43RDQ1K1FwV3JHT1Z3K0pBdjVHVmhzcGhyZkx5Z1RhNzhhNDZEQkFkUFM2bFp3UnVCaklIbjdRZStpZExTbVBIRmhLTk8xMGVVc3FTL011OFBKR0hiVTJ1TXN1NnhxOUdJRHVON2xUUEdXemlFK21CWnJpU3lsWlpBNmw1TjIybHdZa3FqcGthMTFIYjJ0U3RDWUU2eHFHeUlZUFJ2M3loQlFxTi9nalA4NHltb2lnSW5wdVZVMmlWUDBIZ2lnRVdJRHA2czZXaEgrZ2RtRS91d0VJcC8vVEVvRTFGcy93R3FLUWxhS2FPWXVGQ1dyTUx0ZHNrTWI2bXVab1Z4S2FnVUZzcHNidFNBSHNZTktucG40bVBFNURRQkhpQnZMVHNINzdiWHpGelJpTUlvUitEZ3ROTEZ0RGgwYWxkWmdHbDZpbVZKK2JWdnBWNkIzbTlidlRaT2lBWTlDUjRDUTdabUdJN0drZHpCSUZqOXVDcFRPRWd2Yzc5bXVuRGVVYXpRbkZFVWdPbFlKbHdtUVNNY0JVTEI5MUpocUR1ellOTzZ6RzFVOFJBMExPV2lZUkJxSm5VR3YrVzROemNmSHpVVFFRU0tCTWtqVnFQUUZFVTFlQnhQQ0ZDNlBURy96bjREM29VbzRVVzArR2hMT3FHODNtUExNWURUMFVPcStvVVZaWTMzMWx4U2ZHeFFBajdaNnJBbC96dWhBa0pQK1N1T203SVNPL1V2ZGxzclQ4Zk05SW1Dc3NtZzhzN2hXaDNFWW05L3lCZDBpUzFzcGpQejFUT0NnV0FsalAvRUFRYm1VZm9BR0xDM1Rod2E4Qm5yUVF6dlJyRENNNFAvWk03bDQ1aEpwa2s2UVlUOU9hRlJOMTliUGpMRUc0S2tIRnRKMjdrMUY1N3lJVjNQaWFIelZaSlZKejBBMWFYaVBFWTVKMGg0S1JxaTYrRFB4QjhFZjkxNXRmODhMM2QrMXI5Y3c3TXFwaTFMUDdLN3hIQnFjQ0g3YktYUnVjMkw0c1NpMythbHhJano2d21ETWN5M0ZaNDdNS0tPNTg3aFM3KzFIWTZ0aFM4SGxOM2xlZ0hsc2h6VnRXZExZS1Z5cWVYQys4T1ovcDdyU2FwRklEaktQcWVPbitET0ZjTDg4MGhGRDZ5UVhTanVPbW9uSnNGVnM3Mm0rS1B5TGthL1kxRlZWR1RPY0E4M0hBcHJ6Z3lTazN0ME0wU3R2MFVUTWhlQUt3MjhMY2N4UEhZS2VxcTNZYnIvQkcxTkdBV3I3LzRuRTFmMVIvdGlVdmsvZU1vV1AwMFpXcGZ4QVZvZmZpSklqM3MxbjRpZUpQb3AxSmt4K2hzL3YzN3BNOCtYTk5IalhjR1BEbkRPSEcvd0lIbmExcGxJdkMrcmhWQXZadU9zS2NhVG05dUtjTDRoVTNnY3Y3ZUVybzhPWERwWFhrMXQ4c0ZEc3VvRUtjMFY3bU5SSkZGMlRSdDV6RmJmSkZ0TWpxQWVmOFI0dUM2bE9pZGJ3RnJ3VE8wclBWc3EralBodW8vai81QWhZUjl5a1pJM0hrbm42aXVMSEM2MmlGb1ZvR0xnbGs3cUYxaFFCbU95V0c2VGc2bm1CWHZGZ2l2a3VRQlF6dm5adDM2aWxqRkNYbzJCWmZab01EQ3JDM25ySCt4cFNGMFMwMStSWlVrUUp3ZjRvQ3gwQjZXYTc4cE5QOXlqdk9HN0lxNE01S2tKUllIbkhVQXRDTDcrelF1bHczbEF1c0lsL1pqbzBVNk9reWpvVS9tODdUOHRTbjBveFZndjFXY2RxWHRnUlk1Ky9ndmZuVFpGOFhxdmxHSHZnRzB3bmJtUWxVSG5TQXN6Z0F3SWVua3VoZWNpSGxLZ2dXQVF4SGVBSnJxcjQ2SE9LYzNHZ0xFQzZFMHpiOURlL1I4QWRHZlZINHNJK1FDM0ZzZVpPYzlRNTdRMk81MjRnc085QzU2YnpHRVhtK01jeWpJeTM1b1UzanVhN2k2THVrUnJZcmhibGVRZE5yN3hiVm1rY2E0ZG43K0JHVjYwQ0x3Uml6Ly8rRXA4eWliV3I0OUlLQjIxVkRoSGtkOVNOSlVSRnFRbVloRVJjZEFDT3J5Y1EzWDI0Z0MzL2JMQ1BmZjFHclpDNDNMNFlXbGJoRVNEbkN2TDhpNm51eVhrbXJpRzhobzd3MW5nNFhpTTFLSGdZM0tZZ3FMN2NYTHJuVDdFc2QySXhWT3JueG96Y1lLbmwzT2JyMFRETERtRHR0aklGRUFEY2dEUEFlRFg5VjlmTkdWVWUvcFAraGRSWUlxRlRxZjRZRm9Zc3NURHY0TkFEWTg0a0pBSWZseHVrREZoVjhlY3Urd2hUQ01zSElBL1hucUlPamRoVXViZWlQNnNSYUJsVXpNL2N0em5mK3pMWERYZlBWdWJ4K2dCWi9naW14Wkd2Y1hXMXVrRWdIcWRwV04yVEVMcG9NY2hJK1pOcXl2L2UwZWlqSXNmSlc3bG1lc054Z0FyWXF1S29yWUljVmNpMG1hR0hjdE5mTXEzb2xSUE5XNFlDSTZORU5xQ2p5VFU1UFJrOEx4Z3N0RTllNWZRaHN5Yk1waUdwRExjeHgwWVVxVFJ1Y29oSGl5enFNenlSODk1dWZaNTA3TjA0L2pVc3F1OUM3bHprZUdVWWdEZW5QTnpvZis5eTVDNWtsLzNJWFNwaW5WN0pDTVVVNno5czAzdDA0VWhIU0Z1SjM1TnhleGRyWXBuQUVHRjJWQVM1cVRJOHNLandlTGlZL1oxTXhoUmN2UVkvSFMvREdta2JLQXlTLzNNdis5OFRudUpjM2MwbFFWa1ZmK1JYdG9uTXRNZHFwL0Y3azQzQi9KSngyVGpOeVkyam5xak1HY1g0eGEwbnhxWkRyTnNpS3hKTDdoV0IxeW95elFjczVxT1lKVWZJUVllbCtlRThuYjI2OGRIbUlXaUVBL3l0dW1FMDJ6cWNEaUJzenRzVU1Pa1JPZGhZY0MxWE5TUmIxWjJzZDBJQzFFa1F1ZDZ2R3NIbDNxemFQemIvaW5xSi9FVnhPc3E0VFh3VWc3aGptbmxLZm1zNU9zWDNJVWNiaGR0ZFZJNG16THhQMUFDUkN5Q0pwaFFyYUpaTEMzUE1SU2h2WWNuMzZrWWliQ1h6NzdiblJuVllrQXcyVEFCTzJKZmw2UERoOWpqdlZCMUNLTUplU24xOXFxS1RyaEgzNnBudVVRU2NIREdaWlgvVzRXS2ZzRUhMSnVPMVpHbC85VnZTdU85Qk1xOU5lSVdaNFpFekFRS2d5ZUcwNStmR2theEtNMEtFa0ZrYkcrZi95QXNyTUNqNExRVEZKaHhwcUxiaVBJSzFLTzV5UTFRKzJPZXdWUW4zVWZYU1BxMnVyODE1cklRd1MxZUVFc1Q4Zkpzc1NXeXFOeUFJTVF0aXhNczcxcmh5MGZrcFNyWE4zSWRXMld0VDFaWVptMjZIZlV4TmtxR3ZqUEl4blBDNnRNOXUwNTFMODZlOFNMTW5Mb2xEWUZMdGZQS1dQK28rQmpYTVhXMllDd2lwakRnUTJKZ3c2UGtVNXQrSGdocis4alhJakVYcTI3endUU3E3cnJaSHU4bGE1ZTBJdVRXWkRNMEk0NVNaVGJFTWFvMFBoQmlXbmUvWGZ0aXlMM3JMeHZoUkRzT1VYbmN4Mkd5S0MweDhuUEIySmxCWGsvcE8vRDZWbVRKZWJWTy9NTnlhRzhkU1FTekwwUkxCa0tHbHF6ZEl4dkMzekM3elg1SGVmRFB3dVRmTVpUV0JSZzc1OUxGU0FCbmQvK1I4SjFhZ0pmWS9mdEczbE9MVXlES0taSUN0TEVpdExJWVZ6Z1J5NUFuemFPKzgrMWM4aUh2R1lnN3Z2dndQa0hmT1RVUGdtaENRazFVZVV4Ump3c0EyR2gxZEZVRlM0K3Flc01BUlhuU3RmODZxc3RKVUtOamVQcnY4Y1FkZGdhdURJR0gyM0dVeEhESEsyVDY2VDdyWTd1UE9KbGM1TzV3TFZ1ckJVM21sZ0w5am0xZFpSS3VvRGNIVVk1Z0gwU0J6Uy8wc1pmemQ4MlpBa25GOW11M0xZQ2RqUXRJK2I2ZUNrU3htL1ZwQURNVkZIL0VSNVJYZm94TDV1Ykc2OTdjc3NUVndkRVVZVlAwUU0rNDVHZUpGc3lNVjg0WEN5UnQvYUNBdklGK3J3L1VMMklLa1hhZVNQTVJnK0cvbWNxaDVxT2xzNWdkUWpFNEV1UGlFRXFqUVBONXVoeTE1WTcwR0I0UjI4bU0yTFhidXU5TFp6ekY1WHJGRHM5TTZDcy90WGlORUN4ZitKRVRRWE5PQisydGJteXdNY1EybTUwQ2tFNDM2Y1lqUFF4WVd2Q0ZXK2o2bERkM2pWZExQNmlDWXBIbDkxbC9kUFJCVDFwRGw3V0VNSHg5MzNucEtFTHJHMTJ2R3B0c2FUZE44c3l5clJ6N3ZVbWtxZHgwamlZNmk4UXNkdHdTWEJVcmQ2SzFTNUg4ZG56QUpUYWxWK1hFYlExOWN1bFBBV0hWRXU5TlN0MVAzT2lvUmZ2eUIzWVg2NDlXcVpDV0RmR0pDM0FVaWhrcDVkT2pSNVVud1dCYTJ3bUg4WWtoZ3ZxYnhSN1pYTEpBQmlYL2ZKMjNCZW5PbEtEYys0OGo4dE5sQmtocUpab0tpV2hLaVd5dXZiRlpmSmcrRUpHdXRnMmJZQS8yUW5LTzlBUnpQYnd2TFZJL1lETUl1RlFESG1tVHdSWHNoRmp1WWxTaGRCRDJWejlaa3BVUkFaTEtYQVVOUWh2Nkd2MVdSUmF0MVdTbTZlSDZJRWY5R2J4ZnFUSkRVMnduWUJaVmx1d25nTUhYbUlKdlJSbU9VMWdEZ0ljZENWMFVkRlB3aGVmMmtLYUJVellyZ3RaOGFIcXd1cW1OdHkyNkt0dmRhTUNnZlFYaG44RjM3QU5TU0VUQWlVUmkvWmp2cW5mSFNQdnNTVXN4R2FaNG9OZlg5WVQ0ZWs5MUJzelhzSVFnOEtOeDZsM05udCtZaTc0dmQrL1d2b3RtV2pKVTl3Q3dlejFxZGZ4VGVOaDhOMFM4bU9OL3ZFUVlsbi92L2lBRFJrMjR2ZGlpN1I1ajhhalhQUkNPOXNpUGt5Y1lhZ0krSnVydG4vZjU5VmVxV2s1a2wwSjNIRXllR1kwQ1dhTk1HM3VSaVBDdEFvZGdQQ2NBQ1Z0dGZxb1M3eFdjZ3E0ejZJRG5GRmZuQnpVMCtBbFlNMUs3ekRqMnJQY2tjK2Y4cnZvdE4wTEJxa3BoRVlrYXRwc3k1dVlaNkR6azNGdm1RK052cmN0VS9RaFFyQkcwRlJ0NW5Lb2NCMnBQcFIxZ1pzQURCTkpTeWcyU2Z4dWNnM1ZkMDFKcWt4a2NBZUcyTlQ4aE1UUkw2NndNaGtlRkluTnJGd3ViQno5Um1oWW12MEpzbmFhRmV1NkpQKzMwRTlKbU5BSDJsSm9xNk50WVNLcXFOMDNuRVZTWTRVVHdtQUN6ZGI0WXh3U0pocDRxQTJ3QkZIOXhaWllnWExIWHd2NXlqK0daT3hrTDI0ak91eERFZFFRNmUxdVZjY0drbVlTY1VpY2M0bGdNMXhCRDgzbnZBb3VNM3pQVjEwOVM5U2J5OUJzRml0WkZVaWlnN1BkNVRVZlNhTWVMQ0lnZFZGY1FSU3hWUVVka25ucG16NkRkYmN0cjkrWVNEMnhqTCswdm9lNjlSMklySnJoRTlnSE8rUlhDZlMxa0UzT052TzhpVWJvR2N0WXRoVzQ0cjdLZU9oVjZmNFR1RnR5TURlQzI4M25laGcvUkJ5Ung0YXZpbGhYWVQ0eFBJTUZGaDJhenBCTzVuQVR3ZXJOUlVUdXl3RHZSK1BjT05ZY2tENEpZOWxuSzNVK25JdWF0R2wzUXluU0hoODByVk1UT3VoV0tJaFM5dW8vM2VrVTEvVGQ1SWtWR0lGcU9GU01QeTNaSURzaWliOUU1QWlDWXo3Vk1FK1V0aFhvV2IrZHlIOXdES1lMVFNqclZaTjJ3UEF4azZVcXFiVGphcjJiNXRqNlJKd2hPOGZvWUJ1aGx2dytBVU4vOVF2RGdFcFJua1dFTXcvbDBKVTlhTVlZQ01PVXlqMGI5d3NrQWQ1Yys3SEd1dExhMGc3NkZjdkpENlkrS25VUk5EZUwzOG5IWHdmT1ZURUtvcFQyTFBQWkZ1dlJacFBCdTBab3hMa245NjNUYzcyYWdFT3piTjNacU1nRGQyeWtHYWhtUHR1UjJDdzZtcG5nMkg0OVdibUZ4eVFiQXBiNmNlZTlOUndRZnlFRnhwNHlsUlF2SDZ6d1ZsUVJYSXhLZW81Q25qS2hiUi9lZ25OQkdzYVB5V3lURXRzcjdwRjlFcFlFMlEyODNSdkJGQ1ltK3lMb3krWjUveXZkYVRHZ1AzUDFTVGJrUG95YnB1UjlWQzcyRWhRSlBqV2l3cTZvQ3FqUzAyWnVYbit5OVZNY3h1NlVsOW8xK296TEJYY3hQa24ybEl0WFRweHZjTFFFYWN1ZWlUekRXbGlPOEhTQllmaE15dkJiVWtKZ0xqWjJGYzRGY2lKdW5Hc1hqdlFFN3NlZlk3MkptMHVpT3h1OUpJSG4wVndXdVE4Ym5tbXZPS2FFUEZXZmpTZi9kZTVrQzE2MktmaFI4cXJkY1dRVmZuVHhaRDFWaVBKVUxxYlIwaDFyb3hsVVJwWGliYlVXZHhUV0d1bTc2U2tGeCtab0VXbHZYODhDS1g2SGFMZkJ2ZExjcTc1ZFBZQ3R4aWZQQlBoNUh6WjM3dVFCanlVekV5UytxN1lyeko1L3pnbHJPM1gyU1FhTG1ZTjlpTUFsbmhXZy91a0wyWnpZb1hIdTkyNTAzcHc3VVFiOVFRY3NEUW5BOWNuaGdsbGw5dXRCL0V2c2xQTk5mWTNXQmJtUkNkY2psMEtMbk9PaU14QldUMmtDcjh4Q2gzMkRCM3dubzJPOWQrUzNYSUVkNGhKZVdRMmo5eTN2NHpEa3pvZVkzQ09kc1BZWDhzY0F3YU54cHlmSkZ5WXNaS3BkNmxTeVI3WjVZbzZWSmNwRUVnQlF5ZVpCTE8reEFERy9TMGZlNDllb2ttVllMdUlGVWhwQmJpM1JpV05TcnIvY2l6em1rWlRCbDNhWCtVOUdEVGxqMitES0Z4bnNrb3NQdnhRY003RVU0c0J4M2NEbnpZYzE1RTlKbDhMUHAzY0Z3R1pncVpwTTl6ZDB6THVjVXpIb2RvSjRTSE9ZQ2pxTlVnUExjTnlVTlpQalY3RTJVektOM3FQbFkySU1VUXpieG9BZ05ieDdkT3B6dzBUUDBJM0tUVlBFNXJkYTZCVzJ2K1JSeEQ4YXpyaUx1dzJsaW56cFFkc1Nya2tEQ0xNbnFRZFE0cHBBZ0FlbnZGNnNHZFNMZEI1bmhjUDVrSTZGd1lnWnpxNDhTU2RxL1kzZzV0endlV2cyMm12NjZncU9vQVV2SE11WVJDLzZJNEZzZEErNlNjc3ZhZ1kycnJGOGtZT0xyTHlreFp1eU95Wk9uSUY4aFVLckVkYldER1R3bFkySTFlY0N2dVg2NXlmQ1Rkenl1dkpzNGc3MVEycEFXSGppZDhSMTNqVkNvSWNFVmhJUjYrbkM1bFpRU3lKRTRkdkxWd3hIM2tIV2kwUnM1N2t5L1pUc2pzdzBlc1VML3dZa24wSk1icDQ1WDFvOWJSR2dZNlhDeWxRRHFWU0dWSDJYU3BiOGFRSGRvMVM2OGJZTmF5ZFFZS2xvSlNud1l0TVdsdW9WWHBoZ3A2bFpaM1d2QmczZzcyZzdqMExqdHdDYmt5K3ZkcUF2Y1ZuVnVEZEF0eXFheGI1T2tpL0NUZlJoWWVSOXd1SS9vbU5xMGFKdWFpSytHRk9UMk1Ubm56YXY4aE5ybEJtRDljaVFQUWMyZFRoZjFMMnludysxRjExaVpWeHRmU3V0aDJyQmZwbnJwZ2xFYjhCOUtMaFNSdDlyWDBMcEZ1LzZhaENGQ1ZPQWplZ2o2QU03VDZVbnNUejd0OXJKWEdWWk5NV29vaUtHNVRZVWZyRDFOMFpOWk1NZko5d3U2YmJ2OXptWHREWSs5aVRlakROdk0zbGRSTVE5bjlRd1pEVVR6WUZIUnR4UUJGTjJLcTVaVUh1eSs3U0cwbWNmTGRxKzR6VWQ0VXFLbjUrMDZoQXh0V1FqaFR4K1JHcnNCNWQ4RmJQc2tISitEM2NvM0tkamlPbXdZV1czNkRsUmVzQjZ4NDYxWElIN1RkWUlKRDd1bk5RWERrZEh5UWd3aWlYMHlsRUttWmdhVUx3UFphc2F5bmY0dDhqMDdZV25NcitVL0lwQ2NSMmpqRGZreFN0TUNUcDk1bi9BRTNVTE9ZdVRJcCtJSWlnME80ZkljMFNSVU5YZVhkZGErT3ZmSEtWc3NueE9tR1lYOWpwT2RHallDRUI3RWZLK1FpTERNWUc4Y2NWdVdmSlEreWgwcGNSMHBEMnZuLzNyeUFZYlZPZFVlN1hkdE9NaFE3NkR1WlFobWFFdGVyd21TbFdjZG1jVEg0SnJTSHRZeUtjdzY3MUdvOUE3MXdreUhsd1F0dTVjTmpHaEpnbGVoSkFTOXFCazdZbk51L0ZMSW90dzNCL3Q4RTlFYjFmM3IyQ2tibzlhTnYyb2s2aXV6V3ZDeFJmdFJRejlsem4rbVhiZFF2eWp0ZmFaZ2RGRUJLTjdMZnVyUi9XSGpEVWJpZWMva3JqQldiWDFRNzlJRFVqa1lXbFNQcHdXdmxEWnNVK29qK2xLTDVCdm1EN1MzZC9XcWkvZklYZ2dIY0I2Skt0UDdvbVdiVUFjUXVPM0RCN3BkOFphSVd4c2t6a3lGMUpQSTM2UGYyV2RzMTU2MHFSai8ydG9VUjU2eVFGU3NVM3pjdmFObzhBdmNlS0hFcC95Z3dySFNVVllmQnF0SDg2LzlJWC9rK21DT09NMTV5VGxhK0JxKzg5U3FBTXZWSGJpTnc4UFErcmdjUlhQdm9oZVlEZndzQ0pER0c1Z1VkUkxFcEtCekx4alYzZG9OajU5TUI4eXc4cnJVWTFxVU1MQ0Q5WXBBUDQvbkhaQjExVFBoeUYzaVhKZUNjWWlsTFQxdTVmSlJWdHBSdlp0eXhwYVU3NVhtMkdidEI3aXl5VTg0VzI2bEdqYllINzFkbzFTM0pld1U4bnhLL1VGcDBTN0V4SnNXb00waktSRHE1Ry94cW1rS2ZxT2RYZUc2MWJiYWhyTDBlZU9UNlROWnBsNjVaTFo0MVNnbzJKcTdydjgwSW5TTzIwMlVwVnRlQ1N0QlBCeUFWeE1zU2haTHF1Wkc0dFJkV2tMdW9iRHU1b0VtcXN2QzZtbGNrVCtNV1g3aDcyc3BIdUdjbDdjaDFMeVphTEdaY1FLN1pnMUtvN0xNRXF4NFVQdmhlcFNWNnYydUhFV0RQL2tudmFBMklpMUVEZkNua2dJc1lSODJoSXFQbERWTitQYktQR3RDOGVSRnpRUWtMODlXSlRTMmRIQU1XSlFLSU9NL0JPa1BFZE41SHFEdUhFc1VGVUFyZU9uUVhNT1JmVTQyZ3A5YUVLMjZINUE3ZUJ6dWhwTG5ZU1MyaHdRQ3F4bzhiUGFRODRyY25FWjlFWkFReE1CUGVxVHRBSlNzYlh3RnJVaFV5Vi8wWHA2YzhYenYrTFk5eVZpVUxtM2ovRUN3UldUUmgrcmgySzNxdGdrcFU4U2VHYmtDRWs4S09IcThiRW5MbDdzQzZGYVpYNHFQN0daVjh5RndBRXdaWkF2RjRqV2xjZCtEQTdDdWJudnlEN0JKOU9CcnI1ektzWEo1UXZGMVRwRDNmTTdGSXkyZTIxYUw3Q3RvUnNYckN6MDVaN3NUbDE3MjhtVXB3N1crSUdIY20xbXV4YmJPLzJWRTBhRWo0ZThqdzhuV2xWOUlWUjRTWkowNFdNN3BEd2M4bDNTNUkvZlBDc0RyZHRCVUpzUnBVQWhFb1EzWTRESXoxR2VKN2lRb0pNQW1UN0ROS08wQy9HalJDSERCVGFURk43V1pSR1lnQWE3VHE1QkJXRUNGbFZzOFpnNUlCZ3lJQWRlc0E2UDBIaFM1ak9VMHIyM0I1dFNkRzRyN1ZxLzFlKzVSMDFyUDJhcXpoUVNEdGEyRFRDRHNiYzdNQ2JEM09vcC94WjUyeGZiVjN4RS9NRXZKTWVTK1lqZUFTcnBNMFMrV29sRXlHdzQvZU81U0ViRDdUR0dxZVFqRHhCcnVKTzlzSlFFa2R3UXhoTzJPaDhyNkhFYUtobkVrVWJMOUprbjYzbXQzdEtGbDdTWVhTV3I5VWpWaVRpQkxlL2tIRmpLdE1RclNNQUhjTWdJdWVRdEtZZXh6bU1lYzVTaEM3dXRldzlHY29aZFZqVmhYdmtKa1FkUGNrcTBlMHZ5ZGttT1NnNTNCSkptVUR5NzA0cWcrQnFaNjZuRU1Mb0ZYOEtHaDVLUEZUWE9lcHRhbW5sRlVZb21zanBvV2RKcEpUc2NSaU1NVW9tbHRiYlJpVzBmeEpwVDk3WTlyekNsZ1JwLzlpcUhyUGVQRGdnTXlrRGtEZ3ZBUnpTQ3NvYWJRd2xZVmFjcVZkcEVPNWkxUzloRTBvLzVrbkV5RnR6bHhjaWpkejdQUHJFV0Q1NUhVd3UxSGhIMnZta0tMQUpLM1ZVZVRWWXR2dEE5c1ZSVXpNSDZQNjVIdWE5elVGMnBkSFh6SkY4UExsNVdJTCtyejVwRFRMWHU5ZFdHNDBEaVhncFZQbGxQZ3VJeWwwV0tmNm53Q015RUZQeDEyU3JUTnJVNzVkNXpxSFdJTlNwc1owL09UZ20vMFgxZjJVZlF6S2xRRzg5VXZUVW0xY0cyeXZSS0l4QWd1ZWhOVmJldlRjWXZ1QWhldXQ4RmgyT2JQVlhZcHpPUmlGNDJzSXBqcENiU0tJMEhndmhnQ1NoeXlLd0JEYTJlK0pXR0o2RmVqUnJRUjJyNE9YbDZOWEhWWHVUUVZNSnpDR3VSSCtrRGtFSkpwZGN4MXFXUS9VbFA5YzVCM0xJYSthRnMvYmdTMWEvRDJ2NCsxV2JOVXYxVFp0dzZNS1JTUFBsL2tpc2VRY3VtQ1Z3eTVXVFZVelpJYW95Ymx1T3gwUFhjQTl6K0YxbC9KYS8yaGMyQnQwR092QlUrcm1ERkdZWnhxM211MWFWZklrZDh3bGxlU3l4LzlVbFJYdEcvNDgwaUNZSVJYUlJCdkJEWDN3bElXSXJhVEFuNC8xMElTelBZeHNJQUd6M1A4by93QWh6akVlUzE3VlNTSG4zZ2dhN2pZMHFmNFNVMmt0RjFDTndoNUxYQ3Rla2RFdGdKUXpmYmg2dmkxNEhxV3A5eWIxMWtEWjVldHFKbFh0b1M0clpnWjg1NEI5aVpZYWtWQlRubUlrL3BkWVNwbTE2Z0lWaUVUZkZ2NXR1MU5qeTRIc3BqSjh6Q3VrR0QyaHlDeDU1cjY0Vk5YVWROckdSQTFQN3hJT2E3NXNEM2lNRjVTSEgwWnowSnQ1b3NrTDNXYWh6WWg5K3puUHhQTlVBTCtkcEE1V0dCaWY2MjIvRDhBR1dwWDRuY2lrcEdoTHR5cUczb3puZWl3S3VyTFBwWmtFZFVRZGUyVjRiZWl3QWFrODNQOGUzcXk4eHo2MDRPMXJYVGJFZkQ3aUhOa01HZGk0RWtpQnQ1ZVVFVW9jSDVnN21DN1hGVnEzSFMxU3lJWUF0M2JBNnlzTWFkVDFOTGRGZGY0eUx2U1JPMnFuUkJMTXVhQjZYRXRJdTdHQkVWNVY2c2gyZnFka3B5QWVTelFxU0s5ZTFPVG1ENnI0eGRZVkpST3hEUkpMaFhXZGhwODE3WnFhZWkyVk0reU9zZHI0cXFJNkVEQWJWYTVrbnpxczUvM2NzQ1N2YUVlaUo1V0RseVc5NEg4aHhaMGFoYVU1dFZoVHAwWncra1ZEbU1XTEVmWDRSZmlTYUtWeURONWVEeEJJRDhlNXZFVGI2SXBpVWp6N0w1KzlsTmpodGV6cldGelJkREdCZ1NzWEg3Y1pBWXlaaVUxSjhkTWVyZEhORDlwSHBiYVJnZkdlQUpqWVZtNC9pRUFhcHp5QWJLWFppdzNBVFRLSmZYVEl3RzliTzlSUHlUbXIrZ2t6RElnMHl4aVJhWER1SlZEMEVXdkthalBEa2lSWEcxcnpueWVVSDNseSt5UGJYY0VlU05YYldSdUEwN21rQU0rZVp6UVFUck1SKzViNEVqYmpCVWY3bVlXdkJ6QUZ1NWtiR1laV2VQa0E3elN1ejZIbEZINWZhZDJoMEozdEJVL1Z3NXcwWU44Q0lYd2wrSFhKZFhVYzVlMjNmeXY4aDU4RzdYbEhJNUhiUk1hdFpNTGpOa1lEUmdVTmZUMVhTZ0NGN3c2ZnFBUjlmRnFzelBYRWpPeG13QmVTWWI1RG9pUGI4TGtPZEVKTzJYc2ZGbEx3Ky9nYXI4VzdVWFZPMlZlVFF2MVA5OUR5dzhvWjBoRUxqZzE5WHJiSFpTUWNhS1pCa0FOelYxVzBmN290MUZpaWI2c0xXSm9xUlQxczZVOUJIa0pwQVRHNDZaRE1zSVp2VXBqb01ZTkoyKzEvcnR6MlFpZ3hYdFVmZ0w3VEtueXViM1JEWkxhZTNKdkJKYU14bGFQY01kUEtkUkNRTEVIVmNIZEpiSDdGUGZVbGJmTjNEVUszWWpQZGpaWDNkcjRhcS9PYTlBRUtmZytncENXODgzZnRnZzdBWUU2bDcwS3llc1V5anJmSXNXeVFvNUFQRTZhZEZiZWxsK3hEajJvdDBtaDMwWkF4bEdGZ3gwd3RxMEJ0WFJnV0hkMGhWck1aSTZ1SXI1eGhJRC9CVDAraStxWjY4QXhQVHkzVlk0emw3ZjlwMWxGaXhUSDZwdnBNcGlRdFNKcFlrbkNiQU1PUGtRQ1Z3MmFEM01IOE1MbWs3TXlWT0p4bU5uc0FMaTFlT1NXMzVCUmtXR2RSWU9VM2RyU1lsdjlVSDdRbkRTb1dWbEIwNTNGN0FuREM3bndkazN6UWQ0NVRxVXBHRG1kNTQzbFRVeGZ6ZnUrc3ZNQlpoQUFRRFNXZUFpc0N3eTg0bUxpckJUUGplRnV1TFJuY3Nsa1I2L3JsOGYxQ0owSHBzSEJ6VHdjdHhCVlRUd1VpSTBhR2laZXFidmlzWHZXQ3Vnb0kxekh5L3lDWkhMUzNvcjNldTJDd0RWQVNXUEVZSzRPKzE2RElRU2p4VVJBWXhzK0YveE85OHdCaW5CNFZJbXZ0KzduQndiTnJoY1dGY1RZenNYb2NtOFlpUkdZUUo3bVY4d0ZHSzhJa1pQb2JXRGt2YThtdG5pZlNrZjRYZjlkakpDSS9YcXkzT0Exak0ySEpVNVA0RDhDOVBkWnUzQjRlRVE0cU9LUk9wdndKUTh1K0xSSjl6K1pFM3B5d1VIN0VCdDZKWlNNODQ4QWdSVzVOczdVQjdsV2NVTkx2SWJHVVNvR25LSnVxc2lQMjMrTzRNYWNpZEEwNzF0Uy9rZEFwOE1IQU4rbTFNd3BmYWJxSEExS1RPNEQ0UHJpQlQzWUhLMHJnSXMrU3k1YTloVkxLOWk2MmxuSEdlR2V1YVdEcFl0VTU2bXFnS09yNHBNMSt3V2hFbFFzMzdDRkpSYzhjTTQxTXk2a3l4cUhuQ1ppcmgycTIxUlJiSlI3Si92R2ZjNmdaSml0UEZKOU10bldOZ2gvVW9na1dmTENBMlpTdVNmc2xHaUtoamZ6dFBzSEZ4S0hHbmJ0bjhPNXVFMG15SzR6akhqT0R0T2FUeUN3R0RnZis4WnRwei9WbC9JU25WdjlLSFVCYjF4VXJvTXhUeXBQZUJ2VW80SUFMS215U1dDUmtyc0wzSTd3NVZRVy9ucURUcExHbmpad0dick1icTlWaWR0dHBaNXVHLzJQb1lobll6Sm05eVVvUDJ3cE9YT3FPM1o0eXR6YjlVbHZjVGFlT1BDY2JmSWlhOGNhclVCL3QvR25kVTdFa2d6UUdlWTdlQmJFL2I2TFZpS1FYNVBUWm5MWTlkSzZ2cDZQcWxPcWVoODJ6ZUlGakhzMGlkanJIUHdLMnVESHBBN2dUMDN5RW5zN0w4WTAzMk04aXNNQUozMUk3RnJDOFRtTnpRY3NnS29VczVscjRUeFB3Nld6MUttTzRCQ1JCT3pSZ2JpVXhlNm9JQjJoUzNKRi9JaHNCNDdUZVVrcFQzbTNSRXNEZDR5SzZ2Z25JRTRFMU1vdDJOWFpBN0JIQ2s1c0NuTERmYm9XSHBtNjUvbC9rMEdkS0M1RHBQbHFrZS9haVlKWTg0WEUxZUtFSVRrMWkwWDRHRTI5c1NaZkxzbW9uc283U0xoTHdFWStlMDlSUFhxakVYUU5UV2xHVzAxRHpXeFpJcmtvM3NHZFkxWWJJaU9EQ0VzaWc4WUdzS1k0Uk9tTmhBaTBZcERrS2JsVWI3aE1jWTNlbW9LQXozMXY5KytuQzE4cVNIUkptTVdFRkplZTRXWFFORUtNWGg0bDJxTy96RU1kTWQwZEFzdGgwTmFEd1dkd2RBakVuc3ZtZzNzYnVhbDZLMG0zSmhLWnZyeU1haDM4V2JET1B0ekJCajFYSnFkcjdmR3MyNkFlK2NzVGdkZVBacUFiUzFRdHJQZ0Y2WVk1L09PcmdNNEk0UFpYbk9NNXRxSTZJRDVPMHlLZHUyWlBndTQzTjBLK3JLd1lNTFZYNi9FeTBkYjlCZXFoamtFd2VaRngzL3daUHJyMXFlNEZwNjhUYi9PMGNUNi9HQ0NmT0JKbml3emJ6MHp5bHp2YWVQYmtNUW1DWGtuSU1rWnh1dFhQanhJbng5UE5pMldzc1lwa1RKdm1UNzZUdThhaThiZ2pjRUdjOXdydTI0YVdBMGV3UmxqeU56QThwY3FXSUtsaExpbjRDdUJFUFVUSEczNXNrSCtoOFNmbVFYLzJ4YTdkcXk4TE1namxFaUt0R01qZUlkV3RpeFdMcm1LZFJVUmk5Q245bU9ub1A0VHBEOHVKVmJJbWozRGE3aTJXcmlDemt1L3NTSy9TRzB6Z3lsSWtaRzFFVm1MYXU0b3BZVGdiSDBmQThUUlFTVFlxS09GUUsvazNCVWFtc1JUeTZMS3BKRHlEbEx6L2g0b1NYbXFaRkdNUEgyU1U3WjU5VUUzcXBzZ25DODJlNGl0RVFmUkxwSEtqaG45bWU3Y2wzNUFsZlNET1ZUMi8vem5XK3FnRWdQUGZJS3NnS081ZGM2YzhYMXlsMlpsS0hJZ0d6NUFGR2tWamdkN2ZibHNhbGNLU3VlUHRsdm9USkJRdXVvakVhQldoMjZ5NkxiNG5TNzdXbzMzWEtOS2N1cDl6NGJ2ZmtGd3d5eVFhSUc2NVI4NjVKbExBMERBMTNzQkVWVjRvZ0d2WXFSN1FDdGR1SUxGOEV3aWRFMkVXdGxCdk1VTk9NTFpmV0djQldFM2VPLzRGUG5GUGRMWjJ5NEhhcjNGcmVDVUNLMzhISEkxU3pHRGxiekNScDVBaWt3em5uS3hYYUpuVHI5bDJUSmFodTVMWW1DbTNIR3IybXlaTTZoNDcrbUZrY2VpYWZmZ3c4bzkxeDZsUy9VRHI0N2VEMys1dVoxTU9xRmdoTGJLWW1RZE1KWlZNdkVsQzFkRnZnbUJFN0RrTjQxRDNhamwxV21FM05KUVkvVmxCK0JDRlRTSThCVGFLZVNUeU9OQ1lyRzZYcld0d2FqcHNPNUF0b1VNVWlDZlB0NHZSbFMrV0Noc1VZakRabzVZRVFCVzZ5VWlKZUQvMEJWR1UvMDByOVdaOWs4UlVhZE9ldUFMYWFZRXhwRjF2b3RJY2luT0x3Mm1FaVQyeUpiNWxpVnIxWlJ5cktxMnNOajNYaUp3ZkZ3Y3FiK2lPVmlMblg0YzNKL3llR1FRNUR4eklzQnQzSGhEYWRBYm9PbDhUaEhtdExURmEydjJWZjhHR21UMiszNENIdnVhVjFOb2prNDhjQzR2Zi9haEJpcHhWbHQ1Z0JYUWtvTFJmUlZzZitkMk5UVFZ1cDZ4V0M4bTMvaGsxZ2xYNmlNZHJMcG1jQXRSbUlYZzVwS2lPREx0QmdjMnZjclpkdFN6T0ZZalZsbzNNVU12amVleFYwdWRRdzhLQlpSWlhheTZmcU1CS2lxQ2tiT0VJWkdSSm9lTkVQdXZtWE1CSVNYZ1Zra21BdWJ3TjhzejdJTWF2dEhMT211N3EyOTh1ajNjVHJDbkFZR3NrZ3ZjWjA3NWw5cFRzMWVYekY3ckNwS2I2RDNBT0diNWczby8xbUhqS2JMakZMVnBpbUordE10bEdtUWFaTkdQTDZNYmRNNnZCYVc4eVVNZXgyZDFNUEUwZmdYN0lWRzhySHZZMVhWdVdTVytJcjY3WkRqUDV5VVFra1FyZ2xvMkF2ZHNHM0VMNFREZHdPSWcyQzA1Nm15YjEzZlFmUHhjSDlTZmZENUo0Mnpta1pCTFNzZEoweGNNZWRmM2doeFVLaG1hb1g0eVMyRjJZL3g5WWZPbENqQzZEcHRuc2lPOTh5M0RWR3g3eERxMnVTOVJ5ck5ZOUNaN2Y5Uklaeit1MkdyZm90UStyaVhrY0ErOUJtZERYVXhRMGRFTWs0N2tRZ0hBSk5ZVjdNSHJmNzY4VFJYV2dUeTFPZVdlNGFzWnZXK3VEOGdTNGkybmIvaDJYZkF3Wlk1SThXSXNFSkRXWDNIeTBwaFZsZHJDRUo4YVdqcmxiNjhCMS9VamVFY3BvbkJvTWlpYU1tdWJtM21BRkFGK1VKRDhmTExPUlJuWkNJRG50UUZrblhyTU13bWI3aFdjakFYemFWNnREekdSd2dnUVB1S1BuMGhzdmttUC9yL1p2b0ltQ0Z3QjZadEVNbXg3ZkcwQkZ4a090Q1Q5R0d2U1dMVTdjUHZGK052ZTlPZG9RK1ByR2I2dFMzUVU0SExvcjM1aDZ3YU1FTmtmQ2ZUcVBDVkxVVkhQU0o1QTJVNnQ4M1RmcWRzbUdkdzZJZ09vTC9rUTd5MGJHcnRBdXRkQ3RGZUxvdkhPY2VJRlBaOEJ1Zis0clZmTE9obFQ5Y29WcDlxQzBYeCszMHk3WTdQSWNMUlRSWVEwcWxObjRHOUp3bDdYd1J4REpqYjljbm9zMm84cXhqSWtJWVdnN1dqWkFxdDZPL1cvaUhNOUlIM2laRGtsM2U0dnYvbWVBZ0trK1hhYVJmWG5yaFkra2FpZzVCTTRhalhQdUlUUUVOQTJhK0dWNmdsUFQyZEFieXBqUmdaS2R0VEc3MU5ocUFnTThobjdzMlJ1bm1qYXVWVWcxaDJXNmFyc25kNkJ6ekpHTGpBci9EWUgvbGdOTmhmZFl5VGpuaTlQdTZRTE5LK2JUQ3VNdE14OG9XTk1TRkJCNFhEaVVpVEJ3MDh5ZktPOTh6cU5aNXpNTyt3RUU1MnYwNnl6cE1Bdyt1RHBXUXprSzlDc2UzVUFYVnVqaGE5Mnc1N1BNaFdYVlpXOXNiNlpSalRyazZzOTZRMjdqUjR0YTZGVEV0RmFvaXJKSkd6L2NpWnR0SDR5OUJJNWhscHBOWnB0L3BzbGV3dWpoYUpJdTlYN1NicmJOakx0QW1EbHhJOFdEcGowOXdSK1phMGViWXRWZDRNTStuamlqMjl2OUNLR2VWRDYyQW5GTzQrbXAvUFkyUnh6MnlSU3R1V3pKV1hHUWVTdjNwblRlMG84TUNKek5YaUNncVZRS0tKTUlYaTBydlhNRE5oTEdWbDV3UUtMYlR1cmRsSTVwYko4NGVEbjFERVV1OEYwbmhNUHlnNjE5V2dwZWJ6Qk4xWGdTTVlzaEdyWWI4c3dxYUY5a1k4VlphZDFqT1RNek5iMGh0NUN1bld5ckQ1K1VjREVEZ0F1ajBzbG9MSEVKd0dKRTRNaWExYVV2a3BKWjJBZkNnWklqNy9WZlRSRVVKL0tXVlZ1Qm9DaDNVWTQvSlRMajZHOEpPclRBbHZqNXJVcnQwSnl5ZWdvTmUzcVZBeG1aK0lPckMyYlpiYzdEL2RiSjNnZkkyQ1VScG12c1p1UkFBNzRTb3VYVkxFVVFvOGJMNDQvTVpCbGFoMkI4Q2crSjhuVURHYjhMcWlKNDdkcktoZnhQaHlsdHUzZ2hXRk13WUNVWitxN0YwMzc4cmFhNFhwTE9oUHNQUlI3L0pHeDMyeVZJSmVEKytvd0lkbWYrZS9xTFIreWt3ZVZUcTFIZUFZU0VEMlhQYWp1NUlPT2JpYUNjSGY1WHlnc3psZlJqZGwwNUJXZGZyVlUrMWxZZWRteTRaVFNKSzUxcHFGSHp1d1VNZm0wZ3ZWa0FTY0dxSUI0TVhSby90ZlY0SVZ2dEp4dDFEejFyTHB2L2NsdlpER3pjUWM1ZVVvRGFwOXhBRUo3QkRSYUM5NlZiaHplUzRzSzdYMEFybzhwV0RObGM1VENnWnM1VGl6MnhQZGk1R3dRTkRhRXVQNmNsTEU0RGk2dXE2Q2w5RkZqM1VzOVNkaWloOCswNXdnNWZmaHczSFovanZMTklLTU5EdVRxQTQvczR0VjdwQlpJY3JLSVo2ZEJ3NGFNY0k5Z0lsRXhXOGhzbG5DTm5pTGhxekVpeXpER2hRSFhtYU1ueGszeWRwR0VkdGwxZlJ0Tk9PTmt6QjZhWmttU05DcUh0QWliK0dnbVh4cjQwaXhLK0JjL1JPd2lvbXEvSFdFNHQ2N2tKMWowcFdEcVpmNlBFSWRqazJSUUpsdHBOS0k5VjJ6MnF6clVveDFzOGxyZXo3eEErOWtFYlBaTXlEQkMxcjhkOUhwLzA1Qm1uU3V0NSsxdXh2RUllZ1VTczV2cjBaZytPRk56b1hNSzVYbjlJVk1zSHJTcHlKdUJLSk5BRFZGSTMrVkY2VWxsZEgyYUJobUlka1VKTFZ1Z3JZNTZjNlBaVEpPdVFYUkd3ZDUxSjRSNFB5eXVjd2p6QWJyL01VYmJYRE5vYzBFbzVhUWw3STRvQTJLMVM4VzZDRm1kZG5ScndKM0cycTgvVU8yS1dmMnVPbHNReE5uWnJ4OHFmc2xyZlgrWWdNSEQxN3ErSHcyRmZRS3NGdXN4RHZpTS9ZSFI3d1lZdXhYdm5yaHkwUDhId1NONGRmNld5V1RlMUZsQXpncFNveWc3dnZSSnJWSmN0dVVJTkNXamNPVWVSYjZUYzNsVmxtUUNPZGZqdjJHaXh4Y2xYY1JobDNZYk5FWHFFUG5wS2ZHdkhieGhiRHY4OWQrODNGTWpneWp5bDhHNm5qOExrWmhMYklvZG5oMDlUU3greVcrSGQzY01jcSsxK2c1NWZOSzdWOEZyK1RXcGVBclJvNFlKemJ3NEUya21JOEVNSkQra29vaDQ5TGl6UzNDR1lFZmF6SUdFWTV3MmlqelJTaTdIREo4WGRBdFcyVElGVW14OXp5UVAvWEFtWGMvZ05jWjMvVVNPVWdYWUdORnYrNkg4RUY3dDM3QlBuNkNtRE9QenBiTmc1SzJvNmhHWk85RGpuZjJ0NDM3QmFJQ2tBWTh3YjF4d2dBK3N1ZU5NdVpxcjdvRzdLSkY5SDVlZkVmcGZVdXRiaWhkcStnczk0Y2hLb3R2M2UwRkh6UGtOTWQvcWJjZzVKb1B2SUVvQnJCLzhzcDl0K1lQaG5sRERyZWppdEdWTVBJeVMrVGhwMFVaeldNdmlHWTNidmpNbndhTDNZckpDT2wrQ1lBbnhGdVZOdTBSeEFOeEpTQkpiQjZJamlXOFl5RWNtNGJhQVNrTktLbUM5RTVRSE1EcnhDM2hpMitiTEhUQUgwYkRFTXJFWEkxa3V0bkZ0Q3VtL1dXaHMwU2JwalNKYmk4R3NhWWtTOE8vU21qU3JMOThDMnhKN29EcThXcm5CUnNiVGRZN0ZYczl5NUh5N2NlZ3ozLzdSR3duTG1nRTQvQ1d1Z2RhYXhSRlZuSEkxVHVDaUNWR1lhWncxSVhWV3hRb1ozZVpnMDMvUFpaR3Z5emUxTUVxODkvOW0rNHhRNzRMMENtMWxYNmZML0t2YUFTbDVHVW9kR3dFRnVSVVRNRC9RdFp1M3l4cms5bUdLQnQ1VnlOUDE5QWJhK1NhN1o1SS85SXJOaGc1Y1NGRU1kSlRxeDVzY2xUMGMxK01ka0lrNFBPQXZMQitjbWJNMkpXeEVDYngyc09lQTNhWXpDZGJVcytJQjgvL24xamIvSzdDelF6b0tIUSs5SW54NGVDUmhVWENpa2gxZjdodzJrM1pscFFNWThCTmE1NFNWYzRUME93cDUrcm5aWHV0aDlGc1ZEUDVBamJ2aE05cjVVVk94SzkwbnJPcHZvZ3hwM1pjdzRMQ08xeDVQYk55MU5FYjBIYTFITWdSeVNlc3pFTTQ4RnpyQlV2QmNjQm0zRnBzZXF2TTVmY3N2bTZtQzlMUmoyY2xVN0I2cmEvMC8xTVdXV0tnQWRIRTY0NDU3a1FLVktzcWI4ZndXZTBPRDZvWWJ6R04xT1Y0SUwxREJOeWNzWTAyMWhSOXM3QVhGa1dOcnR6L09EYUpWaEJ4bSt6L2xweWhDNC9XZDhPV1U1UkRybVVSREEzSnYxYTI5Z0x4WEhTOFNmRHZXUFdyZWNNNzVDZ1RWaVZ3TlNIN1RTYVlpYnVuYXdHT3BmUmQ1TFh6eUpLVkw5RHVWM0NFdzhIZU16Kzk3QXFvQ3VTVmwwK0dYSHIySFJxRWNyRkdEUjIyREF2aGswTnBRVWRUM2ZROUJRbzFTYnBEWTgycnRLK1VNV3FzMWlYN0NqYktlVXo2WElHZytOOCtiNUFTcTQ5NzRlK2svQ3R4bXQ5WWRXb1FsWWRDMlFsUkoybzBrR3duT1pIdUdjSXpDeGtsTU9ybHlvTTFKTnZqUlh6azZ0VnRHSWZxcWVzLzQ3dUgxZ0syaUNBaGF5UE5xQVhKMmw0MzdqclYvWVpoNDlsSktER09EMVdyOHh4UjV4UnBhenh4bVhTM1lRd2FDYzluZUxqZmMvMWQyMWlhdU1tck51dUlKc1BIZ24vZWk0OXVyR3BHMlh6T2tnQm1QK0pnN3V0VVJvaEN1Tkd5aW9NOXFKSzJGSExUd0ovK29OempCVll3NkRaWUtrSzBaVHZnNjFUTjRkMzYreGlveEVkRUpvcFZPZy9HMGR2S2Y4N3FQaTJmUmI3VmVYWnBRQTBPSm1TdGZpRzBLMEtmRmpSbi9NSElsVmZscnRZVmhkMmNqVVRHQzBWbUZubTg2ODFIWkJsSzNkMkp6N2l0TDRTNEFlK1hESFJXN2Y2RloyYmJJd0dHU1UyMnFUZGRITzFnWUVvWittVlhuekFHVm10bDdOWEZJNm5RbkNzUTlNc1JrSHM3NEkzdTR4bnBLb1dYeG5XemRDNjlsMG9pdnhwQXcwQUNOMm9lSlF6MTltYVdRR1h5YlRjenhzb1Y1ZU5CajJIT2ZVMnZDVnkyZWlWRWh5YmpiVndMb1pLVzhRdHNCdklpKzlrbGVuekxHUm1neVdmL2hMamRuSzM4ZEVkTDZPdUtLZzRwQ2JlVXpPem5LbXlkOHdIQ0drVFhTbkk4dTM5RlRjQ0F2eVk1eW1NaDhWSjJoQkU2MGRWRldkQ3Zrd0dpdGVXNEsrSXQrdnVOTFZXMkZHZkxIYVI0WFFhRGJzQ0tNdVhZTURHbmx0eFIrTVQ3N1JKcHZSQ1Q1a1dZUTk4eFN0MmlEenRKaHFESlhISERJRHMrT1NZcXJ6ZFd5OHd2eUVVSWh6Q1hXL2grbFJoRHB4bFUxQVNCZUpQaDZiaXFSdDhwTEhKbDcrSzQzNlhZY0pTNjEwdmthSUJaQkpRdThEYi9JeCtaRUxiN2JEeEQ0Ti85MllFbXVtNVZXTzMwdlY1THE3bWorSEZVamJHY25Ga3VKbXVqL1djNWlISnF0K1JCOTJVc2ZNQnlOb3pmdVZwRTY4VWtYVDVpUWJOeFpvcGx3V1VuaW0rRy8wbjFWYlpOUnJhZDRmdWVrODV4NEdSOXBCNGF5OExsbWhnei9GL1dxTEdNaEFzV0tNSDhidzVVRWNZMnhzdG4rK0xPQitvMmRLUkRXVmc5NTR6bU4yOG5jSnNqSHk3RmFHVEZuRDVxQVA4UjdzUzhHcHROUVRaSE5GcURLMzJyc0tkQXB1T013WEdHSDhQV0tNODhiZS9lbUY5bnRwNXFJTzB0eDZleDd2R3FLN09KNkxUakFYWXpOSGNBWnM1Umh3R09vQWpNRFY2dmRqbGlGUEJzSVNxOEp1cm80cGJYMUh2QmFaS3lsenNUcHBiTTlCZmpYTzM0amk2TGFtdXBLZk9Jd2QrdEpaL0k3UjlmSnZqY3dLcmpxWjR6Qi9XZGJwcFI4Y2NOTENzUEdsZEhPTk0zV2lSS0d6WlZvZ0ZWT3BxUG5abElacVFiamdsOERBekVxbm8yeERRUlFmWS9oUFVBeXd3ZlFiNUVLY2R5ZU8ybk1Bb09xR1ZpNlJNR2dwRm8yWXBCS0xjZ0k5U3N4L1VncytwMGd3MXRZbnpndjNrYTZNdFhaaDIvM1JhaGtJZ0RjazlpbGZHZGVJQXczbE1rU3pwR216dkE3UldhZEFJc3pxYXA2SXoySE9HUmV3TzVBTkhabmZYT1JISG1EV3BTa2U1VU5jcDd1VDdjdjNHMk1HTDgreEN2RmExTGgxSDdBU1FRSFZBWXZEZlF1WDQ2VjdmS25mL05aWXNhS3hCZ1dmTVJIOTU3Qm5HN0NnNzhPL1hWMG0yN2dZbTNpaHJ0WHI4SFRQSmRDL08rLzE5b3pZelFoNDd6TmtvUzU4bEZpM01QQ2NYS2o1bXZCc1p5NDVWVXdKNWpNVm9wTDBlQ1Jkb1lmUG5YdU5UeFRaeis5Q01wSkpvU2JuV1lXaXQrNXBIVjdKNXZNZmVEZldwcUNaekRRQlUwOHZiRnl3SVh1eEZSZEZiRHo1bWtUa0l1TU9BaVM0UjdPY1FCUG85ajRUZjQ2ZHBZb3lvOU4zcGtVZDZoWVdBRU9yODJtODc2cjFqK2pacXFVZHAwQzNWcDVIMEtjWjJoS3UvSDBBYnE1TEJKUXFxaGJHTVNnRlQ3elUrbHUvUm40OFNUK2RPbzdJdmpNU0JVTEJGTmtDR0Nha1AxNTk0cVVaRGlQdVcwYUtvSndHZkpTVFp0VzgzaGpsRE05NmhmM08yNlAxUGJhWkVmcmJFakhvZUdXcFZpNnF4RHhueTdCczRsb3hQMy9GREpZalJ3ZmRpVUxCVGNmbm4wQ0dXeTl4eTM3dkdidWMxWHJUQnBBaUh6bnhkYmFLRGZQb2RidTBVd3ZRK2JhMHZEZG5hQVpJV08yaGY5QnZjY0ZPcG9jU0dxUU0zdzQ2cGNFMy83Tk45Zy9SUEpwRnhlOUsvbmJnbUFQVk8wbjFrR0JLUU1kQWVVN3dMK2daa3dGdkxLU2JJaFJrejlRMWpGdXl2WUVXNWdXbndSQVZneUV2aTJqU1g4VGY2NitCbTBtQ3hKWFVrMFBQYlpYajdmTFplUm1NTVlFWXo4TVRDTnRub0tuM0hDTHdhR0JnUnh0bGNDWGhQOFcveWtBL3poUm1IWWp0M3BJWDh1L0hvMkxrZU5pRHNmakRtUlRUL2ZsL29lTUZydExyMXVQbi9pUUxVVkpPZTFpVk5jSlhRTWRqVzhZOVBGTXJJb0N4dm03RnBZZktCUlhCNjFFWmlSVGQvbm9QM3FtVnYyeXhNcW10RzVKSUlkeS9xY2RNbHVyczEwem9uQnE3R3gxS0NNbnNsWEZkak1zMzJvSUhHWkVpL0VFcHV6MGtCNm5CN1FHajhBRUtlbys4eHFLWHE3dTh4VjFSYmM0dXQzYW9nOUJvSUFOTXg3QTRiZmtGRHp1aVp1ZVQrTTlqWE5INHl1akErL2RHQ3JhSTZ0eStaeVFuUHNRM0QzZ083eVNwaG5MNWlvNnFDWGVjb0RWeG5GWmNZeDF3VCtlMXp6RDFYL04zNkZDQ0lKb2FpNjh2RW51NEJzL1BDOSt0cmdubFp4Yk1qVjFqS2dZcmRNeGVObmw3OTZLTDZscmdibHg3Y0Zka21oenJmM2hYTlpiMG9wMnRGWmFyR3kzbTY2NUhmbWRrTC81cGlEZkZjMXo0YURXZXQ3NEdkUnZKTDRZMHJPOUw1RHgrcHZIWDRFUXpRU0pkQXRDaUNpOVV3SklrT244RTdYNURZbFJ2T2ZvaVRoZHAxS1FJR1RVTXlINytMNk8zd0c5ek9OcCsvVk9sL2pNOXpWNnExYjN2U3VQZmJCRUwyb2hkaHpTU0J5N055NlJMd3pHN1lFVGdERWVXa3lMNXFXa1dFdS8xa2M4cnlTK2JJUGhnYS9JSXRrc3ZxKzVDeDJlRDZUdzFSSFZwQk5vOE9BUWRORGY4QWYzSm11WWMxQzRMckJBdE9YYzd6cnQyRVpIdUtKSSthQ2ZtL1NXVTZab3QycGxKNUE0ZEFqTzQ4TXpEdlhVaHZEL3NIRm03MG5taUFhb0NtR29EVHlvazZDVnhhcGFTOWZGWlNhNzBxaW1aMkZzYjRldWhaZDBsNDcrQ3BpQVV4SnQ3U3BhcUhmRWszdWJDb1BEMXNmL05pKzM2azhBUnFoMEozd1JiQzY4OGhDK0FyV0JFOUFtSkxnTjBTb0lCZzRNdDFpdjkxK0pXYS90Wk9mQ1ZTL0RxQUFjMTA4QU9tWTFkdUxWYkRGMHlWMFBqRW01ZVExMVBPODBLMWRDV0NVZmJDMS9jT0swV1U5eTNvRU1SSGVyemxCZzBRZC9SNkc2WFFIOWYzVHFGcGxMeUF5b3VjU2hpQ0ZWM0RPK29teFJRTWUvYXA5VzE1TlNEc2REc2Z0Ymt4c2RzNGxnUldKclVTNVorM0RJN2tlNm83WGNucThxSTlKR3QxQitxM1ZTclBsNFhaeXFlbVNHcnhNSXExYVZIL0VCWUdsWE03ZG5sbE14UDFvVnpWR0tSQ3BPZTZFUmxlNFVFUFphdEhUaXkrelZHVVo3RGNwakg2cGRFMzhmT0lieHVicVREeUlmaHBYdHkzbzFONFhRVE1NKzBuSnRVNkFuNkp4MENRKzRvaUFxQm9CYzVzT3JucWxmK1Q1YzREa1J1MGEvTHdFcE1vVHdyWEdRMTROcVJxcGR1ajdDODVPRjRudTFWaHM5T3dkMGtla1JkNlVOSGRMWjlTbFc1eFdCcnAyQTQ1b1FnUTg0TG9IL3NrTThFZEg1UEUzOGQ1d0NCL0JQZ0hqUmp4eWMxeUw5dXUrZU9UMTBWV3Erd1NJb25CVEZlS1d1TCtmMGptM09QQXJYYlBjTjdHcE5ZS2ZqaHhzMkQvVFNjOXhIQlNRbURxYTQxemI5TDBZUUt4aHExYjUwOTZkMVVaaEhNWVF4elpqSHF1S0E2dlI2Zk80cXBkQUY5VUttc0M4Q3pOR0M3bWVrKzVZZnFsTGlzRnVFalJISEdsZVh1aE82SFVDM2wrcUNKanRQMDBYR2srTFdob1NEby9wMTQycDErODlmKzVrYlo0WDVaWlBNTkxSeGNzb1B2VVcwZ2Q0aXhWMzd1M3VpV3dJUVpMeWJ5Z2FKOTNUMkYwTVlqV2xiNFFCRkY2bDltbUQxeGw4YkFRRlhpUjBCbU5DQzJhTk1vbG0zK3d5S0I0TmJuYUNuenk0bG91dURZU1FUa1ZlTlhuVHdaeXlEV2k2ZzhrcmxqeGNON3JXSC9uQ08raW9XZHhleTlXUkhBL0MxejRwWmZNQ0RDZnlTZ3RwbFJ2ZEY3TmVFS2lkR05XckVRR3hDdnd4eDdNQTJkNHEvYU94dkQxbFBGbWYrekxPbHJtRDlrMHRtYTVuYThJRGcwdTY5elRja240dUtDeml2NTRQQzV4QlBYSXFvY0N2RjdZdGNUaTRxNzAzRVFsVytOWTdHNXpyOVhuTDlEVzlSZTdiL0tUNDQ0S0hGYWxXWW9TUGJFNVR1ZHRvUTR5b1NzWnJqU2YzeWhGdWltRGlPdTJvRE5JV2tIa2d6cm1BQm1HanExSXBoZ2xlandsSkNtZEV1enFiNm1YOGVKRVBxQk5iQ1J0K0JqVWRrdkN1Yjc5aTlKbzNkZEVxbjRRWlB6RHZHZ2VidzFROFhocnpjRXhHaCtiRWJ4ZE1lb3p1blUxWnZ3b3p5OEdaZ0NoZWVFWXdpSmYvSzZjUmhaSjh3MFJTRTBlTWRYRjJueHNPemRSTTJERFZwVmQ3N2c0dXc1Y0ZWK0lsQ3NvVjNNWTVKbUprTkp1cTZKT0Q1ZzBmdE9PSE1meDh5bDVjQXRWaUlqa2RDMDcwSnZsU01uZEtUWkRzaXExQWk0bVN1bmkxeWY2ZURlUVpTWnpBQTlnbytOUDVHVjMxcWF3ZndpdGJGR1JHcFBUL1F3Nml0alYxMStYZ1BNRWovV3RuM1JWR3dDWUZ5QjBhQ3VwQlpoaGVZajJDZStqWHJIWTNJRzJkT28zWE1IcmFzZmkzU0RzUld2V1Z3SFJPYnhGMzVlSkFXQXZzdWdtUmtXajNpK1dCU3BHQmZGRWRLU21zek1pZjBJWTIrQ0J3bDJITTg3OXdFZ1lFVExCQUp1c1U1dWhvcjVpWCtHTWtVODg2MUhvbzZZOXlFTEtLT1J2bEYvVlByVFhpdFQ4d0M2ODkzOVhINE5ZYXFlUk9EbjdFMDcvMlYzS0dtU3h3K0JJTzJObUJQN2pLTkU4aGhTUlBsMWVSL2xkN3JNVGl0UGo4d1R5aGJPNEI2MlEzbi9US3RkOHlCWjIwN1VHY1IraFlOUlNzcWhtNy8rQlFmR2Rra1hwbFcrYW1NbGQyVVpEMEw4RHQvME10eUFydS9DdksycHR0d2JhY2RDOUYxZkc0VkpOL2FGTnV0TWg4UG16V0NSZTVUSU0zdUlnQm5PUWFXSFVFaVgxSVdVMWpxY2VSdHNJYXRiYXNReXpmci9YaUtOM3ZTWGp1REFxTWlDanBocytuK3JEZXAzc1ZGRi80RnhHV2gyenFvMDJ1dUs2bVVHMXpick9iYkRYMXluRVdGMzlMMnl2cVV4R05yS2VuZEZtL0U5MGVrMVFYQkszVlVpRWV2YzBaVHgyQThiRUZxUGJkbHdOWC9SaFBNOGtza1VLbU90QnBIam9OK0FUTUJJWWovWU5RYStRK2RRT25MQkpEQjhGTHByYXgyRjRuMUNyNVd5akxNY2grRzF3dTlLcnVCVGlRR2p3SDhvVVJocVFYbkI1OEpiK0xacXFMQjFFNklMWmFVRHlnN2w1Tk1FQTUyUkdHVjJtNTg3Zld2SGZEbGpHbUszL1ZpNnpnd3BuVkRTSThsVUlvUFdJYzRnRi9tbzhmVmtYSnZmMmM1WVFQNi84cXM0by9tRlFhQUFyVlpRdG91aW0yMHVuUHNGMXE5ZW1VaDNjUmtQcmpBMU4zV1FWSnlaRFRVbkFSME1pZGl6UzhxSHJwN2ZDQkgrNDZrS1JHZFF4b1c2ZHRBdnkrdnBGWDdYdm9DSUpMblV0YmpkdzhML1RjNG9BTGo5MGxLV3ovc05OR3gvSTdjL1VoMXNRRXBOYkN3WXdxWm1QWmlBSU5FRUlQZ3BDRXMvQXQ0NURmQjdsNm1kUzJjd2hpazJvVnB6S0REVUtTZ1h1aTl1dnpIOU1ycTlRbU1VUE9qYmIvZlNVZHNUMFhITWd4NnIwMS8vZVczZXU4VTN0YWo0MDNYTTdsbHR5cEl1eVJCd0JCenFqdWh5bjBraUVvSGJLSWQ2ZXoxd3ZlTk02Sno4Nk0vWG94RU1NVHQwaFA3ME1WUTNqaWdOZkdIanNBWSttSTBycXRmSDJUL29Fbys3TTFVdVpKUlhjangwWTBiWGpyWGJKUVFwRW9ZRnVNVXNnQlhlV2lxNFA0RExBeFdvUVVYckNka0Q0Nis3VHN3S0NSYkF5bkZ0MlF1YlIvUUUwTmZWTEJWcHFKNkRQZXMwTDVVQTZVRE5mMytDMHhxWVlCS1Y2VjVwWHcwbGlmZ01sNU0zeDNYdFh0SnN0RHZxSUZubkxiRUxMT2dDdk0xQVg2L3FMT1FuK0tvclNjaURuakdLYkY5ZEFMMXgrdUNiZmFqY0FkU0JBbVlIb1dndTBnck5ldzZpcmR5MWYrUytFRnIrR0FQdUc3SmtNWFkxdzdRN0o3azdjR3dIMWFLY2dwK1cxRVgrQlI5bzlqYnJLMy91QlVac2Z1ZTdVZnRmSWtjNUs5dGR3Y0JWSC9kS05KUnVPdmdPK09ucnpWaXh2YlJBZVcvUTRHV010WUxqaUdhZzlNN29DSnM3WDV1R1JqYUV4aDZEYmpqTmxOQ2gvQXpoQlA1a0VVOS8vZ3hHS0p5ZUE0bFpKZlZCVVRRbkIybS9aZWsyTStyNXRRUTg0YmpMVTAydjVSTFhmR29iZWhqNVdQQ1hRTjhBL1VSWXlPS2l4SDZjR1hGYU9Xclp3blBqL3JVZVdaMlNYRlcvR1hXc1B1U1NLaEJOMzVXTjM5ZFdreVIvN3B1d3g1TG1GZm1SS2VzSlY3VFVKek9JcWhEUlBkNGd2NnZ4R1o1OGFybS85SExzQ1BZY0RLNDh1cGJGODlnRy9HWG9MR1dhZFVMYWw4SCt4T1RKeVR5UHN4bkx3UW96aFVYdFpEN0w3S28yU21TaDJrZW1hMFlGQysvTjNydjFoTTVod283WEo0eUFFRUpqcE1iUnhEakwrRGFPaEIvSE5WaWxSZi9qRUNENTlZSEhBc2hyOXlFVDZMUjMzVHJLbVlnT3U4TmRyM2RBTzVmTHNBSEpuTDMrR01CV0E5VG9kckY0cWx5VmJvbHFjanA3SEVwNTJZZ1RNd2p2OXFxVlg0MVhkU3drV1ZZRDVYODM3aDI3cXYxa0JPMm1EYWdWVWppWFBac3hhRTRyMFJ0eFpPVFNqSDVlVy81WWF6U3lTajJFLzdDaDg4bFJ3amtqZEVMdFQxM050Rjl5ZDBTL3JBQjh1eG1aRDY3M1liNzZDTk1mcFU0SmhrSkUvb3lBeHlmeW85bjkrSVF6QWFValRzbDN6M1Z4TWw1STJDWURnSTZsMm0yRVZhRDJwRXVnZkdySjBKYjRacnl4L1ViaUUrS3k0cHFVTkdGWEMrQXFzSDFGUm5vaEFuK2ZrRDh1akR3b2U2S05peFlJY1BkbUtvTk9KWis4NmUxck1NUFBsK3lxUUlyTjRLUGFVUVMyYm1KVEMvMWhpc1F3TURNQk96MWY3dW9aQXZzZzZxOTQ2Uk1lNXdLNngzczRnck5xMnYvOUo3dllRdElXMEJnUkUxTlkzdG9pb2ROaFVOU3lscmJaakxHb1NoY3Axd0toRjJrV0l4R2VHUyt1S1lWeGFrTUtaZkoxdHljcm1yUCsyeUtQcUxLaVJCM3Y0MXBsUDhOSHVITFR6Sis0RVVCSWJLeXNob2FLenJQYmV3dS83SHgrTGFlSW9aRklxOXVWTTFUSHg5Q3VnYW05NWhjNWJuOFNKbUVMZUVoeGhDR3NmbEVuWkVjNmgwdnhnZkZ5Mk9KYnA2d2o2bHRWV3BMQTdSZ2xSRXp5OW5RcUdqOGxOOElSWTB4QjRsMXBYK254UkFqK1ZDMWk4MGZSbXJWS1dyOHEvOUtxaFp0bU9rc1F5amQzZzEwL3RpOXVOc3Qzcktvb001VW5VTEpraEJhdDlXUkFxbFlHYzBBMkZEWTJIcDE3bXg0NXZWWGQrQ01DbFp1SnlPZVFiV0h6Vk9uYktIbTcrWUhST2kyZFZPcnB3cUxJcy9hV3RXcWpPVFVQVEhCbk5wa04vampqOUdYblcxNytocjNYR1JvZE9FVm4yaGRpMGVCU05xbHE3QkVUM2VEQ05yaGdYMzFNUE1aQVRBRVpHbk1DMDNKa0JramE3L2R3V3lGalhTMUVkUU1lOC9OUzFySkhZRHp2a1NPYlY2eThvQTlMaUV6NEZDSko1V0NUTFZCWHN2Ull6cVZMa0hSNG14cUs2YUFodis4OHBsYnhzVlpvTkJBWkdmeGJHQkRRL3VnN3paYTFvZ3F5SitkMHFXR0V3djYzN05pVFd2L2tvdzhiNytTcEw0aGQ3SXQzNDdsYnhpWHRJSEhwa1JRK1JRNks2VVJIWitPbEV5TmhUVC8rcGg3Uk0vSldDYW5rWmh0Z1ZXL0dIb3ZSWDBKQXg2OGwrei81em5sOVdiU3RzY003SkRnS2VjWWR2OE1KSXVpaVY3bGZJdWtFbGw3UE9pNll2R20zRDFMTUFpazJoWlVWaWZERXp3YTNncEV1dXJtd0Q5MXN6M0hPUlhNUGpvU08rRzljeXpOOUlQcFNLdnliT0hvN3h5Z09IMURhTnN4cWVKMWlZMHQvYWhYbVBDTFVlTFk2R3pGcEZFOTB4QlFCT3MrSVFJNUI2VktEVlRJSGcrYTVab253NzBjZHlRRENNeFYxVUxoc0NESjliVllCZmh3ckpzcmljKytDUEpMT0Y0YnU2RWE5QWl1SFcxVkFUekxZazZoKytWZTBXenNndUhRQWY3VkR3QXc2c3dZcU9FQUQ5TzAwOHh0UkhqSzh3Kzl6QVdENlpPK0dvaFEwSTRzUWVTODAySUZ6RE5yMmdQdmFiWFBvRTljcTRQdjVEN2ZjRHZPZktxOHM4cURJWTR2YjlxRlBCTGZkVjhVK0xRQTdKdWpEWGVHbDdIUTYveFdGTjhhNytlNXVyNEFFSFArZFc1SDB2SjlJSHVoYlVmVDNlQ3JQN2x6bEVpejZqNUNtdDNqcitxakMzeitVRHlsL3l3Y1VidFMrZTdoUXZ2ZnZIcmJDNjJJREE3NXUyRkRJWFFXakhMWWZHUGNFM3hKangyQ05vdlhQT3JJeCtpQ3psdHlCYXg1M1JQd0Q5UGEzQksrQ1pvbmoxZWJGZHJtZ29RM3RtYkk2R3Yxbktpc0JlblpFTFBNditKNi95dmhxOHpTOGZ6R0VVcXpYSGdtZXNGR3VPWVNrcHAxdnZyTDh3RW9Pb01vYXpaS1puS0pWUjVseit2U0t4RFIwQlpZNCtWOVVYdnlWL3l6Z2F5VlhUMmt5ZW1FbzB2VTVmckNoTjJrYlI2YWhJWVVreFRicUNwbmhXcW9WN2xWT3VlMTJINzhEeEhiUDZYU25yeWJYOURZaFRmMEh1SUxkSHRwMmdwKzNOaWlidkZxMnZZMURWUGR1NGhad0pBRHcweDA4RmtjNlR4aXpsSmtTVUVXdEQ0QXNpbXJJWlFLN3ZiVjI3WmF4Nkw0djU2MjhCWkZFVXRZUGw3QmgwTG8vNXJ0YmNlLzNiM1BBUDlVL1VuaVRWTVFWdDNFSGtRc1BGK3lWd2VpSlNDQ1FyNlNwcmtTaDRmMm94ZXFsN2VrSEo3MnNReUJjZ1RSelQybjFjMlg0RENyL0xjbHQyRjRjK21IUU1ISjVmc24vQy9VT3llZ3A5SHM5cDRMRmZRSFc3c0NxMU56dXdDbS9PcHZqZWRTUzdiZGFISlkrOWdqekxhWG9JcmVRalYvcVowMnp1bHhtVk1yMi9wd2lXUTR6OHZ4alFmOFRZK3o2Szk0Lzlma3Nhbjg1RHhCa2lxL2xod2hZdjVlaTllY1F5SVR3Tjl6TUh1QWZ6dGJ6NzhQNDltb3Vmc0tEZDdsMVBpM3NXOUhsVkZJTklzbHVIRlJBdG4xRVErZUNydGJxbFVPZEdNVzdmYnZvZVNZV3hGd0VJRi9NcWsyUVM5WHlVbml2RjlxeXhYM2R3cCtPZnZkTlppU2VyVTBLenpFRmx5VFVKZGNaam9lWTd0aVQ4d0FvNnJrK0VDbEV3RnFmZDBleE9wSFJld3NiVXJyZzBxVitsR2UzdkxpWDRMZVZpalYxRUQ4UHVhRko5SndlRUx3ai93L0ZPdnBqL1VTVG5xL3plOUdwRU9QUHN2cTgydU9QSlFNcWhkT3NZcjhGdmdJTVdZejVHSit3bW1vTUJFcC9zVWs1bWhmd1MzZ201QnI4eFJVV3lJbG1jMUg0MVlkL1lFTEpmTWpvMXZ3MlFHdFF6OWlxZUpDRzRnR2E0ME5BdGp5OERaQVVYZnJvalV2WmlNY1FSWVJhYWlpVEtuOGZGTE02SDFiL3JuZ0c3Y2NxeVcyaWJ2bHFSOWVlblBzTEhmM3VtNzI2OGlnRkxUeGVUT2tGTHdidEthRGF4b0F0VTBkaW9pbFFsL3MzVnFqbmFSZVRubjNrc1ROZW1oSjBrdkZjWFhJNlBuR3BVaUdNOVp3TVcyZHZ4OXA1Nm5WOW40alYxMHIwZkVYN0trL3dFRkRzallFNDVrZ3hYbFoyaml2WlJybEllL3AzMkZIVzVVa2hxNUoyYnhyUEpzQjlUS2VhVTQvdkpnWkk1c1V4WlJ2eXd0NFdUKzhyVktQZDdhb2kzRHc5MmhMMk9XRWhvQnQzZkpCM3ZEMUV6SkNrME9zMjNCcmVnT1lTTXoyYm10TnJqdjYwdDdFeGYrWU9VTC9Qa1ZuMDBuTlhvMURaOFZTRWRYV1FkVGVIYjhjZWtwbkV6d1J1c0lyUjFpNGxiaXVwL2IxZEV2aXZnRTMvS0dib3R3aHpIQlhYUkFDMWdHUTY1K0xxYkp0T21aMk4vcy9XZVFIWllmdFJVd1lUM1VTeXlVNzYxbDl6RVBqQ3MzYk1RUDRieVRYeWpYWlMyRFdaalUxY2hYeFIwRWJXKzdhd0RucVdlN0tzY3E0V1JkQlV1b0Q0amNjWTNKVTkwT2RVQjc0Zjh0U1RtRmVzc0gxak1GVEZjZmpjVjlHdjZKT2RkbnhxYTFnWC8vSW1JTStkTWk5N0lDeURxMnYrTm51ME5hRzdGUkQ0US96UVdxWFRJNzVXNUNVQ0VQN004TzBXV3A4WDZ1cjR6bjhoSnZNQWR5V3JaTTlYRWxVZFN0eDJCQUZzcmV0Zkw0L2hrT0VZOHplRjR5U2QrWFhvL3ZjdnNJWGtlWWY2MmdRNU9XajlIZzRNK2ZqNW56MytyU2JjNEFmZUYxK0xKMU1JcXRsRUwxYlJEbWc3RGdlNXZWK0RhUWYvd2VtUGJQM0xWVzdoNFIvZkdKUnlDSVo2M0JaMS82NlV5QS9JbkZZb1d4Zi9RRUY4bmVxZWtlaldyaVE1YkNRanlGYlNEZVdUc3JtMEdjQytoZDd4SGxrZjk5VE40N1dlWFVvTUozM0VJeHc4UEFvZ2RWRnBrNFkrWFE2SStVbkxXd0N2TGJhZTNIMFM5VG9SWmVEUFlxK3NDcHlBeHRUWmRCUnY1cTlUbkl4OVlBWkplc0hwcUJaeE1aU25ENWFWSytoQUp4NzRqQ0dsNENmdVVoUWNlbUFnczVtNXo3MjVhTjJoMnpBTnZheWJhQkFsd2t3SzV1YUVsYmxxajNPUGk1R0VUUFFWbEY3SHRvbHVFNnJ2NG1Va0szQ0ZCQWQycFZUTlNnQ0g3Q3NNdC9aZCtxNklWeTh4N3pmSWdOQURFNkc0c2czdnlObVA5TjkyMHhqNUdMcnR2cVVCbVp0emVzb2s1c3UxNWNHZ1F6Q1gwUU1rcFJRTTlrMTlGdXlvM0ttTE9Ea3ZRRytVOVRqeUNWeUt6N3lxdSszeGkvNkQ4M0dJYjgzVkJPVGIzOWNUamtjOGs2Q3ltQkVKV0xkNVRPZ1dySmlid3FSUDZlY0JkWDV2RHhyTmRiclk4OUoxOFRkc3EwQm9OTGZqbEkyOEhQMzNBc3NDQnVnY0JXaFpLanFXRzFOdk9PNTAzUUpib2IwOUpaZ0Y2Y0pEYjlyaG1tWmR2V2F2aFZLUytYRWRmdEFHREtZWEQ0aEp5NVBjd1dPU200bWk4QXBUYWZKaWp4TXVUQW55THNaR0JyQ1YyanN4SW5sRzhSZGFYbE5JM2NOTjhmRC9GMnZVQXNaenptN1d6S0tBUzFLOWFONG56Tmo2bDBSRE1FY1pya3ZkNFU3Y0VKc05zK2xub3oxeExUQjNNSU9FTmRTcSs2MU9JWmd2dVVZVWxwWmtqdFVveVIwL3M5UndEV1c4RzdkK0Rmd2xKWnErVEpEN0MzSFNxRVgvaHU2NzhuR1pUMCt1MHVoRVRYNlljWG5aUjQyRC9jd3IyQi9veC9kdGc3ZDJmNVVVSng2Q0N1SG5yWDZlSDVtOU9tZVl6ZEgxcXRWUEJDbWx6c1U3WlpQVDZCZHJObysxZHNoaXlpbmpSZk5ITmsxM0tUSmxud29LWGZSVlgzN3pISHMwazlmTVpnSFhFZWdjMi9FaW1EdEJsQjIzQkJMTjhPUmhSTSt4ampTR2ZIWTZMdzVuRXNGWEp6dWNjUE9sdU15RU1PdVFTSVZiUVFJSU15UXJNSXk2SnBzVCtVK0VJOGdPMll3R0ExYkJBR1g1YzhJZTlWUmtXb1pVNEhjalovWmJkaE5ia3BsV09iZVdJZUEvWnFTZ0l5ZEFoV0x0cU9CM3hkSmF0eS9Hd1pOYkcvSkxJZWFyWEU5ckJNaGZIVldIblJBUG9FWUt1OTFES3gzajlnYzdBY2k4VktQM3ViSTFvWnVXWjRyUkRhUFJ3N3djUmhFNXNJOHI1OGRPS3VHdVN6R3FYUG9aZHFXbVRHZUZDNFJOWElXLzF3SXFXNDlVaVdROVZuM1laT0hacnltaHIvQUtiQmtrL2duTmdvZHdXblM5c25kN0sxckVBRVN1U1IzZ29ETTMyZUNmS1BEdjlZZVVWSWdHbUpSVlRwYkFsNXl6UHA5S3ZFM2taN1pYNGxlVFdzN0h6QS9oN3JSUFlqZUhMTCtQSnFFZVA2T01Wa0h1WWpsM1RGV1lURWRBQ0xIMVJreGtIYm9WMkplellYS0ZTcjRrRGQyU3V0ZXFFWVVmWGlYM2tPWWRMVFNhTzVpbmErTGY4V29HSXBNT0hFVEowcU9LcFNwVEM4NXVmQkRYb3JYdW1EOU9qaTVlTmRjSklQcTRVTm14VDRLTkcvd3NuRFdtaFBickhGUnpTUUZLOGQ1ZXNnWU00T3hNYWpEMFN0T0tjellCQUVzbGRoVFB4R2V0amFUeldYbWVReEx0alR1a014RFE2Nm1Ka041ZGdOTi9nMFhmdnpRNUpXdkR5dmF4c1VkSVZ6MDlPVzdaOTYybGJlUkwzUm5nbHpSVURCVWkxdDAvdXVheCs2TWhXWW8wR1VnMlhFWDhYRnlVdkc0NGlRMkltZHV6ZHkyVDJNaUZUOWMyb0VVSzRKOHA1Nmw2emVrZFNsOWJSZjE0YVlZR1k2bnpyTk40TXJYbkFLT1d4NTlZWFFzaC9MajhzeDNTSWZmUFkyQVk0TnZFY1lqdFo1c000N3ptNjVtWm9lZXBWd01zc3lja0dGUWliem1DYnduYmVjaVNEV2NNb3QzNnNLa0xoOUNHSlViem5mSS9wL1BZRHd5YjlEdUVoSm9KQ0NWbWhsVFQrWnB5ZzNlTUtoNlFwK01KaWNSWHl2QzRJVXJmcjhwNmlFdG1ITmh1dGh5Qks0T2xJUUg5dXhSQkFydFc1YkVBQ2FOeEtqZjJjR25ibFArTlRMNTFGSTdvcnl2Uk53Mkk5QnNlWDlkZUNQc2dONDNjTVJnemd1N1l6aHc0QnF3RmlmajF6ckRxWm5zTEJoYUk4U0p4T0p3bnV5ZDhLc05KRzJpWk9HZmZyY2dRNVFwSEpqQnIzVEl6bENNLy9iYWhpd2NnaVZ2aXJlaDh4QVUrcFdFUkVJbDZnQXJJMFF2QnFFejkvYU9iNllneGMzYWpYZG93L3AyS0dtSXRzK0dUckY5elV1UDByZVRKT1gyWnIwS2pramFHUklMNUZvYjhJazZsdGZhRkU5QlgvZnZEeHAvaFVYVjdZMi9RaHZrSXdxS25VbDV4dkRCUkZGaDlhZDY3a2RxUXF1M3hiSTEvK2lZeDViM3VzcGFJbTNFOGVwRVp4bDB1RVRtT1pja21Tc1B1SHdDbmJwbUNsOFM1ZllaWGN0NUxJN0V2bkpEQ0dTbTBSUk93L3M2aDV4aVlpcGdXcDdBbUpNSWlCS3NOYnZOSmxuZ080K3lRSmtCTWVFZmFXaUJnQmVTUVlzV0hGR2hCOTF6dFg3NTRrRXJxMGJHNHV4bGNNVHJnMEhkVVprd25UYmVtY0F3cUlGUEN3TUkzaXZvZTM1M0hxTEw1TUxKSk1acllQK1VkeW9NZzBybGNYcG1vazFUV245bVdFY1NxZ1E1MzdNenVtaEM3NVZ6aXpkK2ZRTHFBZWUvR3grVHY0RTRWZTB0Z0E4Njl0R3NYb1pUSzRuRGJsVGhUakF2UG9pZm5PU0prY01BUXBrRUZLckk1bGwrUXR1RWhjQkVLMlgwbVlsTnpOTFBXOWpxbjVVOUpMdnU2QW1KNDJlSHVTbmpwQUNiWUxBTVFSOHI1TThLVEZsa2ZQSzZRQ1FOWjBzY1QvVDlMN3JCZVg1WlhmSFFuK0xTTUtWU2lPT0sva3l2Yi9NYnFmcHo1MUkxMkhhZzVMbFdhZ01pNEk2eDR5dWhNaW5aTTVqWDhOckdONXNRbXFlb1Q3NWE0M3ZJUmFMMHRFZDJmMUJaUmZDNzVCSXpOWkprQnMrUWppNlhzVUpLaTBNSkl3TFI2OWFyYU82cWs5WFVVbXc5V0dKdjViZTNic3BJWmdiR0c2V096VnJMWS9zeWVvaURxcnVrM0YvWXRHVDJNaHlUV1pzdHg2a2t6K1p3NnlkVmVSOHErU05NQ2cxQ2NoU2drbWk0eExpaHRlMURTN2lFSkExM2JHaWtiWHE2Zm1Bd0IrWml2cld3WXN5RTE0QjJBWG9wRkhqMTIvRTN0T3R4c0R2SUFWT2hncCtoaytkcmR1VzZuWXlUaTdyN0pXTWRDRnZVMVJVSGlVT0JVZExRM0E5TExDY3FNUnQwdjBvMHZWMkdMS1IxSjZyUi9tMnVIM1A5dGVudjJGL05nMEhpU3dHcHM2YytaNmFaNURzWHAwUjBHaG92OGEwWnlWNkhrRFBoQVkyVTJQbkEwRGY3My9seVA2VjZNajkzWlVPVkxneXNhRXZsemNaSXJWbk5obnlNVXV6UFJyTGxkaWlIb3R2dGFkTXZGUWpRL1N2S2RPdXdtQnZnVWtHMUFpcnFnak1Oa05NWElGemMxU1lXcWF2OWN5Tko2Qk1vaHZnTW5CMzA4SDFoS2NJakF0ZDVIQk5BTUJpVHpmTTBESnFMZ0QvUnpuZ3BrWUVUd3E0UXdXeDkvQXJVRDZhdW1tWjZQQTFjZ0d3VWRYSzl6dkZFaDZJcE5VRmVYZS9DYWx2NS9uU1hCb3ZUaDlQRGhSaTV5T2RqQ0RkNXpZbm9MWDdudGpSak0rS3dPbE5BaWJFQ1ZJR2hoY3huamZSSENNRk9PbjFTcXprQ2hTSnovelI2YmFIUVpYbUlhWTFBUit0bDlZWGp5M3AwUFpUSWdrbkFKaTdJQi9IT0doYUErRDlUWnZocHZzVk8zeGo4TjNHVkVEWWUxbUhFYWdURzk0MFl1NkNFMDJsWnVhY0llYkRIVGNmWHRMMHV0Q3JVVjlGVnZrM1NqK1M0MFU5WjBaaDBiOFIzSVFNZmpUek5DVkxSTE5GTDBSRm5TSS9yZmVKNGVnaEZwY21pRmRiMFpZZVJCVU9QSno3eGxZbXBEUHR4bFFmOUdPbzgzYlpOS2w5U1pkZVpNRWxvMVJyTEUzdE1UYkNrVWVWVHoyUHdtcmhHb2U4SGI3SlVJTDBXNlpTT3crdy9xaGl2aHdNckRvWVc2RHpScUJQVGp0L0Y4M2dwdmVONmI4N09rWUZLdzZ5eDNIandvTjc3aGVySnVFT2ZnNFFSSVNqMlB1VlJNUCtkVEdrQXdDbi9HNWZkN2FrbXhZR09TNmU5R1NHSkNvdzF3ZXpibGNRMzVKdGRRcytYbnFocXRURUFUU2pnNklmMzdpN1UycGt4b1lzRG8yVm9vK1Rhb1VCUzR6Y3dPYm9VdVhpS05aelVNc0xxUXV0Z1lLdVc1OTQxb1hLWGJBUk5iRGpsWHhodDlhVHlXTCt5TGF0aWlvNmtpc3l2dHY2UGxINDhlQmNrY2RWUndQVmtPYjlRMGZIZ1hsUlZLdFl0ajRNb1NpNnRHcmRrdk5pc2VaZGhET1RKZkpIRE56Y3dnenZheGFUWTBnZjV4WCsvUmFDMkdpTEkrdDBoOXlJMGRwbXRZbUJzOCs0c0NIdTdBeHBVUGVxdmk5ZVNidWtpbmdXQ1JGL3NvQldQUm1HRVNDOS9uM05RVWprak9nK3h2VTM0VmF0b0ZVOGhNRjBpWnF4MSswL20wSkRFdEUzdGswRmpzWjUvbktCYW56QS9DQWdQS0VieTAyOHJ0SWJlR2tCUXk2VzNNdGh3Q2hIVTd3OGkyakdGUGJOTURVRUZMQ21hVFRnR0NiQVdrckt0VW1MY2Myam1hcXJkYjlQVmh1R2dieDRkU09yQ20reVpzQ3E3REo5REduYitoMTd6RU5HOHJqY1pOUXBsT1I5VWxnN3VYbWt1SmNLNmxMWTdTQzl1VjR4bTVxNE5uN2Y0Y255NEQzOFpSUk1OVmdaU0Zzd3B4Mlp0RmhrWUkrU09aQUNZUmJKQWNFbHJLR0xjcVZKcVdtMFE0dy9ORVh3QllKd2J6dkZyUC8yZ2RTY0VLSkV6bEZIT2hFcnczVVJEanVLcEh0by9BdGFkUHkvRWtqWjdYWGVyNjlKd0t2dFVESjRpOTBZRHVTaEFvUHZqRnZEcHp1NlVnZytDVUcwRytraUhZZFpHZ0U0WmJCa0NSVkRjbStzS3RqcFBkUlB1WkQwaVZCS2pWdWpNSnV6UmRRd3l1OFdDVkUxRUhkTFZFQjVORHExUmovODRrd3J0RUdQSXorSFNUQllSSkJaTGdybEQ1UGdJZmI2YndQbVJoYlkyMGpvL2E3VnlhTTR5Y1MvZzc5ZkxkL3VJTmFQZTAwNkdXZDlqQ25DL29qZWlEdGl4NnhmNFByQStnS1FmWkxkRFpnNWtTNkh1bjRZR0lXMXY2QlZFZWVmcHRJWWdoNGZ0RE4rVVVmeUd5N0NCUm5NdW5Ib3NSWURzZlQ4azhYTEVjanRwYThBdGI5Q1o3OGhtdmhHcG9tMDRFSkF2RVYrL05xbkNBOXB2d3ZhdTJaMWtvK2dSWmpyREtDa096QkRWdGN6ZVVyd2R5MUVyYjRNaGx1N2I4Rnk3aUhQNFNiY2dhQUwrSi9va0NaUjlLMURrSHZ5b213U3pMN1kxRGRvbUd1SG95aTZZZ29aVVlmTlFtWEFNUlNDUUZOTE5vcW43WVF0cjk4OFVvbmcyc3ZtbllTUUpNQkRyVHZVUXRHOXZTY0JTdXpIaE1FdHNBTFVuYXNWSmxiYjlhQkNJcmJYVHBPc2xzS0UrVGh2SzYyaWpydFN5WU5VekFMOGxLdWtKN01KODN0dUFXM1ptekJzQytscGpPdnZKQm1vN2NHL3BNOFVXbzhIWjZZTUNPSGtJS3YyR2h3Z1cvaU4vSm92b21zTytqL3pJRU9pQjdZSUVlZHo5SzNaT09zWXl1dDNnSWw5R1lIQjlWdWhvdHN5VHVUcDBrb0RBbTdtb01yclNDeHNJRUVwSG0vTGIzOHMxRDQrdkN4VGdjc1doR2t1TGwrQXhQYlNCa0JBK21kNEw2L1AzcU12WER6aGlFUk90OElucnhHUTV4c09IbEtINCtsMVdkQVhoMUFqT242OE9qZk80YnZWWHVoS09KTkFxNW5BRjVDUEhnY0ZlcDQrZG95M1E4UWpkQVVSekIyVVVWb016RHMvRzNOdmUzejY3US82aWJwb3Rwem4zeDJuVU1mYWU0MFkxS0JVTGpIemVFcTd3OWNidnBMZnZhTWZpbmdaR041VEVsMGd3K3owcWVSN1VDazRlZ1Y1dnNQOFM1WGIrc0d0Q2duNFNZUmZsTHlFWEZvOXU5cHNFdDFRMUxNNWN0YzAwV0h6eC9kUGtpdVBjQ3NoaHBZQUVGNCtzeERtTW5lRlcycml1eWsyVHpTdGlFdlY4bU5vUVBGMlIrellnN2JRZy9SbEZFRm1GNGhDVWZrM1hVVXl3QzBMaHc4TjNIak1DSFRsQW11ZkVUSVZ3NlVVM0k4emR6OTAxcm84cTJKampZNUJXNytmYU9mdHBPcGJIVjd3MzFNWE9aRDI0Q3JpNnh1aUQ2aTV4YkkxZk5hMWpDUm9RdWZZcnIwZUt4aGx6a09nNU1acVZxNjRiSzBhM0hYcjV4MkVXcC95Z1grM0hGY2VabDA5cFI4VjNhZkswUE1KMER4RHBXMTFkZ0dzT21EVFl4Q1Nyd2dZYTRuRWhINkVsTzZCdVhUSHFpd0N1WVhXZE4wWDJ5eDdOVHhEUnRmQ1JDVE1hK0FBRlp1aSs4bkZNSmlOUjJCQnBFNjZzK0l4WGRRcWRHSDVvL3E0eCt2bEpuZE80OHE0RG5CR0ovL1VkSm4vL21IRDdGbGF6WG5wKzlUN0UwWUFMaG1XaEZGMkZya3k3MHE0ZVdtelZWOFFpMG54VVBJQ2hCUS9VVFZOeXF4VnZnUFp5c2dtMkp0cXNhRm5ZRk5qdW8vNU1ZMktBdTVZUUxzTlVPaVlPYWs2MUw1ZENScGQ2a2JXQWY4STFoTEdoS2w2TmRKUzh1VUdjTXc0c1NzUmFpd1pVSkpzTWMxeHVZdHJSS0tOTUNoMDdVK2tMK1A5R3RXcENEQVVuZ1FvTDVhK1NPNk9BbWdjNDJQQ1FIbng1ellVcmRvTGpFUEFNRnlrbmZLRWs5SnZyTkVrRzRsZW9pbUMvSGN1WFZzWGprZjVNQUIwd3VkRGI2L0hyL3FPeFZBMVhPT0IyUmhIVGJjYXp1MTErQ29IaW5lNXZGQWNOK2J4T0h2OU12VGptcWJRdHg2ZnJsR1BjamJtaTNKTkJKZFF6TWNVSFZETHp6eG9yUzBQTE5VeDNqRVVtQU9weXl2Rk5TcEZUc011M3Yxa3M0dlhhL2hFc01OR2hGdytJVE1rTzFtS0UvMlUwNmZmM2lnRXBvV1VLcDFRdk9rNE5iOXpTNnVoOVpjSEorWnZPUTMrUSswWEt2dzdBeTRhdDltdElhOGpNTFlSeVRaclpvV1gybTgwMCtnQzhSdU4zSFVGVXhUY3BKdWRPSyszOFArTXAxVDkveWdWQ3hjUW5UVlVjWXBJZEE4b2JvelJvdWlrS2pIUTJZazJQUVZ5eDQvZ1c2bUszNkVqd09XWFR4dStPVU4xNU02T0JoT2MyK3NLd3FjQzBEa0FEalE2Mm5POWdFeCtnRlNYRWxnWW05UE5VMXBsNkFwOFBldHdJblNLS0pGS3cwRGpmK1MzU2I3OU81NXgvT2FqSVo5U0ZKUWxrdVVkTU5ZUEZvY1RLeWxsTHVEUmhVSHVyZ3I5UFpXRytQMUdGbFc0WXJmOHZNcDl4VGIxV005MGtKbndoQzI1ajFlRXQ2cThqNHJwcFIrRlFiWndaa0d3bkdNdEREZlhBZ1FNWFZ0SldDd1hqRElrazRWV0ZDRVlYRUpBYmRhNjNVLzh5bmFITDY5UTlPais1OHNHY1laZVRlMTRlcG5PN0tUbDBkeXJsMjI0b3JNR0k5b3ZPS25ieDMwVmxkZnlBcG12SGNZbGRvU1dqWWYzazJEUEJIeWVFcUZQZ25ZbFNKcDRGdVpISExWVmdDVHlBK0x2L3BFWUN3WmdJVlM0dkFOeFhqSWNBUTZya0MzYklMTDZQd1NUbjRyZFQ5a3V5R2pmaXlqNVI1TVJzQS9uc250Nk5YNG9acUNha1hLaEtlZjRGdFl4MVF6Zk9scjlER21VSnE0QzBZY21EcTRQaFphRlUrcGY2NFlocDM0QzZsSzdibjBPYWQrazRjc2FNQ0FSMnkxT3gxb0RqV3Yzb0FWRVIvVFMxaitOTlMrVWNtOEY5RzJCRXgzSS82VWJ6T3FlR1JMWVFMdGZSK01RWXREN2RpdWVkQkFJT2N4VU54Uk1CU3gzdHNwMTdkRDJvVzVxR2VjVS9VUHl1SVdSK1VKU3dzcTVRelNnanQxcVV2NE1mNFptUlNFRWNWWjhzTTJSTUtQZlllRVN3aGtzV3RuRUcxekp2bTdYQU1kY05pa2IzUmlDamxLNkJDZTR2WFdPTnpVR0RjSkhHelJ1QW5yMzkrOUYrMncrdUdrbGVTbW5lWWFHU3owdkFvNkxxVE1EL2hkVURYWFhHMVI2RDlFdS93bFMxNkhRMFVlVHNHQzlKUWNFaTFDOEY5NVIvWTU3Z1lHdmR3OXF5ZHA4NVdBcklmNHR1dTJ4Si8zcG9GNWN4ZjBOT3IzWks4czRjME41U2FuS0VFWEdqdklwdFhzbjlLbGorVFJ3ak11ejM2b2dmazVBMkpMdVBwdXB3bStvMWljVldaN0hmTHB3dy9IQSs4YmpFenlSMEI1Y1hkWEd6d3FpM09aeVdneUs1cFNpdDZPejRJdTFNVzFJUjF5MXQ0UVQ5dFgxVXBYWldEUUhhM05nNUlVb1drUXZ4NkJVWjllb0pzNGIzdXVFcGFaWjVkWnNFVXVnWTBEd2tjMXByYVN4UzFvbUxObkxPN3M0RW9OY0ZxV3V6MGhKd3BCelZqNzhvOGpCZXRpUlcxaXIrV2ZsOG1sUzkrT2dlcUt3bUpBM2FPVEdLNXIzdWFEL2prUzBXREtlb3AyQ0QyNlljNlVhZnNtekxuTUZWTU0wVW5kOUpwNUd4bkpVRlJRRURzVEZwNnlZL1R1dXZsZHJvOHNHMm9EUTM3VjRwYjZNMXV6a1dreDE0OUw2SVkwRkQ1YXRBWW9BNlIveVRoQlFObGN3VzJwSlVGMWcwc3RHRDRDMmpiVGFrcGErcDRSRTBNVHk0aU0yVjVYWHdGWFRreHkzdzFlbGszVTVTV24yUUQyTzZKdXN5ZEw5TDBYT0czYTdGVkN6bWlvZEFJaUlOVnUwNkJLRW1kMWh3TXRHYUcwM3FCbjJiSmNiSVhFeDdjOC8xSjhya2NyTGtpZHlNMG94RlpBWGx5cTdwSUg5bWhQa1lkdW9PVTUvSmhteXVOK1ppVE5lK0orckdNRzlTbHJUTWlNTHpqMk4vWWxuOHN0b2c1bHVuRnd6QUxReDBOTFRvWm1UOGhEdm04ZEJGcXBEeExzdlZPbHZ0ZGNpdEFRampWOUR1N25HQ2VSZHVLWlpCVVpJU0pmQmNjS2N2a3l2azZHNS9jRkd2em1LSE9zck9GRnhTTEoxTWJzK252Q0VhNlFHay9jNmJtY0hkanVXTS9JdzZoTUJ2Q3lnclYvTHNwOHh4clRrUHlvWG5SOXhEZnFpMTJraXY2Qng5MUEwckRNNWxlOEc5Y3pEVU9PYVNualhPSmtDbkwxYjNpR21RM0VLelJSTFBlYWpRbGppNjkwWE1lZS82Zm5RQy95L0FpakJvS0pzZ3lVcUl1Rk1yUmhINXloUjVCd2Y1MmtDVzNhYnE0RnRkWG1YYXFYMlNCOFAwM01WZ0ZGKzRQVk5UWlB2MXhHYVpva3Iwemh6ZnFvZ081Vk05c3JyeGp2Q21sVVFIVy92YW5NUlVJQ3RReXg3MzRUWWVDd0IwRkNWaXdMU0h2Zmdwc2pRWXM1WUhWL05uQjR0TjU2T3FIU2txaEJYay9rSG4xUFZjanF6cDdIeWViZVoxcjJRaXZxRkh1VW9rZXZBZCtvZHREK1NIQ1NSUnhEVEppMG01UDlnQ05DOWtwa0pkT0JxeklUR1Nza2dycXV0SjhFb2pvVXAzYmtRQWYwMWhvbC9xM3lyQlZ1cTA1QjhheHJqVHh5Q2RWM3NqRVl1dDNkQlg1MENMemU5MTYvdjY5eG96M1loOTVwRlA1M1kveHlpdnNEVGR3UldERjY3cVIwaTNqaXBHdUlqQ1Q4Z0luQXZLNlFGWlgyeUNYRDB3bHZGblZ2UmZKcjRkaFpCZnN5cjZOOEk0U3UzMHYwOG9CUlN3dVRXVGNFRGtNQzVPc1NiUFB3eDl2Y1lBRG5sbmhQQzh4c0JHUHc5VTIrdnhVV21qSUNWc2ptb0JuVng2MGJYZWJLTHR5SXp5eEp4TUdyNnZqbUxuRGIrWnFINU9UbEJpV3Rvd1dtWVBJVXYwL3R1cTI2UVlESjUya3REaUUxY05KbG94OXhuSjVwVm9YTXNNaXByeTJXcVVna2RGU0FxeW9LaVBPZDFzcS82bmhXOElweFU1UUtpWmQxT1B4SG9NQmZuclhjS0VydGpxUEVwTHNGNEJsd3NsNWhsYlpuc1pWS004NHV1TWdqQjJlUnV0dkhJdkZDVy9hdUJtdGlpZXArMkVHZkI1eXp1UEgzNHJmczh5akhIeTdaUWhPaVNYQnp0M0orOHpWOU05R3piL1dWblhyUG9pMDVPL2NBTnJsNGhOTlpxNlFHNTQrT3VTMVJJYTlRRFVrOHowWEZQL2MxRm5GZTZmUG4vclE5ZFAvMDZkMVBkVEJ2Rkl0Q2xFOVZac0duS2ZrZmNiRTNQNGlUNDV6QnBQMWZKY3JZRVNqOFZNcEVoVk1OdlRXSGhqNGdnQTFQdkFlaFNGTnp3ZlExWTdqVHdia1pRblNqT3MvVUphYTkyMkYvT0lTMkhhZmJkL1BxNFlzT3NnL2MzZ0tXalJySzF5RHl6bEdPOUxObzVISWR0NzhTQmRZNkhEdEVzMTY2N1VoclB6THFYTW5qZ0dTNzAvTkV4SEs3WC9tZ0o0Nm5vRG9HUXRGOG4wVVlWZE13NHgvU005a28wc2lFclJvMGhkSFBLM2U5NVhaaTB1M3VHSWxhRlB5L0gwNm4vYkpPODZaTUVsZEIzenFPOHloS1l3ajdXNmpGa0dNSWJvZ2ZEWWtjR1J2WlBLUVNpc09XVzRTOTNoM25xVUQ3MjJhQVJIUlN2U0sxSmxMMjZacGMxTkV1UFQvUXZ0UHlENXNIcjRtQ3RvNFV3aG5rMEpCWHBzYlUwVkFrcTREcmdkTnBnSDRsYmZvSTRRZy9hVzk1cko2bWltZnBBR1YvcnhTRlA0RFhSeU9tOWladXZ5OUJjVyttWFVrZ3UyWHB2dlJwSVpQaVFyc1d2M1RNV21Vemx4eldTZmdlQ0syVC9wdUVpM0hyK1RpWjVyWmZ2Z3dMV3hSckhtbmFkYXJJNytJUUZrUmZPU3B6dFRidW5PdkU4Mk1iVUEva285Rk1FVXBBcXhYTnFlbm1JVWpzRThhSjBDSE96ay9HeVFueDY4MFU3WmpnUEdOazVBMHlmV2QzbHA3SG0wNkEyVU1hYU95WkZHU0plbWJ1MUFEZGdaZnhaOVJmSUlPTnFTSXJnSERpbFViS0Q3N3B4V1NhYmxCVXVJNDFNNkFCNFZQbHRWanorOUFiU1NrN09yTGxFY0FiYTdKWnduT0RzZnNkYktnQjNNNGp1ay9yL3JMdTJieStrNDUxZWsyMzJtbWlrb055akRMUHJGeXFpYjlCZjRySXUzYkJPNGR4QXg3REtmWFN0UEJ4N0I1Yzc5cmMyZkptWFE0SEpaMUlzOXMyMGV1bkVaNkdkaG9tNitVN1pQYVdjOHI0YUwrTGg1OWo4N0o2Vk5lYXg0aXMyVzRrNyt6VXNFSGM2c00wYkY1S2R5QVZJd21ORGk0MkRjOHkxYkNaeHV3bEIrV1g4MHdoMjgzUDgycXFWNFRxSncwVUdwMDdMaDFSM3hsQkVNemdwYU9nVCtDcGhLLzhDeWJsNERPQURSYjB4VWNpL1dwYUczUHVnWW5aQk9VVy9nbm12QmMvNG1jZjBkdGZFbHNXTXNRUVdFL3lCbGJmTTNLdVpxalNnS0k2WjZ6M1Rzd29yZElUbi9XZDVCcXRPZ01GandoNGo3VE05cGJWaGxPS2N6Q0lUbmptRlkyWFpXZnR3YlpnY0MwK3A4VGNCb3VMczdEQkJWVU83ek5pNzdFYlN0WkRlQTlpMnVsQnhmWTI2azBDdnZzbFVHMlZkd29ITXJLZSsvZGdDZ1diMUZuY3R0K1lYcndiZkY2RStMTlhId3J2SnhlQ1JSUE85Q21JRExSaWlzVFkzT2lDNGVGck1iNzkycnI5S0RhYzlpRlBnRitCRHluUkVXVlRaa1dJSmg3S09QbzYxdDNtQ05XSkJ2bWV6R0hncEJtbzNZaVp2MjlkMjVaekcwNTdvdXVVT2tIRms1SGs3My84UVNydFRTVHZzMzBtZ2U0UkRhcmdNV2VDN205NTRNS09yVlRvODNiT1Y2eGZuTkl0ckdZanlpOWVPSjNuMlNWaTZFRSttTjJQQ25kYjVSMFg3Wkw3clYwNVhiWDVySjRSOEpMbTg4Qlp1YlZUMHdoaUdGeWovY01nK0x4M1k1ay92M0d0NExxRGNyaU80di80YlhZeTJxZm4vSWFxMFNHaEZUQmo2WGtkdmVaQlZmR0svZlRpSFJ2TUdvd1NvNWdKMmhHRk1YU3k0ckliZEN1aW1hazZMRW5RdnpsRlFJSHJXWVl6OHNxSXdBbWJrL0NSblROUklKajA1YUpDK3ZkS29Ua3ZIdHlIazZlQXNTbzJVd3I1TkJEQysxV3B4a2ZCb2UyRGViYlFGcllBWXRRNlZTMDB6WWJESElaNmZzZWFWdWVZK29rTmVldU1LdjRlTTIwOWZMRHgzaHAyOURZUEdmSlh3Tnd0b2pzckhvd0tWQnpRczZLWmVmRXJXMlBMa3JMckZGdy9LSW53WGlJMFA1U1g4TjdvTXBTQmJGc0EyMFNuT2xEeTVoQlcxTTFjam8vV29EYWhVVDlQMHJjbXU2Z2NQMHlzTzFpMnlzN2J1QzFUbStJb3lJd1cvTEVMcDJCVFBWcnRKM2hmQ0FwQnFONHJFT3VtL09OdlZXR1UwRzNDNjhlUVF3cWlnTDNnaFVoVllhUnZETk0zQWdidm51WVpLTWpaTTVmRFR3RC9aa3dCQTVVUElMQ0RVMjVnWFhxQVNmOW9ZT2JGY3I2ZzE5UUVQSjNpWElYQldmWTVQendod0FwVjJwNEg5OTJCcGVXK3k5Z1AxREFTQjVrUVdFVjN6a3pGc0dHalJNd0laejZxQXRVRkZoay9HR0lLRWVNNWxHVlFORkkzcEdPWHlWaDBHNU1YdHVwK1o0R1lNbTZuM013bnhXaUpTcGZQU0JDL3VKcGpueU93dG5TYUY2UVBwNXJXQUpwcWZ1ZlNrRE94QjZYVzM0NjVuc0xXL2VxcDdqd0k0eUR3eFphQ3JhT01YdXhBS0dmRWJKTk1MUExNVkMydDNXeFNrMy9Dd2hqSEhZRWNwSUF0TG1UWkdtUmFLWmp2NEpGTktjTnMyMFFGUTc4bWpOZy9mQ3JRbHNtbGpmcy9CVTdVcGZNQW03NEVoTU05MzZkSXFRdWhmWXRNTzdxSVlHa2R4RytPM2hQZXZaakFHN1J1V09jek9yUCtjLzRaeTdLR1F3aWo1Yk5HVURQKzdKV25MUFQxYXF1eC9YWllmRUJubTZSTXFldUV2UitlTlUyR2pMRmlHWGw3c2VmN3VsRHJSUTBsU3JESnV6cEl5U0UzZFpwT2VYcURVQmpFdDArYW0zZy9FZEtCMDVlMDBnWDdSVUNPMHhFbGxWV1RyT09nZ3pGbWdKelZXZXhJaU5Pc05yd2RROHZ2UkpwdW1JclQrSTdVbWdWenFJY3B3WHI0dmkxRDV0UDl6SnZRQVRKbW1kZ1NDZTVDUWJnanZMTElrRVRnVTFxWnBiVXNkeVFqczlKVUN0LzBZUnBZZFM4Zk1ZTlZUZjZWb2xPOFdlNnY2UVRzOTdYU2JMcm93dG93STZ6cmJ6YmN0VDJtS2FtOHNqcERYTTVqb0c5V3hBazVjS0lTMDg0K0hlSER2UFR0QjJHRW9DYkVMemdHeS9SaytLWHVOYnF3S2FiaGxoVnJtTlYyMWRQVVk1bURsWks4a3RwMmV1Uk9ld054MG9tU0FUQU0yZmZieTFDRnZSUVU0dHlhL1FvU3kzQWdLZmllViswekpBeTdvTTREMTg1S3ZzZ2llTDNmN3VidFFUaS8xMzZCV3k1WCtxdUxzRDRHVWp0SEhpajBRWjNmTGpJdUFORnVZTWFmS28ySzlsdG9jMXA5bHplek4wQUhsVFBsZ3BNVTc2QXZvb240aDdLVDQyYmZDeU9RdzdoS3V6SFZML2FUTDQ4dHcvenFlQm5RNDU2azZGNC9IYzlzWVdtVjZLc0tvZmF0aHJldnNQWFpaZ0dzdG5TRkRGM1JqU3duNkVLZXpsd2RWaTl5U1ZEL2phcmk5b0dCNUovTUF6am1WYkE1Mi9RVHdFcDBqbG96ZnlDSkc2YWZvQm1uVUJhOXArU1UrUnh0TUcyZlJrRUdVYUlFRGtwaHpjNVNvYmp3UHN4VHJiY2Q5MjQ1VXNlaDIxVU1XdlB0ZTg1d09ETkJrcDVYbGNDTHUvK0loYVFDL1c1VVFJaXlNMU9vZlRHdisvV0wrYWc1ZWNRSjI0TmhBR2pBa2s2M2l5U2RMTnM5VjA1aU5VU28xN3QyOGlkRTJidFZwVWMxUjArY3JRdWlxV1c3UnRwUHZyVm5UeVJXelZvdXlzQlFtWEIrcGticlpDY1VPQlY0KytHYmdqbE5pL3o5VVFQOWNnalJyTFd3UlZpanFZdW5xVVp0eStkMnJMM2dMYndmZDhQeHlrRUM1UkFFRnZLMjFMUDBRZjRaUTk3YlYwYnAzbVBqNmgwcGRoNElnL3pKR0JxNFZTZ1p4UXV1U3lBOUxFcDNRWnE5Sml1ei9CaWtpWEJEK1lzWkdyV0UvRmFaMEEzY1oySE1scG1wTWVpOTl0bUJETjAwbU0zc1F4ZEpXWWkvM01aTFE1WWJZaUt4clFla0JWSmEwQ0ZVcFVMUGVTdFE4dTlzMG91NzZWamNjYzN5czlmNXdWZndIdWlkVXNNYkVFaUJvZXEwaFd0V3lvVDVwUjE4dVhuWVYyWFNEZSs4ZUltSkpLUVJkZFVQWk0zUTJiQ2NVY1dxN3ZWblVRNGtoNFpsZVU1L1poYXpLMXEvZWN3YTNxYWdMWVBTN3RPTDlnY0ZORmZGUHFWTXBKdkxvYWd4bTlrZGZPWTN0eWJTN3JoRmRqZThCWFR0b0ptSytZVmNldENHaGhFS0lLYVFZT094Z3dpT0NXc244Nm5vMXJzYXozeEhpUWtmSHN5cnF6UktKNiszNHRjTGRGeEVaTHQ0aGp5enZiSDl6Y09UV2VUcG5rTGFYNmhlMVZMME9CcTNKbDRTUkJURjgrMGJLQUxwUG5wM3E4Y1hPalVldDFXSlZjT2ZYT0h5WHNIbGNLQXRvV242dVlIUGFHbXYyZkJsM2hCL0VTNVZmVlQ3NkRBVk82cjhMekVxb1dFZnhzdXNDSzNQRUpwSjVkU0pJVlFHc0IzRmU3ZFVDY0NXQ1BDMXpVU0krVEZ3S2IrT3FrSVlocEovL1FsdHlMc3FSRXVpa2pheElZY3pBWFVvZWo5dDN1NnAyRUdSQWJYN2JIL2RQV1BYbjRhWFhZeFBPTVMyU3paNTN4QVNRVktHSTZhUFIzM0Z5SnpPWE5ZdzlOZ09YNExjNjN4QllRQ0syeFBCYkdWaGxJVXpGUG10UlN2UFNxTHNwK3l2T3AzTGttc1hvUjZtc21vMWJmYXBwdW9ESzJreC9jOFZsdGZmbEI1OHFSVDBPT3BXT0N6YzdNeE5paGYrbHRFMXBpdmxOTGtzOGhLbEFjelhYc1gvTFBHakt3bFRJbVJIN2k5RlFic2xrdnNiU2tacWxtY0xNVWFNUFMxZHVlS3RtUlNtWEtnY1hPcXU5Y0kzK2IzcG5QcjMyWXgrYitZTmZDNXNnM01RdVRoMGljMFo3cmlwL1QrM0RTM3hpdVlJNG9QOEQzdHkwZUo2cW9BK3UrSlJwWjBDVUM5UXhjV1ljdXh4RlFaOVVKTnNLanlyWlMzNGNKQWsvYlpuMzZ6QVJrbm0yTVVjRGpnSFlERE11RzUwZ0hVakF4NEo4LzZBVVd1VitWR2ZVT29GQVNIUUdmWWFjWHBXcm1xN2RnMTZUN2laWkpQVUpnUmhhRkVzc3AvT1JhUHhQaDBkdUxwYktmRG14akdrK1NxUlkvTDVlNlF0R3dvaGk4RldRclZFVVdMODlFTmJicURsZ2JzK0V5amJDRUFyblQ5V2hTcFVMc3UweXFiRGdZclExTTRBa0UvWm5xeW0wRmVYRlh0VXVvNWFSMXUwNHRaNEJtcVpVK2R2aTN6d2FZUzlSOWkwZlNjeTgvd2Z6bzRPOEROYVFqa2RmT0Y1bkN6YkFLMXJ5VnkzZEh0TUQwMVNTQ0lic3hJaFpoRlFOdi9qcmlEUkxJNTNnMEl1eWdZZjNLQUtOeFZZWjl5d1NnWEI5bEs2OGVqazEwUzdGSnBIbDdVbmUzeloxY2tzY1BnbHYvQnFra1Z6VE9nQmRCREU0Nm9hUEh6MmZObHEvOFBEaHlLeXBNVGFrdEpWZGpocEU2NUcxVlBxM1dRbU9NQVdxcjBUdFpJeXpjOHBNc0dOTWtSQnMrUjVleS9PYWl0bVBocnVMTkF6T3NyQU9nV3FybmNhNGhOeXpYcUxmdWVLVVlyRzFmdXVaNVVqaHRCOFZIVlBRVmhZMng2M3JJVjQ5RWZhSGlwRU9QcmczMHhLbXhNbFRFYXc3cEZ5cis2enEzVmRxcEdzM3MyU2xMcHNxRE05S0xjUjZESjV1VEFsSFByZXIwcHZncmh2MEhOWUtzcXZ6ZkllRzA4Q3pLTzJUSkRjMXFySkF5VVJHcldyaUdMZ3Vvd2s0STRsSVVicDkwUFpIY1lPUmN6RkpzSUhDREh4aGlSS0ZPNDl1dVluUEQrWEg3SXBFai83QVd1UjlIMlVaMU5kMVYvdm0yWTR1b3FPVi9QdVdTc21WSTl2UjZTZXZUR1Q3TjNIeXFuR3I5dkhTcGpCak5LVE04RkJPR043ZnFLRzBub3RQN0d0NVZ0cXcySG9GVzdkMkhOK0k2aUdtWE9Ib0d0alRGZ1BlQUhEN01WamJSRTM5TFRQaDg2L0dkenpVczRYMGZ1ellVT2t4YWE5c0JnbVNtOXJSWGg4WDFPOGV3WGIyUnRWaWx1KzZoS0tPUXJJeU5rdXcxR3NwSWZQbGlNV3Z0ZS9ia0F2eFRzKzVHM1JITnovNkM3NmJQd1RuT2NWZ05kYk1SYUdLN3NhSTAzUm9KMXFMTDc4YWNkN0ZPa082VjF2SzgrUHhBZXdnR055YXdKU05aTlRFU1Z5d1dyM3dvQ0JSWlFFbWlybnVRS0UrUk5EM253K0RycG9RWllseWd2aCtxZS9zbmxCaU9FeHFpblBiaWxzSk92K2xHSU9IaWZjbFY3TDlXdGZSekVjWVNBRXNXamxnaWpodTJsV3VNazNZVXY1SVJTMVh4Ty9GUVZjZlFyZ2Vsb3kzMGpEdUhSVUdBejJ2Q2wzeXF0YVFRTUo1NjhqL0tjRjhBYURuM1NENmhETUlJR0JvL01IVEFqSGZtTE1ibGVYMWt6cVVmNFFXV21oellBOHJMbDUrNmlOTWRPSGhtL3lDK2I1WGNnRk5qcEYvUFVaa2hhS00wV3NvY3RHU1RESGgwRDZXMmVXeFd5VnlXYWxaL3IxWEVoOERSeDlEOGExMEZsUEpaUUZjNXpyV0RzWTZzd1IwaUpWaWR6U1J2OStRQVdFMHk5dGdvSXJKdkJ3TVYwOFNmVDlHTEJFWDR5NDEyN1JxNlA1a1E2WVVvNURHQjRNTjJGcDhwWFFOU2hqOHpsSENOd0ZtNmJKNjFlKzVncE1DWUdqUzZwWGFVcmlMcVBURDdMOFJmQVFBZlBMRGFISFZOOS9TWmxKbmk2VE5iY3hpZWFPTjRHaGQ3dExNekJnU2ZHaGtpRmhxbjJFNDlONFQwMWM0ZW9ZYWY0UXphNmc4WFVoMEt3Vzd6c0dtNGhqZjNYSjluRmZnN2FWc3RYYkoxTXdrYU1jVk5ubk1SbmdrVkYwbnVmM2JCaThSRXlxb2ZEekdLNERTZEQ2MjJsUjNqZ0tZSVZOOG5pbjliMWFrUjJ3c2p2b0dHaHBpNzgrUVZlcUZQQitxWlYyOEgwaS9TWXpTQWlpbHc2T2VZaW5mWXZQampYdGQvNUUwc3JzSFJzbGFTaExieTd5Nms3eVgzeExJUlU0TmFBSjIyTnhGTU9GbUNxK3h0cXFyWE0vd2d2a0huZGRjaUhLY0R0TDRFNjNCNVRrdGx2aVpIbk5OUUExV2xYRkU5cWxtb3cyaHFmTDlSOUdXZ2hLRmJuZzh0ZjU3NHZDZnhZbEtzdDJZWGpFVFMwbkptVFFZSHBIYldWMFZzK25EcmxUb3JGV3J2UmJEb1puYllsazk4RytlaXJpb1NLb3NncGpwMy9HTktZekFTc2RDdnBjTUlHS1N0TEh6S0JGTjJsbVVUQitINm1VcnhrQ0h3d1IwZG9TRGFMK28rTDNFdnUyc3VERWVHRW5LZWhlbDVvenQxUHYrdjdPempuMWQrWVFVeStucUMyZW9raEgzVm1uS25lWWpzR3c5MmdocVhreTM0SzRkRXRaTHRzUnA5NlEyUlVvOVFXSUNoMzIrUXpuSVl5cks5V2FyNThtazVGMnFWTFlTVU9HUmhGcHBtOFlzNEI0Y2N0Z1VwWm1Odm5vbUZ3MFd0cEo3UGc0ZFFMOEk1MWc0QkVmUjlMSlBzc01pVkVMcWpETVBlVEh6TWhkcXJvRUNKbWJxbE5rYTFkb1NQRXRpVjkrZURKdUVPM2dpR053VnpDM0Z3aUs2NVMwSUJDdEt2WFZmaHpRQ3Z5Q2w5dE92Mm15Y3I0U0FmajdUaTJYRE1LK2crUllUVHUxMG5uODdiSHl4ODJvcWNWc0hFMnlJbHJoeXk1QUJFRFJvMTlwN2FHV1ZWbzZXR2k1dCs1YSswMmcxamVFdngxN0tWY0xvaU5TQUFYNUJNeGNZejBvVmZQNm9XZTVORktsVlFXQ0dTak5QWmdEZXlJN2ptSk5VVFBXdXhCclF3dGNGdmI5WUxIbFBvWkJhVHBMb1hyOU1WREJZWC9lZ3lMRzY4R3lMV0xlN3M2Zyt2d1d5VFU3MW9IZjdMcEVpOXRoNllsNCtOOHRPSEFHaG1iQkxjeXowbVR6N2hob0NZa3E5RytMVnFQdnRPamVvdmpPNXR0eXdsQXlGbEpXZmJTU3BHaXk2QkxFaTk2R2ZDY3RNOWxnU2VTRUE3bE5LQ1dmWUtHT3FnMHBSdjBIUkI4emNOdHFPemtaa3VNc1VCaytSMGlUbWIyenZ2QXJ4cFkxRlpnVGwrUk1iNmltZ0N5NUZRcVd0Sm8rbklpZGI2TFFIczJMRWNkLzZKN1hFNTUwa0k0dStGQ01SSTdsL0dYRHJMK2Z0MmQwVVNvdG1WNXEvRFVoc0pOalUzb0lhN0lXSGFjOWl6UVEvbG9sWEJsYmZmbGp4OFVpK09mQ1luY0o5TlI2a2orczJhZnhwWVpGRUFZVit3NjVaVXloOElydHZGcTdNTHZkWHpnSzNVdGx2QllqNHg1bm0rZ2V3SFljM0VMOHVvY2kvc1Z6OUhOTlVhaTdaUVFpNEZNdzBFb2xNTHk0LzlWNytvb1gvZlpCMWZqSGNib1ZPbTg4Y3BkbW44YmE5ZUNBNlRoYytEbVhaNXhyclpncTRQTTY3SWRoZkZZQ0dFbjZxNi9XTFV0UG83Wmc4N2NnbzA3RE9nWFNtUFNBVHd3OElUZFRjOG0xbU00UENyZmo2VDhtTGkvM1BzU01SWnZtUDZ0bUdSSlI5ZHU1cm5WaDVnS0FxenhCMnRlVHVTZCtOQUxpOHhMU2dPV3NGRThibkE1Qk16cENkK0FudlROV2hVa2IxNUt0TTJhZEZvS0U1Q3FnckFWV3ZGT3RvVHRYbVQyMnlENzFybFp5UHFFRlI0b2t4cDNuaE1ZdmRBTXJQTkc5SGsxRkgwRlp2RElEYUQvQ0g2VHQ4Q09RVDl4K0dRa3hGWTF5L3pNbmsvMWZYeXFvM2pBb3Y4Slc0ejdwcy90Tk8yUzFEa1BDV3cxZ0NvakRRSHN6YU44MlNsREFtak5oM2k4bzFhSzRvRWVBZWxZbGF4NG1OMVZDS0t1aDE2b3FOSHM2OFc0WEYzeTFYYmpVd0pPNXpTbk8vZEFUUzBRK1Nyd1o1UEg5WDBIQmI4K0lqMWRpc1p1Qkg2YVRiR3Jnc3BzY1ZIWW5sd21PbVlCdlNhUTVLM01ESXBibUNqQkp3SnlXUXRZYTF5ODk3eDJWMFpaY3hwUEs0MWZhdUNDTk41WHgraGh4MGZMc2NFWS82TmI2WWJoZmc5Z3ZLc0dyWFFLemc2ZkgrY0lVMDZ4aDRrQ3J2eTFBWGdvQ1UwRUdTOGRoOCtzSXV0VzFyN0k3Z1d0M3puMDBPQllDQUNpNHpzT0tuaE14WUk4eW9XeXNteXVXekV4R1FYemRmYk9qbGJzUzMwbzJoaUFObmc0RUVWUmxNQmQ5UHRVUEZnenFrYWJGWXU1dmgxTWt1VGErdXJHZWJTekNzVDJJTHlyKzJubDR5WWNWRXVnN2Z3b3A2bmxiZzFOVm5Va21uUk1WMm9vYnlsRmxQU3gvUktlRjdob0NJcGNSMHJ5bE01ZUw2ZWREZDhKY0VBQUtsdUo2UGlnZlN6Q282bzBKTXRiK1IrcUtHK3c3cFdLOUplQ3k3VnZ5TTV0MFh6cDFHcXZxb1lSWE1aTzZYRXlFTlFQb0h2WGY2RTFRNjhFZ0NVWERKVGxMdmhDWFUycWJ6bUlicXpYcTNMcUc3SHBscU1GUG5oSkMwUnc0dVp0ZXJCcFl1RmpYOFVPOWRhQ1hRd1VOcHJVbjBmK2w2dGloWm9LQ2lacHBGeUZTMnBGWWlQbVMzcStyWUZhWi9IWXU5RU51OUFxNFhuWm16REJGaXR4Z2lLaGdDMzRyNHEzSEJVUjJpR2xmVzNRcmtxRC9EUlV5T0VZWmRNVFVQZnVEN2IxTi9UaWtGaW9TY1pLbzhjMUhPcTdRV3dXb2IvdUpDNTdoN0k5YnJZcUNuQmRFdHh4aDlvWHhkaVdkNTJuMWNwS0dOY1crYzc0YVNBdHFiYnJlaEZvUm11SEhTei9DaGsyZkJiajFtUkJUeHJDZlpLYWtmU0E0VG83YTRTaGc5dmJpZmFCRy82Yis4T3hTNWZEZHJtcGpXeXJ4NFdmRmd1a09ZMWpKVzJVMEZnSFhkM3BDMG1RaGRGVDJKSkIxOXhTUW1tcmxTdEhlVVFqYkRTVytrZnVMUlZuWFV0TUR5TzFTem8wYm9KV3kyb2VGL0JzU2w1TGxtK1FCNnJzTmMvUlVFNUVtK2pjbHlRVFdUWTl5bXlpRCtSUUNiSXAvblRwZmw3OE5xWmpOTC95MHNBa3NEYXFwdUFzdkVwb1BHZ3hMUG1CTFhIaXk4dDRIaExMbVpNMXN2TGIrSXJkbi8xOWpTbEFXWEo3dUdqY0E5ZmlCY1JNYzFTNk1lV0dlTHA4dzZ3aU5ENzBreEYreDJLdDg3aWZYYTV2N0lRdjR1Ykg4SGFzS2MwOGdkZTM4akdBblZGR21Iejc2N1JVa2JDUEZPdi81ajNhckRGcmlQdjliU2JXYXVKYXpQZC9oQm9iS2JTaW92VXQzOXRob012UVJzaEt2TlpUVzN3ZHRlSjBWWkRUeTNhODFpcnJPWDVyWkFLaGNnaHg4R3orM3B5Wmh2UisyYWZ0SlZON01nUS9PSVhKMlJwLzZpQzI3bHNweEY0ZVVuamRwUkJ4d0t1Z1ZxYmR1a3YxVk9xREJyTytGRmpuV3p1bEtjY1FsQUJXWkZZNzlyNEdwNVEwT1IzRFFKN09XcmkwcnJPRGFncHlpUURsTGFoOTk4RXJmbzJCZFJMOW04bk9ydVEvNjFkOW9XMkw2WUhMbVpVaVBjTUxpMiszZCtYSWpKWnIyOXRscnN3QlRQeG4rQisva3ZhRmZaZGN3OEtQb0NXb1pqWXBBRnZpNWdYdXZBMXhQbU1nRmI3TTBacmQ3YldmNVBtMzh5SGF4cURMeXE3eHVnS0w2WHBTWDg5cnRJTE0rQTcvakxTUkpJY3QxcHFzamxJUFlISUtjalpnaTFiTFdMQ21ZWGJsTjNvYVFMcGY4Yno1MDRMTm94VFh1VTlhanh1WGlRMGF6bDJKMDFZaVdnUFpuQnk2cTZOejNVY21oUDJyL2xEOE1mbW1VVGRVNEpxRXcyV0tYdWJsVUFyR21Ia2pnSjRZRTNUK2w3RWwvR1dwc1kvZHVlVTVSeG11bVBJVSt0bjVFbzJ3eWF3VVdsd3dhWjFYTlBPVEJxY2lQVWdCVUxTWnRLTmpmalFWV3R2NVBOWm9tWnlTMFowRnFHOUttQXBqM016Q1BMUlZFTmU4Z2RYNFVERm9XZE1jYlZhdEpMUHY2aXdEVysyek11NFpHcnRmTTgwOVVZSDhPeE55MnhYTHRFMDNTY0M1dmdoYi9FVGZqT01tcDNqQjFVMDVrNGREZXJaNVFaWURQVkMxQlk1Rjc5R0tzaG1tNnhIWUtSOTlQWUhIUWZ2dG56MWxQRmRYNTZLZ1ZlRW41OEFxK0cxSTVubXFzaHB3S3hxeHBoZVBrdzRpK2VsT3NEdWJZaXpOcm85WFlGenFWVWxCZUxjVkVwL3lGRzdwVVlGZklyUENkMCtuclNsbTgySGlLNVE4WnY5eWROajI2cDZHdzZKaU5RbURGb2JoUmNTSDhyVi9Tek9VTjFRL290TmZ0eEZQQnlQU1VBd1RBeEwra0dheERVMTd1bXUvU1VDSGlxdzZkNCs5UkdqaWZCcVVZOXhvSGN4eC9sYklNSUJ5UVBOdE0rZmNCaU1FeDR4L2xZOCtlZTh3OEluSXhnNVphYTE4UVVrWlZFeC9BWmhBbE1OaXFNWVRQUTI5SkxOSjBLYXpycmdLa2pDTXZnanNqZGN3d3lmSTNTUEdEOUhabU5rckNzY2x1cUMvbVdSR25PK01NeGN0UlNjTWIrV0h6dGNkMC9zNzViMmp2RHpzRVVmcFVqbjhDZXhLTGpwOXZwVm5iNXpNNmU0TElqcUJ6bW9jZ3hXWGVxb3N2d3ovWXk1THFZTS9YZ1pMeUR1V2FMRVlDbHRTM1pUTEFOSTd3TEQ0RmxZSlhZYlBaYzRoRHMrbHlPdFBsWk96ZW1SMnhkNXJFQVA1aFJRWkxwdG53RmY4YzUzaXFWYWhCS0RoblROczA2NGdRcVNzNkNoMUJQREdDQzM0cmhuejBEY21RUlU2alZNT0pCYzFCRndkL2RKdzJVYXJsNWxPZk1NUjgxelJIaUFoU21HUGNnN1MreUUwSXJiVUVSZGNEWUpnb2crYllpY3NOYTJBTWNDZTlBTlNucndQamRXZW5WVThvdS8xRU1qb3hPeDhmWVhmejAxa0lkUnJOUjdRcGYraXkyUVpQMjZIOS82U0laMHlmWlhjK3VyeGJUcXZJN2g4OGIzNFkyMGo4YUdEOUY4QWdLSGswTCtoQURhZ3BxaEhZWlIyMHpWZmVLTTFsb0Q0dGlESStWdXRmbEpOWkJkNVErT0xqVzI0dk5SUWlQUlRlSkVBaFVUcWdHRlJONzFoTDk4OEJnYW8rZmNsc3prbFJic2U0SFJscDE1emtwdWVlVi82NXpDQ0NHb2dnN21QQnptcXE1RHBnZDJ5WjV6NmQ3VzdGMTVac1dpRXNMMXc0b2pFOVJBc09IZXRmek5aMlMwYWFrMUFxNXg1MUZJVk13bklwenFlZ2R6NlNQVTRUTlVBK21qSjFaZlNBNlo0aUQyV25hQVlJOS9YcEt2MEhVbGswSW1FYWJXdmduZU9CaVFpcEVKTkNjcWxwY1hacXpYSE5pcCtmWDkwcXlhQURndFdzOUJ5VVI1MlR4Y2orZUptWnAyR05UZnRVUkFoS1BXeTZGcmpkYjFseTg0OTZpWjhLeitRekFxUHVpNVRVUjhUSkc2MzluQ3VRakR1aTROY1pKVGc5dHNlL1puZmk0YVhQeWhML1pZcGhlMWw0dXlDVlVPbWxzc2F3ODlNeW14Nmd2azFvUjZ5SlpGWFBhVDg2VnhHMHFwbEhuSzRFQmtPeHA2RUp2b0xuQVR5Nlo1OTJzMmtHVE9YbzNjNTVSQnBJUElKMTBSd0ZkR0hBYmFCY1ArTUdDald6MHBManF4R2ZjaWV5TzNRSzFGR0tONVJxV3B6WjlUMFJHRWwwc09OQkZOYUdFT0YxWHZKTXJBSDV2ZFVRY09lVW0wSkhwTlNlSC9KN3gzMGZNQUplWWxHamovTUtmNFVmSHlLdGNLczh4OXpjaXFabFhWdHBHN29HdFJJZ1AvQWZuSTRiZVp1Z1NoVi90M1ZMdldDYldybjdXWFVqRUd6MHZ2ak9XSnQwY29GRGV4alRpdGx0Sy9reFBDU29mK1JPS3NraURFaVVaaFdldVYvYTU4NGdiN1dITjA4dG1vS3VxQ1lkSUpvaWlSWlBSaXpaSjY2ejBtNVdzZHM1dlVkZFlxVTdzYk5MWk8zdGpuRS9SRXJVWlBod1EySzNBSC8zWkZqOUhMWXBUd2xvblFRL3FIMkhEaW82Rk9hU2hyTHpTaDlnU0dQMWFWQ0tLMVpnN1lVUG1mc0ROa1h5QkorK2t2SERoU0E3bmd3ZEl4YzZsU0FqNWFqUHovc3o1NEl1TU1CcExrOEs4QStGWERtL1dIZ2l2eFkxdVcwQ1plUG9oRWFYVnAvbGtRVjdGcU4vUnRUZitUTllVbnhnWUp4MXQ3TjJVMm5PbXo4RXh1d0xrdngyRGV6QUNoeFpUSmVqNm5vYldpc2lDeWVWZkxZby9sMWh4MmFZOE1BRjcxRDdsbFdibXZ6aVFsMURZOGxXQVNCTTA3SWxvVXhoYUdMOVFhQnA5YSt2eis4NkJiMlhRek1NN2RXY3FSaGNjbkp4dmZlZ0Z4MXpiYmphWkJsN3loM1R4R1dRWkdkRnY4dDV5cGF2bm5kSjJITjE1eTZPajdWUVp1Zk1vWEtSOTVySm1QRmZ3UnZkNis2Rnd1U0xsUGV3RFRMdVZLUEkyYWoyTlJJZUdNdW5vWkRxYU9FTDdiUDZKSDQ1dGxxSm85ZTJKQ25HR2Y5N1hoK1dBWkd1SW0rOVNBSEFDbUMzMTlMTTFxVXlVdVl5QjFYLzVtSmQ5M2tSd3ZpOUpPcE9NY2RuRWNRNlM1ZSt6cHB6MTFKNDJ1aEhYamMwZlJoUnVoMWk5UXQ4bzZVc2J0ZytETWxhUkFUblVxcXhkWjh4d0ZObzFNYTVQOEJscDJlUmdRQ1YwU282dWxDMmcxZ0xHTkZlTjVBZnFyNkhLWFc0Z0tJQ2g0c3o4a093ek9ZK1U1K2dBNmxDUEdZdEkwTDEwK1dMWlR4VERsU3FYeGVvSncxL0JsQjMyRUdabS9ZNmFDTVNVRW5tTURLRzFoYy93SVV2SE9HMFNkL1hhY1RzRWVuaXh3L2tzYjVNSHlxMnJpMXZuRzZpVTN2NXRxNWErMzloNFZIcVpvakhUT2pHUktyMXUxZDhuS1VHU1pQWStPL2tyOXhQdE4vdENxUkFDNDlmTnBadVFmWllWVkdOWDNVZjFEeXpoaVpPYzJvQW4xbTBuaVNZVjlma2RZcENrSTJKV2JnQk9XdW15dkNaOWhoTlc1c2RodlNocXNxclpWRkI2S0JTY1JieWpNd0d4UDNBQ0dxQ05FMnNscHBqWHNuTVRFZjRiVUZGR3dVQ3YyNVozTWo0L2lDOVBDYXpNOFhyQUovbGFwUEQvYzdRVFBPQ25rZTVpMHJpR1djUkVRZkpOamZWSDhkcGZpZnJaMXQrcHJ6N01wRlRacHRIWDd4UkZvdDcybVlkbko3QWhDZFJ1VmN2Z1RhZzZRaFNiNU1SVHRrRXFCUlliMEVsMnFZdW9VS0x5ZTErbTlLcnNzdnE2SnFYRlR6ajFPU0laNmtHaXV3OFhBNUJVMzBvcVFQRUtmQVRkT2VSUXR0ZGZBb21hT1BDOUlNenZ1OXhTVDJIbHRHYURvVkUwNnRndkRNSFYvYmFFeHFFSWxuSHppOWpQVUQyOFh2VHkvZ2ZKL2FXUWx6RjAzK0x6clBodkprNlFiU3ZnWm5UandNUzVsb1E3NzVJSFY0YnlzMWdlalliOTVQc2Iwbjd6WndjN1MxZGJjK1hZMGd3RE5sblI5dzBsOXVWNU9RMlhnVmdHdGxFVUxyVDRrWlZSdklHcmVmMGt2UHY2aU5VV2ExcmRLemk5UXVwdGpNaWU2MWh0cDVNdGNsSldIRXY1Wk50MWp4WHJpRDFwYUgvTXFxWXpPeG5wT0xYVmRqaDR5Q3g1ZFN2SXYyZVZZQWUxeWxOYW1VQi9iRWlrcGRKdDh0QldxKytrM2NzbE5ic0g1YnlobzhzaUMxSXBhL2c4Y3BJMUpHdll4RXR0OWxVYk83UVR3RVp3b2J3SHFxdmJjVStlcVVORU9hakRzcmFGMjVQNU5YYWhBL01MQkZqditkd2JqWGtQUVZVL1VBZjE0RE11bnFtR0hjSGxnMmI5am1TUFVzNDM5VzhBVlZZcnJNSzVhdVpoUDl0VUVUSFh4OUs2K2xoYzE4LzI2NW9rZ0FUZEhmYWJsRXZTV3V1RHgyaVVuaHRxUHRGQ3VvNjFyYTJHUG5Cb05lUGQwNFIxSkU0Q295TnUrbTBwdkw2YndHMVV0Rk10K3hzdXR2K0Y5aGxPMTJpa0RlWmtNaWFBc1JXZ0E5Y1BXRzYvUGxkWkZva3BPUk5aV3V1RzJsRGtrUXhxNFQzRXFEdVNYU1lzWHloZXpmV1VHUWZPdVdXTy82WkN3M0RScGRVdnpOWlg1REFpb3ZlbGlNcnRkYmdvN3JGMWRiazFtdWhRZE92alFwWVZFemJTSjZxSkNlZi92R3dMMG5MK1JKSkhGZ21CSElRRysxWkNPN1FncXgxNCtHUGt1aDFvVndCV092TFQ4OFhyYkVIRFFpYUNiQ2pRN2k4SHZieXlCWHZWUk5zSHhRaDJ4aXhSWTQ4RDdqMW9VL01pUURuRDhrYWI4TUlwUjRBMkowVWM3Y3ovMTZBaWVFc0R5NWo3UkU1eTRwZ1Q4NmxFT24wN3BPWVY0bFVwV08xOFZaNW9hQzRXcGJwZjExWUtHK2ZKRDAwWk1zT0ZVcGdhVG04N2gwVDNWR3hud3pXWHBxNmMraU1XNzAycFRaWnorMVpzQTNMbXhlcFNEZ2pjVlROWmN5OFp1cnRLd3cxNE9jWGVvUDlKS1llcmRaY3FzQ3lzbFF3bjNLSkNvYnhKaDlPdGs1ck1Gc3NCY0lEM24rK3R3U2hxdFBxbUhKZkU5TmpseWpzQ1U3RXlBVDVPK1A2bzkvSlpwa0xyTlR4QXNyTy93NU1VTm9zaTdvUHJWVXk2MXdKNXRhQmZQN0FMRTZJZTJFcDhzYTJKNURmMlJObVp3Z1c4OTdBcTFmMG5zblRpY21FbXdicmhhMnFPcWx5QktMZTJhZ04zNXU4UGI0TnRudTRMY0tqVEltQmZlY2VWRkV4NHpVN1ZRQVEzMTN0OVAxUDZ5STlCbXk5bWpIUnZoSTUydnVnUk5jd3p1TXZLK0x2bjZFZldBbzRUcTlFM2h0dHBQdVFVOTQxMlhXWUxTdTFhR0lRZGJyQVFFaUxNemlXaFpobjVqY2pmWTJLdEYvRkdaT2lvV3o4M1J6Qm8vb09iejcxNG56cEwrdjBnZzhmSnBiU3AzanBaVHdJS3NmajZMT1RtSW95SW55a00wV1kraFIvOHFoc09KZ0lZNnp3eTF0akpRZmRhZVJrYkE4a3BlYVFuK0krdmtQU3RMQ2RVd3dWOUhsZ0R1eW9RbWxSRjJ6a2g5RmRINHNORFF1TE5DOHBRTlNRWDVrUGpnTXFPQkYrZTFoRHgvZ2VWdDQxL0N3cGRFYUtVV3N5VW53S042RW4yMWhicHQ3Mm95VXhlcjkrb0RLK0xYSm5xYnZZbUx2aFhRNzR1aU1RMUhYdmI2c0FibzRrU2lnMXdwSm9hNXk1TFk4UWJPT0JyWEZDQ1FIZFRPeTdtVEdLOFRtb0ViL2ljQ292TlVaYlNBamV0bTFhdFlKNFNwVlhJdjJIQk84RmhPRnZyTTQ5Q1I3VWcxbUxNeFhjcENTbDQvSzRETmxENXB0UWNrTm1rS2cwR1JYcjBucWFRRlRKelBwZ1l0UDRiN3VoZXo5ZXJUOHdBL252L3hFdGVQYm9mMG1MZHRaZ1ZJVTFjMmREeDIrTjNFNlRoVXBiZ09EalhFb2xZdXZ3bmEzcXJLVXJudEROSEpCaWMvaThYVEtDYzhRNnB4dGpUY3c4N2Y2V1JkQWU3VXR5cjVMS2pRRXBBY0hWc1lwb3JhWkhEVTgxZk9PQjdXZXV2L1VDaUVkNFlyL3VmamJxVHluZlNqQkZ4OFRvN3grTDJCT21YRFZaTE9OOE9VblFnZFk4L2p5VXZKdVF6dDE0R04yMXBGb01EYjYxb0hFL2ROWTdKa1h5QTZRcFg2em9vemRkc084NTkxNEI4QzNud1JabStnai85QkpDdW8rdERXS3QyUUVISG1PYjJjSWZvdFdKSEpRb0JYbzNSOWhIakVoUFNIbjZlYWJ0RytFMml1cFh4T05YSUxlbng5NUpsdWtvbUl4VUtLRUx5bjZNRGVvckRmUExSOTkrSFlkNWlRdzNERHR2QkEyRjUzVXpnaDh4ZkhhanB5N0pSWWozRlVLVW1JQlYrT1pUS2NTZlZpZHAvbitzTkRJNEtuZ2llM0ErbjhtSmtrRHZ5OC9hV0dCTnk3bElkdWhPbUtEZ2VMdFhaVUpZUjd0eHdTcXBZR1JWWmFBOTRsV2Rxd0p1clEwQUZscWY4M0pBRStiSFZCU1VxdGdmd0lWZzM2ZGZWVkxUM0kwODNqTmRCNXB2eEo4NWI0bXVmMGVuS09DVHJpQmx4SzVIdDRjMHZTZEFWOHVQRmJaVitsNEUyVkY0UVRzbEF3WVpFZlpjNCtqVUJ5TUVYSmdHSnNLL0lEUWxLeXUwK1BGV1VycktCVjZOVmlWdnRlRE5ycGdzdHc4UGhpbmpLeUJicWE3S1hjODBIajlXVGlWMTY5MzJ4cFNKR0xKdHFCbTExcEwxdk05RkEvVit5ZHE0SEE3S0Y0TE9lREY1UFA0T20rU0tBTCtDTFRTQWNrTDVkaGg5RnFSRzArYmtrR1JTRkN0UmY0a3kwdWwyRnRvQXVvQy81MDJoOUVtaC9ZSlk5MStOSVdXTzZPOTFhVVRjZG1pSElsNzhvSEFaMTB3T2I0VW51MHNwV0ZhWTEzRlpqSVBMOStpS3lZT25oMVpxSGdOZ2w4NjBiU25lNE5JUUM2aGxyc3VwKy8wMmVHMlhQMmNtLzFxNEFQWVc3YVBueGc5SThPbXF4UzhrUkRjRGlJbGVUUXRWdzFsS044Sm5pcWFNNGU5cmo3Ky9oZU1iL0t5eTM4eCtBTjZMbk0wLzNXdTh2SzhzZEFtNi82TWF0WWRlYy9keWxpTHVVcU5EOVB6RUUwRWJjdUo3T1FiaVUyMHV0T1J0L1JVVHRLYmpSWjRoSHkxbFVZT0VJUWNuaXNwTmFCR2hZWDNVbkRXSTQ4RkxUREw1UzZpTU1tODFsZFZsd29kT28zNGVySTh5Q05pY1FLTkpSOENuUW9FM1N2dGxSNU1ZekRrNFBGMnJNblpnL2Z5R2w2RTgreHRrQi9jUGV1SkVpOFRhWlNJR2tjTzdRandaNU4vZm5sMHdXZGxuVTFQa01xZm5HeDNwT1doSVp4UmxtV1ltUm1GRHorVVFVcGxNS3ZOaGJHTzZhWGVEdFBsVFBjUFVlMXl6eFpVcWZzQXUyMUJvbENwbDJadGZlRFJRbG50SkpRakVocVRsVVZOcUlTR3ZlTjNialFCWnR1WXcvOVpjSkFPWEhUTmoyeEFIZjdzSFRON2Jaay9XK2p3WjFvdzlieDE4L1A2eFJYcENuc0JOa3pRYTBoazBGWXJzaUc3VEFESzBKMTFJRnNRK24vMFo2RmtvcjBpTVVzZU9iRnJwNm1oNEVxWXRlRnh6ZmxLdEZOTDV2dW91Nko4L3pueGtRTEE4ZDFjRTRXWnUvYWpraE03L250WFVuNDhBYjJWaGFuMHh6Nzdrb3BlV0hqdm0yZW5uUkx1aUE1RGlFcFdLdFFlREJHTHF1YUNveDdxRHNqWWRiY21CSDhFTXdWWHVJRkpQRnEzbVZ4NHV4WTNXZDBEMXhrRFcwZ0hkRnFXOEVKQnV2anR6eVVCOUtxM0RIZm8vVFFSeW1ZOGNFZUhhWmcwQ2hzWG83bVBPRDNOYVhyR3pobEJyQVY2OEpuQXJiQnBxTC9KdDNVeWRNU3A2ZE1KNnh6c0FrTjBtS1JtSVlzd2hvS1dxb25NeVpxUXVKUHE1dkZ1L1BMbnY3L0Q1S1dqVmp0RS9UVUQ0WWF0cnJvZmRLNUdJazVHSTk0V09KQXVPWWdNclhSUkRidE1VY0NsSXUwLy90Qmc2QzFiRGZXQVl1blpOQU5ZN1pjSGhmYWYwS24yR2R3SnF2dmtKek94ZURjY1JadVA4cHRKcW9oV0gvMy80aEpxemhWY25qSjhtckJvWnNVRldjempHSTl4T2QyUEllNWo5eVpjMTZoSG04ZHVrR29vMXBpeENYSUdQS1ZJamljcVlZL092UWd0T2JtQmo5MXRGSDVJcDZZQVhyd0NSTjFubmw1NS92VTdoZlhlekJBQ281ZnhJZkhCMGovc2I2dFd4WThZQUVPc0wyWUhqYllVNVloVkZxalAzcFduZ3FhSk02VjlWOHRqYkltd09YZG0xUWVrcTdma3EyTFVmeVFJRU4rdHJlc1Z6MXhRa3FDVDVhd0R3dGtIK3ZpZDI3K2t4QmYzZ3p1ZG42aTJKRUJkcEx1Qm9NOWVOQklaOVpYcDNhUGkrdFB6YkhMNDlPTzc0amJsMFBtRFpCT0QrNzlhTmxzamRqaDdrU3IxdnBiYUE0K2ltMVB6bjlsUHJram9nL01lUDJGSVM5MjZMMlpXbGc1QWtyc3Q5MTNJc281RTJBcDVBUkR5cW40TDlCc29SRjNZKzR1ZXoyQUMyQ1JqbGc3eVhmem5wVVNEbVYwVFFKWGhHS1VxWWM5andiL0FIcWRXWVR3VEhtQUtDQUs4dnZjcTFub1BhUzdvN1gvQ2h3anNPbUlZMTc0NWp2M2NoZ09zbm40WWNOV3FaYWRjWHBxdjh3QVoyWEZza2hhTGRyaW84ZHdkYzVRWlBqK2RXYkFQSVdaTFFoU3c3WlJqOURCaHVGVVZqVG45V3dQTnpjbFJxMVB6aFNDLzFvaWlTbUw0QVhDNFhuQjV0RmVQTkc4ZGVmWUdHRnNZbGx2QTBvaGQrZG9DeTJBUHZDak1PRmhPb1NIVmpsSWRjSWFTNnVQVnVtYkw1ZXViV0E4Q1IwMTd0dVlNSXFsU1pnK0FlaTdJMTJEcU53OVBMUks1SmlyL3FONkxOOWFZSUttWWo2RHQydkp0MG5NYXZoa0hzSFN6MndhcFgxaFkrZ0U5WTVKNEJReDE5MkIwaDJSdm4xSmZFd2plelJkQ2Jxek9XRjVJNy9PYlovcDkvUDV5bHkzWnJMVWxvMmswYjRlVWJTM0ZPTXkvSnQrUDN3T1NJN3FjSFkzL2hQemVJVk5VTWlUSW1iZlRHU2xvc3lBVGlNUk03UGF5NEs3SDZTVHhjNFpPZE1hUEVkSGp2Q3h3cFhmb21SUWVSVHNHODZSK05ONW9KOW5Fc0JWa2g2YlZ3cWFXbUNGUitYOS9mRzFETXlxY09iRUtydlBMR3NmOVRjWHdxOWFySkVabnU2ZGdHb1ZhdVJEdlVKdEtqaVVhSlpwMVFVZXlwWW95SnhlYXRLbTVhaEdUV1NXd1grd3I2RHRIb0hFRzFGTk5yV1J4ak8zU20yc2t4NHg1OWsvR1VSbjIvMEVKM3paYkhUVUFlVXNBbW5xMzBmL0l0cUUyMW95T0ZUdGdGMmpNYnBRUHhRYUp6U3lpWjEvUUkrTUo2ODJDY0o4UnpiUGo2aWJ1Wi9FbEhmMHB4TVI2a0hpSGtpSFl0Ymcyd2pVaE9wemZ6Ry9xemRrYzNBNTkzeVVaNExmZzg5L1pRUHFJVXNpemM4Qmk1VVFSQ1hsbStocWF5MjVrV05jS2dMaGw3Z2paWFhtRDhOSzF1WUtvblpJQ0g1bElBZHdzR2NhcTNIektBaVpDQUVFY3hvbmdWTGh1bDRXQkQ1SExaS2NrRndaNjQyUW1RdjZHa3EydkFIemlpM2ovbHprSVIwK2t6dEQ0b0hsRTUxcTFXRkVEKzF4ZHdhM1FtQ0pBaWNMWDU1Z0hzdWlKVmg0QUFCVHlFS3ZHeEd2NXdzdlVsUm5QSmlwbnFIOUppT0JEUUhGZDRIcmxGQXlJMnpQL0xRck85Nm1JUE5FL3pIZEVwSnNaQmFudmZ0Nm0wRTlnRGEvejZhWS9acWJlODk3THk2UjllVTN1d21teDRTeDJHeHpLUmM0b3pkOTE0ZzlmN0hMTW1oMW5GTmZpV29UamkrZ1BaczAyVGs5L2dybFkvMEsxZm5DeWJ5UHc4RERuQ3hpUmVIMHVSUGx4ci9mMXkwLzFodVBpcWg4cmxFKzVWajV2RVF4dmtOY09yOFExcFRDd21nVmVpOUpWdk13SytUMU1nWG5YL0NrdTFyOWxld2JGR3N1WkJpVVZRWW10ZkVuOXNGazJITHp1ZkErVjJoSlBmL3NNTDhUQmg3SnpveEdEbXFsTDdxUWpNQjhuUStqWUp3anlmeERuSWl2RGhGdExsWm9SSC9PT2IzS01ZemU4aFZHZ1Fwb29nT0haQ25ML1J0SEllOTRBVXMrdnJnVElHdmtMS1JkMG1WY0sxQU9uME1lNnoyeWJjQ3VyVDROOTZrQTFGM2hTTVRwVWJQQWlKTGVMSzgybWhFc3UwaHhmZ0NSb1ZxR2JuWDNKYzQ2ZUlDR1BDeWh5QWhOVS9kcC9HOHNFS05EU2ljNXpDam83eDZLSE1PYTRhQTl6MXhSRVd3UE0zZ1ptSG40VUVrRmJmaUJMVit4V2pwYUVrTUFFR0FscEp5Vkk0Q29yNGZtQmZybU4vMmQ3a29TYzdKV21CNjl3L240QVdXU2JqS0c1bW1aUWZreGtEenVmZkExamcrR1hvTE1aTXY2clJrZjJ1SEpkZGVwdXk1NW1rNVlPQTZUekUvQ3NwOGZsd1BQb3MvNHlQVk5vY1BMNzBPOVVQV214VGxrVkZTZEJEMnB2OFZMemVrbkZLSy9RKzIvemZtS1BEb05GWDlyMkdkVENJNU1zb2l2aGErSHZua3FESkUwQ243cEVOb3J3UnJLSGd5TDloR3ZBN1JIMUNvcXowYm1EQW1wNk0zWEYyK0JDYWZRcXNqT2U4V0RFOGRaRFVEOGdkVXpzcVhmYkhUVWVxTUZtN3AwdEg1a01XelJIWU5hbzF3MTY3bjY0MGR5MC9zZ3cwa3RScVpqS0N5MERSdG1oMjlaQUhxdXVBbm1nY0tjcUFSUWFLV0prVk1ueFpyc2pNQlkxWXFmK256SFJlQlNRK3lQS24rRGROQ3J1b2ZsdnIrOGIzQnRmMzBhMjc3cVNFZk9zWTdxQTQ2bDAxQ3RlazlOVGQvTmk2K056Nk5ES2RRd01wWW9HaU5EYzNpYitpU1pScUEwNlVMcnkwQmJxWUs0UzQraEdiVEJKTm8rNGwzSXAyZG1YdGNJNTBsaVZDOTJqYlBQdzZRWWg4YlhOUHk3bHp1eTlpU3dkSnFWZFZ5Q2hVZktTSWZiVjllZndMSmUzdVd5RjRzVER1bERhMDdQbHJjWUdHTnc5QkFVZzc4WXN5UVZkc0p5ZU1pMk1pelZpWGVvQVVTb25FWktUc2R6Vnk1SS9hRHlOcUx2OEVROHRFVjNJdnUrKzRKaHRuSm5NQno3TERWUVYzWERjUjhsWDdhRHJaYllLNmt2QVlXZ05rQnpzVlFEdkFBbjV3OUFXU25BQ3YrZHhBbHNBZjQ4LzNFVEtpT0lqci90OFN6WHBHM1NVeUUrSExsVXI5QWxQWFNTQytYcEcrUWtpWkRnWlEva3RaMVV3R0dPK2pWbGMrWVFoZnZEcnJjNFJneTdhWTcvVWh3NHZ6Kzl2S2xVWFJwUGE4aXExY1VUOEp3WGltZ01VQkRhbnFOcnRpeEluVW1zWjBQRjV0bkxweE5WZEM1UEFSRmRvOGlFWXlaTjRZRDZHY3pWdnNyZkF6bENwZ2xNT1BpR01Hd1IwSnVUTzNMaUFkaXVTL2tTbVdUeUsvRnJPNzJybnVLNkxYZzdjaytodlU2WDFNd01ZNWNPTVVIcTluVWRmZk5nRkJJclpSbTNaaWtTbTJBQ2tmRVA3YnBacGFvVjlXZmJDTFFJbldVaVdnU2cvSWJrZzgzVnIrUXJRdjdBV2pDL2xrSXFjM0IzaHZhS0VCZHZjYmpxM1FKL3MvTEIzeC95RkdsaHJiUklMZ0IrOEIwQkE0V1NMdU13cHJlNytKWE1GZC8wTUU0V2NIMExkNU1IdGhQcDhNblR3UGtvSEdWTSsvb0c5K2hFMk9pYzhpTmVlRkRiSWhTb01GcEthL3Z0ZWhNbzE5bDFENjlwc3Yrbm9GWS8zNnppVVp4eHdQdXhlYlhuOWI0aHdKWlJYMHNyTHNOYXdJUFZUODh3KzlUYUQyUkdaOXg2RVdBNDJQSytJRWJkeDUwS0FnL1NXZE13MWFnTXNyd2JtM1NMeGpDMzhseHhjRlU1RGtYRlJFR3VtZVYwNnZmb0pMb0FHZEEya1pGVm1QekFBbWp6UTdBTGFVRmUxVkpVZUhqQ3cyS0hVS3R2MUNFc1NaVlIydXJnTWNDeFVuRmZ0dEQzSzJjTVZEYk9OS080VUJqNlh5QkFqbkRHaStxaEZBT1phd0lPZkRNSUdyZ3o0RUhqM1JPaGhhcCtXWlcvYk5TaGVtV3F2OWVXQ002TVZIb3J0ZlUvMDVEaVBVYTBucVB2VnZyMDhrVWVwU2xnZ1JBeGNpK1l3MVJBVERPbktzbXR2TUJVaER4WWF1ZENsT2ZTbm9JRE8rb0ZSUHg1UHIwaFZlZDVGL1RabXRQUG10U2Y1UStqVHJuemh5OGlSYk84MFI0UTJRR2s1RXN3OUExaUVobTdBajh3OVgyVjF3TEpuME1mdW5EaDRmcjZ4VXpaVmxhVTRiV0xveDNoanViOHNLbmU4Q3VJVmFoZ2FnNFlPOU9NMFNEeEhCdkwzbVRrRkFINVNJd05DRFhMNTlCQWJScWpBUFkycWhULyt2RlZKeWNQWWl2ckV1bGNCQUcxNWtHY0srSk5VRjBWQjBvUVYwTy9PMjJHK1d2YmdTOW9aTzVtejRDL1BjTUtFekFZNEtVb3Y0b2VzdGk4U25HU2lQbVlrcG9zeXRkTUlEbmFHSDFTd2x1cS9LZHA1WVZuZ1hFdFdodjlXZzN0NXA0c1ZPcjBmYmxuRGhJa3I5ZUNpYWFpMFl4ek5mY0FJV3h2L3Q3OTNIVUcrZ3o2cm1qNks4eGxramMzeVdjK0RsWWhRQnIzSVdQM1VRcnQxc2lpSk5aOW1senliMXhsYnE4RVgyMmxya3FycHNsY3Nhd2VkeU9IUEZzTVF5V1czUE0zQXZPaE52OXFJei95ZTZPaHBrUkpoUS9aZzhSRzZqU0VzYXFuQ3JqSWVhejQ1SHltMnp4RW9VcC9kckRnNFpQTWZzSUNCNzNBeTB3SHZCdzlDSno4VDZDVUlQaWxtcHlSUm0wdjBpYXg3MnhZd0JVb1VOd1pKcC9FMFpwOVFnMnVEdTR3OGVnb0NacVE2TGN6QTNndzRDODQvSkRVR29aSC9raTEwMS9FZ01sOVVEaDBoMUtIOXNpVnpobGZJZHByeStHWVVJWXpwbGRldWJ3MHBYVldvN3ZnQllpVnVWMFhmNHZtVTJXRStTVmhCTjMxSGVINFNuYkdLYU0rL3RRRE1TQUlpVmZFbHdEVTIycE1Ua002OWhKQ2UrR2FkWHdJR1c4KzBBQ0JxRkh0K1BGZHVWL2psRlBBWmlyQzRTQzdqUXVIbHJDM05INWpQb1hiZDlYVUtYWjlDeVpSbVhnYkRkMThCUFRqR0V3QjZlL01Ka2RIOVdkMURtV09hOGlBaktnV3hpQVhMZTlGam12cXlRR0tiTWRFM3ROd2FWU2MrcWswMkhsWDF1NEl2VFBLWlR3TkdiV3dLYTBjQ0pMWHpKNjR4WDU5RjhNUGVSS1hqNFI0azc5RE5SdVIyQlRXSGkxUVZFUnk3VUJna2JjOTdHNEU3ZVl5ZFJpMFdFWElqajAwVUVqZTJ5eFBjdmJyTWJEMHIwVVpYZXNtaVBEWE85V2NEbUhKSUNhV0ZDTmsyb1JQZlhSWGU0ZGJUaWp0WXJaOVYwV1RzSXgvQjE0MG9OSkdkY2JjRFp1L3p5Um52U2Rya0s3c0ZxU0dMR1FyVEVoZE4ycVp3MERxMzA3TnFhNW1uVEtwc2J4Q1JaeVZIYm1rcmx5Q3YrckdsMkUzVDVRRXBNVE9xTktBZTNmV0F0N2ZVdDByc1JLTUFXVTdmZjZhSnBtSTFuTnBUdll3ZTlqd2Q3YytHVDlnNG56Q1Nna0I2bnl5UG0rckZjeUlRVjdTKy9PLzZoQk93T1d1NUpWV1NhbXk1YlNjU3h3Qm9icjZsTmYxRWkvWEZUeUc4Q0NzVVREWjlWT01GeUhZM1VmeWMvRDhocDA0aVVpTEZyRXR2YXdBMWZYUXBTYnA3dkd3dFBpT285NUlTQnBCS0xTcE1SdDJNSVBCSzB2V1dCL09IWUtGbUFXemxPUUhvMnhQUXh1UHd3NHpxTTBDN2NZYmo5S1dzK044d3ExSnVpMTE2NzdMVTREV2tHZ0lham9ZaGlOVDE3UXhIeXBZd3VZemtBQzBHK0EwakNUckcxaDZuVXJtK2FLa3pHZ3haWU14ZlVFZzh3TUpQQkkvU0w0b1UrQmFqT3ZqbUlkSXRDeHR0WlhrdUVVZXZtN2xaK2V0VFZFMU5oSFBXVVlTc2RPam8vdHArYXphdWhUUG5kRmpDdGN0c3p1OFNrbjYyK0cvQjJ3RnA2NERnQmNiZDlXVmdSODhxUVJIVndzNHhTVGRIL1lHcEpDZlNLMzgvYU01QmtobndCYTR1a2wzam0vTSs3Q0N6bVJ6elI4bEVFbmg4bEtveUM1SzBYR2F1Rmt0TURqejM5YnJLQjM5ZE5QTmcvV2dqbEVtWHIyWklCN2ZCV0xrV092c3J5T2xhMzV0K2dVK0U5dlUxTDBtMHY3V1RrVnRPaEpKMC82Yjh2K1R5VXo3NFMvQVZWVzFaQ0FYWDRaNk5rdmMzeUFNKy8zdXQ0YmhTWGx4UU5QQlh3Z3UrbjhQWnJUTy9RQmZxSnpFTGhBa2VWK1VHNHN3QXI0TEM0ejFCZ1RtaVlzZzlNWC9ONDJDaXJ5Ty9NVmpqZ0cwOU1iMVN6Qm9WWHd0RjZSd0VSVGZMOTJhL0twWFk2TkhJc1RwUHhxM2lKM3pHang0emZGVjBxR2diZWtub1FRNUthSjM2MEthTGpYMVNYOGUrekZLenlRTUgzU2ZxZWlLQmJYNGtMR2lEaGtrR2NUSE9kU0laOGJCZ1lWc1B5L2trS3VpRlp5L080M1BxaUZqNVZEb3dSMWp4V3BpNlFNU0QzQmZEUkFXWUdUM0ROeGlzQU9iWnZnK2wrdjkyeXVMWGpBTFZiMzYzQ3B1Y0k0dnRzMUxPbUp3RitzSDVWVHlRa2VFVmNTa0trV01Nc21jdHRaY1J4TkZ4ZkRseURkQ2xCNkFXdEc1TFE1allON1NRQnlseTQ1R3Blck0vOEVLVENYRnB0ZE83QU9YZjN2UjVtaFBjTWZBamNhYlg1MHQ0YUc5Uko3TUZDSlNxaTBtdjlrQk9Lemt3aWorYWRvK296dFRJRzJNOUVpa3ZaZ2hFRnRSRHB6YnUwUGJXMGd3bmV6U2RGbCtvT3dFUXVHTDZsaVhGRjlLVy9kbFB5dnNsVEpQTEFKb3pta3JmQ3ZCTnJVdnJnblZ0MzR5RFJsbS81UFE0VnN4Tk5EZU4zeWJzOTcwVFJGa2VsMzVCUVlOVFIrMks3U3pjSVhhRVljK0Rwd21mZlNKWTdYaW1rTFlOU1hxaGNIWHM4S0NiZ1A5Rm1vTDRMZitUQUFNOHU3dUZ5TkdWa3YxMWJUUXRXeTNxOGpIQTBWSGNIeGtYVVdKaGd3TXdBTlFwNG1JQjcxUzNaU3ZTUWwzc25XOHFMdzEvaVhRN2U1czV1TUwxOEVkaU5zTWNTQXZZc0duZnplTTBOR05nakdnS3M3NEZ4aEV2RXlYdStycWFtNDZCY1hIbXQwQVVxdjF4QzZ3UHhxbzNPYU1CSHNaQzRjWTg5R2JZV2xyamk4ZFpEZXgvbXN1TkdoODhWcE0yTVhKT2p1bzhtN3JIa1JsM2FWZDE4MUFZM0ZrczA0a1dCRDNTb0MwdkoyZEV3YkxlWVhpSlFTcTlmNmkwUHcvdVJoanBxQW5XNVFUbnA2Sm1kOEFIRDhPWDNYbHNxOWlXcm11TE80UExCdS91a1JQUTlmVTEzdWl1U2FzbzVndURKZ3BPb3BjSHBtNEpnb0dkejUrZ05lZGVsM0pMZmRZbFNZV3BabmJ2WnhmVnhOTzlVMSt0Z3NZMDkxUEVaWCtzYkxmaU53emw0anYrenpPUHRmV1YyS2l2VGttVWllbUtDMVFpMDF2NUdObjQ1bWxiSUhLT2VmVHl6eXNRM1VWV2VhZFAxYzhzUVZPcjFTYithaGZHNm9vRGI4bDl0QWxvcjdmRzBTSGYyZ3duRU12SklDN3lCLzBUY1JVNmRkTVNmZkhYSFhjUCtnbS9nMThBMlJBbS90dm1CNGtLeGNyeE0xT293bFVIUUZiZlFWZlZQS2FYWG9ucDYyNzFiNXFMWmc2M3ZZUzRXYjB2K2paeVE3SHFMNFF1NjFtTVVuMTRzUk5peHg1cC9ITmZWVUNYRGt2VU5xMFF2LzRJQisvRXJCMXpQN3owemZrMjZQSE9HaWJwYlFxdVZCUDMwd0JUTjg3MlBWYTk0VUdYUXg5WnB2ejRHeGVzRlpnSTgvcXE4Zm02WEROQlFjYWpEVGFXRnozSitFaG9lVytBQXV2ZXd2MFNnSUkxVFJRLzM0dmszYU44b29XMEx4cTdaVVQvelJGUDQ0SkltbjMyUm9BQXJacElGM3RTZXNZRVVSaUwwbyt1VStMTHNwMGlZU2FMY2Z0eVBoMEdLZW8zcU5OTzlPS0RGN1M3bEhHZUtQL2tzVnBFdlV3MzVKZUMyVjRxME5FZC8wTmE0KzVjck1idjRrdDhxdlkxTDFNbGRNcEwzR0FIZlo2elJYc2s0Wk12Ty9hQy96R1pBNG16YTVqMTU4bWxWeEhXdWZPcVh3Rm9NVDF6N3dxRm0yZWkvRHNPMXZ2bHFzSWRGai9MVUE1N2xkN2RDNk9zdklTOUpSL0w3eE9GWVBYNHQ2Y09oQ2h6NkM2cVB3ZWN5TnRVZW5WZVNDa3Vlb2o5Zk9MaGQ1TWNVTmRkbVdTMTlDMFVPSE5WVGgxTTA4cnZTZGtlWE5rdHN2V3p2WS8zcXI3MWY5KzkrT0VSenJvTGFTbnQ5WFJWelFCK1lmS1I0Y2RqVTFSQ05MRVcxbko0dTlKTFdTOHBMWUNYanRXTXlLcUVVTG5WdldUZldlS0xyWWsvbTBTazJyMmZ3RnQ4cXNtMWlGT0FvTHhCV1JiQk4xOUpvTWtNNkFOUzJOVVBpR2RDdklod0lsMEwvRlhPeFd5a2lLOEVEcUw3TXpPYTIxand1VnQ4ZUZYRHV1SFpUMXVRZ1k1a0tiN3MxcUI3NXFxTEhRMUg3WlZ0YlQzbis0TERiSEt5ZnFudHBjcm9GdjRmajhxR044OFNYbGlIMGJzTG1jVHg3YTBPQk55NlRnMHpXYWxVVzEzNUFRbVRsNld6YjJhejhKM2p0OE42eHlURFI5VHhQbkMzVE10WGpTTlNkTWhLV2w1bmVKNlBnV3NacHoya0FocENjTGd0MUJPaDNaN0d2UHFabHZ0dFRiTnRlaVVHZlNUNDl3TFR6dklXMk81bHhTTUg2QzVrNEQ1aFB5alZ3OXMrWmRrdm5qTmp1YzZlV05QMW9RSTh0WXZKL1puWXRpVzFucU9XcUNSeFh1T01LTjFKNU1tZnhvQnFESWtuVmd2amhleFQvV0FVZVBLUW1NZXVhVTR2dDhyU2xHZHhzNVpaam56VTRiRUFvNEJpTWxTVWh4dnkzMGwrSjQ5SUd4N3JuRXlUcVBCS09RTFR5bXVVMkREV2VFYXhHb3RTS3NPRS9sK04waXZRL0w3V0FRZWRYWlNydjBWRlU0RTdKUWdXZ0VtOUxhQ2YrSGJQL2JUNmwvM3pRc2MvVEU3S2hwZDZVUnIvekRnWW45czVGU2oxblBvNlBkMk94U2tFMHNwQ0ErMWpJMHVsaXg4bU12dzZPei96ZUhpVi9Mbi8wKzcvMUFVTVptdmNNNklJaGlma1BGVThaVGZBTVFnV2FxTktMSVRoT1RDOVpEcmFvRlVNdjdIL1ZjUFV3NEh5T1kxZlN4d2ViWXhBMEt3MVMxV3FYK3pDT1lRcmdudTRPVXZtS041cy9qeG95bUsvYmZXTkJtc2hwQ3NaWkJpckFhZFZoanByeWx5VWtad0hmbWtDSDZTaGRodC9PeW1BWDFJZVFQTEk0MFVjYTgySW9jUzBkR2JZY1Ntb2s1N3Fsb0dGcng3SUdvTjBQUFZFWm0zYzdBOE9wNmhWeitHYmhHNHJ0ZzdXd1RYL2FESHM1eDduNHNNcGh2NFcvRkJxbmF1c0JxRmU2d0ErQlVNN2dSdmNLYkxBdERnaE5NMDhpSXlud1lYM1N3SEVmRUhVL2FqemQ3U0xOeUg5TWZ2RzloNDZ3M0c2aVVCYVhZNEVQQ3RPYXhNVTZuWXF1cmRrRU9YMUo2azIyVHVXaUtvQUFqWkZrZnY2OVVwbzlFN09tTUlGdHJTMC9JVGs3NlowR2ZIOG9DbWZZamIyYmM1bUt5R2FSdjRHcFprQm45TG9MQmFPL3VNYmVzM2pWMU1YWE5ET3RlMnZCbUpTUy9ReFB5eTNEZE9xTVpaWTZ2SXN2WTFQaFhicG5MWWE3eTdMQjVzOTNZRHZScE5KOE4rM2xIenE1TTdJeHo5dEE3Qm9yTUpsRTVqSVo5TFRSU253RFdGdm81STRURW14elN4b0JXM3BTZHEza2pHSzBrOXB5UUNheEVub1pVa1VlNjV3b2dLcy9INWQ2eVRId09wU0tXaFcvVkV4UzROT0VlUkU1VkpQOFhNS2g0MnJ5clgvUmxJN1VyRjFnUGdvZ09LVFRuVExqaWNEenovNmdReXlyODRWa0VGSnNWc1VuMWRBUS9KWTBIMnRucHRyRjJBTEN1Ung1L2hGRytjeGJ2ajkzVWRMUjlTVTFDdGQzaEpzVFM5bTNjNmZHczJlNGRRNUlWWHEvRUlIUUxQWm9BWStvazRSS2Q5bkhtaFFscCtjOFdHc3FhWTNkKzZrc3hTUExkY1p5QmdUZmRBZmh3YmxvY3lNQlltR3V1R3FDNitMblRCVEJUU1RPdEVxVmNxMHJjMzNjdzh3MUM2NFk4WWVGWi9KNkQ1c3UyN0V1TWozSFBneW5jYzJ3dTg5S3UyUFp0OHpjWk9RZ0ZlQ3R6dVBabFA3RlRPZFZISmpMVHNTSFgvY0psUjRSU0pyamNuM2p1aFFBUk44L1BnUzNKM1RPRURSMGtBaWVxcHcyRmErbWswM2VXUW1QVjJQb1VYMm5Pa2VKZHhZbytFdEkvSmpWS25tVFlwcGJmQWpleCtiTGRsS3ZwQXFOcHFQVlh3MTRTbEZIZ0kyWTZkL2dDcnMzR0NIVUcyUmFCN3NBYVQzbTczQzlFREh0b0doZnE5Y1NrazlDVGczcjhtVUFFZm44b1lBS0RmcXZmdzIxeDdZWU1GTkNGZDZUSGY0ZHN5VzhWcXY2WTFwT2cydkNCTDNWS0Iwd2w1MEExRlo0Z3VpL2JVOG01Q1JZU1hnNXpuNlEvcHl0MHhuNWFYNmRnTVJFMGR0L2Fzd011a3JuMmNUOHFWeWtKVDgvbGVNZmdsa2pWblNZNEs1c3BvUDJ2SXlqSURGTXlQUFpZTGdYM1hGTmM0a2VqMnkzS1VqSnNPd3VuVnBHbC9aSnBTSENaeE90cE9BdWs2Mm5aUVpwOUI1MkNpaHZIQmJVLzZyWG1tSVdVS25Tb2p6U21wWGxaQnhLQm1yUi84VnFJZkxlc2NmY2dBai90MEg3SWNJaTZZell3VnI2bTRmNnU3K1g0MTA3SDNYZytrMkF0K3YxazYzVlU5TXVmYmsycEw3ZWZTY2dGZFQwd281dGI2SmNCbmVncDN1SE1Hb1FzSXEwQ2kwNGVkeCtTdHBwbFFUUnBibVBVbURZeUF5L21vbXREZy9kRWtqUW1YeVRpUmhoSmZWd0FDSm1SWnRGOXhQanB2NGtGeUpHR0dodmwrLzRyZGNHTFBmQkswUkR1bnBndXJCK1lidHlLUStBU1RPMHlQUGtyY0tQNTlqVWVINWVtZWZmL21tdDZ4eGhIUFgvV2Y4dFkvN3ZvZmNIdTZNejVRa1FVNzhMbHZ5VGg1VkpDNTlVSFJ2NkRRVEhRMS9KVWtEbVdZNDBBKzY4RjB1NUFnRWJaMi9IZ2NyWEZzT3g0OUtNdGdHY2dZK3EvVTB3cW03YmZMMktPNmk2N3cyLzJjYnJOb3k4UWJNNHpjUFdGekpINUhBR2k4ODlVNDU2TlJ2YndWdkd6K2ZYbkpNelJGek9TdVEyVjI2U1J1UzEwTlpneHBSR2k3MGlsYWpMMU83OWF1SkZCL0syZ3RHdjlSckVrajRRUVQ4WGp4SzR4SmhMUjNJME13cGlXcERyZHhSNlhncEtlZGg5U2NQenkvbk40emEwT05lcStSRDhMeDg0NlJYWW9wNTZwcXYzVXZUbVJheFRsUWRHZWdsWVNCZytTYytndWFOV013QWFrWkJTaHNlQmVVRk9hdmQzT3dNcTRXTGtvWmpHMDhMWEdXTXVZVk93TVJoNTF3dHRiN01YOUJqUmdscW1rdk9ZM2JyUDkxVk5TVVF5VFZJdTZicFhhNjRVMmlQUHNYTHEvTTRab0VsVUkweDlwSjljY3V6cTdpN3RJbW96SjdpN2xmTGc1WFFXcStKZ29GRmRDVXUvcXpuK2Y5b3RFVjNoUW5rbCtTZEpOTjFzRmsrTFhRbVU1cExSTi9RalF6UVExOXBQQjV5SWp1VXE4L2tXRm9UdUdyd1hVcmtnRjByNUtLSy9qSjNRVEhkcnR4ZW1pWm5xZXdPaVoySEUwQWRVWndrOGdLVllJUGVScEpFR0tZMFVlMjZxaGsxeFNyQlBWWEJNaWpTVU50U3prOG8wUFA3K2RMZG5oLzlPMG10QkFqT2kzUGQ3Vkl3M3A2SmgvVjhka1RHQ3V5R3RUY0FwVXFSK2RmbmNUYnpwQzk4NjEzb0g0Ym5rTmR6blRmVWpBV3BzOFZoTnpHUVdTTzB6dU1INFFVa2plcndxNjlhT2pxRWdkREVVcHZqc0dEYjNxSE1jZnp6ams1akJzdmk1Z2tJR0Z6L0JsTUFyVnFSeUdtckc1V2J0ekRSMVFsdE10MnpOTld4YkpQNEV3RUVkRzhSL2ZyTk1oWXNYaGdZU3BmcmtDemcrOStRdm5iMGZ4M1pwSEpnMjh3RlJZc3dFMEYrQWFqOEI5RUx4Z1pQaFhuUzFYcC9XaW9NQURWdnB4S05lc1dwNU1URENVR0ZLL3dieUovQUh6UkZQZmQvRUpEdisvNHZpWUl3T1lKMHJGdFJtVkNmRGtuNkY2cXUrWHpoL1MvcXl6YTNOVmsrS25CZWRQYnhvaHZFYmxORGIrM0t1NXMzLzR3WGo3eXNpZEhZNFkzQ3RCejRCRWo3OU03MlZLdVlySjVPd1djV1NUbnZyajJvR3M2V29wOFdvM2FwdHp2c2drckd1cHdCYksrMEJlTXZPQXpOYUN4VmI1MTR2eUdsTHBjREZ1RCthNnhkUC9DaXorSW0xclkxb1hTb3E0cTFoaXJpLzZJUFpLekt2UXV6RjZtUERjc3JaTDhSQXZ6eDNrUGc1TE14UmIrNVpxMmxoRWhERjNJd25CSmhBUjBoUjNlQ05pRmhSUnZZbXJZSkhiVzdjQkNjNkFjWXNZOG9HbXdNYTF5MkYzai9sS3l0bkR6S3FreUoyNUxCeHAwalpUd0pQaDRKMGxnZ3doOVVvaE1MSlZWc3NFazZTZlRjQm1wckN5ZHk3alBpMzhHWXgwOHY1V1p6QXVvRVBvYnJxbEQ3blphelI0bEZtS2RRWHFHYnZvcW5MQjR3b2xvckJ1ME1Fdjd3cWhhejAydE03bGFQNWV3YjlBM0tOem1Ma2UzNGo2aXBvMnh4YlQrSTc4SWJzZnFaa2JhZlZHTnZLVzhSbEVJdExVcFpWWnVNaDFabHl6a215cEEvQmlhTDFCOEhSY3pnRTdXTk05cUVBOTRoVGYwU2VHM2xOL1IvK3Z2RWIzRE44SVlHTEtqREd3K0ZLZk1ERU9SUzY4Y2c1YlRDb2JNWWJXeHU5cUFYTU9Ic2duRllic2p3bW9xYUtBNjZWK243blJmWmNWS2ZuMzlpQWxKaURaMXBjd0Vvemh2eXRmQmlpdFo5NURnNDVybTZUNDhweTgwQk0vRlVmYWVKQ3VyNlVhYzR0b0t0QjhuMk16Vk1jYVJFM3JESi9XQ0Yxb1JhaWJWN1pBUjduWWdxV1N0ekx4eU1yV2xzL2dpeGVJQ0dzUGFncDVRaEo3cXpsTTJvZDhiSytHN1o3Znp1YTlpZzVnVG1yb1NNSHpyQy9ZbTgzUU9uWTFkcEVHUE5DU2RRSHRBSHR1UzhJL3l3MlBvYzAzZEJRS1VlNTZBOWxSd3lleUY1ZjVySTJ5V2Fpb2l6dlNwZktpdmlCVjU0TllUQVJseStSQmhsS3IzRFBtdUU5TCtmbU9PQU1UaUpZVGZrMHpMdVdaL1ZncldYZHh1OWpMMVdOeEg5RWFGbVFDRUFzVzllcUJhWG5vZ0dRVnFYb1BZdy9YRWQwd2F5a2lmaTZUK3NzckkzZk1WM2xYTUMzMDNMRld1Q09lTTVrRzFHZmNqTVFZWU9lSGtIc2ZBalNKZ1laMXk5aTRuSHM5ZGNDS1lMbkpBN2FKQlhnTkFvSjJXaW55UUFVMHNUQXUyaVZTWWdXZHVEQXZJM1dna2IzamM0amdjK3h0YUlnSy9IbHZvYy9CY3hpd0Jnb0F4OUtLZGRZYlZ5REpJb1dmeXRlQXE1T0c1L3VvRjk4WnpiUnBlSFBtQmkxVndBeFkxVTJXeCtZeVc4TFc2Y29IVm5EY25OM2phQk1GSmwrMmVaSmI0N2JiK0xuTVhoSk1ZNUx6Y1FKZHFkMW5nRDVTNUxFUkhRZzB1RFhNWU9iWG1oU2hQMXJzMmltSTczNW8rOXJTeXg2UGk2REREYlZYZXpvOEJ5aVRXcTM4VkphT1FiZ090SW0vWWFjRUVIUDdpaXdCK0creXc1NERDMzJJRUplcGsyQUtFQjQrL0tHUWZsa3JXQktkRHBwRm9UYWNZR2J5T3hXb0RGR0Q4Wndtck5Lb05leWZQQkJhVkw4cTJRWDRDTW9rOENPNFE2eWlVOFpnTEJlNHBrQ2JJZC8wUFNJNEFBSlpDejlIaVFySlJVdzdkWHpNM1VqaC9leUhmbFhoYzhpdHJOUXdPNEEwNE9PSzVNdHlsNmw3dUxLc20xdG9IQW54MXFKVlphNEZ3MmZrWXFXOEs0aFl2RG02TURnRldKTzAvNVphY1F6V3hjMzMyZ1l1RVZBaHNFTnFLSzg3OXhrcDQvV1NxdTRDKzl3VkNudmpWa2ZaOUJwSWxNS3orcEdCOStrbmlLeGtCTktMRVVYb1FXRGdXUjRsTmFYRjlFMzlBQ0J5Qnpmcm1PQS9xc2wzUm5MTHZGaldRb1pLRkU0RkRUbzhxVnZOUXNjU1k5SlUyZWRMM2tvSnpIWXBNQzRMQ1RsTkpxNFBGVDM2aXZCVE9DaDNOUFlJRWtXQUFTUkRMMytOSzhQTFd4M1VBQ21XbUxYcEtvb2lsMExralVUWldMQTYxdDFjVVJURHhraXBQV1d4ZWJ3Y2NXWElJbXhQQlRVTG5wVFNJY0taSUFxbVkzdWpkVEU2V2loWFR3VFFrRGY5cnkvaDd3c3JSOTY3ZjRVWVdycmNIQ01Fc21oUDlsejI0UnNtcThhQ1FxY1J6WkdWUGdLTjZjeTg5WE93SDlYblppQ29INXNBUlE1cFVGYU8wMitMMXRidFhJbDRKdUxoWEpVaHo0MGQzbE5ZeGdYQmI4U0Y0VkIwR0NnVEI3dWtCZU94REI3bHRuQ2ttMkh3elJkMXlzdDRTSXJNSk1KRG1laXMvQWl3TGZTOWFOd2Jya2Q0Y1FkaDFzZ2gvK0F1b0NyUm9PRnE3NG9Xa0I5aDVzUEJhTWYrbDQ0bVBtbUxYek5xVzBxb2tZQWhPTHNFV0hDSlBZdzdWbEx4TDgyYkRrVU5ta0NHOVA1ck9qT1JwVm9xZ0FaaXRmUnBuRExBRWZhUVdrN3NtcUJtZ1I5bnl5VnNKTnBOQVlic2FZUmJuaFpsb29NQW1PQ1crZWRBem00UnlyOVlHOXdEdS9aMUpyMUV1RXZ0Z2k2WWdYNlBJYmh3eXBDeTkzYU9oOEVWM0lyWEh0RTQ2STVieVkwN3VTZGVzUVJUSU9nWXhRM3AwRWtnVGZyY3MyU09MSVBKeFc3VnlHZS9BczlJcDUwN1B3aHNpQWlmdnVlb2pXYnRmZVRDRDlGNnR4ZWUrYnNDZFhRYU5RQkx6RERNZTBoRHdQelhxRzJPNHhWMEhQWGJFeEJ1TVZMMmtYM0s5SnBoV1V4dXVzRFVGTDZaRlMzZW1hakZ0RTdrWFZCdWVmNng0ZTZGWnN5Z3RtL0xvVjVkWXc2OHVaTHJLaGFSTTVhaTFVUFp0TUE3UjFZdThIeitYb1VUbHJyWUhxUHlPaStlYzBGVExMUSsvaWxNL0UvckdJWnpxS2NXM0c0RFBMZDVpbTJQaHpHU0wva2R6Qk5leTVYTUFUcVpYa3NIZkhPWlN2MWRneVhtbDBQQjM2cW9LZ2ZTVXh4SzFWSkpoalRHSzZkanRsNTNVUkdDb3NtTFBQQkJ2b09pTHFBcUs3eUNmWEdsWklUeTUycmlmRGwxaHVSQjc1Zlc4ZGpQRWgrMU4yc25mL2Q2RzI2cXhaRXI5MnF6UURMbytmcGhMQWcyaU9XcGczTXJycG5IOCtGVFd0eW5ScGJWekxBUGY1YlZVS3ZRU05oQVBic1AyMklZc1pBaXAydks5S0swa1p4UXpFY1JXZTZpUFpvL1dUclRySWpRbVQ2Tk9iUzU5LzAvZUVQY3N6TktvcmtXc2piMzU1bytyZGdiV0tRMlRQRWZjd251WVUwUjM2b1VyejNQMVpQd0JtMjJZR0MvYkR4Q3RQZ0s4eTdaUUxkeVJWSHZ5ejd6ZmwzZDNwWFEzd3ZHbjV3ZjNYYlNmd1RiLzBDVXFsWWVyVHJPakY0ckF1YjdWdUtTd2U1UHdMTWM4ZXpxeEtqUVpuUzVKdEFtLy9YY1RhL1UvSjl6dW4vVStMb3BjUEQ0N1krMjhoL0dVSTF3Ym5tQkVjSW0xVW5kOW4wbXBzdWl0amRMbFkwVGY4QnFNRkkwS1oxYndkSFZad3d2ZTNNbVZnZ1NrTWZ3TDVCSlRHZDVkR3hkdUo1dTFmQzMxWU4zYm9MNUp2T3gvNG5JNllEeEUzUHd6MnZ6M29PdWhvN21POXYyQUU4NFJZUEtDVXNBQW9RTFdDQlJacGpaejVZNUN5S2JFUytmRE9EanpVZUpOb0w2ZWNaSXM4dkFpSVBUVnJyTUMwYlJ4ZlhIeEpOOFBTR2hvdk5oS0lxZG1CVUhidlQ4MFo2YkJEWUZjTmg4NnNIZ3lTRXJzT1o4ZlpnVlRnL0pvU0JUa3pObXJqMUdtWUFzK3JoWE1WUzZUUGxacERJeEVpUmc0bngwSVU3NHRLeXVFZmgzQ2U0SEM2dHVydmwrcHh4QlU2bWJSbFEzblhTZnFYNm5KVGw0Q09xVXpYamh4MThRWE1uTy84b3JieGk0dVZCK2ZucW1FT3NNdDJuQkRUWGtKSldWYUl3WmI5bWFpUzJhV0xic01ud1g2SWRLNzdmbnAxR2M4azlWNUJOdU1RMjFZVWFEdWEwdS9lbktVa3ZVSmxrT0pEeElIQ2VwMDhxcjl4cnRVVHUxOFlpMjFwKzJJenZ4cUVSREJiRjcxbnZjWElOUXZvZHc0TUpWYXVNSjFYS0VzODdMOWdxa1pISW13b2ROVTVXYkxDcGNtZUMwUzhoWndqQ05CWGw1TnJyTzBBeWhUNkVVVklIeE52Y2t2YXRteEdiTDR5WWJCMXV1TEhLNWsxa3hiWWpqYWkxeDBIdGdIS3ZtNmFSVUFJdTNudnJMeFdxV04yUm1rMkZNZ2FadmpPUHZpQTBCek5tQ3ExaHdDTkN0MHl1TWNDaFVMUVM0c1A5MzMzZU9WajNVVGZjLy8ySGFFS25SNnhUdjdTZTl2WWF1VDZ4bnB2VVpKLzVBT1FxdDZocERLREtTclhYZEYzbUMzUVBzcm53V0l5bzdrRTl1SlZlVlR4Ky9nZDFxcnRtU3RKK1M1K0NJbGxicmJyRUVic3RFU3NvbVQxazhSZStwUGRIVWpqSnFBbTVhQ1hwSjF4N0dUUm1Ma2U2eEt5RUpKeDJSbXNhT25JMG8ydXB5YmZ0MnBYSkJUanpaYUpyTkMxQUlkaVVtTXREVTdsdzVlN2NaaUdZNi9UK2RDcENOcmhpY1c0Zm85TExiQ2gwRk8vb3g2TlhnekpBZFRMRjNNSnNHSWdOazRzQi83K2JrRHp6SDFFZXIxdjlwdzFaMU03ekx1eXhRczliVUNQekRZSUtCbnZHcXQrR0FFMHM2ZTRvbUVjNzRqTlRpT2VVN0xMN0wxcDEwQkhBSnlaUFYrOE1YMEQ3M1pTd3dVajJ3MjJPZUJUVU12bUdEcTdpbndpZ0gyS2pnc3FWRmtFUWNKRHd1amlqYXdNVGtPRHQ2N01FNS9mWThKQ3UxUWV5dzlYWDhGckd2OCtwby91VUJjQmNWak1sbnVicmpucVZqb1Vrb2s1Z1FOb0d2WUZLZGMyUktnUHd6WVZkUjVKN0Jjb3E2bnJYdzFQcHlERUFwSTV3eW9nTkNpNzlFNHRCdDZEZy9QNWxtZExXdkxLa0ZTQndLa2lhUUNSWExiV3B6aXg3VVlIUnlycHZoTlZ5cTdidW56SVdtS29tV1puL0k1ZWtRL2hvWmpUaCtBV2ZjVCthOGdhenlyc1V6NlFsbW9reVZnamtpRUJyR3JBbGxoYmdvaWYwSTFwcmVmb0hUMWo0azVjRllHZ3ZrclZmVTRCNmVYZWpraDNEeXlTeGU2dEN3cDlTdE9QYmlRYzg3U1JFZ3BoMVVhdE9ZVHZyVWlCZGRwdkw1c1Y4ZURqYmRmWlErd2l2MjNkSFV3OHhiS1RXMzVjZTdYUjdtdC9WWnNFTkNyUnFJeElaQWxFSnE3ZExGWnVFZS9jbTZvSk1RcW9RQVhDVHhMaFRCZ3N0eGZlOERSeElaZ1BhMHlpT3RxNlFtNUwzb0xqRXpVR2xiR2V2enlvbWh4c0tESlBxb0kvQUhnbUR6VHo1SGFKMXpEUVpORS9MRjNiZ0xUWXYyWDJpUjRDRFFHOEE0WWpQTmtjS3pNRXlsckJqYmxzQ1NMZFBDQS9wYUVxSkY5MXM1M3A5WDZ1aE81WXdLcVl6T0pFNmF0QTdkblM4ZlVnSElQb09ZNFBjbGF5QmZuOE5ROGdHRkkxQTBmMTlhdi91SWwvU2NtYUI2VUI1MHJDVGRXZ3dGRllNN3BtU2dCaSt4c1p1UnZJc2Q4Z1hNMzI3Vk1zTnNRQnh6M2YzMHBkOEpVUXJLcHFmM1kranZzaFZoeEhUNFBzQ0ZQYnhIVy93WTRJQU1FM3JSa2o0V3hRU3NsZHhRYk96OTI5TlppZ2NFZFd1ZUNnMHNBRWdrWGZJUEg0VHVtSXVRRmZOY3hySEdLNzc3clIrTXphbjl1S2JKbzYybHZJWE5LeUN3Ujg3WXk4YWJQQ28wYnJ5MU1PYWQxWlZrQUxhaU9aSHJZNG9CRER3MmY3ZVlIT2c5cHZRV053aVNnK2lnM0krbmw3OXVSN05ZWWVseTZPUVFxWnFWeENYUE9kMExEYnVEZ0RjVnhGYzNrUnBXVm1sMk5RZTEvTi9iL0FvZXU3QU9RY3pNVlJMNDJVRXJ3V0JrK2RUSWVCNThqYXhoODcxQXFqY1c0NnJ2NW91VXd3bmVpZUFLV1NGMGxoVGFkbThrOUR6NHJxbzFtZHROSzQ1U0x0U1VtVXhwV1RkeVlSN0pSZ1hjeUZwS0F1dmVZSnkzWktaUFdQNnV0Q3NxNE1NNmlVYlduN3dUUHRxL1lzZ3BSaDR3d3krYkU2TkJyZFJxaWw0dFlERHhyVWx3ZGZVQTVpU1h2czMyaDA0d2RjdTVTdm1FRWsxby90K1RCRktVVVUrbFFVQ0N4QmdYcnp3N3U0cG04QUJ4NmdJbldCWVpKTXg3bEcxMFZlNmZjSm85QkVXRm9ML0xYcG5wL1dzbDNHcCtoZGd2amxMbXc2eXJYVW9mbVFWY1NjYW5iMFRlOVcvRUdmdEthZFNWcXlrYXN3dFA5aktqVytwT1crQnZodGEwWHBlUkFXSzFaUHUzSWd5dGFZZmwxYlZUd1VnV1ZXMHpFcDBmUFBHYVZZdjhlN3NIeFJpeWU1Tjd3SmJoSk1ITVQwbHBsTGJQTlhmdURFMUx1dGxzcDFFclhlU3JYWjlFR2VTZnE4ajB2U0JCQTIya1VhNkR3bEN0MTVkU1RMWjhMRlVvQkJwbE8wd0xrWmJlQUxEMDJ6bmZEc2lSZ3dUd3U3TlhDUTF0LzFKVHR0Tks4Y0JETXBSRmxNRW5semZ5WktqK1p6N0hwdVVzSlk2WEczdXVkZUpWVi9EcjlWS1VJdXhMMUxrR2x4amhleHBLcXBHSmtsOS85SE9QYXFhNUdFSThpdXlHYzlXdzJHSjlVdXR3SUo2Q3U4eGR2b0NvMnNVaUZSNVBxZFlpYVBOaUZsNmJmd2haUW5jTVUvYzF3OWxUTTI4S3V1NmpHQ1pFM29kZkxpbjNHR1JEZ0RUZXk2K2NNajByREVmbmNvUDdQQmpYQWN3RnQwU2pVUnBsQWxJbC91OGFzL3Z5L2QrU1RQT1l4OVBNd0xkeWV3T1g2dTBwMVJJczBpS3VoNUlRSlFzUGdZb1lac1paaWZZaEZERTEzOHZtUmdrSk1SUzJkS20wSHQ0U1NZUDZrcThuN3RHZXdmQnJMd3hqa0czbHBKemN4WVovdkI5ZjZWR29mNmlCYU8wT3VQMUZSaUV5eGZhaTZzNFFYbnlMS08zdTlxNkkrNTJ1ZDd2emFzZU9WbGkwU3hZUU9NcFFxNDNQSGNHSy83WXNiUU5Zb0xtVlhWdTVHMWJTaHN1NldDbVhFbTJIZ1Y5WForczRZQ2JxcCtLZjQyNVIxWDJIblFGK0J5eHVUQ1V1NXNSYW1CWWFyVWFvTTVxZlczc0ppUmtmeVR0ZktBWWVyaVJSYmkrTWNpaWFoblQyZTRDYkxHLzhmYTh0M0tsU1p6QTFkbllqMENrVzlNYXlDMHVTV1IzWUdrSitLSFJZK3M0QjkzSzcwSlVlY1BTUEg4UGxSejhKdHh5cFhYcGJxc3NibjZobUZrY1dMSzE5TWEwQndlKzJncndsTm5FWjhZVEc0WkNiSUNmMTdzbWZKM1UvY2tIbkZGWW9mSU5nUlZUWGpZSzFQTU9VcExPN0ViYkZHc2tuNE5aMmZ0TzVzS2F1eUpBVHlaUCt1NG4zQmtQUkZSV0ZvZDFIazV4TDB6VVZObmNOTTVlRDUyQUNNaUoyUFNuRXNma2JNSUR0blBzV01xZVU2QWhqZnpWS2xiS1hvbE5JdjUxWThVclRoWit6WG9aN1JjQVY4Qm1xWGFGcnFNWmVTS0FXeVJvL1dRYnM4ZE9UcEl4UUVKeUl5czhmUHplSFgvSSs4RU9lY1ZsTzhvU0tzZEZJTSsyS1NCeGg4ZWt5SlRvUGxMUzh2ZGFhdlN3bmUvcWdxellHM3FvNmpFM0lITjE0ckExWUNGNk54TEhoc3NtVmgxNGJ2akFCelViYWtDV3M5SVYrL1NEVHpxb3JjWjRUVXRsam93Y2FEbFloLzFXOE1ldkErUnFZRnRRY3h6M2pBSU5KVHIrVnQ3S3ZqUW1aZm1tMmxzb1ZrL3h3YnN0MS8zczM3b1ZKaGY2cXJtMGc3ajFCYzhOZ0VHZlJ1ZzdCNkdXakZEclhON1pZSUc3OTBwWjN0NVpYeUp2RnBKZmpPQ0QwQjVxWUJQeWJsSmZHSVVVQkhva3ZNM0xUSzBzREF5UFpCaHUrU25oUnJ1V0pkSm0rdnhoejBUWDF2OGdEMkNMZzBBQXBWYXBSUDFWZS9kSkc4c2FETGNQOGNvN1dmUW9aZVZlUG1QcUk2VGwyYmk1czAwZFJtdDVscG1jTjFIRGJRamdrZ1RDbDIzeGUyak5Wb08xM3hkeDNKVmk4c2RGaVZWK3JkZG9Ycnc4azVLa2FLY09aN2tKODFLSzY4bzRWQVhLcFpkQjBrbFRjVXZJbnIyOEZyZzdpV3Q0N0dCM1htZldCNXVqQm9vWkxhVWxQbXNodGZveWZVZUdHRHJBWXVlSGVJZGYrV2h0SWl5UWt0ZnZGbVlUaFVGcFdYOEVvcE9Hb2R5VDNqbjJYTURsRVZDWjJCc0wxT1c0ajhsZ3RvdFBvVklBU0hIQXZoWHBoRnAzd1JLa1JDbFRuUU9MT0NYQkV5WHVMSjZFL3c0cEpWTEs5NmdhcUF2eXRaUTlkaXU1TVRUMmV5cHRvcW9TQUszYTVOMWY0RUhHSm5TUXN0cDJPMUxoV254R3ZRTDBkUVBMVDBRVWpoMUozOXJTeTdyMTNpczBBSFNSaG1xckFZYXRIZ1hNbTFQWE9adGgweXJMbVlhUEdPVXE2eHZGK2FZQ1Izd0QxdDRpSkdxbHhRa2F6bUNpRmZXQ2RYUnpxcGh3UER6MVBhSE53OWFOSHNKeDdqTFJTbWptUkhQbWI1TGswSTJBc09RNVVFbGFDMkNoOXREZElRWUdDSGJuNGJjWVZMaEY1QWhyTStyekpHUjcrUDBOcERndkhuRkJ6M2tZKzdMc2RJOGM4UW9GV2lycUpqYURXNG14K05LL2pIbFZtcCsxbUg4TzNvQ1laU1B2V2xjakFQOHhTZkUxZFF1VGxmdk13VmczZy9YZHpJK1BJSHRpTHFYQys2aURtWmZkT05PTmNoUmE4SUE4Q3B5NkdoWG0xaVo5bnJKSGFZRW1EUTRRUUduMGhkSGo2OFk0MUtRWUhJUEtaTnRPaUJNS2R6dFRsQkpkZXR2dE1CdFdJR3ByL3dTc1pQOTFZR3VkQ0VlMlpOWGNUMGtiYUkvNk1tbUNXTkxWWm01bVFWMFBkMTNlTHRBTXdHUll1M0JPVW1FTzJDenFHaFZhRElrV3RFRVdlN3RBbTRmWGNtWXBFTGRWT1RLNkk2M3NyVUpSTWpRd1htV0dVaThnZ1UyVlNGWWZ2UzJWSmNFV0pvcmswQXA2aHkvU1Z3ZXY5bWpUSldvYzUvYUtaWld3YmRnUTE4Njlvck5ORXdEL1dMKzlONTNRdGJmVlVPQStaeTFFOG9qTGFBd3lCbTlGbzBvYlRvelkrVVRjWUhWV25hSTVGdWVzYWtwVmE2M0I4bXF1ZXFndWRlVStPK0Q2ZkYxTGt6cW02TXk5RGFKYjZaQldYeiswS3Q0MXBtaWR3WkJ2eE1zRnZuQkpJZ2Qzc1A4RDhuVUNaRXJ6Z3VQYVJvZFRJMng4WkJHNUE2NDhrWEV3dFBkeU55eHNtQ1RLaFpGaXNYSTVsSlpuS2JibmZ0dEN1RDhvcVNLdkV1T2x1K091SFoyRDhDVHEyRWJWOGpnSW8xQTl6Nit4aEpGdy9aWi9uV3pRaGZjWTJYOTFRckpNNmN5VjlVcEE3VW93azRGRFhFN3gwc04wdGhZdk9vcS9NbGZIUFM4NlIrUmQ2ZTYxZktPdmVjRlNxdGhkTXNzRXEvdVM3bmxyZDRzbGZVRW1pRXEvUmRlWTBFNTNhMW9NLzNHeC9UNmFyRmlpcnhKSmo5SERLME4rSWFGUUdoaWYrV3l0VGhZSWU4MFdDZXNrTVBZWjNuWVcwb01wU2RTVk1wVWRyR2p3VytnVWpiNmg4RTJXak1ZNmJ4dzhrQzRiYlFqeHhEMDlZc2FvMHNFWGI4MlMrL2hsM1hqTkM2M3JoMmNzS21jRmZvcmxFL1NrMHRmekpzR2JZTkI5ZkhqNVliVFdUczlranppOGtYZWpoTCtOeDluaHJkR1hGbHkzdmxlOFZIMGtXdGxZaXpRSlI1RkFqRVMyaUxUSmpRQndoSXQxd09CM1JKNGtYalNZbmNrVXE1V2lSQklBT3ZjMGtUd214aGVObW8xejZtKytJaVRZMG95c2J3aWxaalZsU3hXRkhSZFpRMkJMUUk0Ykl6NG1PYVIvbFk4UEVqTXNiR1FYUXhaYm5ZVUFkZFNyLzh5UXRnOU5iV3NvbXdWdUZpTWptanhtVmt4Rmp1eFpoV2JhOXEzRkx5RjhWUXBWTzM4WnlvNEtaQzI3OW1NRkZNRXZmOXVGMXNjU1JVSWRQMjNsOG9tcVZuOVBYUVgxU2JpcXNTUFM0cFNrNnFBWHFjU2FiTjRPRkFScGlpTDhHZ1p5WndZYVJ1aDhxeHhPZFhOUm8yeXJTcGUvL0ZVUjVRdGZZQ0FDTUkvenJsTlB1d1pNZXFXbzM2ZGlUZXpwMDN2ajlOYUR2SmtUZFk1dit6M3FGUGpFY0swdFpvYXBpdzdRdk1jUWxORTYvdlc3cDVKVjlwa0h1VEsxTyszSHp5SFN5bExRUEFRTlRQaDRZSVdWWEdJSHpuZkNRVW03UlJZNEZMSmtJYzVNWkt2RUllTXNjdDEwTGF0b05lTm9nY2hqUHViUEJNc0RuYUNBN0xycWhobEk4ZFdRZVY5U0FHSjc0ZzB5UEJ2cEgzTEd2WkZQajBzS201Rlc1MUtKSXdmaVJhRVBsR001dUo4OHY2RjNpVEdoWGk3ZWpSOWZzb2RGTkdhN1hQY0lCQ00xMGpBM3p3S01NYjFWRzBqc28xcGtvNkh0cjBHSUJVTHBmLzBBbHR3V2ZtQUwzb1VCZ1FLYUJKSDhPOGU5dmRGUmpmVWptTVRUY0EwYTVyTFVqczBHV2NIdFVPemV2Yk1SYUhSVHY1OXl3Mm4xUWYzdWdyVDRoTk5HMjRTUjFQTDJhNmUvZEJiTkpBWWVUVWJhd05nNThCMis3d3hEdXh6VWg0UHdpN0hLQWQ4QzNpUTFnWnl0bWZwSVNHSEo2YlV6TXExSjVSU0dYUkRCdVVjRGFoeTdzcmlQeEJ0VEV4U1ZLY2tKZWd2YmtQaElXQlBYQ1JFamtZZ0s1NTlFVEsrQWNEM2trYWxKNTZDS25UamVuZXVta0o3V29CRi9IM2FYZWJoTzJ2RlJrL0pBNC83bCtCVmJUNlM5VDRKSFgyZ1ExU3ZtSTBMZ3dvTmlOUFNmK3EzQlBxQStVV2VDWEc4VHhyTFJxNGZONEIwbTRJR2wzdkZQL1gvZkw1dlZPSzVyS0NBbWt4VS9rQTE0MndIVm0vand3ZHVUMWd0QXFobGNmVTlGQUppSDNOcGxXN0Z6VkZ2N05XM3RPdG1xSFRYNEMrdTlDdXJGRCtENVg1TDJscW1WcVJ0aFFTWnIvYXk5aWZXd2Yyc05UMGJrb0kzTEhUTUJiRFFmVWNGQmpIRzVxM0t2U3ZlU2IzL1JLMjJkOG1FaHBPSnpvRTZYaFlSZnY4SkgvS2tKS1BsTklwc0x5OTJ2L3FRUm8wYTVGNDFtZWVBcVlRN25lUSttM1lGMWNNUjQ2UDFlUW9yZGFCT0Rjbll2Tk1XR3dhZFk4Y3UvUmd0RFZsTkliTmJQK2lRUUc3SjlTMGRVejR4bXF4dlpWY0xIck8wRFE1TzlGM3Q3NnRDNkRNUWpVYVNISkZBRFF2QlN6Ymd0anNwMldxdkdvSnBUaE9BTTE0WmpyT2dmTWhZWG40bmdmeERzN2RDR3pGZERJMFBCV2lMalZLMG9rK2pQUzB4Z29PellJbGJwMVQra2UxZDYyampVaGk2VGc1enlQd2dIVy9iRE1Qd3BoTDdDZUczdHd0SHRpdENlL1pidFFlYVduVThOTUhvalFDUklHUEJQMVJDVU9lS2Q2UVhwQzNZWVc2Y0xsbU5pTkQvd3hnQS9pZm5BcGpHU1AyYkNlZTBDeUJyQ0d2SUZnY3lHWTJleEltVWdCY2YrdFFLdE85M1VTYnN3WGd6em1WR3ZLTkhOVFJJNEowVWZ5MlAvZ21LQ3lCdk9BYklwOTdGcDBUWXFmOFdyWDkrQlF4dW03Y2tQRUtuOHl3V09ycUlNWE5nV2VEU1B2b0I0VlF1T2luZzhyMFBxK205SC9QNTNkVkxCb3pFcXQvL1pMaXJsQ2E0N05xU0hnektjTXArR3YycmNSQUd2WDlISktibmFxYXpWY3JzSlJjbHVQL3hPQy9HOWl6U3dtYzBSck1lSDVJbUpwN0lEb0huZGY5RGo4TDYvNnVqVCs0WE0zeG5IdmNsYSs1amc4N0o5Q1AyMWVtSWg4OHlPN25NOU55KzhpZ3MrYU5kNEtXSmwyeTFpVS9wRDU0SUtTeDNnZDNQbEhiQklPdExma2RuVmhYMU9lQVN2QUE1Mk9mUEd6ckZXOVozTTJtYWxiWWppNUxjOTgwTVBDa0tUUFBLakpsYmFpVU1WYXlaaGtaL25XZTIxY0JtcmhzWFUwNUUzUEhIeVpjSFU5SFJFMFY2djVkcHQra2ZIWEdTUkVSc28vZlhCT0k4Ry8zZjhmcWpjeXhJUmVOMWUxZ2RDb0xxKzRtcHJPUU85K3JzU3J3eEx6ZktZWHl6Uzl2YXVGN2hGQWpiZlZTNDZXV3BZamhMVFRzWFlrUjEyVTVScWpiWnA3ZjMvbGh4NUp4dUxzMFA5VHBuSkZLdndyRTFMVmJ2MVBqZURPQ1kwa2RLbDk4MEVIUlZTNGZlQzQ1ckFKT2ZvWXZsSzNCdTNkZDIyT3E2R2JxUVZvWXRQNTlhOXg0NThhMDY2Q1YrSzAxNDNybjZuU2NqdWg3dUlEa00wcWtydzkrWktaUTZWSHhNVWpMS2pDSXdWZVdrbW5PUHpLb1VDYUduOXQrV1oxN25jd1l2VGtYRm5USWwwTUdPcW1yL2FLNFQzS0ZERUY3VHVibXZJTnJkUFNjSjJnbHpqd3ZEdytlbFJ4OGY2bGY4MFVXcVlaeUkxV0ROMUlRLzlrVzRndG82TkwzSTAxdWNnRnpkTllhUjVreFY0WHNEMFZLckx0TDRoSE10S0FXNmNqbHREd3ByblJUOFZJMTE4d1pJQXk0T0NuNDRwMlhtQVhGa29zNlhLdWVGLzFPcm1Cb3Q5YVBkRzk4eG5VelNYVmZBWFF0MDloUjA5OU1NajNqN1Q2NlBiTHJRSm9Sc000MjkvNDFZVzJBRGppUFBHRmoyN01ZMnNnRjZrVlAwZkd6YWtRY1dRaFU1dFZTRk1JbzhNd1dYOTdQeTY0SmZpaEthMVUvQk4vOEdRa0FjYlBpTUNKSnpOcmE3UEFrZ1FuM1JuZUVCYndhZFk3SmFMZk9wVjVia2xwY2pFUDZWcFU0YVl4akNhQjJDTmFJZVNRR1hsVWpoc0taQzBwamZybHNZM2xzczBJVzRyYkVnWVdoY3BCZHdvNHhTNDRJYXJCWFVMUU1RVmFUOVNuc29lOElacDNlaGl1M0xUNWtoL1FDUUcyL2tUN0VqU09CdlpxUUl4aVJBV3laTVF5R2tMcFJ3a0ttR3lUU1V1VmU5bDlHZmQ0M0FQdEROUk5wcFdQWWVNWVBBREhxQnhiR1ZOK0FLcC9IdnlhK25VdVJFeUlNOWRkQnBjbENCaUZwWXdKWjRhazhyMXB6UkpVTDI4NnFlSDA4T2VoZE5Kd2FDUW5rUWwvQnplVTNHcUhSWm14QnNhWmZvbnpkRnRmWGkxWTFBbVJ1aVVSaWJxMVBHRjAxRzZkU1Y1VzJNSWRGRzNPZkRWK0FEc3dTZU1sTTdkU0QycDkvUTBOZDhrdzJVLzhVejNzeGR5dUYzam9KR1I5NVljdnN1MWJUQnlSQ0dYR1A2d0xMT0pINUE4eG0xT3Vzb3lpRTZ1STFqZWh0dkJBcnpJNm5jbzVJeUJ4NHRQdG9xQ2czc0ppVUtVMU52WnA2RTlsK3diTStsbkIxWWk2dkdKZjA3SFhiUFFSa2pDSDBzcnowQ3Arc2ZaVm0rNWZYT2JIOXJyRi93YUgzQXArTmVlRkJTbmVOOWNJT1dLMzA3MHhGOFEvYTB0cEpJeHFHd2dvYS9xbyt4TUhWQXB5dVVIUlVCQ3VDZUJLdi9jUlk3Z21lZ2E3cnR0STdhVW1JaW1LeVZHdzc4UW1OeFkxTHBuYXUxbklEaGNNN3RIZ3JMWDU1V3AxQVkrR040OTRkZW8wOEdmblZzdlpsUWlBT1JFT2plYjZKNWJmOVl1NTJTNU04MWxqa3V0MDY4ck5mdVBpak9mcFh6aFRlUEJxY3JlRHdRcE5uYTB1a0tMemFmb3RmOUxYaTFTQm95MUlxSWVLZnVOdWpGMTJBUnpBcGlnb0FQVUpZZTdRWm1UUks5ZklVcXlrMmYzMmhqVWZGWkI1N2dxbW51eWhrVVMwWlRrVnFvNVNxMHA4b2NCVUt3eDkvM292dnhNcGtVQUdlVXltbTVJVUZxc1Uwd1ZHMGJaeDJRN3VQUWMxRlpoNFFvbHVkNFdFeWhIbXA0bnQrYUhNZmFpUlYydzBSSjZDUUMrOSttQkNQQ1BDV3NGWDdONzRDOTg3SUlJY0JzQzY5NDF1dEtPamxlRHUwWWFKaHVtcFpKaHJKS3picU01eEptbDNRdk02a1hyZG0rRElnRWVYM0FnV21DU3Z2VXdQNWplWWtaV21oenpWNVk2T215bnJrN2gwaU83U1c2eU1ucXRad1E1R2M5ZTAwYnh4T1BrMXF6aGwydnI4M3lhQVFjTHlYYTEwMUVKc0Rpa3BTSmIxdWZZam9sYnpLTFNvZGRmZWlmOE1QU2RwdGxyTGtBYldTSlJMdkpCMVVzSWRrMENnVWpMTkdxTW5uZ0FTeU9sRTIzMXhvbFJ3UzhpM3pGZHNYQit5VkI4V3ZEVWJiTTExcjh0UFNHRDJOQjNzUDk4TVdLb3FIRWlhaE5UdmRHRXZJQjJpNTc4Vk5uTWdCa0RETW1VeVZGZXpHRnFYbktEampkeXRwSWtnNmFENHVyTVdkb3gvRm9rOHBBbFpheEtId0RwbnB6eTBPSUNTRmhrQ0crRUhoVVUvQTlmczh1NE1KS2cvUlJjR0FiUGI0d3h3TCtmZU9WODlMYXVLSXR3L1AzU1dhenkxeDQ4bGlyTUUwa2NmbjZMQ25IeTFVUU5UZisyUitFTnRXQlZ6WjFPaDhFb3lTTzFTY2xPZU9vMW83WnBQUjZDdkNSSEpOdWZ0Q2hIRXp5TnpYRWg0eGh2bDFCL094ZlhKc1U3Z3RLdytNODFWRDV2OVBjNXRZNkJRYm4zTk04aDZjWGI5V1ltdmJHaEZXTERTcGJmaG1ublY2UFJiaDZvanNpRVdxN2dUT0VNek1tanJIMVdOR0JXdUtwQ3I5M0NXM3QraDVzS250elQ3Z084cTZtQTIzdHlVTWlRekp5bE03QlRESkVKT3FGc3U5c0w5UFo4TnRQeGxLWFZWZXoyL2NwbWkxWlBwam1ncm9GczFxQWw4RzdNTG8xem0zS2oxb0N2VTlGT3Ywa1plcnVmdHZ1Z1NLRGFBK1J1cUlrRXMvc1doazgvVHUvSDdSNDN5UjFzcVUvTnBYb2d6QVZEUFNlbG11UE91WVpCZm10RERpSDI4RC8ranQ0aTRlY2lTY2hXRzh3VHZ5Mzk1VktIWlo1OVdQOTZpNUd5VjlrZ2FHdDRwcWltZ2t0Q3Z4TXZlNmhtcHo4OThZRTRXQ1NWTnhhUC9xYVZyRldqUDgwTmVEK0FkWHJnck5PbUYzdDRGQlFaZkRrdXhoNS90VEhCTE5KaTJQTVhGb2F0Z0FwS01lSW1zY3o4QzlqU25lS1dPbVZ0M2dGdG5tdlJMZWg5MjhvUkZhbHhmRUkwL0cvWVNxWGx5aHRYanB0TWIvL002VVUwcWFIRW5iNnlNMXJJeU9xYTVvazRCelBJVWtYRW4rZE9XYVBtd1pUSnNyaGkzVFZqdUQxcG45Y3pmdjEvTGFVczd1NERhQWtoRlpFYU11WGxEV3NlNnNtQ01IQlFQbnlVVHlnM0lUWklxQlVsNjFKNnN2OVpHQ21oVG9Pb2FQN3hVZWJUYUhiaEVVZmROcXF6VWt0SjRZaTJFejZIbURrZlgyTVJSZXkxelpNSWxEdzRETHRvbE5NaVdCSm9qUFlkbWZLNVlERVhqVWxpbGtiR2tucmlWeHJjUk5zVlRZK1BWYzYzblA2VFcyUkYvMnFCWGg4cHNJQ1NGVVdpVUxjcXBzNXlqbFJrRUJNbUJEWGVtekNiM2ZabGZkaUtxcTZCcHdqQWNHQ3p2YS9MNlpsZHlRVjJWbEVNWWphRzRFNVdYVEVXWkMrSFBQWFNtdnhZcVRNamlrU3RDdXNyVTd4UkI2R3RUdWRJdVpaekJNUVpnenUyR09obVpMbVBWZGU4UmdjbUZTL3hZcGRvbzVDZVVBSU91UzJMTkJvT1BaR3FVcFJqK2s5Z1A5VUdqeStTNUNORFVPUkF6UzVFWHBtV2Y5UEhiUllPbmc3bTQ3RUEzVWExSGEzSGduaEFKZFlvU2pjMXhUNkZIcG5UQjZyZzRuS1hobTZkQ2FXQzhoaFEwb0N2cFFrcFVObnlYS2dNOWpsMXNzY0lzd3ZXYVBlZ0pGdzlsWGZSMzVlaThSM0REQnJ6OGJGUHhnNnlSU1RiMzhNVTJQRW1xcUlQb1hpSmNxWWFmR3lYbjFHOFhkbGF0S0xUd0gvcUNtRXRwalNKZk1YVFhVcS9CTUVFdFJiM242WFFERnRIWDlRcVJqbGpPNE02cTdBbEtReHR1VnhyMlg0TmtKN1llMEIrNjNoT05QRTFXODVtZ0hSSnprKzVORktVWmI5eGladGp5Z2V1QU9XL1VuUzMzM0pmUko0VXlvTzM0K01qMitqcWhiQXk5K3VNdTZWTTNKKzltdU5FdFdBcjJIN1VkNEFVeFpqZU5rZUJXODlYUi9BazM3YXZZRWZZdXg0dzdHcnBiaE5MMDY0a1VKaTNpU0ZxVEw2UzJwNlN1cWZpcFR6YUtWUVJiMVJIT2lJbVR3RWR5U1B4TTVKVmpFSS96V0duN2tNL3ZUNTJjaVRiM3YwSjFiVDBVTkxXQ0hmU2tSTDZSK2NWZ3R3eTdBcEhPdVJheDIyd2xKWXFEN1RqOUdZS3FHcGtlKzZSVDUyRU1xdDNCdkdOUW5mQ1dHdjAyb1AwNXpHZzROT3BRZ3JwWDh2bXpOMWRNRGhjVDBpME5VYXlGckVHYXROU2hlZTIxakJXYVBlMDdPSTNIVGI5K0RJZkdlb010Q3NsbzlqSnJVSHgwMTZTUnZOL1ZQSVc0Wk9jdjBma1gzMDdMODBKV3NjNE9ldW1DK3g2Uy9oRmQ3OFR5b0s2SlVTTmp4amJwMW5VS2xiNDFaQlNQVWVUM3JmZkdjS2ptMk0zUlpkUTdQRE5UZDRacnptZ0hjMzZYbG45aTZwNzViaU1KUlo4OUxDbE1kQ2dUZk54UFJxeWVEUUxnOG91Y09WQ2tsRGJPbFJUS0xGRHhkcFpBUVF4U2tYSDJ5V1l0alZVMG0yeXlCaWp6eEhRQWJhb2RkQVZpaTZUd3A5WG9TRXVnK0ExYjFmKzRKeG8ra2ZnLzRKOXN0NmdkLzV1REdxd3RpZG5PSDdQRVJCb1V5aHZkVi9LTDFua280cG5lMW9udFRsdGR6TWFnTE1MMnkzcVNkb3FGdkx3anVEdVRWeGRrbDNTZnBKZ1JJQTJManorRUN5TUdiZnloazBPTE9IUVBhVGZGQzRzRldCV09iRG9zRkN4RHV4ZlRFQjc1aEtIbkV6dS9WZjNrVkV5NlBQZUZrRmJ1Z1R1SU5UNFZNdGZvVlZxbGJjcnNkUElzUVBVbWdaSFNQRzVxeStJdFlKM0loRmtFM0dJTE1CaGhacmpiZzFmWGpJelE3ckRSeU1OYU1TdHRjb2FIQy82c3Q5SWJ0UHJUQVJNUFhwWDUzVlIrZ3BoOG54K08xVktJU3VDelJaZ3BUTUlHcXpDNEtoQW5uQXpuT3Y2b3FDdmtCeFFvc3ZreDdZdkRlZTc2c3FxM2dWd0dCSFVxaHVxUnJKNVlRTUFDRmNZWEVibnFQZ0F3YTdzQWtNV1pCMnhjc2U5UDlQSktiSyt2dmpOQ1BmUm1CeGlBa0hUeEc2ekZkQjFMb1oxbWZoenBOV052WHpHdGRUSlN1Njl3cUlxUzcxanJqTnBxUFBpNkluTk5nRjZpUXhKT1prTG92dGNwNTJ4YkVIYVY0S0QzbzlvcGtLVnhNcWtLZ0crRHJlTXBLUWZyQWdOMWNzRzRVN043U3V5d0V3b1I0ak5BR3p3L0RBMlZaTVhvdmV5TlY5Y3FqUWpsYlZjMUVPTjFRYm1mMW1Eb3REc0FXY29LT2FURTkybWdmVFJxTTMvbDQ5UmlpNTNHMHJwSjl1Z2tkT3VwRnIrV0VrSzNEVWtZS3g5dHhUQUo1WFVPalpZNGVYVDlNNUlEalRPdUt6RjRjK3o2K3ZxaDJ0NXEydkp3enVIdkhQTHlBajZNbkc3Z2Zabk9IVjBOZXh6OUt5dDZrMmtNRjNPdUdkRS9TNE8zMGpKWFZpcm5ZakR5VE1NNHdEeENTTTh0MWloSzMxckdHbXZ4cllPR3BNR2phRXJlSTgrWWJHa0xoSjJtbUdnM3FnL2pTd1lSOTkvM0hiQ1ZheDVVaklKMkFWOVo2bEYvQUZIeEZaVTJ0bEM1NmxTOHpSOFZNUnBiaStUVktjL2NHVG83eUxwOVNyQmUwMDNEUmVrT2FZVmlDSVlYZnNidm4yRjVqV2E5YlAwelBwazI0b0d6c1B6TldSWERJSEpBZTFNeFdRMnQvTkdJQ2tSTHlrSU9mUmF1U25scS9NZHNzc0FaS25jNys1eDFQbUtMaENPMlkxSW5BTWkyYi9mV2NBNStSZWVVeFVNUW04bGZuTHlSalNiR2xQbnNZMjVZM2h0U1JsNFJiS1dnYkRobE0yODRvWkdsOGpkSkFvOHphbjlnZmdtZTlTVVV5ZzVrdWF4bHVEYk5wWDhTcWlFMVFGc1FtakhuZ2gvYlR1RDlOZnJMODNRT3BQakw1cjFlUEMxZVV1ai9leUdjZ2NsZVVMUWw5N0JaTHNycjRDOFpHRklVZEFUci9oQ1pabUFvcXF5djB6ZmN0b0pya1h5Vm5ReFNUNDZub1BObWdzM2hvMDdWZjQwbmdzREZ6aGw2dnJxV29FYS9EZnRISHBjVE42N2Zwb0k3QXMxQmpwTmhsTEV0OXJYZDV6b05Dczg5b0FoSU05N0N1NVROM1FPelZIaFJPM3YxUmVRMzdOdU4ydHdkU29xUHZ4ZCtTQTRyQTF4bkJqQW0rQk9ZSmIxWFd4K1FGdzArOVlVZlRYNmlwK0hQY21qVU5kOGcxVDRjQzBpUDdxc0t4aXR6TE5WbWVPOUpoNGh6RjVCWE9WZ09UVTBWdnBJL21JY1VtWGdRYW9kVTltUmdtTVJSUVE4N00zaWNXVTFGR0J4czEvek1IejdFSVFtTGxSbW5QS3R3SCtyREZONTJJWHlBSllQUTFOMDZuMEdHVW1qQVk1bDBsT2s4VXdxZzdySzczeWl6ZkJwc0ZyYUw0OTJYbnp4SGZDSzVRTVExclNzNGtPYTE4ai9GK1QzUzJwanlBb1BURGxSK25sTVhGamx3ZS9ZNURLamU5SzhLZ2M5OG1ROTVWNjM2d201U0FtNkJJZ0RjWERweXYxdE5mQTFMUkZRbzJFeHo4aElaL2d5a3F4Z25FU0Q1K3l1QXdiSjVUS1BLWVM0WHM4bzZqdXo0OTdtaVRBdXdCOVZBMHJrT3hVNmRERUVoRnpYcUNTbzR6eWxqcFFkZndUc2wvTGxlTlVkc1FZRmw0UnRYWmh5MUlLOTFubExDVWlHQS9jNk42NDY5NHA0MVVtYkU2Qkhra1FqWTNVMVFQRGovdi9od3IwMUxlMlBLc2pQTFFtTnV6dURPeDhYbXE2YVJoOUJIVkJsL29RVG92VzhkVXI5TXY2YkhCTUo5ZGcwcDRMU3lTYUFWRG5Xd3J0dDBDZmRyQmdyeFhKaVhLdjhDcXUwRHBEaXEvY2lna3NNWkljdlZZMTJIV0xucVJIU3ErMUx5eHdJQU9JcHZ5ZldIbkJCQW1CclZtTnYxSnNoVXVEb1VTRmdzbDR6dFB5Yzl0VFovSWo3aFVWejFQYzAxdmlYY3hnVE1JdU1GS0wzMmo2ai9yczNZbXhXSUlrQlF6Z3IzOFZGZWpsc1RBNmtIZlA3NDNwVEVuUzZuZFR5Rk8vUk14eGR3VWc5bkRrSlJvdk1JZUtxb0pDVzJjd0NqYWJXUE1iUWlGNGhCUGwwWnhnQy9Sd2U4bkd5S1VoVTdVYkQ3VkI2RVpMaEFhVWF3R2ZxZlk0ZVdEbTZZZVBPdnpiY1ZoeCs4bHFJZ0JWZFBKN1VZVnhPNDJFNUo0dzVpdDlsUmMybmlFQzZtMUpBc0l5US82aXZ4eUdhMEE2b1Rtb0hLQnllZFkvUWZiTTRDSHNrZ2hsUEMwQlVxMVNubFlJQTlXN3NEaVZCL0s3ZjZpQ05URFgvdDBhd2s0K2hlWFdsQ3lOVWN5RHoxYVJkN0h0RnBpNW9vNjMySitYSld6SzR2ZTBHKzFTSFFBZ1MwYU9pME9BWHJ2Y3FURk52RElQMGs3bzdwM1pFby9VWW5BSlZXYzROZFdUdWgrMUJQa0Q4c3llQ1lIUVZjbW1sVytVT3Axb0ZGcVZOSFp6OTNxQlg1UVdCS2Uwa0JMQVdacEZ3aGZBKzFTcWRDY2xxc3d3U1pseXlTMlJMOVVPVnAxR3psWmtLaFhxa0s5alJFNy8vWFRBWFJsb3dUMUxhZTlKQ2xCcWxZRk84NjZyWGc4Mnllb0lURGVuay82aENRZFRNeDFTeHk4WHhaNWh3TGp4SW4vd2wwZHN1Zk1FNW8yQUM2eFBvd0R0S1FFYlVzK1ZKclBtT3pNT05KVXpxdGwvZGR2anRpcDljRXNBeTlQb2txUldrNHNtQ0lodHMxL3kyREliZmNjQkJjRTB2RzhYUmJBbXp0SEZHbUVrWDY5WVdvM0xJQ3JZaVpacmNGYzhaWm9wR0VCTXVHL29OT296TGtCdFhCTlYyckUwcXJRODJoN3hXV0Y0WkpDY1JBRUQ0SDluaEg2a2NQNlByN3ZVM0c1Q09iUXNlcysvUjVIV3luR25MY3pUd0RMZktpbEx4YnFxVWxLL1JCK0hNT1Z2ci8yLy9qN01sTUVYbDJKTG5CWnFwVlo2c1B3MGE2bFNRYjZSQXJTVXd0UlpRdHFSNGpuaGx5WGdFS3E5THI2dU9Ha0hRaGxiQUR4M1BYeXBmSW1PS3pEL0xLdmliTDZ5dmZvNkl6QWU3NmNFYUhORCtWN1QxMDg2WStMNE5TL1k0enpXVjVDWVpaUFNzQXpIYnB0WWNNVll2SU92NW50dGZWMUh5OFNpTjZWZ2lXK0pyWjVOZGtra2lvN3ZUcVg0N1ROYmN3TnAxZzBjanZWSk5OTm42L2QvYzRTd1ZPUXZndWtPTmVoaEdrRVhxUk5Mc3lET0hjUWFWZUZJVnFCbWVCUndxSi91bVJSVytKMEVJUFJRL1MzTEZDOTFhYmo1MEowQTlaWlhUc1IvRXhwQndOTUZFUEJBMStTOXNEOGJvSC9KNW41WG9raG5NZjVJU1RMamhzeXBDU2p3bWNkMEgxNXlobkw2bE9WTk00MEdpVzRRUU1OaEZXYzNpSTJCb1RWb1hUdU9ab1lBZ3ZrTWFQamFtTGpvRlhjWUl1THh6ZGJlTGs4NDljbFovaWNjeWhyUmhMeWsrTXhrYVd3V1RaNzNiU2tTSWlFLy9IS1VRSHh1cmhxM1VNVGlEZUZ4dElRbm9BT0g3THNqVFlBTDNOTW1IdGpSU2xGUEtZYnRBZHFMMnByUGl5cFRyTXVjS2p0eWVPWFRUd2ZQaWliUzF6SkFoSU83Tm82b0h5dU5mMTR3RXVObEdPdWNBbTN3SVUxeXVabTJsRThISlFvZUh5c0RnUC8xMmYrWG9MOXp4ZFhYMnh0aXlOdzRaUmJlY3J4WUdVQUdKMkYybDZsVnlNTkNESEpXZkVmeTloM1lIOUU2cjAxTkw3eThYK3RieE14NEgxNDdMRHoxbEFGU0tjcndBcmdQS0Z2TmNEbGRCaXJPU0s4RE1YTVhCQnpHYkhnMmNZdm5scWRYRnVYb1RFalowTTZCVklnRTlKTzZMWmpjOTZ5VUVFb2dZR1A5SGczWnNjNEQ4ZUIwb3oyT3krQ0FUYTgzY0IvYmh2SzhNNHNqOENENjhIc1RDZFN5dFV3Y0N1alFVSWFTOXhkNlQ2c2owU29NYzMwYUhWaUxudHNCSTRUM2RZWTZVMTdmeHdoYVFZK2VTWENsUU9XblovRTFYSVJLMlhab0t0ZjBDQU0zQ2JWTiszYlUycUd2SXpuN0tjOUZ4Sys1b1lSa2FNN0JHaWNQOWRwQnJJMGFrdVZTOE96ZVNRNUgwbW1pUFM0WTRSNEl1YnIvU1RmSzlQaWtKTk9VWTJHREc0ZW5WNXNzZW1POWVyRkpkWmRXU1FYbmxKK0lHV1NVQjBCRTdpekx3ZDJmZUtRbkkzY0tPQW1TM293RnFCV0JaeUJGaXQrdVUrc2NmcHNtNUhkWnNZMnJpdFRoTnJ2ZkM3b3A3Z0tXV1VQeDlFWWpQNHNTZUF4VHQ2U0ZZV2VLdEVmQiszRkU0NDNGTTY3WWI2MDgrVTN6QnN3dURyejh3Q1B3dVlQNjJRQ2F5aEtCWkJWOU9tSFJPUHBWNmNQVy9XVEEwY3p4ZnQ3L3pQbkVOTTh5cHJlR3JBNzZ6Y2tZRVdEejRXTnhRb0cvSnd5WGFNdk93bzhCcDh1M3hkbkUyWDFUSk1UdWJiaVpUQVB4VmRsVFhuR0lUTC9CcS9kNCtmcXFnSkdzVE5aa0NaM3YyRHNqcEppTVE4ZS9BZmpONWU2YkRQSHVlQzlMVXB6Wno4RW9CWHEwTDU3RDYyM2pVcW8rUHBkK0pBN1dqU1RYelJZWjdYem1KWE90TS9xS0lzQXBxbldoYUZFWSs3VysxYmlrdkZkempQcnVIenF1SUhzS2ZEVVFSSHZBbkVwWm9tRmNrNS9sNEIyWW5HM1VNa0VWTk9WeUhXcFpicE5ZSjBTQ0JKZkNJVWpIS1JKWlBPemh3bmcyMUtWaHBjRXJXTlVrR0VkdFJTdEdEUGpYaTcrMWJYWGwwNUtUV1M2UlZyUFgrSHBaM012ak00L1RJTlZMRUdrYTVzRERlRU8ydndmd0tTeEUrN0I0Q3orcnkzblFLcmdGMTFEMGdvNFRoZEZKazcxalRIVFB0T1dNYnd1NCtQc1VvRmFEdWxxN1hLcFhjemQydlNPNmhYWjB5a2xTNmRZRHVYaVFJTUdTMG1XdVpoeXZ5ZklvcURsK3lhVWluVTYzSTVweE4yTkZXZ1dPWGtGVy8ySFd0NTVMTVkvakRUS3QwTjdTY05nZlhoWEJWNFc4UlVEcVJ5a0h4TnVZQWt2S0ZkSGRsYTh5c3FpR3JkcTlLdzFRcW11YWg1NlVqSjZxL1FUaVNHdDlnYStTcCszbVhUUTlZOXRmeU00czZVRDNZZWR6L3BwZzRSclZIVmFTSDhDYWU3dlRobFNvaWdlUTFjcXZRQWp4T1Z4T1h5N0NtOG5NT0E2a09BY2VqQnhMUXNSQmhIbFIwNjJUQ3hLK3gzOFQ3dWZWQ0RtQzRCanptYm1VMk0xL0htcW1RT2N5eUVkdGZrSjBHb3AyQ3pwRW5xalFaVDFSUlF4UGVrdlZLTExQL011TFRoSm5FOWhtaTViUVozcFJOUk5Xb0plM0x2UkRzSkh1SEFGR0srY2pKWmlPU3I0Y2NYZURMUDhzbDZxZkkvVkdpeVBpOGpRVEE4S0dYb3NwWnloc2N3RkkwMGNvVkwxK2NWdVg2Z3J2cXFzVHh6VERFcyt5ampnUDdQNWpvamZZdVI5WktyUUVDZ0JPRDVYcW1yVkwyWXJ2V1BLbkNLK241NmZtTWUwMERoemFNWkROOUZ0cUpGK3BLQU01cXZHaEFVanQ1ZjdwaUM5RXQ3aEFET3ZFRXNiQmp5NVZ3RGc0YVlWQURidmc3VEw3RzBvSm0zNTEzY1BaL0VJT2MwU1FZNlBBK0R5R08zYnJFUkRJRDlGN2lpOXp1Lzl3b0tzL091M3lkTkNrTkF0SXBCRFJoMHU2Mjg3SU81RlVyM0x5OUxpWGZHN05PRHdZVDVucVcyTjBOUzZMM1hlOUNweE4ybkdOUENNWTRnK1JqL2NzRkpQaWxqTFR2UWxuVzd1ODR4NjJCb2plVGVDZ04zMmJKbnUrcjZuQ09mMk1zdjQ5MzVLTTZkamlwcW1RamE2cGxMUzBIYWFwK0l3cGVIMll2VXI4Zlk1NDBORStab2xqMFYzWW5aS2V3QXdpaTNXQkF6dTkzVGhobUtsZ2Fjdm1sZTNEZ05kd3lGMjZFOVBDMDdiZk03YkZrcE5NSXZpd0dqK1RidkxISzdORDIydFZzM3hHRnpPekg3UVlPQmxEQXZhSnRja1lLQXlTWTk0RUx1cUtzam54WTF0SVp4SisrdWkybWowVU9lSzNuZU5YWERpTW51OVNmUWhGUE5iRkxPL1NYZTVvd25GaG1zbkNaT3VVWEw4UUdVenRFdTZxc2dmVVBYejFoQWRwQ2k1aW1YRzZabGlzUFovR0xxN3dONkdma0hrZm5mMDArc2hUZlpCN2VvTjFIM2p5dEp2SGs3T0p1aDlENjZQVWVMaGorVmx5Z2hSOUJwb1NqV290aE1ncC9kR0M1R2dpeGlkYlJQbm0xWFJSQXlneTFZOEF0Y0VFc2taQjFkTHhGN3dzZVlISFNlMzh3a1Vlb05uTkw4TTNSemtSZktNajdVcHhwVC9PSlBBam9QM0VmMlhRQi9raFJhbGVsVGVhOGNtSWRzQUxnUTQ3QiszcWJraXpvZ2lkL1A4a08xK1VBcVBxUS9GdnlkM3dVcklaVTJ2b25BbjB2RzFkQmpXQkw3d0VmZGRGcTRsaFJNdFN3ZlZyc1o2S0t3ZDBSTWx6dVhYYllMdDNFbmZCSlJmNHFxNVFHR3dqQ1VSVStWbm5hTWFaVE5EY1hoVkVIWHRpeEh2U2x3NkxINGVpU1A2UVB3YWloTnRtR2JJVzZVckxOWngyZ2R6L21GMDg5ZCtjSENXeWN4b0d3WmdKTVFDMTEwdGM1V0NqcmkzdGJaT2RRWXZYVTkyamNxejIybE9TT1QwYnVzbmd5MnMxLzZKMW1nMlJXMU1CamtYa3BITnc1ZnZ1T3RIdGlneDJjNDFST2dFQWdQb2ZaUE15TDNkQmxodks0VVh6YUJISU1jTGpNNlFVbndVQ2tISjBFdHpDbUdaY3MvTGZSS2pDNktJTGN0Z1h1SkRwb09sL1JBMkZBSzFOTXpQN3k0cWw5S2hzUkFyYWcvdkJleDJPOGs5c2h5ZHUxT2R0S0Z5YTB4TjhiL2M4OW13YWpQZ25FcDZ2ekFpeDVjZzBvR1lTODgyc3FqRWkwcm9yQnpwdU5Lb1dJZERhcVFyTGtWL21TbWNBVTFQOE9NUVdZM1g4WldnbnNIMGhadnltSlZQQVBWS3drcS9mdk5zRXd6L2Zjc0VwVlErZ0k5cnprNnR3cVRhSUczdUxVbEpCNkpubllrc1F1SUFqcUFSeFdTajVxTUdzdDE3Z1lGZjJlMU4wa2pNTXRBZm16SkRHNkhqUlBNdkd2U1VadWxrRTk1T2NQQm5KbUNISjh6bk8zOTYrYmkvREdrd09ha3dnaGQ4Q0VmdEE2aGFJajVzc1IvQS84OTRLREhJOFlxQnpNbDFkY1pjdXY1TTBkWUxzU3ZReWVMS29pVHRKcEM0aGxuOWszeEtxRDRlTkRIUTh3WU5DTjh5V2JsMUhrMUx0RFFjbFFhSXo0cFdZQm1aZDRCMG95UzVUK3NJSWYybGFrMFFwdDlSZTltOTlPVVgrc0x2YlcrR3BudzdxOXZVMzhkdlpaUGc4N0VlbGJ6Z0dGWXhiREozSnY3K3pGRGg4RENZOW9LNjk2SkV4V1dhMklnL3FJNzdIM0w3cENydFlzTWlsQ0x3dVJVd21PZjJUOWxiWDRqVVU5U3lhNWNSSGV1OUViVktVQ04zRDdYb29Gd0Q4bHI4eTdybndiTTZ4U2NsT2tvb2d0Mjlid2RoWk5UZ3hOVk5OT1VKWk9XQXVTVUZxZFVsaDY3UlVjNnN6QXE3WW5JUnJ0SHlPcEhTNm1oM1ZoeXVjYU14SVNXTjREWUFybkR1QTA0N0dHaXcxRjVaM3RsL3hJZm5pTzdIWmh2dUFqbkF5OVg4bUZWdHZJWmVzQWMwV3VIa2tzUzF5R0JFcllSRk85RU1OcEZ0Q2xXOFloUG5ielVmb1dMVzR1bDN6ZEg3eHpuM0gyc2cyNytsOXRmclpucllRSWhkMUw3bmNNU3RLVGJKSEQ3QU5SVW40MnRONExybG1lcGZlQVAyWS9KS05RN1NCTDg0VzRIZWtBNEpXZmo0ZHo3ZmQvU1RVN2pLT1YzWmVFWkFVVGVyeFlaMTA3UWE2RFBwVEczTmFabHcveW0yWUd6Qk0vZ0xLZ3pyaW9ickVCYnRBWExkTWdaYno0K1dmZ3lwYUxRczdWSDNWMVlLQlJpWm1NN2FBSXcyM2VveUIvSkJZazdtdnpSbThNajhVREtCVU1tZ0xpRGpjRXZaQW1kVDhEM3dxRTQ4b3RQOTZHbmxZcGZGSnU4Z3U4NHdnekRMcFcxcDVzTFpxZGlZekg4ZU1Kenk0YVRkcnJUZHZJaFYwZWM4SGRXN2hlSWJZRDljTnBoOEw3WFMzZmRCVU05eVZ1TjVjM0N4RDJEZFQ1YXMwQzlLaG15R1loK28vK3FkdjZVQUZURTFWZDRjd3EvT3pwZXpmVWM5ckdEMFE3ajBBYjB3dWsxSlVrREFubE9hUThiSjFaRmRZd1JFZVdDQmowRHBRSG84djZQaVpMNHViSTFMRE5PMmV5KzN6dlVXMS9hNTlpYjJvOFFTUnFWMmhvbFVMWXdHODJ6MG4yZlk1d2srQWM3QldSWmtuL2RZUVBiMHJHVCtLNFBRZUxZS3FHMXovYWE4K3h2bVR2Q0JpNkY0RWk3N3hEeWFxZE5uTWJISDJQbnZGN1VKZUFxSjh3VjRlNWloc254MGpjbTJQbEJEVFVPOTJCWUxyREZTaW9NVDEzRmRqUi85aDRRbHVSV21rVzJuTk5YL04xK1p4ZUZOZzF1VVc1VnJ1ZnpHc1ltdGdHdTlOOXhzMWFjSElWSmZQc2swRG9lUUxhY2JacXpXaU1LMHc2K29TaVdMc3MwUnhJY3FWYUJiVTdYSFZOcm9uWDVOOW9UUXp6U0pUVmltcEN4ak9ZRzB1RDhJc084TFozTUszeUN0c0Voc3IyT01YNm1selNJTmQ1RzJYVDA2UHRDdVZjenNLaHM0UDY3aGlaeHZFeUVGV1N1Y0lVd0pOVS9qM09XSHAySmVXQzJVN3BYME9WaXh1RC9nWXc4STFVV3ZZUkU1bm9KQ3ZjcFk0RWg0K3kwMlh4YURjVldBdjZNM29JSHFTelpyR0dEOTlOQ3c2ZTFlZXVxb2FFMG15MVpEN3BiVlE1K2xOZFI1WW83dDJHTFlqeURFc081Wld2cVp0SWUvSEt3a3J5MXVyZWlLbCt5RUhlOHFTN2FyY29rbmY3cjQ0MTVZOHp6YnNQb3JBVXlQNDV6WmJiK3YyVy9PanM0Z25SZ2liRUtCYno1SVNFRkVFWERtbDBETFBYZTVMaHpDb1UrWlRVSmFONTN2OURRdmJNYUM3THJxb3hlQUt1aUlZNktFa3l2L0E0T2Z5SDg4RDhnM1dFQTNKWHZuLzNYZG01ME4vMEtuNDl6VWRGZmYvemhPaDdLeVdxc3BFdlRSOG0xOUVSMU1Pb1N4Z29XWFJiS0NwS1VRVnpIMjN4emhJTUdrM2dyK2R0ZGF3SkM3S1ZQeXAwQVZobXVXak9Rd3NJUHFZSmg1dDQ0RzZjbXdvS1ZGYW1nNUU2bHBOL0hlSzc4OVN4UTI2eFdnZXJ2cVY5a2dQWE42V3JOUFFEejNUdW1kazIwL2lIMEZmRkN4dk1ZQ2pkNEhjdldBZDRIZit3Y1JiamNmNTNjUnZxV3hqSDdRR1BkSjg1OWdmVFpUd1BMUFBIVmU1SEFwSUt5UnFiYzZJRzFVU2FzVHBSZnJHME8vUlFiSkd1UTVjeURvaTBWNXlJOWJNdFJ2MHU3dm9RZnk3Vy96NUJ4SUNKRnJxWDUxYTc1V2N2aTRmMmhxT0JCcEhZSThJSzFmVjJZVlJGRUZsUkt3dGJvVzVmZTc1VGR0VENuMTNQM2NYWVljN3p4YllJVzhyRW5uZHNHV3NyZTJKOGVpTWFFNDdXTTY2djZTMmdLaGdYTWN3MHBqVVRBNFZSclJuYWkwSU5CekdMYzg4WDNVTDB3UDYxVUxQMGlUZWJ2YmI5ZS9OQ2FKVEt2MHFQQXhobHRPQi9sT1Q2c2J4RndBeXNzMmlxZ2s4ZXNjdC9YS0tnc2JvNWswRUVsc3l5YTB0MWxQUFQ5MjIyMysxWmQ0L1llM1BmRFpncW15aTdhS2pVaHZRT1l0d3lzMVlyaHp6R2h0NUlhc2pCZHdZOFA0RnZtdmFlNHJTdmM1OVI0ZEFLbWk4MVNYcnNGckJVVFdKeFBZdTA2OTdDQ28xY3ozaC9LQ1R4TlloVkNKdkZpL2htTTJGNVhPcThyM3Q1WGNWSHVGRXRQR1lIc0ptQUM3UjM1K3JyWDdBNTNmWHI2UVRZVW1ZeDhySGY1eW1PZlFBaEREZnVxd1lDN0U1QlZURWdZdEl2R0pQWTlmQjBiUDRuRTV4SEMwMUVMSHg5d1MzdjRDdUZhL3UzcTFEVjVLbTlEUnhKbS9ONXVpR3FCY1dsZXU1cDNSM2RwV1g1d3BGUm5hWjZ0RkFLVGR4a1BWc2tXbTgreThrVnNFVUtrd3RHYk4vd1RlbjJYUU5ycFIzWm9kSVhPcElQcHFKdHYyTjNwTjJLa0NYM2ZQQktiMzlXVmVVOTlodTdMMGJZV2djdjFSNWd4cm5GTHorQU1yeWY1bmppR3dZM3AzZmVwYXNYQldUNGxMOHhmeG45Y2twUDlJTzFsenF1U2lTWVd3d3h0ZmU4NFRKQksxd3Yyc2pZNVUwMlNwNjhkUkVPeDhZNUpWclRtR0hFOVNLaXR1bXdQYVlhUE9xdU5IMlZ3THVZbUVvVFhCVStJSGlWdStQUEplWER1cklRdkdyZXRtS0I0eWlVMHdDL1E3MTcyOTJoV2dsbTQrRnZ1VmxwbFc2d29VakJneGZOaW0xRFcrUUhDUTVjZVBvaDR2eGlnV0htbm5ZbTl6aEs5Rjdpd0ZReWJVUmVRWDZZcU5ibHlEQzdpZktZYXBaZ0VpQjNqM2xvTFN0ckVXTlIzMTdmM1BCenFleGYyUE9TeEpLSWNQMUltbVk3MnE3VW1tbWFyL0xaY1ZwVzhrZmRkbzVpR3dsenZNdFJGNWx1aDBBRXBxMlNCZmxNN3JRRDZnYXJKcXZ4bnM4SjR4SXNqcG1IWW1kc3lSbTY3L1UyeXRiQ3RveDg1SkJHWjUzWVV3RmtidWlpTmFUTFNYQ29GRkUrK1VuTWl5S05YOTYva3RPYmJhcnRnelZ0NXdWV1Z6MzRiZlZZY2JEcHI2eVBUZjBGL0l2QUYwZEUxUnJPenBsTDNlREw0YkVvQW1pL0J6ZlQ3U2EyZWRwQWp0Y0YxL1R5VGVxdjA5WHpzaXcxWFg5RWQ0cFljSk1yck9iSHhaM1VFUEw0aFloQXVLVm5vcHdFbHM4TUJ3UmlBSHFqeTRpT1hmR2VzYW5yTm9CTUduNThBWkg3cVZzeFpPY0lnN2RLb1ZoVlphSFkrVFZKb0xvU3N6ZVo4YWRWdkFmZnM3ZFg2b0tNSm1adU81aVo5eGdZaXorOEY2WHNXM0g4RTNRN3BDYjFSWmtRdFk5dWVDTEJuSXJYcWpOT1lEQS9rUDNxYS92T2g5YWcxcFptQU1ybXZQSFZDYjdYZkdnaXFubnZBaTZjSEh0NEJndnYzbzhjOXpUREkzWGZGWTg1by9ZbzgyNVNiaFRVcll4WWFTV2xHWGVDQVNUUGp2SW43a0FFalNyNzQ0T0pEejE1N3hIK3RsMDlrN2hzSlgzN3pleE1KRFY5YWtDKzdsZ1lsVHV4Wm53QmpybUZieWxUSHJuS3FzbUltRjRYZ0hud3FmYUdqcyt5SzFvaDd1RDNYejlqRXBCbzBRQS83OG12Slp6L3pBWjhWVnZhaVF6UkxxclpJbk1pNVpxZ25MRjBFNFVkeHBUZHUwSEdUUEwrNVU4QnI4VjhyMjY1R3pCdEhSVndYNXhPRzVMN3hybzlTdi9Hck1kVjRyWmQ3cWRnTGJ1VWwrZjg4a3RJajFyRVRwN1lkOG1ZNTVETW5oZlhPNlVTTE5BaTNrTzdpTjgvR2VQNENXcy9UaUhybzFwTDZ2VDZDR1NmL1hMVE9pSVNwdmxsWC9La2FsMnFGQ0Znayt6NVl4TjNPanhzbnEyNGdacFBiNGY4aFdkWUJIakY0MkduTzl3c0F4aUNEQk10UThOZ0RzTlFpN05MdUt0V1NyZm9OeGU2ZW5Tem9DVVFkOXk4cmZkaVUybnVybkxBUlFaVEhicU81Z25VQ1hGVGt0K1d4R2VDTGplYlMwZ05qZkE2UGpTM1VQbXliY3VxcnlqSFJKOWJrdDBCZ2xvZzNHSDFyTys4dkp4VTY4L1BxYnBaNFN2eDZnL0xmWWp1UVFVVG5MUFU2Mkw2NHBSQXZmcDdHQnZ4ZWRRRDFaVG1EMk5RMTdZR1FkbUorT0tHR2d1MHptTW5rMnZIbFpwNm5WSmNpSzVMOVhvRDBveldkTzhLOHdRNTRBbnF6c2VZa2xCVjJUaHJJcnJ1UkRYOXBTTjZNWVphWUhTSk1CNjZPaEYzMjMxaXlJOUxlbGxJUENQVUh3ZmF3RTNHdUkvaFBPU0ppRDRCTnBjeHV6TnMvOEpkUitGUXhEK0dDWlZPeEpPZkV5cjl2MlVGMGV3V1lzZTdUWWdnUDRWTWlLWlc4bG1scTBna2Z2VmNVUkY2YklUYzh4OEhEZ2JyVWZ1UktoSFEwamFNQi9NclZRWWRzNTBUNGVoOWQ2Z0VLTktTODZ1NENWT2pjVHovZ2gxbzRrWUU4bnp4K0V3TTJEZ1R3TVkxWTdwZWtVQkFwNnQvVmxuUC9IYWYvQWRCWm0xK2x5Z1luZmVzT1VxcEowZE9PZCtCSExNZUk2TTFoYWpaWHJHanpBb2tSU0lOZFJwSFFHRnd6amtXTlFXZDNyYTQ3NG5PUndqYWVuOEZ5cnVKOVJLQzF6Vjh5NDFHaUs4NDBPek1WRVMvODloQ09OSWxTdEsrcHVzc3FBNnFIb3VrSXBteno3K0t2dXVBZjV0Ry9wVm00RTNEb0JpSm4yaWRBM21vd0lMTUR6VVlReng0b0IxMEk0M29zeUlMNThwQTNTRFFKZXRHNFFZblhYN0R5Q3ZBTktlbU5kc3ZPUG02MzRoS1FBa1ZxNVpFQTlOS254OE0rVU13anhaUStVMGFWUWpleVN4WTI1Q3JHV3lFOU9Hcm5CNEJQR3FJb0JUQ2ZQZ0pzNkx0UXVXMlhXdjluRjNaRnV2SUVJUFBVWkdsYlpaSlhkaEc2eE1ucVc2c2h2a3l2d0w2K0crUHhOOGFmSldKV3gySS9NcVJKUXJiYUFQcm1RY212eFNIbUVaRjRRK3pFMEhjNWk2NzEvaWpZMmlMWDk5RWxwbGxRYUsxeGpuQzhhZHdtcXZXdjd1MkRPT0VNNklVNWJWUU8wQmJJR0FQVEg3K3lMODhPa2w1VE0zSm1kblRjRXpVTG9DSDZaR0pUOW1zSTNMTnR6WVE2cEN5QTlEYTZyQUFEWXJaZ3FoVGVrOFVFY3dPMStvbkZuUXhNaDg3UUJMMjFLbmVlOVRPejVHM0owQnRCa1A4N3B1cHhXdllPOSt6bHhBczZHQkJtZmUxRU1hRGdncFUzblVFZFZ3aDY2SDNBTEoyb1dNb1pIMFFBeE1HdlBvRmVSVnB4NWhYQjIyYkJWK0crb1FJbER0K0Vndm1ORjBKcWR3WFc0NzJGMlFDb3V1RkcvMG1JaTJnR1dOK0pyRHZFMm5ER0xHaTlNKytZQ3VmcjNBbXhEQkJ5b3dSM3hYKzhQZ2F5R0lzUFZ0R3VQSTJuNExuQll6NmpZaDc2TnVISzAzVFFBTHluY2FWNUpYNWxtWFFWekNQZlRYc1RIb2RKSjNodVlSZm5rc3RGdDJRMUd1bDBqcnZwY09FSys2VXJXdEcrY2hIZGwyVG15ODB0Y09XREt6NGprak9MbHEzakpwZ3VER1hpaFZxOUVtUkJJTDJiVWtvd2gzZ2kvZllrU3Q5c0YzeHR6dHN2OHBDVGtTNCtISzcwRGMwZCtXSHY5N2J0V3RVUjFzbnFlT00ybStKbzB6MVF4Y1prYkNsMXUzanJUdE9sV2tzd21CRTJ3Z0NBL2dlV0JHTTdRL2ZLQ1B0cnRjb0NXUDB6MDVWUDdzVzRUOXNLcW9zTmg3dTJNeTdkWFVEYTZxU2xla3prUHErQmUvdEErV1VHOVd5bVV5cUIzQXNRWTJxdlQwWlI5WEFvbVA0Rm5sdlZRSjBDaVdNMmhCWlVVdDZWRGlEbDkzR3hmUTJGKy9yNHFlcjJETTdmcnY2VUhQclFYSnZtVlJudkV4UkZiekhuTEtWZzNtdHZPZEpLUmlkeG1kSzBGUEtQS2JIaUpRaFVNbm1ZK1dDajFvMGVzQ2hCSHJKVUVXa0M3YXozNWZXSXIrUklyYWU3MEZGK3NkTUVRTm9LZUxoMDl1WmR1elYxYTNPL3FVZXl2c29ncGd3UjFvVmJIaTJoY2l4OHg5bjVFNXRreUt6YTNtNVR0SlJ3akROL0IrYlFiNWI0aE9CR0s2NU13eTNTemMxYWs4NHBHejBwZDV3UlFTREF1eEVxZmhiZmt1a2FvS0E5d3JKODJlTXcrNjVYS0FOSlh6WXJRNXp3K252MHEyd0pSM1RZLzJCUlpWeXFLSFJIRCtuL3dSZHJHdjlCU0ZqZHZrWmM2UThvUjhxN0J2dUVXbms1c2gwNnZUVGdTOUJpTXRGQ3dsRzhWTzlaVnAxMVNHNEUyOFNuaG5BbjZpVTl0NTB4eUgrT2hXTi9UL2JKeEl2WkJueS93RWx1aFY1Q2FxakVRcVpiaVRDYWdYRkVTc3JwcE9MZGErWXUvY3AwMUMwY1lhMDJzZ0dRVHUzYW5YcUpJWVYraVdIc2xwcTFjNlNpSkIxZEVRUUMwVkd5aEFRbzVnNWpzUGk5Sko2Zk9WczFaajBucTVubVEveGRKbkt2SFV3cVlWaFROd3o1OW9CNXFWdWYrNVBjVHR6YmdkSE8zME5IaXFCWVdqdmhpY0lpUFFCM3loVWhjQlVDSTFOUkliZkVUcVNBanZkVndBMmZWZlhZTGQxQ00zeXJxMDR4ak85UW9ISWlycmZEcG1ORUs5MzJIQUo5VjN2V2lJRkhtbGJlcDhxQ3hmNEtmUVNtTzRnN2hRaWY1RExmdGlncXREMDJTSEFxdnN3UXlDSkoyRnhxM09lTXEwWkhLYzFSWXNpZ1FMYXJjMGhEc1VvcTRxVzlkMFFZUHFSNHovSW5VQmtMZGRzTDVmbzF1alZaQit6a0d0SUFPMEMvaCtUQmpwdTFGcUlrVFVWRi9xdUE4VWlOZlZxMTA5VS9YRFFGaG5sUzNESlVIYng2ZW9OWElpK2d5NWtnckdCWW15czVSL0hpQ1gzV1M3UUV0WlozTHJTa24yVmJrSjZYTHBuL0I1NE9vM2IvdjZqVVUyUTB0TlpLcHhURWNXQ0dGT3o3ZGI0eXhYa1RSREFacE5GT01FTHJtVENEU1d5ZS9aUjh4Y2EwS3ZzRDF4WWtkM0ZPbFo4UjcwNUhkNncwY09zSEJ2SFlMd2JEYzJHeUdEY3djb0tKbjBBcEtXTUZhRFRSSnRscC9uTTI3eVJmSVkyNDBVTTYxRmpvSDJyankyL21EcWl5SnkyY1p1aXBvYlFTajNqbGhiTnh1R3pwWmltczdsMjFNQW1Lbm9vNzVaS0ZtTkxLOWVhNVZyeXRML0hkUGlhcENWU2NHK1J0ak1RNGM5cldFM2prMVZ4dC91QU93Tno3cVZ5eTAzZnpsanJoeWNnZHRLcHd3NEJEZGk4R1hOUGxXNzVoM3VwVjU3K2R4anBlQ1BUQmpqb2VvYzFxa1YxVFdkTU82dlpJSXJQdFJ4WXBuZk82TDdzVDB1QkNhUmd3NHRYT2tMVUlGckRKR0tESHhubGlPNm1KVFFwOFZlSS9EeDhmT1lHeFpNM2xhMHpTWFM0VHUxak9LQ2g1S2tRSVQ5VWJNUE9FQ2JDNEdYSXhwWExONCt0RTk4QkRrRmVWbnhtZ3RKckNCRVI1cVg1NWtNR0hVanF5eHA0NkRXaHIwWmI2MC9ReTZ0d2dRWExaTU9Vc0Y0VFlUdGFJNE5aYjFNK1FEa05sWTYwUFg0SHNDVi9QNi83R1JJOW5jRkZaVndzQW95V1lFRk9OSE9VcFNnVVZoSjZ3aVZleWJJdmVWZEtOS0h6SXd6YlJJcjhGNFgzUnJUS1dnVE1CN25sRGh2R3VUK3FpWG5ERkcrd29CMjJwRGdvcTdqOUUwa1VDQjFRUC95UWlINjYzMU9CRjkzcXVaa3pyRGhxTUM3MXlWV3VzL1lzdGplVHlZYXI5dDA2SnREMUhXcFlza2xyNnZSRnJRRlQwcmJkVVRHZkdOaVpJUmdXS3U3YmJrUk40K0paTEphbTRvU0EwZ2ZRY1Y5WUFnOEtJVEJuWjkzeVNvSy9ybEdERTFrQ3lGMXArMmtTcFFKbytzTW8zVkJTR2d0MkxPVzZ6eERGMjREK3JGU2p0L3N5QmtSbHAwZUJhQ1R5SDlDWEVJR1VXU0puaWh6OTZqOERYTjdWR1JhL1g4bHdHSFdRNC84Zk44bFdwTzl5Mmk0VTczWnI5RWF1TXNDcEZFekY2VUlaRjFjcVpUM1cvY0hFMjJTekZPdXZqYVN1N2owNlRtZ09vR0tXemE3YkdmcVNhbS9Yc0t6V0dtdXpDc2gxVlYrL05vM0RETWU1cmJIUGRCeHAxMkxXSm1pdVI3bEdzQjVvMVdISnhzZ2x0NEpNeHMzOTVudWxXNkgwRzRza0pEcldUc0lzOWErYTA2YWhObGxlZUhtUCtMZ2RGeDRJVlVHV1p6RmFFQm1KRnRiOUE4ZjJrSFB4dUE3Q3Y1S01WSlNuZHgwWGNOU2E4THp2TnJ5M1VhTlZWbWlPd1AxQmZXUWJVTFVIVkZwa1Rsa1p1dWJiMXExN2Z0djUyWDhJS0tpc1EvcjNZZmdoRzhnT0lZVjg1amVXOGhVSnpWU2xHT3NSaUoxVjBBcC9RUkhXTEt3OG0zZXE5VjVYbFgyalFvOG9PZlBrTWRzZWZnakYvQmFxZFNSWjRhcUhUa2cvR3dHdUpVZExqNnZrb0dGZEpCaER5MEx0RWlhbm1QV3RrdVI1azB0MlB1ODZXZ09XL2dCMDRlSkVjQVRmdjEyL1l2cVpWc204WXZ6OG5QbzBBd1lBdWRESWdmMEVIVlJ3bzZ1UWxaM3FhcHgwSkVVTUJEK1hZMXZNdnJxQlFSM0JaRkVCb2d2cktxNGpNZHBTanZVL2Y5eGdGWklFc001U0x1R00reC9OTE14MVJqd2xlNzN3R2FqRWRsdHRPSWRqVnpTREtmemd3WU5rb29leCtVZXNFSUVYNDN6ZWtlQytxc3pxdDJPS1ByeHF4S2FNVVFqbmlsWXhVRERJdVZYa1ZmRzdnRGx5YlFGWTY4WWs2U0pLREZkbWI1Y3ZyaTFoNmhNcVk4cE1tYVBxVmhXTE1mS0FlL2lzQVI2cnp1bEswblBrR2luRFF5UlRrSDNtemZna3VFZFBhNFZLYUhHWThBNjcyc3lJM0IwaWR2aXVnWnpYb25RVjkxYmpLaEo1M0NtYkNTNzNqbTNTdGliWkhmT3ZMWEpVa0xvaEg1VHFOZy9OS2F1L0tuQXRpYWh1T0U0QzZndjJzaVc4ViswVHMva1dHTUcxZEVBRXd1RDRQangzN2xhRHYwZEtOTjJmWVE5QnZHTURVa3JsS1UvYVB5bzIrZlc2M09vdjNrMmxKTkV1aC9SblZ0TWFFdE9pdkxlN3VZdkUvSEx5RDA4em9FcThqdW9Hem0vbS9rNU5LbXVkYXJmbzNyMnVRMEV0ZEg1SGZPOXd3bEFnTmNocUd5dWFKUk9penRMNHg0S0VQc0pzSWhDZU5hbGcvek9RQUdXaUlXT05wTzROMENNb2I2aGpLNmxwR3VLOGs1dForQmRiT2d2bXJ2UzJTYk9PWWh1SERDSFNSdTEyNEROWGRvbzNLVDdENjhzOTM5QldOeFZ1Y3V1aGt2VXlYNDRLaXFnT3lrNkxFZ2VQWUlGUkM3Qy9GaTVLeDdMVTR4VlRjMFZncUNQa2IvL25KTldGOVpVZHlQNnpaSUtZdjZYYUtUYVcrMEhQZThNTVl3bWhaVDNXYVlZV2dFNXF5QXd1NDBVMW1IczhzQ1VPMzhnS1diVDh0YTZIK2hDcndtY1E4dkpqbWVUdElUZ3ZQSkJnb3hCZ0VELzMyU01ldVBoeExpempvbXZMZFlNclNtMEFHQUM0V1JMWFVIR0MxY0RtUCtnRGw2L3ZOZUdMdG50a0JEOHpTcmdyYk0zWHFqV1llRXBVMWZUREhrOWtic2VoR1FOcGhyRUtyeUVpdGlyRkpERVlSbGhOUFRIc05LYVUvMXUwY0pPWCtHUDBvUFR1VnY4WkZrVFFtaHJQRGFNcm81eUhWaXpoWEFBdlBKTUtMYmNwTTJ4T1VvVS9kTFc3dS9WdDlaeGZZUTgrTFp5SzFvdnVKMUpzMFNMQlpOWTVyTEE0Q0gvR3BFdWJFamJUY2VhOTk0ejUzdTNlbEt5SmoxaWpTcHRQcXhSUkhHejJBeTRjVkxQS3BuUXkxSVlzVWxiNmh4dEM2NDBNVWUvUGUzK0tRWS9zYng2K1F5VThqdERUNi9vcFFkU0V4R0VCMUMybXY1ODRTY3o3d3liTzczbmVLYnJQelNPK1NrRkxPSnh1azBwT0hJL2dnTlJoN3dtVUlBeXRxT1lhNHNIUTNnVHEyZmduYUF2VXQ3c3dhcEZ3ODYrZUpPR3pXMkpKYW5ZSjhTUGpldGNKS0IvTTBUTmJaYU1xSWtTSDl6ay8wU01iZzZoNCtXdzMwbW52S0dGck9YVWJhQ3VGQTJXVnZ1RjEvOC9Vdm1nUHF2VVBVSkRWamNLbUIydDk1MFE1NWUyNWNoc25vNFYzVitMMTRrOUcrckU1RGdmV1NtM1lwU2pPcTlSUGRLSGJNbEJhL0hIbXVIa0Z5bTVtdm15TmlZQ1MzU2M1N0pFNWgwRHZzaUJSTUNDSHRUWndaRU12MkhkVkpaVU5zQi96a1lscGtMY0NaQ1RKeFBsdVlacU1mZnRueFNiMENnVTZhVE15VVVJNSthTDFEdGhOTWh6eVdpTWpQaDl4dGdBckF5SUk5cW50bHlGR2pEMlM5bFJsY0FDeE1wc0taRGNucWdwYzBycW42YWQ0dVBDWkJFUXJxU1cxMFZQbTY2TXdMUVlrM1I2NUNaQVJpZHM2ZCttWjliUTFhTkN1VWNKRUhaTWdRSVF5bkJQdmh2eUxlL1dyZWlDekJvcWZNNVdWdzB5aG1IVWtybFlWT01nTEcrZndUcXVPYjl5VTVVeUY0Q1NkYUlIZll4Vk1Qc1hPK2NYNno3N1FXZG56bzNueU1oeEVLUkxVa3pFaVllLytmejhva09pWTJQK2VScFI1OHhxVklwNU5WZkptTTd2QnphS3FRSDNyNHdOSHNrYXFWWWxVaXpmbUd3SE81V21mU3J6dHNncmZYMHZ3eTVOYkc3cnVQaWtTWGV3RHI5TnR4Vm9lU0ZwTXJUODE0S1B0aFNmcmF2Y0ZVbGswN29PNWtsNHNpZ3M0OU0vYzBnaVR6cGh2amc0SEpDeHZ3Umkxc1Z6RTJHY0RRb1hMbi9rV1BXZUY5ZTFoRzFFS0JPTWkxcjdPT3J6alB6N2lwZ21GTllvdnUzK1pJZkJnbTdKS0o3emdjRkJhOFBWSEk5RmhMM0dPUU9DM3JUTnM5VjFlbXhQRXgxUktTVWRDbkpCWEdNZGVuV3FaZjRNdm1LMzBZRFdIbTF6ZTJXaGdxR1JYRXhQNnd2b1J0Rnphd2VUOXhmTUVDdzUwYlBod3ZGOVo1Qis1S0FzbGJiMHJCZWJOek9nNno4NWU0UVNOc2lqd1o3b003TkhnbHRweFdXc0ZXY3hqSkE1UzQ0aXJjTzV3WSthbUpVZGYwYTMwK3lkdWNLTVpPaU1JR210ZUMxNXFodXdkdUpQbkxzNHd0OFYxajhxWFkwTkcvdUY1ZnRid1d2WE9udG5rQmQ2dzA2S3RHWGVDT05nS3g0Z3U5SXJJS0ZjeWFXZkNML0NQWGQwWEFtMXloUTlYWmVZYmJkZlk4TGNLSStUNUNjbjYvVTBjd241VldHWnpXVmxVNTh5bkFzY2lqSlpXYnYxQXVKUHFRVUUxOC9NK3o4VXh0MHFJVWNkdnNOSnVhUkRNZUNNNUVIV1F4SmRUWDg0MTAzajl1UENGSmwzZlE1YTVaU0xwZDhOd1RsQnhsTzFMT1BkVE1uYXhqNWE3TWZCTmdNU2FEdjExYThTaU90eDRkaFlXTjZYSy9wbWNOMGhwcEF6NG9ES2dpTnN6Z3g1MTZwTU14UVg2Y2QrQXdsMGFtNWNyaHViWG1BNml5aDVEUE5xWS9HMi9Dd29nUEVPRUJBNXBGdjBoaVN3TEZYWWdsOGZoSk5hTWpJYVYrM1NyU1JwQ3hXaEVkT081ZkpIZUVYemJwRkdvaDJQOWp3WkVJbTNGbG5EamxNUW1MM0JOTzJsanJPUExxK1EzUmVKQmdVeW5FTVlucjFjL2JFRlpZaHpvazVPU24ydUd6QzJvWkVkUDJKVm9ndFZSK0loS3AxVmQyVmwyYm5JVUNqR1hRTktKdkVMV0xTUTQxQms4VnZTRHl4M2Q2VlZTOUlkZmRLZWYyTUtZZGoyZDEyeUVnbmE4Ym5QMlJ0M0NQUkFJeXlkcnM0c2xDU3Zqd2FKSXE4Y0VHMUN0dHIwbGJnMkNSRHFHdkZIM3N2d3RxeHN0SjBhM2VjcDdwUjlDeXNyZ0gvRnFvb1RueGZrYThOa2k4NFdrWXgxM3VTNk5tU2RLMkR2UmZRV1ZvcXQxQWRVQjNod3ZOOGNrODdWMllNc05yYWFOdUdmNmpMMDEvZkx3WHZGRlFqWjVaanlWRlZ6TDFrMElCMElCdFhXK1RWc1UrdUY3bWZBbnlWVTQ4Z1FxRzk3VkIrbU5iUXFQV1AwVkQyQVlMdmVOQ04zODRLQVZQVXowWjgzM3JjdnVyVFVDODRlb2JQUG11cVRiMGFiWnRXRENFQWs3dnlmKzlvTXZQVmpsMENBNkJuT2x1WVIxY1RyRjdGOW5EVU5McU9vQUtESWVJbzhLUzFrdEJaQ05oRUtkOGkwSkxjK0JLT1NGeVp1eVFpdzB1ekFEa2pvTUZ2bGhEa2dKUnZIcjI2L1F1RlVhazNGb254RHVtTjdKM3ZzNGtUMGlqVnI1ck1KbXRhcTRYYWZaYUROM2dvZzdwZ01qbTlQbTBXczlUY3VUeTJhVWE1R1hqem9PV09TTndUZEFMWmlUQnBZRU8yZjBGSVlpeSs0MzJDb1ZnT0N4ckFWT2ZPeFdNZW9LQW5ReHpvaEw1Vm40dW4yN1B5eFN0akVRRWt2NDVvaHdZcXoyZTlPRnRWR0FYSXpMY0FaTER3bGFzblFjNUJRYVhSRE5oeE5aWW96cW5Sayt3MXVqYXBPUU9paXBtMWI3STBnSTdJeDJsZUpPWjBxRHNncThIdE5nRFZGZCtLMysxcWN0bFE1Z2FSM1VyRDdpTjNvTXMrMzF1Rkd1MjBxTWc4N0YrbS9jS3BtOHM4T2prdW15Mmw5YllJNFBVRk4yU0RRYzZVZ1djNXVtN044Rit6YUVnYytnY2hLb2VzTGV0R09MeEZ2N2VyVTAybnRKc1pUOTg1ZUlBblYvMjkzYXFJc2sxdjk2WWdseVJjYjdxZk44eFBDbTJZLy9Ka1lMRDVwcTU0WktoUVBXTEVjNm9jcFFlYXBSZUdxaVQzc1BBYm9iQ2Jwa2RmTzYwWTJ5YnV0VUwzYjIxT0pyYWtmWHRIZVZHTEM3dFdsMDFSWVYvUnhjcWZwaUJBNFVvbjdkNk4vYldVL1BGWGc4OXNRWXNRdzBPKy9ES0x5cGwrNEdtNURlMHNscWNCMi84MXRqNXFlRWo3TU5uaU4vUitKaTJDTGYxQnJISFJicktneFNKam5CYmhKRHBYN3VYL2s2U204dHJSTEVXanlMMmNkVnpXRVl1WmxFcmFaRFJFUW5ZUE9JVU1nSE92QkJab0tYNTB0SkdKQXArS1hrRVdNM2pJUk9JMEc5VndYcGZsbS9HNG0xVzVtL3dHNjQ1QjNlRjJ5ODRKdFZ4QUJPMks4cUJSYXdVTzJjdWZuUi9MTUMySzBVaUZRQmplSTlVN3A5NUpLWm1IZDNiWjR5bGpVRkd3L0ljaW9YaXVkSmErWE1wVTZtZjhMdTlyZUlOc1hiUEQ5bzZzVXcyZk95NHV1dWo3VW5YeWdzdU93MW5OcmhjalVVZUtFR3BXWjBjdWJhaVhYYmdqNGJob0R4ZGU1blJjSDd6dHgwditZMTRQcU9IUktJbmw1NTJxdHNGYTkwNStlYUxqT044VW5ZVVNMRmtodXhVWW1icXhCcU5LSGJNTmltbGlvbGcxMGpPZWF0K280UTY1Q2JHZ2FvVXVNWktzaU5WSE9YaDlVUDZqNXoveTBiOUsyZ3lKVHVWaCtBMGFQZVdiQVU4aUN5aDZUMVhGVWZPVG9paW5jTDNtNnRyalk3UFFJbWVCdVUzcWVQdnFOQU4xSDBRNkc3RGxBb2swa0xxUnFyaUVqUE9sd0htTFVoTHBvZFRyU241RWhkSElINC91VWFCVEkrTk9lYnlHZFpzWFM5NzVCUkc1WllZa29NeDIrWFhUUzlFa1V5aFVEVllrY3hielBHQ2xxbGFkOWlXN1NIY1ZHeEhxU1k1OURERHdpeWpQNmlEWEVqZHp3M1dPU3lUSXZKMGRuY0EwVWUzUmtxNkpWN3BwdjFNcllTNERPMy9QNXEySlM5OWY1dFZHaEhBSW0rVVVFZE9RQU1yZWRuL2xXUmwvVjNGWjJKMUlBWm1zNWtxN1J1QnFuNUtyMko0RjRoU1BZYWdEK3Y5MkJZWnNPTmlGRmdyQm9EOVNuaTN5U1RQakJaL0JhLzhjMU1CT09uTks2ZDgvcys0aHNhb0c4b1p4Znc3bTlqc0V5TTBFNnBiN0YvUVJhYm1VSklkMkhxc3pJeTFRVjgxMmxTemlGZzBiZ1lvT3Z6TTh6dFVab0FmWjBnMzJyazFqUXJnL0tqRjdYdG9MWTMzTXJjUGxydXNFaFl0dEdBM2VFMERaQThOOVF3VHNTSmNDczlJcjVTZ0pFYXhEdWgzb1dQS0lhdnF2Vk45UGd0MmRRMjR4UlI3V29zamdwam5QK0M1NHN0S05uMHVwTGRSdm0zWTB6NmdmUVNZYW9oV29PWkFjUUxjcUROY25QZTNhWXQzbVIyZDNCcWhsSDBwZEN6ZytWdERjNmZyOVJ6T2dLQ3VDSUtGeDZiZzJPK2lVcTBET2NqQ3REeWtsVzZnQnNqaGEvWHBlVGkvT2REcUlMQWR6NE5uZE9ISVpwSXRkWExxZllCb3hKODBBd0l3QzB0R2gwcHRmQXFkOWlkUjd3OEU1UnJTRGgweEF0T1gza05scmtsR3BXZUJFd3VuTUtveDZYZ3lEbm9XRTlvWElKQzdEa3lHd2Y4TUlnV3A5bitmYXRGQ1RLRmpLSlVNVFgzVGh2ZUszTW1lc1ROQklOdEdkMk5tQnhWL3pvdm5pc2JqY0xLNitMNlhFVSsvRVJQQ1hPVURHK25tUDFudWhYQU9LS1ZXc0t4OElVaCtTaXVhdlY1RUhRdHFmSFgzOHp0MXJwR2w0a3ZZOWZSaGJiUjljdFBsY2VmTXl6aXdqMjByNG9aNXl1SEJjc1NrNDZyS0tZVjlwRkppOWVKVHk1N2FadjBRQlorUUdBQlNFMkxjNE0rSytwdVp0U3ZYclJUMXQxWnFmRmxxUUdCbGJtZ3lKYVZvdHU4T05oS2tFSlBoWHE1Lzd0cEZBMUZCVjhlSCtsY0ZjaTEwSjExNWVzU25JUFN0bEZSM2NER1E4RzBjQWYwNVhpTkZ2bW0yTUFUVjNUemM0VXVoazdxZnFVNmFlK1FrYmF6bzBVb0o3OEhsMUNsLzF6WktQZURwZlBtNDhTN3BsM3crcG5RSlhPNk9uRGMrTDJEOFpTT1lqeFI3WlNWQjJWOXYzcUtSWkd1K04zRXNrazlsN2hLUTFabEJMTWlXRHJxdXZIU2lhbUpYT2lBUmRzMy90VldFb1dTU1liNCsrWE9tYVNrTCtPZzdFeWRsYUNaV0gweklqbzlKbHlkRTg1dWVadkh3cFljbUJlZXllWVY3eStPNlhlVURqWThEVkJJOHNmQUtvVjlCbjJMZjVCOVk5cDVkcHJTYkZrZjFQWUpQL0M4MU5jWnpOd2dxWCsvU1lxci9lK0MxaHJnNkdBSmUvSnloTnA0OHovUWh1dEFKaTFCbzA3Q2xpK01UR2F5WmZ2Z2d0UUM5Y25FQVA2Ny9JNkNLVzNWK0EyOTE4bUV0VTNTTGF5NDNydXZTK1pnNVJYMUtWUldlSlBlWWNvVzk3THRYK0Z2dksxYVk5a3VxWkt2ZUpyeXhkQXNGUEdqM2cra3VzeC9mUTR6b0krRHpKN2tJT3l1cEtpVXZNSzlRZWdqbUZoMFlwbWVYRk5KZTVSYW1MeDE1empwT1FEWG41WnIwd3g5RmxIbTBRellqYktETkx4c05BdE5LS3VOUUVad0l6RyswUjFYTUlLMmxJbThaS0IrVWY4OURpeWlSWkRvZDcvd1BocTFyYVV3VkpSNEtiYTJFS3U2ZEJZaDNBUitGU1NLVGdKZ1VrS3J0ckZXSWtnc092aFBrRERENzBsbFlZL0QyRmltOW9hUEhFMS9TUkkzclhudE4wc3NsMTJUYTRqQXc4NWs4a3BBYk44RmFTb2RtRkNSQ2hqNGJSN1FRcFc2cDlLMnFHeFJJeklNbEVlZmJZY1VtakRxNXJHK0tFMFhXVVJMM2RUUGJzVU1HN3YvQU1VaDZZZXVsZ2RqQ25Xa3o5N3RjUThtY1p3VURnOTRxOFBzemNDaEV4UG9LVnFtQjJLS0xFdVMrdHJSV3pYK0VuMm9Kc0F2ai95RU1JRS9HR0ZKNWlVZU1TQ1JTdytFZzZOcnpGQlBOV2hwM3V3ckZpalloSXRUT1BHU2lrQXZBZDVEMmtLWndnSVFCaWorVHNxMEZYTk5nWWRPR0hJZjJOQWEyeXI5UU5vd0VmS3o5dmw4M1k0eGxLbStLUFNrVCs3SFVsNVdXQ2lwOHRBekJTQmhPVmdNOEdvVEZGZXh6SnJ1ajh2YkdaYzlnbGI0R1JOYUs5OUl2dnAwTWp3aEU3NWU2ekZ5OEFTVDZtNkxySjUzcWs1OVlhYnBDZC90VWo2bjV4R0VkK1BRQXdSaEtCWW1zYnFXM0pPYWZwUTNvdVdlRm1vdjlxMjMyNG8vcHZVREdsQTcvMXhnWCtWbm9RdmZGN2VQTnRQR0JFWVMrcXV1ZHJqMXl4NjgzTUFiSlorZzhYeWZHeXNmSG9tN3VZS09MMFVlQ3F6MmkweGlEdW9VZjhTeEdoZkhUVWxLOXVxdkRjZWlSV2VhT09Cc2RvQ25iUXIxa2ZrYkhIZ2Z5U1dxNE9peDV5Tnd6dzUxRkUxZE4wUTVWcHF6RlQ4MTJFTHlQMnk0VzVWeXIxU1NQOVVjSkRNK0RGdEkyamlJRndsYVdwZmd5dW51dktVaVlMaFlxK2xyZVl0ZDJjKzlKaFYxN2RsODJrcFZwSUhnb1d5UWw1WStnM200QWtmZCtXUnAvWFFveVpDcHJxTzdRTW1ENG1kMEh6czUxY2RjdGNRdzJXcitKV2UydjJQeUhnNjZybjI1OFZ1S0lWK3laMG1QNWxGSS9WcXJBSVZoR09DS1kvU3VHM1lvUUVVWnk0WlhnQWxJTG1YZWZFZmJkMVBaMlZieGRwV0VyS1dTYjRxTjd5TWVabGVmOVl3QkJTNDZkeEdXU1lPcjNXSHBoOHZpS1dtSldLbGEyOWZQRVQ1WUpwUEEvN2owc1BEV1FoMEM4VUN2eTgxOTlzY3N5MGNGTVd4VGYxUkZMWFU1c1JLUS9ONjQ5aUFFZkIrcXlZelpKcEFqaW1sOXV6d2d5VkN1MHVXRlJualRmdUFtcFkyOHZlNWhTa2xvOWVQSkhYdWxwakRNS1I3ZnNVZzdFRmRSVXFGckxzay9Ib29mbGdndUNEL1B5SENteVVVeWRiZkEySzZpa3h2d3creEprZVZIaTNJNUhYMnl4WXNLSUYrd05abXFDSmJIRE5XZ0k3VENCS3pTRW9OQXcvd1BTakgvQTY5aElNZmUwdFdZM05oOFp1aW1QOUs1L2hjUDE0Qk4zaHdSa1ByTTJ0VkNlYjBFeUJRdTUxdkhvaW00b05EMnAwT21rcnlUc1NhT3U3Mzk5cFJRY0RCUkt2SWxVSC9NYVJLcFB4RUszdkExQXJManlpNW9ZOHZIazdZMCs2WnlWc3A2MjJVS3lRcHlGZG9JdmM3VUNoc25nald1bUdRUXRpRVh5YWxzcEE4MG5Vbjc4dXVLeEh4akh6YVEvaTA2MnQ4Nld0UnI5Qm5ONmwrRS95QXRsNERRd3N0OGFLVlpJRDV0ckdsS2taTnJVdUozcFRrTTNFTzA1d3pmOHNkQTkzY2kwZzRvY2ZyYWtrb2tjL2hWZzJzUXhaUTBwZys0QkpnZ1BHZWYzd3ZoSkhLaWk1VUc5UEZtRkNyY0pOQXVmY2N4NEkrSHR0RHlIVXNCT0NzZXBGMnh4UFYzanR0VnBPNjdyY2wxY2NPbzVYTEFRMmN5dGFFODBLZ0FSNk4wL2w0bUlGWmxVQ3dYRHRrbzluRHBCTXVaWDdIWTNJTWxzMC9vbzlxK3V6WXBLSCtHd3pTNDFLd2paZ2Ruc0x1a2wzNlpweUNxZ2ZkaCtJSE45WnhHNXd0N0VvY0MzeFQ1Z3oxTEhaR2U4Nm1aUEttUFBoWXNVeTVZUWpGMi9pM0RRdTR1K3gxM01sWW9ObVJEWWZtY2lYd1pwNkttUlAxSXVEU2ZEczZKR0w4WFk2a1NDVzZVVWMvckZRM1RXNUNMY3JFV09iZXZzS1YvQTdWQ1hhd1ZQY1BEQjhqYjVpRDRPMEZpVHYwTDRkYVpwS1BVVlp0QlkrTTdNUDRDVkgxdWVZSWx0YW9xeFhyVlBVbUlIdWZDM0RaamNxR3RMUzJ0SXRyVDRMajV4UW95ZDlBNkxzelR1MWs4KzRJSWJ4ZnFHRjhDdmZWeXRoN1J4cGJkRkt0clRjWHMyVFB1dU41NVRLbEZXNENweFVJbnk1Mm5MeURJQkhJYVZ4VGo5dTlhWFo3SUIyVXlvTzhNWWl5QXBtb0xtb1E1TGhxS2pmVCszenBpanJ1a0NMS3ZyL3FGdG9DZUlubWJDOWJaRXlndnA0VTJqbjd3YVd1cGZZNkFnTXY5b0pEdVQ4MHdZelFoang0UVE3bXRsKzlFUDh0azN5blpzUkVINCthcWlxUjB4ZmcxOU1VQlpRZzBOYTVKSkVmRXRJb21teFlFZGVUOWNRVWpvNVdVMkNldzg1STdPZ3pyTzVUY01selB4d1VVbDk0STR1SmhmaDNiTm90TlA1S2lwMVBra1JzaCs3OG13SEZib1NzbTkrenl5WmNVN24vRlJMZzhjZ0h0L0lmKzV5SHUyZ0ZrWlpicExDenJTUGw3b3dja2R1MVdrdXo0TUNudnVCL01ObTc3OUpWQmlDcWNTRXRYTWs0WU9yU0ZRZ3RTZU9xU1NrczRRbWUvMjB4ZDNSQmxrZ1I2SjJ6cXlVdFNHRzArbk9MKzZ5OVQ4cEZTajBickFiVHhwaTJyMmhpWWFVQkVNSmw5cjZRNG1HVVpEZUM1MmNnd0txVUNiWEc0U1dXUFRTWkxhRFZZc2tGaVBDMStRc1J1QXNXdFF6K0RndWZ1V1pyd1p5eGI0T2JaTG5iVkkzeGJBQi9OOTJIUk1uMkRiUkozL2VsanhSL2RuOVJaazd0YnRBRlh1WmZ4ZXVxQlBlV1ZDVHM2K2srbmJUR2ZjQzE1N1daWlJRTXkxQ3diSlFYVHJ4UlB4MnYzc21YZ3Z5NUhxQ0xub3B6MWdIeEsyM3Iya25sWnBVbXZXV1hBRnMxMDhKb0xpa3VZK0llMi9valZKUDFCRS9IY1NCUmtIS0lCMUNqSFowRXVzck9kQlMrYkpXMmxibzQ2eXR4VkxGUUtXNjg0WmZvYnpJQ0x2YitHR0g1R0dVaHFmd2NBT2R6Vk14VEJHMVN6dUVhMjRlbkZrenBTRERCdmkyMXJhQ0dnbWRRTUsrVmtIVWlHNVE2aDZYZngzZDF6OXVvL2U4cWhlNDZ4K2FLRUlaSnBuQk1HekQwMFRmOXpxQ0JockFjWjJHZG1WY28yQ0NwMndiUEZkRDJWdTlaQ2hQby83WE9Lclczd29ERmxPMHI3eUkxU2gzUitQTzQ0RWltbGZtZElRLzRBaGJCQWRpU0hqT0NKM2V3cDlwTkdpNERCM2lDbG9VN3o2U1VWU3BCWGlJTUJSTTVCUlZ0OHZoZkxWcFlDSjRubkZjSGNYOC90N1BqTG91d1lxeXBXeUFIeG9vOWR0SmpzVUs1YjNXWU82L3BIbi8wWkZnU2RLZVdJTjY2cmgxR0duRGxuODhLdjN4YUFiczU1ZkhGYjltOXRSSUcrMy96WWo3c0V6VE5rYnc4MnloeVdJSXhIVWkwSHZsUDN5NllYR1o1bHpwdEhmWDhhQ1h6UnUycE9qK2Y5YWFteC8wNjAvZmU0WENZOXhDUzZ6a3c2dWQxNHU0aHpWR3JPejNBazJ5UDRESVdIZUdUNlZsQ3UvdEEyWktRZkx5ck5GL2ZiWTg5bXc2TkxwaTNwQ1FQUEtITG1XRGhsZTR3OHUxUFNxZEl0d21FZ3J3RVl0L1VscnVmcWZxSnhoZW5CQnJtZ1BMUlRkNE5ZQzhmTGM5RmdRN1c0OXk5RURFcWZVREhoS1JwRGRLTGJrMDFxQW1EazBsWkR6UHc1MTNuZkQwSmZJckRLQUxCd2NmNUdKSkw2NE1aTTdFM2lEK0pPQVdGRWlicFZwSjdsRXExRTd4STFOcWFDdkFUQW05NVZNM25RT2NCa2xDbkRrNWV6cjFDZW1wQjAzemdpdlpZRythWG1sVzQ0ZnNPUStoMUNrcHZzc0lEdkUwWlcwUDRMTnFQdE55VGRjUEdXelJIcGR6Ym1IZWdSWXB3bWFBVmNkektab2ZjRXBMMDNkajhGWXEwcnFzMDBTMUw5YWhuQ2E0SlJtM01Gd2pzZ0ZkaE1rTWlabzhUR1A2T1YwZXR3eGp4ZFRTa0piZnZ6ZUE2d1FGaXNHTFVjQjBVU2JzOVE4OTZRMEtyaTYvK28rR0UybnFQbGd1TldlQzRhVmcwSDEzc0FBMExrNFhSSUlpRDlmei9YVlpMbVloK3I0VXZXc2VhQzdibUFad2t6K2xLbENzc0UzV0tVTkR5M1NaY2hqQmNTb0w5Z3QvY3M2UklhcWJEcThXU3VySmlNUTNtZTl0RXB4SGJ1QndHc3FaN0Y5YU55N1JtOUErZmtwTVFHangzYTZ6bHVORUp0eXhWQVVDN2lLOG1NekNUd3lpaFNpbEkxMmlwbkVOY2E5ZUhqZHkvZ2R4S2pVd0hhSUdNVEt4eTBwMEp5VGhtaTNpbVc1MDFPY2JsdVhsTGN2QW9xMlhxVnk4c0tEbjJpUUZqcVd4TEIvK0NVamUyRi9pN3UrcE1HODc5T2RXYzRjZHphcTZDOXJVbFRiN1RpeGh4LzJ2UThyU3BYVVBERld5Mk05R3ZJWWEvM0dwd1E0WTR2VWJ1aERvbVZwb3dGZkJvTG1XY3dNSHNZMGJxZHc3ZjhXVEp3YjVLK2c3UVkybU1OempCREpONjNWTzNTdFQxaHluNmVqM3RXTGM5Sk9qakYyZkFuRlJCOUkwc01vUlZpOFdOczh1V1ltNlVFQUc2OERHcDg5S0NKZTJheVFTQytKZWRXSjloYmcwVFF4NWFzcHhtajk4QW5TOE5YZnpqR3NDQnpzb0dWT1pvNE45WDJPTFdrcU42UVBaZVZyV2puOWNFdGNTTDVNRTYzeHF2V2tPeUt1alNFVndGanJybFpTZnRlaVZBVkpDbmYrMHZ1V3E5cG0xOTRKOHNkSElSTHU1dFUwcUw0RnFSeEJBaVV2TmRydU03R2RlTVpmQy9wdjF1bC9ldFVSQmZHV0FORmJlcXdSRzRieFBYVThnaE9VbWJLSnFzQUZubTVwRHc1YXhVRmpDd3VUblBsUnhza3RmTTFWZHpReWdsNUtHTVdnU0ZSUUN4WUJXbDhYTENkQjNNcDA0OVVWemhENy8vY3JOMEplZS85ZHEvZ1NnMzdub3NZeTFlcHpac3hMOCs4LysxSE5sSGJneThSQXlGN1oyblVzWWpLSGdnUkdqdVlyeVFjUDBWUlo1RVZUZnM5VGNabnhxd1NOQXV6TVFRUStRSFpIN095RVZKSFVoZ09iVnJtSGhDTzdxYlcydWx0YmZpMU5RMk53RzRGbkMzcUNOdU1ObFhHR1psMmRMQ1VwZkZ4L0xmSldPOEVUdlZBMjFwb1o3TlN4bmdJeTlNOWxpbWdiemRNejZwUEtDNDhLbFhIUURQUlVYOHFaNjgrSkRYZUxvMXl6c0xzd3JEVEpLVEgzY0hXc2pjRW9XcXJhSmVaTzUyaDNZS0JhbkdoWDZFNVhYb2FMeUJQMEs5TkxlV0wvbmR4VHczYzVYcC8vWnNQMVRHbnJqbllUYWlFU1lwbjNPL2IrRFJEd1Z5TFlsRldXaUpBZU9QNTVWdmNkZkN5S3pBeHdNcGxHRlJIUFhqNTd4Y29KMnBnK0p5cUJEZzZ2b0IxNy9TV2V3SVAwRkZMbnptazF1UjEyNG9DMmhrdFlBVzk0TTNyZFcxcjB2aE90UGs3MUxYSW5nZmgwdzNPYzhnSTFmNElRQ3YvclIwQWRhdDkzOXZjKzBRYVlFNjlXak9QSE9ZRUY5ZW94UVZKRmF4ZmliaXlxZFliNTBmTE1VTXEzZnR3WE1pV0pGL3JnUXoxMTdySVhoREliMnFWYkE1OUl3V0d1OHRTY2VGUGpMMFRIMHNiTnF6Qkc2M3UwMHpQZUVuOHZZa0EvVXRRVFVPWkFLVytVTG5xTURvNWo5N0NFdklRc3JFMFFnSEkyUHlLdlhCVjhNMy9oaE1KUzJFWnF4bno3UU9BZWFBeENJNFZHbGY3N3gwejBoR1U0bFlNSHZNZFFwOEJ4M2pWT2hxL2FoOWVFMUY1K1NpM2pPZnRHaHhXTWkrM1lkUFVFRkJCRjdDOUdZbjN3eEhCMWQwWTF6M1gwWmgrQk55cVExODFGMUl5SjFzcm1kTndzb0lWaDdqYTcxRGNwYXZxN3FtRXZ5SkIvNE9tUi9xcTloMHUxdzh2ZXYvc3JLTGtET1RsQjE5Q3hMekVtcnIwWExXYXJ6dVZ1S2hBc1RPRWdaQnhqcWI3YmZYOVpqWXVDUUJ5VXlHNVZJa3h5SVhnQ3lHKzV1dHduNUlpMm0xMytpaXlEWkMxRXJzVk9BSHdsaHFjaFY3YUlIL2FqWU82Z1BQM0l3SnJnUmV4QXhoUXYveXYxQXM4aU1rNm1xOXFwL3N1Q0pWZjc0cDdlMU83YjNRbXdkWUMxRzhLUWgwZWtCeXd6dW90a3BUQ3ZiTVFJSGJsYTBVbWVYanFwZlNCRlp5MmdCbW14VVJjNjREMXluQUpyYzJPUXk5NVhDdVh2QXBud1k0MTYzMlJmanFmYk03V0paOWRoNG54YzVRVWdCME94ZWhzekY0ajhFK1hWbVJTd1gyLzN3OFMwY3R0WWI3Zit4S1FsWU9rOVhRSjRjcEVNV0t2ZUFsZ3BlRERPS3NST01oMzlkZUVWUWtGaE9ZVDliN0V1bnltZnM1eWhWblhuUUpoajJBMXY2MmxFZUZITUROWW1IQXBnbkFsUVE2VWJ5emcrWTRDZkprMVVEeEVSa2FyTnlrYURzbUJuanZFNWo4bVhURk1WT2d4cFNKaVdDaHo1di9jMkxmSStoa0k0TS9BZmltWkxZc3p2VGlnM2E5eVBCTHAxZjJOdG1uTGFQZGFNRUFJS0E0KzFoU0Y5QlNzUjhPVUY2ZUxRY2NQeXdPSGlPc3E4NFdEa3ZUVEdWNjJGY3hiZS8veDh4c2NFYXZvRXJZTTkybXNqV0RWU2tSdEtBS09kSzFTRjFRc3ltcHByUWRiRlIyOFBzajRnR0M3QVZTM1R2TmRJNVpwTVFyZFFhZktLNzZDR2dVeC9LRXFmbmJ5UmNLQUxHWHNlV3N1M0Z0Mi9rQlhuWk4wajUxMmo2SENCcGxHSUc4emNHR3B6K0kyaHZKLzB6SGQyZTVOd3UrNVFCR3h5S1BWS2VUY2JvMlVEaUxDbjRWS3BYenpYUkk2N2lreUdwWEE0ZS84clFjRmE4VDZYRjlJWGpaMjBSbHpHWDI1NnBELzdKbVpIcUFSS1cxWmRaZ2pnOG43bWJ0Q09aekR3ZVBtVklrMm5UNHQ0SU1sNk1ObXFwQVpSRmx6ck1kNkFpMzlXSlozOHZpNGRyQWxQditibDdTTzNnb2RWVm9STWxrU2lUdmdnaHh6cCtmZXVEcVM1eEYwRThFcjFQUmw2NUlYN3VtY2NUQUlhdi84THpqTUlmdVdNTFVLK2NrK0h0UURXTGRGN1BpVm1KT1RoeXFib0VkdzBvcTZwMmRjWlVNUmt2amlrUHk1UWk1OVRVZERKejhBd3NjT2RIS0pZVE5hcEduWVZkcXNDbVI4aVhTaWhtQktTdEdxTGxBOWdHa0crY1oxa0crYWZqL0l6Wk02bG83RkRYaGNaazc1cWZSVkJCNm1qQ29uOVROOUlPTzFyYTJHZzVtZ1E1NGt0Q25KQ3NOUlIwNDNVMjBFQ0pxcE5nYS9qUVFXSWRDcTZDZDYyYUtjbzFscGxnK1hTRTlHTDZmcHQ3eStWZTdCNlpDUW9LMjI2czM1ekRBNlNKb1NFOVZ4QXA1dVBEQ1d0bUhwS2tESWJhNGsxMVBoN0N3bTRFYWx1VjhvQUhUT3o2WUthamYyT0R0V1VqU3JpdVliSmxPOTdqRHNOMjUvNFAwOWVFcVBqR1NBU1Q3cUxERTlQci92cDJqN25hb1hONzNVWFIyZkt1amhzaDNnRU9MVHRCYWNHZFdlZXlkSkdCOGxJWEpFd0JpN1NkRjNiS0dxNTR0ZktCYkUyVlE2T3ZKVDBCdHBXdzRTV1pTV2JLdENIcGtpZlV2Qm1NaVJ3VnJzWk5sV3FKWS85SHZiMGZYZ0JTQmd3blJxb2s4Qnd4N1pla0hSeEF0MUIrZDhUZEI3K0lNSG93dUtsTkhLbU44YXFCeHhZYldzSFUxSEF2UzhBMFpVOFhpTjdJZ3djVHY5ajVmSnNwQ2ZQOENnRDRQY3p3alZvbThLb0tRb2NRSHlBSTA4Smw0dnFRTUg2RG01VTR3WENkcUlBQlAzTVEydE9XVFo0Q3FBQm01Nk5XSVFiVDBLUE1JZ2NDdHZxUHE0UUVlckdOZG5YRWNHa2JHcDJmU3QyK042U3p0T0t3ZzdYT05kakZ2RTdlQTlnamdzSEZwaE5LQW1wTTRVR3JqcEs2ZytXa1JnU1FTUHY4dUdvT0hHNk9mUFR5T2QvU1R0VVAvWHJNR3EwY05MTkthUjRsSFlJRkdCR2NKRE5ZSEZ0bjVMMldHV2VGWnZTR3NyYkhnbUhQNjB5Z0Y4c0RnU2JwK0RLZC9yeDVsc3NCT2c1ejZ4VlQ5NUtBZVFTeXhkOU1SZG5iQkRpcDJSL0FXWDc4dU5uK2R1bjVZRXluemZFeHFFVS9LSTNCZlVsc0VESzR2VnpFVEQzd3FHVGpsOXRHbitsdXRvNlM3emJaZi9IZHp4dmErVTFKamc1bzNmTWU3STJyT2l0bkdhNGZrUjJIU1ZuZi9BOEtHVVVCakJqT3IwZ0Qydk04M2VucTBrVEFhb3M0MThnVGpXeXBHck1SU1VveUp6NFJzZW5aelYvWlF6SE0rUEljbEI2bVByeVZOUGYzZEd0dGllR0JLSTFsVVVBVkk2NVhGSE44Z0Zsdm9QTSt4MW93ZWRDd2FoU0N6ZWFScHBlaE5JTHpSeWZwVDFFdTJObjJETWJ5TFA1dHR2ZjNybzVuRzRyYUd0QldYejlLTkFxREpJcDgwb1B4bnRSdFdvWFVjeW9HTmlDck11ZHhqSHZkYVRXeC8yODNIMmc5QXZocjNvaUhNWlBUdjN1cjRxUTBrWVJXZHV4YUNqd3RZalJtcnRvVG1hTmdZRmFBQUxhZEdwSFRXRWh2T2M2NzZEcCtlNWdQVmErQXRiUFVrSXZHMmFITzgyMHp5R29ZMk9pa3NaTTlqZVlNalljNS8zMjM3ZjdkU2pBMEcrRnVWMW5OMVNsaE04cXNxNGdTc1psNWFsZFZENHZ4bXZVZk95d0R4dnhvOUdoNk5CblIxRC93MmlJekJ3c0Jsb3dNU0JxSDJjQVRnREwxbW5FZ2JxTXpvTkRxa3ltS0pYbnhMRTI0anRqN0FIbHA4aG1mMUtvUEVuZ2xncWVBOGExczVObWZ5cWxmaGtFS1VzMWdrekFRcXpkcko4Q3kzTER4L2ltTDJOdVA2cWZPbTUwZlhNc3VRbyt6VWFJRkUwdFZJa3FEc0RVV0h2UFJOSjhHZFBxZ2VoTE5aT3Qwb1BKV0taaUp5UUwzK1l6U0tnTUZlTHJlRXFiK3NURkNaalpSTnBneWU3U05YS1lQSWdacmc2aWFnWlhQeE1CZk5yTjN4Qit1d2Z0Nk04NFFJOWxnQXBYVUpLQTRpMzZ2UlJDVEtPUjBldUl0R0NWWVdrNFhFdVZBbFdud1ZaZkxCZGhBcnplS2JGanR2WTJiM1g2emE2cFhlZUxEUnlsZHdDTzk0TDQ5NnovOHhUOE9TUS9oN2JmSlV0OEh1c3dRSEtoNWx6eGYwNWYvbVNaNzA0czk5V3BrOGVieTE4ZGZBR3FmR1h0MFFZdmdjMkQ1OXNmeGMwcWVOQVVLVFpmeDhqZUhrVDZnQzZndmlLY1VUWk1PbUpMU21yTGtCaklsdXVGVVdwRmZjSWsrM091eUZPRFRoaExVQXJWNVQ2NXhCVEV1RURvUk9ZSlVXS24wMkpQd29XNVVwajluMjhISDdHMHd0angyTW1vbkdaUHFwTXc2ekVEVVd0alZYOWl3SDJualU1aXVlT2RoWVltSGZad1l2Vm1GQXdDQnF4YjUrZEhtcXRIbWV5Q0d4WG9TdktuaE14YUV1d042VFVBb2RoR0ZzWE1XUEpxZEpvZnF4cEpYbU1sSXNEcVVLNG14N3FIa1hhbEx6enA2dmxxdXJleDBkQ3BiZGhtWDBMalFvaVY2aThMdVp2cW9jN0dXRHNZR0JRNDVCeURQL1UvOUVQUmwrRzM2NWVSblYvQ2pQWFhFSkdpT1BBTjhsdTAzMjBZZDJob2hraHY5RjYwRldpR3ZYZE42WldVRXFLWkJkMkc2MjNtRGI4dHJ5YnVydWM1d1RYVVErWFN1TWV3VXRmeXliQ3ZLck5CVCtIYTdRNm4ySCswZ0RoLytrS1RSTys4K1Fwak00RFZTZVVlSEYwWTlvWURBdnpwM2lpeTRsMjI2RTY0U0FpT0tSY1IyQ1NrQUNRanU5Z0lRaDdDNUQ0OVVYQVAyUEJlQTBPaVc5eTRXQ1E0bXZGN3dBRVV5V2lwT1Vaa3hEUXNsVHFzTEdWU1A5VlRTMnJkRVZpcE9aWk1hUHd6SGdHZUIrN1dIZVNmMlJuRTRHYy9qbG9hS2E5bVEvWXZWVmZKUkQrbTd5RFk3bXZQMEZqRVhld2VsMVVTZFpWRVBBRFE2dlZRY1g3Yk9KdDJ3SHhQR3B3VFN4VEs1TU1aZkxwUU1GQloza3E4VHltenRCeVNWcGR6WkZ3a3ZkZGNNNHJvNi9PcmhTeDhYRTZVVGFKQXNpaGQwS2xGVE9Pd0NQZGVidXdTVUMxR0dvTUY5MzRlZkV3R0hEZFU0UDBZc2lSWVk0bWFWUkNlQUsvajBVbW04RG9GNXJENFhmdWhiZmRMbFF5cDc0SFdtcTM1WEswVy9ZdjBnQUs3L3VKOEtVZkt5K214SmhBUHd4Uk8wSUZDZVBKaXFBM0k4SU51MkYwamlxMlRpd2lNYzIxMDZuR0JtMGxVbnBqS0dGQThtcDFTWnJoYzNsUUt4Skl3akNFa3hJbGpYZHFRem1TRGg0d3FQQkFNblFWYkFDWkkzbHBnMVNtNEJQSk5GLzB1dnJsTXo2YzFKbHFoTzE5ZzRBb0JpU3FxVXE5L2VFaG9hb3ZPZEJCYjYvTk4zQnNiRFB4dkphVHUvdGVud0FQbElzNDNoU3NMenh1MnM5THgvRWdxTGY5VmZ6OC9PVnZ3d1BYNUJ0d2dXODd2U1hUNzlkeFFxWFRIbVRJbU9VVTNvZG1tLzh1QmIwZzlYWmxxUk9oQ2FBK203REF2bFJZbWlmUGJWcEt2V2NPeTVjYmoycFNPOU9udUtHN2VOWEtJSzBzZFEyakd5dCs3eUZBVzB6NVlSWjlKSTdQZ2wxZVhJUWtWNXlhZHNHNnkrNDY5NmxyVEQwZUVmbDBxYkN6ejEwWDRjOWp3Y0xhL0hVTHN3MWl5YUpndUQ1Vnl1cXdkK2JUcFU2K0ZBK3FNUHRaNXVjT2h1eXU3b1lpMkFBcjlEQnpjUVBGNVVJbVRnanNadEVmTDBsREQxUnF4Z0ZsOTN5MU16VWdHT1I2eDhINzJRWk45cUE2MU52NU5rME5iRDZuTG9OdzBkeDJrMEdxK2lMQW1zNEVZN2l0dHdtWm5XeVhNUTlDeUJtc3BjME9RWU01YytQZ082cTlUTjhVNDR3TDlPN01PZUZtczQ4ZmNVOHJrWW1odUVtWEpTcHU5VG9FbmdsNDE4RUJYMjJuUzZGWDZYSkhhUjlRV1hwOU9DMTI2WHdlSDhrR0JxZXpyTVlTVjBCN2RnU1h2M3VBWHFyTGlpakxxNVRjNEhGWVFnOUg5SG1FV2dzOHVFVEJPbzE2UmNyaU1nM1ZnK1dsZTVxRFVXbi9wMEF3TWQzK1VTbG5qU3hWd1RFVW16TDgvY2M4Ty9zMjlnTmNJckw1Yy9BTFczYUtzSnJidXlvRFVBNDBKRk9zTTlkZmhzR3JsV1FnNGFTRVRZTU5QT3JiZDVLejhPUlRCN2VTVUd5ZHBROFEybUlwRzRxWWo0VloxbDFWNHBMbmtoY2VpZ1dVRzBKYWEvUHFMbUtGWUp4dXZrZGp2WHJBTFoxb3lBakFJcnVQam1PS2lHR3BJU0NoRkdvTjNsUjVKMUR1UjJrUEhrUVYwanA4U2JxK0NZSTZ2RDVyOEtQQnE4U252azZDcDJ6d3NzTUFIaXFlaWZ0RnhVTnhtTGdpcG4vQ0lEVGJudGxzR1R5eUJTVkxEMm1QUjhWSENQTFZmNkRLK2VXdHI5dnFoVDlQOWpoQy8wSXRvZXFDTjVoaGEyRXZUQU1YSzhrWEhrVXpwaFBQazRPSWlxVVd3djlGTnVNUzFReFdtQWJrdEljR2FXWUh6YmFEajBiUnhzMm9VTmF4VG91V1g5USt4STl6d01ubTVrSUxDSFZvUmtDd2c5VUpaWjQzVXJVbERyc3lRbjJteHRVS0dXS0JINlhVZzdENEtKKzZ3VXVJdXlmYWpjMDdJQlhJdHA2Vm1KRTdCSERtbnB0TXdoRjdRY3ZEZmJ0aVd3OERFLzFOOW12V3psdEhHeTF3V3hkd28rK1ZiRThnSDFySm1UeTVzb1dsY1BOaWZzZmVSOEtvaXc1RE4zajU5T1BWZ3pFV1g0RzhxVHVuUVlrLzNOLzFncnRkZ0JyUVhJUS9sdnorL0NtUVA0RldYa1kza2h0RDRVK3hYTkZPa3F6V01qZ05RbTlxMVpRT05TMUJyVEJOcnVjdHBQdjdjRFNtd0pCdktPd2tZL3IwUWdXdHQrK3I5bVVpdmdlUUViandFdkpVR2RyRC8va2F6aDl1WFNySnh2TXZwL2xkTjNuZ1hPSEpmUGRhcld6YVZxaUdkcHNYdDZkQ0Z3OXRvM050dlkyUlhPb0YwcERhTWFRQmJLQ3IrTkN6STlKaCs0aWlHTGpZazlzMldxV3oyZlR2M0FOVHZjdWRmVWtNYjBwMmt3LzJmcng4aTFQckx4ckxmbmRNZ1ZvSmRjY250S1g3RmMxVUo2d0J2b294SDRrQXk2bStxWWpQVWd5NDgweXVyWXM2dEJWaVFKQzNNZTVEYUpIa2RzTlVoOWdaMVdyblBGODhmUFFyVTQ0WHc3TnZDNUlQdFZ6UHlFTGFsTVp1bStndTdtZmlDNzNjVnFPQzBjRnR1NGpzdDRrQ0dnWVZ2eGN6cmoweWRLUFRzc1IvR1JPNU45emtOUmtmWEd0SWxWWlZ6MmhJRllKdXlIWTFUT0NiSmxDbWkvRWdKT1NpZm5LZC9PZk5wWnRKSzRWNUM0aDFDRlkrUjVXVU9sS1ZHb3hnL1BWWFdaV0YvLy9WTkV3K1hXSlcrQURmMTNkTTdNOHdMbE1hT2s1b0tTSEhSTldSRXhWV2lDMDhTRkg4aXJzbHc3bW9uOUlpajlHVDdMeEhKMHFtRmx4cjdQNTIxK3FENUpBeHVkU0ttbHJ4NUZJUFpCQkxyMlg2YllhQllKWHpLKzZYMm02V0JjY3BrdVZkemEzWUlRTEZKN1RCa25qTzZrVFZBOW5kZVArVm90WVkySGpHeGc1cGtDVG0yMDhTN3pNbElWcDczaWNDeVNPVlRoVzd0amNvZlpLSVY4WHV1ZmJORkJkRUxuZUdEMG1IcDVITDVBakM4eTRtd0RiK1pmZ3RuZGdoV2c5ODVseWsvc1IzQ1hsdytNaW5nNmQrTjNNWm4yZW1mVnJWM0hpNGRGRGFYUEVRd1lMSU5uMUNYdmVrREFNMnc4bnZZcXFqcTdlYWFYcE9hZXY0OGNDOFdlZTl5UU9RNnBLREw4UXFHVDAzMWFnMlVjdXBiamlIZ0ZoS2VrbEptNDJxZmRORjdrRmhVVFVRYzhJL0I2OHlCTVRndUd6WllvVEdaN29lNWFxb2ZYMEoxbC9MMkE4MGlmM21HTWp4ajB1dGtiTnkwQ2FJQk4zamJuaG9mWkt0SmpNZVlzS0E1V2JWWVQvdFdSQ0dZTUpWeEQvMncwOEM2SGJCaGgrSmNjNmFQL2ZycFZkTlJ0ZTVDVTZtMG9yZ3JKSFJidENpem1aeWh6NXp0eWw1MXc0b0ZGRmRSOS93c1VRNnBScDM4eXNlcHZwQUh5L1ZvQWhKYmtmS2dBN2IzdFdYc09QbWtPYTNRV0h4N0UwQlRnaXJuM2lxT3dOa2o1YmZiaThvd3BVei9OUlNKQXNrTFpsTWxRM1dpNHc4NlhaSDl3bTNMazFDVlhWa1hLa2NzNTV5d0NyR05LVWVEMXZNSjNjOWJudjJIY3JvVXRlNUxNQ1poY01QcHhDcVBSM08za0xWMStoSkdtUmhSSlBHWDAvWk8yNFdlWWtjNTUzRlFMRGtQamNBQmlwR2ViZllMaiszMXRGZDhoVmYyeXF5ZmRRWC9NdEdyWk9UeDNZdjk1SWd3bzE0d0RUU2FzYVRyandxbHFWTkdTaC92T2pCRjk5R1RUV0VRKytnRTRXY1V2dm9kOHFrLzVXaXB3eHNHTGg4alc1elI1UkdWQjgwM3ZabWs1OTl0YUI0Y1NxOXlpZmJIdTBrM0l1RCs4TWdVa1JrcDJWeUpCSVNtejl4ODgvTUFyZTRRZG5uRHNockx1TjVlNkJYeFArTGRoS3lZcDV4cDZpSERFaVF5OEZHVXRxdkhFOG54V2FLTjZPUHRzNEYrNFRhOHJ2SjFxNzRuOFE0K1QwSy9WNHJ5VFVQbVhtS25heklHT2dlNUNaR0hCQ1VuOWg1bnU5b0hMTE9wbi9GRFRFVjh5allZMFlVdzRDUUlYWFZYWm15SENuTVgzU00wSzdGdldyM3BQRFR5ZEJ2V281bEtHOEdlTkgwU3JIR09lOWdNODVyWldoSVpMUnZEaUM5VktPeWR5Z2s0WE40LzlGcGFUd25uNzN0OXJJNDdWb2cwS0tERW9INk9tdlVXd0Y0L0lkREFvNkgxaFA3cDdMWXpmTkhzdGRTcmtYL0pZSjJncm4reEw3MXljL2ZON0NMUWdUYzBMdUJhUWMwQ3IzZmxydkF1ajhsTGIxN3hSNCtlWEtkQzJPeTNnL21yT25yUUNUZDlKeTgyNFFkMjhaN0h6UU5mNHBCRzVXZVJWTnVjSmVWVFdhZVNMSUdJZDU1cmhYL0VydWdUU0hwNnBrMlV3Z09QMXRjNGNUeEV4TGFIN0x2NUtrUlFtN0sxWEVNbUN3N2lvRnc5VjVMU0czMTl3WnluV2U2OHJRSlVrTHpDZVdqOFFSWEVvU0xkekFRb1F0Zk1ZdlQ5WXIvQVVyTjgzQzVoUVZhTXdrNTU3MjhNZzU1bmhvQkdxRFI1bEcwOEdhTnByczkwVzhGUGVaYVllTDJlQ1JBVGRUNUZmRWRnMVdwUmZpdXRHMm9FUFRGM1VnMTJPeVRKSWJRaDVyaitod2lyNWsxNHBrZk1ySnppUE8vWUdzNGt4ZGRyMUJBdTN6dkhPRlh2MDFEZTZnK1E5T1ptd2pSOFh3YnRSUHdUTFk2SUtyWm90clNhYXV2NkNEaVovY3NBaCtXVUduMytXeUp3UXBXbXBZaE1nQ2w5Mm5ZVmlJREp4WjltK3B6MTRRZUViOTMwOGt6dGg2NHFISkh1WS9VUElua043TmhvY2FMSEFCT3pGSGZSdGovOGlZUnFBdUZFYUE2S1ZCOGRLekV1L0ttZ0FtZHd2WHFWQXlRdzJuWHZEdUMrMWowTmFvUmY0RnhDeXd6R2Y1MEw3cGNZZlQ4dG1VSXdvYnBuVWhiL0xaMDAxYThTbERyYlZHaFAxSTlia0dYMk43dE1ScFVvZU5sUmhQbmJ3YnRidStMZWZCNGRvVmNCWDRGaUFuZzBLQXMyMHlIL2paOWJETjhEZ014ZVNob3ZwZlhIL2VaekdQWCs5L2thdXNGMS9aTzNxTDNpc1I2SE96NXh0cDJYUkx6eG9HSjFBWWkyZ1N0TXNDdHFxMzRzanNEYkZvaW56WHRqdkJWRUZUczVxYXAzNVl6SHNyUkxNbUNVMzNWaFRDaWtUUVd2ckVoRDlDQkpITnZiRmMwNU9EWlZwRzlMM0lkc1RPa2I1SUV1cjV0SlVBbTlWRzdFYTZVaGRiR2IzNDFtNitKVGh2Q0pJWVpESEMrdTkyVmlnN09HMzQybjlQcGRkQnN4VHpOV0lOOVo4TUtmZHFGaURISUYzd2VVRnU1dmJHaHZqWTFFdGZkeXBuZFJmZFRmNmJXLzZPVHVEamJ1N3N3eWZDeW1GVlBLWjhTRXN2ZkdJSlIxZUFEV2hSQmhwNHB5QnRmWHBqa0pMQjZsMGpwY21hckZIMDEyajYvVnEvTWdkaFU5ekp6N1QzYSt4YU1zTmlFdE1yVTczQy9JdEhqeDBzYWYyTmU2VVZuQUVUN05GQ1ppVkcwdm0zKzB0aTVGWVJreUNYRHJRcHl1c2Q0eGo0dlRtMjRJUjF0T2NyTVhoWURNd0t0TVJLd2hERU9HdlhkL3pPR216ZldjRlJ4RUZaVVljbjZaZGpmSUIzaFNPSUFnQXhrQXBORUFXbDlISG5GUForUk96S0JpRENDZ0JsNUFiVGF0UW5Ydm5xVWJlS3pVWEVlYUs0YmpEdThiK1Z4NmJzYmZuL1RuNlJyODFadzdJUzRTa3JGWmtGU00weVFMN216SGRPazVib0ZueGJwMWpXNGkxYUNJM0djSWw1dHFGVVFZVFQveHplQnVha2N3L1FsN1ZYenhLTlFkcFFJN0ZNQnJUY2dGSWdDY01nMk9vVnRZa3JtbnBnYXVEN0tZczE0d05QVDJIckRMajUwZDNjcWRUUUFBVlRkV1lEcitEcTNiUWFUWXRzRkxyeWlIc1huUkZkaFRYL05NN2x1bnZnZnNVWjRSNnJUZmlYRzQ4eDExcWRjbnFvTDN4bGE3eDdVMW1iMWVsR1Ewb0V4V2VSWTdPUGdySWhsM2FvUDdTL1dQYnFraVlNTnZlb08veDRjUVpHRisrVUY1cjJnaW9OTGFHQm8vaExFeS9WNDV5QXBvTi8xM0FINStSSXpvZDRWcVozelVaRHg1UlZ4NVVxNVdOYnNBN2NmRnZWNDQ4VU0xdjB5cWZIbUR6MDQyV0Jod0s5Rmt1Y0xwTjkxVm5RdDhUa3VDcERjcE1EVFk2ZTlWcFFBN3RIV2tHL3ZOMEZGTFJ5OG56aUpyeHRwcGsvN2l4UG42NHI1TEdYWWdxVXVPZTFHMWNpaDFTWWNVUzYvNmh4YWlReENnM0tGOFM2WDlBTGdBZXJvaGZybnAxYkExOFBISEpvbjR5dzcrcHF2NjJ1dFRwNlp6ajRCSzhlbkNTclpyRURhc3NyVnM2Z0VtRmtsZGowLzYzS3VSSE9yVGd5VUJGUkVSUUROb2RnanNTcE5yWk1tK1VPOU5UWU1CcFVJTlI4TWNCTDl0Qnk0eUUrOFVpYzlKWGo0L01udVNsMUNPOXhVYTJZTWx2OEZ6RXlmYit2N1RTYnlabzdLMDcwc1ZmeFFibm5JdXoyQ3ZNVTY4TmdxdWFOaERpaFJVQ1hMbUJlTHRmQ1BtVHlhOW1jcUtNTmdrUzBNaGlhWHo5YklNRHJLMEtNMnpoTHJMdklxa0JJZjVQbFc1d21DK1dNYVJMMjgwd2Q0dHpsWXBJYzBIQmJPNXBEZ1hVMDU0MnQzaldQRnFxQ1ozWEY3TEgybkFSZXNPQUY5d0g2VjllYzViWlBGTWgrS0trS2JYTUxxU2EyV0tKeXlxakN1bUFuNmNrOC92UXZYdkxCeEFmb096aHJjMFYyRzJzZjYyODZ6RXVsQ3lGb1RHZWFsU0Z2UndXeHBiejZZcWFTeitNNkdyeTNQQkcxcVJ4ZEl1MmFFZFhhaGFNWjdvNjZ1ZHVlUGRHUXhhcmZUYlltb2w3TWIxdWlBclhHNlVDR1FKMnBvVm1SMzMwOU1UUzA0d0ZEK0ROTUpiSDBFY2NpN2tnUHA1cG9WZE1rQndyQjcxdkpKNGpEbWdQdFNOR3Btamk2bEs4cHRuVi9vbkV1cTlkL01uZXBHSVRBaEg1YzdlNVJlWG5zM2ZsUk5EZmhPUndPK05zSEpUZVkyMWM3b2pGWFppOVJtM09OUkZMOFMyblJYa3ljZHVhYnQyMWp3UFVkalpkQ05qTlZQdGx4UDhRSWpIU2pDQUltOFllQzFYRVR2Y2lOL1pIcGUwOFhuUUxKWkdXRGFGMCtIUlEyV2xIbDlhcDhLdUxjVkJxeWU1MGMyWll4bkRWQ21aV254WnpGWUZKelRWelZjaVZWME5IM0tOeERDSlBUUzZrM0FZZjhhWjAzLzZ0K2ZTUjViQU5sNTV5YW9VbWRja3J6eVlycm9lZTJsRVUzb3NoM0s0YlVCdXhhWVNYdDE1TU1adWJFaHd6cnRTVEJpMGdBTE9XYkswQUQ5eXc2L1pyaWxXSUsyRmlhNnZxc0krbHZLeG45NCs0OEJOM2MxUEFKSEwwazhmVWpnYjFnV3BVNGxZUVM0dnJuMmwrNkI0Mk5MQTdSaWVyK2ZMM2JPTzF1b3BhbmhBREV3T2NqclJhaS9ZOWR5b2FwQnh5Q0NwekJZSS9idVAxcm5kenhiK1paR0dhc0YyWWF5NUFCM1VEMkhiMW5GWGJSWnprcEgxQ0cyT1oxZU5zZ3ZqTmhxSHpzdkkxekNWaU54ZjM3TGVRMlNJTzhnYm9uQUhPMzcwNndKVHlkYWdpUzlGZTlvOGY4MlNnWENkWkUvYWx3dGRURjEvTkdCemVMK1NiWTJCaFRaUTFZSnVUVk1FVG1OUW9CSWp3TVZSRS9lQ2d3Q2hqWVozemlpT2luYlhZaWRBMHVYK3Vja29BaURqcUtyakhSMldMcnNtbGdzNlhzMVVmaVhCQlZYWno0NklLcFlKZnpYaklTalFzU3E2QzlDVlBYZnBjVi9LR3E0UnRsZDk4a05RUmlzdVhvUVg0WWp0L01sNEpUZXJoRnhjdFlUeSt1SmJiWVVOZjRROXNiRGlkS0VZMmxYWkNJVUR0RFNKdlRPaGR1RGZaVXUwWVk4NWcrL2F0elF4anI1Vk9Ia2hGUkdDWkx6bllPUGxyRUdtd2ZEOXM4NE9lZUc0Sjc4MStlK0N1U1VLRUYvVmhzbGIzWndwYjVUblJhLzZZamVORHJkSmJBRkQ1bzBxWG80Smd0U1R5c0MwK01TVUZpeXhrZHh0TzJvNEN4RmRkYmZhMnV2ZEtrcDUwbW1BSGFxb2U5ZVJ0NXBadFhDeWVTMlJ0c05QOHM1Yk5DSisrZWU1dnh1REpUd0lCdGRJVVVQbzdCNmVTWERwb3BOV0ptNCtveVhibVhjem9uWllRMkZRa1ZadXhtTzdqRWp1a09jUWN3ajR2dnQrVmoxZ0xkRnB6VklwNHJEOGlZVktjMlhybVY1NFN2MG1YNnRQdkk2d3gvYk0yTEhZanBKQzJwdlNnM3pZWjJnSmh3SHh2ZGIzNXh6Z3plY1lPWlBmNllPZGpOK3o2bEhEZHFGTExXTVNoN25wU2h2cFY3THJ3VmRvd29JTmlnYTE3aHcwb2ZPdWRvUG9YVFU0WHRSek9jY0crVnF6V1p4R2hGQk5KWERRRjdmRlY4cHNNWW1XTVpXNVZVazhRSXdkQzU3blRKeUNjTTZ1Z0JVcmRVSUtSemoyUlVsa0VidS9HYllRQWFMM2VjSUZvNGUycm5jNVFDbUJ6NCtwL1JLUkF4VFV6OVJYcHZOWUhVTkw5K0xtOFgyeWduUFZYNDRheVZ0c2ZTMkZLbGFLdEFNQmp2NEF4OFQwMkcwTER6dCtBZWJLTlVFQVAxdlB0aUUvT3hMNmdsRXk5Tlc3M1lJejhTV25FRk1MZlZ1OGFsRERHUTc2Y2wzU2FvZ3A5SngvSlBiMEk4Slk5R256M2NDYjJLMFhQNmlYU1JvNTdzMVpxcjNWdGVvQmFsUEdQVEZBa1dReklJOGptaThzUjJkNXdxNUptVmNSL3NLcFF5THNaT21WaUZUV3BuUi96U3FQU1NxNC8rWGhxSUs1dkRIbFBjY3FGS1ZJaVRDdnU1M1I3V2tWMTJlS3ZGZnYyZ004ZDhmejN3bG9jcEF1RFdDRWlibzQ4YjR5K3lWSjZJbjNTOWEyaU1aU3dpaVdJMUFwVXR3aGtWQ1lDWEhzc1FQTjh2eFFiSWpPMUlOcG1JSGJTOUpMSk5KcEdCV3FvV1FybTNNeXJIN1BHbWVQcGsreTZuc0lWZ3FxR2NqcU4wQU81MHRaOVRlNk0wNHNZVDdiMStSVEgzNnRWRjRRdUxzQ2Nqa0RlbXdtTWFaUS90bWR6RjBIZVExTEFyVXhYK0VPQnQ5MG9Lbjg1YStKdXN4TUplQlRWdDJ0UDk3SHJrTktqaFRJdVQzblZxRzRUcVNnVHVMTmxWcUpHbFB6VCtyVmJkNjdwUmdCc0VScXh2Tjk5bzhIYythaUVkRjVpSjAydklCNWx3SkFmVDNDZUdqNVVROUlNVlJod0d3YzhLejl4VmtleHIvZnMyWXdLU2FlaHNlemFPTHBqTzZ6RW8ydzNZOFNKKzg0elZpUm1RWHNKY1NzbDIrSzVqWHFlNU5kelJZK0lrRmZUQ1BBVmkyWGhJbFY0MHU0SVNZdlU4YmQ2TzArdTVub3lQcWZjMXA4VWQ5UkJlRFIzbWdMZ3ZINmYwZXBaZER5NEJ0VldFSFNVNk5FS1REUFN2c01Ld3RnUnZzMENlSUxCVm5nUE02c3ZiNnFVY3JkQytycDFIUDJ6eHNaRmR4Mm9wNVN1TEQ1TlhVcnVHV0d5cHlWdllTVElXeUZtdTJ5aUNKRUZNZUV0OVoybnAyMVMxcExWWndJYzkyK0ZWVTQ1b2Y2SHY1V3FpdFIvZzZyT1hmOC9CY01hOUpiZzRvdUZZUjZiSGZXUkVmR1g4c3htUW8xN1VVcEVpcWY1NUd1SndrQ1g4UGI5T2wyY3ZFSm9uUTNmVGNMdVNTZ3EvWDF4ekNRU1lVYmtseCt4K0pDZjJRT3VVekw0NDNCcjlreXo0aHhFUUJSd3B1S1UvR2xlV1VuQTVBQmpWMFZMT3BpUzhnTUJZbHpvQ0h0S2dQVjVQSVNDNExROXJ1YmZPc0ozdm54VS9KQjNweW85R1pJNHV0KzRlOGx6TWpKamxOMWtHVzE5YzhZV3lGVk5PU0NpQUxyUXVxK1Izd0J1L2hhTy8vdlVYZ3FpSXc3K21aWStPS0sveFVwWEtnQWpjaEhnZlJmTXZFQk12RFdaYzNwUmZLalJwUmVmOFRuL2hQOVhBMnJZQnFXZzNLcG5YSzhGV2c0eVE1RFlxOHVSbGgyTldQOWd6ZldRRmNQWWxFVmJkWE81ZDZSZTVtaGhWaThodGJhZndpS2FUOU14U3VkSEMxMGZtUk4zdnhnWllhaUltaE5BMk1xekdtbXVxU2N5SmZoV0lYMWtzQ0sxWjVaZk5TOFhwUnhoS2txakpyWHQyZXlYRmMwaFh1T3JuUnZvZUIrcjRKa2VGSGJtU3lFRjdpaGtQT0ZPcWhPY2FIWWh5RFhocis1R29MRG1HbFRQS25USlFrMmZyN2pHV2t5Yk52MXNCQkFhZXFEU2lmSGIwa08yeXZ6dlBmU2xUbk91SE9vZEdVMmdLQURaU3IzU2VwZDRVWHdSZ1BpckFLSEMxbUJZRy9jTExWakRIY2xOdkhaYk9WdnE1MTV3N01TMVc5eW83YUQvaHNZN0NJa1RLRE9FVlJRaWxxMXVRYUVRY2xLbGE4Sm55RmIzY0oweXVYL2VZR0Q2VUg2ay9ubW5XdlRaekRDbVVXZzVvZXBkdjNlb1lyLzFyVUUycGZzTEl5SnVLUTZyS3FCdUtabjkzT21iZ0VlRlIrTC9pQlp4Q1FLMFRjdkRmN0xWNGp4azcvdk51UFpiRFNrQkpyeHVPSzFjNEpzVkdFNGZxaUpoaklRYmFaZFJRWmpKR09VS2R5eEFtU25DYko1bys3d213QVlZVmhhSmV6MHdNZE92WFdjdGkyWlBpMmFvSm5HTnZ2ZzJzeEhDZUR3dFVvOW8yQ2RkUm55c2h3aUoveG93MWlVcHZ6Wjc2YzhFcXo4UlBCeWpibGloMjlPUEpNZWJwMERaUWwrekhYNmJJbThNS0hlYWNJblJ5WEtEMWNSb1BYaDVFZWVMWWdsRENvcEwxK2VnUm05c21BcUpTZXRFWkR6dWdEZ0poZnljdGoxd0hNcHFFM3E0SFUydWlHRmZOelpnZW13MTduM0g2NHpjaDhaKzU1d1pIUGcwVXpjQUJLS0Y4dGIrZjJYR3NvbTNJTklUcnJTZ2VUM1JoOCtQOUFkSzRTdnJqUkVWMkJFTmFRa3VVWGgyL25BOWRnMEZWYTY2NmNPZ21UMnJ4Y3lFMXc4OFhBWkhXTU5jUUZIYmdQektzSy92WXJEQjlTR241eDB3VHA5N0lCNWtpK0JVMWdTZzF0NGQvWWJvd0V2QTEvczI5dFQxZW53RlhHbG9HR1pTVnFXZnJlbnl0OGVPMTErQktHZ0N6eHFqSUtqc2N0V3U0bEZRMG9ZcmU5U3RMc0RocDhmTThJWEtTUk9aMjd2V1lNSkJ6MXFyRFN1K2Y0b0YxZnhqRVFyTUtBbkYxdUVtaUFIYWNYNHloQk9Ody9SOHhzTU5RWkN1MkNZYkJwSmlXVG00YS9admN5QnQ3aGpMcHU5TGt1c0FRVU1wZ3hFc1paaTFOcHRUQmRzRDFrWFArUkh2YXBwWUhqa2JyaGtCM1BVUk5laElaYWtsUjYyaTg2N1hPNzBvWEhtd0ZWRENSU0l2cllZZC9qUmtzakljZi9uTHYwcTRJQnlmZUtTMkRBeVhKVEp0MThWV2VVelJqdzMvNUlCTDBIRjg0UFo1cnBKNCt0N0JENEh2Z2o1NlJpME1nVVdoeEZaa2hRdjFZTTUrMU1WSUFiS0JkN2srUUFMZHdvc2QzQnRKMzRMUGJEbXBteDRwSjBGY244Q2JQL09taGFhSTFoVEFMdXBjTmNRV1pKa3hMY0lFQkpzU090eFMwVWx2dEVLdVJ4aG9KL3YxZlNGSitIZVVBNEFRZmxkY2ZLU3VXcUppZDdVR3J3TWhwT1pxNHVnTzdwcGlvZnlrVHdhVFhCRk9GT3dRd3pRZktFOHVXb25wK1FrcUxvMmJDSm9QR3ZScVY2ZDlka0lsbzdEa3NjYWhBWDQrNUJKT0lqK1VQOG1GT0JxSTVaOHdqOUJXT01BV3lBY0p2VFpuZXp0d2V1b3dyUTA0elRVbi9CZXRFb3Q5RWZCRWpHWGhpOWZ5cHBtL2VQWlJEQU5GdHBnd1I0cmZJYWZuRWx1M09sNUhUcGxtdTNlT041aVdtb3Q1YlZxVWM3QXdWb0l2Z2RUcUk2bWhDMEQraXI2TFE2UXd6Yy9FUEI5cks2Q2Y3bWRnY1RHM3pRRVY4VWF3cUtmMmdHQXVZb2gwclFKeEpLUDMvdFdETU9BRzd4REtOK1hBMTVKN0x5NjlST05ISGlkU2prUzVWRlhyT09VWi9xUDRURnpiRGVHZHB1SDRQSG5NZEJDSEpRT21oV01tN1ZyeTlYSytablBJNlZIV1B1R3QxVlpMUjI0OXJ4NWcwYUNJWGNXWUJaMG8xVG1oNmdTa0U4cklkVFo4azhISFk4WDRKZ1l4b3BEblhrVThhL2ZraUxSeS9FQllIbmYrb2g1YUFHR3BqVXFZcUpWWWFsSy9OWjhjQkx3bWZMNjQvY1M3UWd4L2djVER1a1k4NDlSVXJXMnlCRE5XYURpcU0vbVRkSVNTNUE1VVp4eEtDZXI3M2FpSWJta05xVWhXY1dRcjBzUVpWQnNocmxSdkdYT0IrNGo0Qm5MVkoxN0l5SGppM3I0OHRhMDlKcEpGRmowd0N1N1AzNHNXRHR6S2NWU1NlRUl4VlNGTmloSGhpT3FMMnRkRTQ4cGd5YW5ZdnJYU1NheUY5ZGdrZ3RjY3U1cjZtWUIzaDhRR2J6U1JlSTdtZmlJeW44VDd2S0J0Y3NDaFpVcGFoRjd3Nmo2cDFFaHZNMWwzL2tzYmROUUFoQWdWcXNMVDV1QThXd2JlTHhtQzRQenlzWTFrVzVHOXd5WlFaaUFOdWJWKzdwd3ZJTEVSM2pERjBIYy8zZFZHN1NCaUd1Z1pYb3FrME5ZS0NONnlxVHBpMHlDMjdoTVVDb2s4TFo2WmVYSTU1RzBpUUkrZHlWeXR2OUVEV0hEOGx0dStuaGd5RzRyK0FlKzFsZlk4SHJQajFoYlhpUVBmek5keEN1NTYxcUdQR1RDSDhpNGRyU0FQN0V4YUZvckZpNWl3UFpIY0lYVU5xRlp5TXZYMGpmYlZTTUN3MFk3VEhNR1k5Mk5Rbm9TcUVoQnJwQ2s0ek81RTNVTUU5bnd6dHQyZUUxN1krem1qTzU3Zzk0aHVlZUpGUDFOTzYrYXZ2RHdzVlZnVHdkSlZQdTdLdnk4Q0hEMDZsdG9ONXdqUVNsMmRBaFd2aVNZUnNkTVdkQzRhWndnOUxRcTdPS1piRnJETUlYZjlmQWVES3FvT1BySXBlWUJpU0pxOXdUc3pJVWpKK2lHWDcxcXE2a3k3ak0xUFpkanl1UnU3UzdUVGhNdy9RQ2NHcWJlR3FRSGRIY0FYL2tld05KZDJRM1JDUnFrSWorOEZzckJhZWJuOU9LYTZVd0xGT2dNc3FEd2VtYnpZMXB2dzdPY01wWERqWGhXdi9aNGVxc1F5VE9JTkpNdlVUMFVMdDBQYVc0ZzJ5bEVab0d6L0txQ1BZbEpDSXJtdjlGM01ucHB3UWNnVmt3bTc1QldUNGFURlkwSnFuaFQxdmFTblJrRkZDNjFKOTBxZlMrZWhJaHp0enVyT1E2ME9uaEdocDF6aFlqeEtTL2tncTlaQjBkZUh1dkI0WTUyNW53RVgyK1VlcnIzSnlQeVFPWTF0L2dHYnoyZXc5OTNZZWJRMGhFNWdnMnc4SXUwLy9TcUNuaWFuM25ieCtPM01lcmlOL2dMMnNSeTBmZHJDUlJJWHcxbmJ0TVlrdU9hZUhnVDZ0TUxJUkszWFZXWkhCSW82THFWNU9sMU5HcldJWURVL3o0MERrczlyQ2s3ZExENWo5YlFvYlo4czhRMUVaWXI1Ty8wOWlrSUQrZFRUVmRZWTVOL2tqMkhUTzR6NmsxcUFmRjhKQkJIbG5jbmZZSWQrcENLYldlZ2pRUzlYRlo2N1hKajM1WmhUUGs0RndEc2dpS3cvVm1iOEsvMnpJRWlmMGhJUUJ4bjJ6V3FvMHp6UHRIdGdlR3hrVVNTU1Y2ZHZHc09VTjBRcFJydmRZcDlYaDcxMGVZWjduZElHWC93dkY1QjJRRG1MTjZPenJXejhCVnZ1Q1MrMlZneTNISzFlT095ejlTN3JKVWMvL3Zhd1lNV0JUU05BOVFTeU1GcHdiUUdnczdKVHgvQ2g3V1drV0ptT2dLTjFNS1N1azlEakpHbXZISG15aU41c1Z1enF0WnJUVlQxUzRkZWdRMlNGcE1PMktxUjNVZlBwQ2NSRjlTWTVXMlVuZ2paWFhvTHZDTFNnek11UDlkUmVEQStqaW5vaXF5QWtkTThNSk1FTUlnSk5maHJSK0hTY3dEMUxwZzZNNXhVTUF3MGhtclRUWDhNajFSWGNEalZUVmVyZHZiNXRwZW4wdzZpNW5BVmxScWZ0RWQ3M3lFL0t2Z09xeWtoZzVweUxzRHV0WUhZMWd6UU56d3RraVZWQXFBSWtNTDNxZTVmc2thZGZEbHA0VEVkYW03QnpQKzVGcGZPMS9KeDlTSUp3UmdKZ0l6Vnh3NkdjemhyWlpJMGcvZ09lc2ZibTE3RkJ0ZmdrOTJTcGtneUlWRU1aZlZWT2N3NFZLaWVoODNWNEMvdVY1U2hSakpHSERwb2pHMUpYZExMWHNWZytQbklVY1l6UVcydE81WUZGS3pvRitURHl0OG4yeVhiZzhsT3hocGsxaWZTekoxS0Zha3EzZnNMR0E1NGFBdUgvdnVSV0pHbnRSWEpKT0hWa1ZJRUhXT21pdWdOQ2hCOExPbVRDVjJXbXBidWduVDhMNkdkeGhRNWVhZ0oyMnRGV2RYMnVzL3NJd0F0NEVycHBqVkF6cmZ2N3NoYXBqSTRGL2cvRGZmU0M5QVRsTzkrVXo5WG5mNXViV2RRQlpHakxiUG5HSWFmWTFBZ0ZpQzlrZ1RvbjhSZndqbk8rcGZCcjgwbWNvajd0aUVsUnF1TnFwN1RlRHdSVUYrRlRaZkZ0NEFSdUNUcXhJUEQzdFppdTdwZFNFTUtZa1pHV24zdHo1aXlaRDBHTFNaWEM4b0NNbUNwd1pJU3pmZ1Nud1MxWTJiblcxWFRSbWw2d2tOYUhVUytxUkRLb2wzaUN4d0RHMlpiSEhZeXdMUFRIV282S3p3REVXWFFiMys1ZStmNXE2dnhCOXFNei9zZmFKT0ZrRGtVeWRGMWpueVVab1BGU2U4QUhjcjUxOTQ5Znc4ZmxYS2dRQy8wQ0N1VDRKVUJBdC9zVmwyMFV6L2JkdFZ4T29hUHpKTDN1YnVJa2RuV0FQR3VNVmRTNUJzc2lNSmo5ODgzVk4xZHQ2NFZVU3cwVTNSRm10dUlpSThINzVGZDExdWl2RDRVRmw2WGRuMU9VcWxITG9wdGI0eW1GZWlvZ0tYNTBxMzhSTW9jbDBBSW13ai90VFdQODlOc1RwZlRva0J2QTN5bkNVS2hScHVPWHRGVnlMN3FJUkI1c2lNRE9Da2lpNE95eC9QM1ZjVTJpM1ZhYXhVNE53U0Nlei9tV0Q3MU1pQzZLcUdmbVFDclNoRElEeEd0c3ZWa3kwNkg0QUk0a090V3kyU095UmRqWFU4TWdkZ2ZjaVBnK2gwSHhTQjdzNXZvTFZpSUQ5UWZCVEhTZERVd1FvdlN3VXVaR0wxK0NkTVRxT0p4VXQzaXM3RjdLZ3hjMzlVTVZRcEwrTXkwSWtDSmFud2xGcUp6cE1IZXNucHhiZlBzS0tmOUpGTFR3dHROQkt6YkI1WjhXcHdIc0JFaFIxSm9uNlNrUmZLQ1lHRG5SczFEUDJRNDl6bnF1dUdkS0NyL3o2dUFSYW9mMm1ybGdtbWJ3RFRiUWZuMEgzQ0R0dmFpckJudkxSQkZuRTg5V2R5a1J3VHZ2emZKamEzU3JEUUxrMW9GN3VKWGVKaUl0akF2c0wyMUxNVTZsKzhCcE14N2tXWXE2b09hOHY3V1dqdnpUL0tmdU5HWnBhV09BNmZQWXVwdWtNMTJaUUZZMUx0WHRobUZSQW5FTzk1ZkZrMllKOXUwM3ZYc0x0bURvQis3Zm9NY0NDRTlQUk1KczFrUVNEdi9aSlVPa3ZRWEVQRndZKzBEUXNILzl1dTR4YnV6cTdUTG4wZlhhaVlJNDRwS3o0eTM3YTkwdzNldDBpN3A1UnIvVE9CSkhVWGY4eHVhK0d2c1NhVmo1MjZIRjBmK1ArRUNmeWRXN1lBaGwvbmEvY0VVLzJaVlJHbFAxQ1dVTGZDT0Q3ZGtkeDhxNU5MWWxCWDNadzRQVk1JRnI3U1UyRmZvWHlKUGxXSlZ0Z0FCNmQwa1U3aGVVTytGblMvSm1icUVaS2NHRUJwUWxjem9sVjR3cCs2WW9aU05oLzZNVWcwckdyT3k5NnlUZTVhVVg0OUhScDhwRjY0d0JvMG9WU2RMT3NxeVRjQ1VTMmliRzhsaFBRcE1pK3IyVTVRRXJjcWJsMHh1aUVVVkRxcWdyckZSbGRtcWFYclRjMkNiUnRDczhWa2N2MS9RTkxJVjE3L0s1algvKzRsNmZ5VEJ5eHBBR1VNVUNjbHFONzdENDdITllHUlFNVmJwNGoxSkxWTEZ1cDdDSU9vSmlxVXZXbzlDU2N0V2VwbWthMHU1MTl4SWVTYkVNc0dHVENQemRMVmFhcWZQWFJ4WENBZmV3OVZaRlF2blc2VTlwV1E2Mkg5NFR1MUMvK0JDcnM1cVEvTW4rWWhtSEdkVmJ4WDZ0QVMyWVY4T2kzTVFKaG5uUm9lSkZZSVJoSzJQb1liRlQxTWVCTDlaUXVvT2czRUEyZmVqZ0RxcG4rVDYxUXU3azVJZmpzTDhLUmdBNGo2STcwTmRWcm9BMW1HTVE3VlAxUkhvUWFsbUZ4VWlNL25iMWFzZ0k1aDROb3d6RDBBZWxjS0djZW5QMHk1Z04rcHNpUjFaVDA0UXgwendCRUV4VlRXdkhscEJLME8yL3o0enV1d2hCSWRjYzZoUjdrZG9BdngyZlAzb3RsSitIcnVnZVFRS3N0RFZIbUh1NnhXWlBTbGw4d3p3VG1nL1pBd3g3RkRIMGtuQStjdGVXeWMwUHVSSDVvMVN1aVBqTjVSNksyeVROUmhRZjNnVlUrekMzOGhmUXVpOTV3OWMzQUlqVlE5YjlTTWl0T3BYNy8xWUpWOGlmTWk5L0RxSmRYQng4U1ZwYUxJOU85K3FMb3lOZCtXWWhubjdSakRGamI0MzVFWkhsUlVDRnBnTjZSZHlON3U2L3h6ZGZ1S3BCZWVlUmh3bzlnRUtkSUZEQUkvTHRma2l2NWpwT1N2eThjMTRvUWRMaFJUZkVRU1ozbmhQMU9IOWJHRTNWVER5NGI4NnNVQnN5cVh1S3prZlJxZTZucWNGZitZWVF4eHVYZldOcGZCMjZOLzZhVDExRzJJT21QTnlIMitUZmxyNGlYYWJ4a1dNb2x5djlFdk1jQUgrcWppdTM1NUg1V3VhcisxZURtbjhtRUE3Y0lmbVd5V0pIYkZJUmp6L0RjR2xLc2psNjNuTGh0eHFhSENnYUpMbUxIWG0yZ3R4Q1ZYU1F6djhzUWp0azFDK3hrVzBNVjY2Y3Eyb1V0TXB4U3FrWDNmamd3bXNFL0NNblF5WWwyNUZ3SWZEVnFsUTQ4R1o2N1UvSkxic3gzV3B6RzJkYUd6dytQQ2Vlcms5bHh1YU5BS1JHdUQ1RGEvdXlaNy85a0l1cWRiektDUCthMlp0S0RFRmZOSHZXL0NsWm1STHUrSlFyZ1pzMUpjc2FmTWk3M3RSSVRvQUdvRUJIQTMwWm9ZTWV6R3pmL3Q0bCtGajVlV3JzRmdzMjdaODV2VGhOSUYwNU5UYnZ2VTl6aGxDdGE3ZFBzSTRBaThWNzJkY1FlZ0lERXcyUnZRaTlOOEVWbWVPZFdhWFYxaVBLZkNvamx1RitDRTVxcVlMSkU3T1ZYVFVmSmRpeHlwSGQrZkM3RlVOekQ3SjRQbEM0K1lSZHJwNWdmN1I1eXBENEtyOVErbzhCYmVVQWU5djdIUnpKZjdMeFFya3JveHFNdFhYejZvS2FYK1BXaEFLdXdGSkJCNks1bWVHcVJaNXA2TytUeVpIQXAyeXdSMWhNU1hNSzJBODlNeDFTR0FBSkQvMUFhMmRYd0dTUlg4akVoSUZrRk10Y0pZNkJaSHN4SUUrYjhJcXZOSXJsNVRNNHliUURBdXFuc0lKUTBIVHR4UFQ3bnVzZWxneWxsUW05SGNUYmx6bFdlRkNHakEzSFN0dmNsQ2Z6QVBEdFNMc09sUktmNDQwemNCMk0rZGdSVFF1Z1VIS2x3NlpwYS9yZWNrNnNrL1R3blpkOFZKWHpWNnJtRG1Ebkl6eVpwOUZEaG1LOFJab0cwY2ViSTZRcS9iR2lUdk1QWGlWNDFMNUVJZFphQzczdWw3aVAzc2xPUDVTd3l2OStoQW9POGkraENlNU5kSWVSOUNKZ29pU3hxWS9jMmNMdDJKV1N5SVc0eU5CZEsrTFQwY1pTVGxXNmROc3RMQUo2SVlCQTUvQ0xjWTBlZytUQm9xbVBDcWZvQnF0bTArTXVubU1wcC8vOVYwbzNWcmNEdm85dWhTT2hDYnU4MjNUYjJTTm9uZHFpdUxTS0xqKzlzTVZIRkxCNjJFOVVsWGZuUnZFVzFxRWZzSXc3ZjBZNkQvRUxoeGdzUCs0VVZGRTlBNXRuQ0xaU1g2LzV3VUljZ2tjdC9BaWhjWkdYbk1EamNLRWhvTUZvdGg0M1h4c1JhT043TkRONGlSemI4TlBRSk4yUmFTVlEzcC83NGJyc2dyWTVxd3V2WVFZM1plaVI3dmpLMlA5MzFKQjNsNjI0NXRrWmdsQ1BLWGNiVHBHcWxvdnJuNUh2YXF3b2hLTlNyODBoaEN3eXBlS2IyVW1ISVBrWUxsd1B2czFCNjV3RDMrZkk4R1YvOS9xV3lJazE2ZEcrblh5bWc5SE83c1dtNGZveHJ1dkk1TGNzSklyRDVOSURSRmRRdE1qZ2hHa2JOMWtuMHplS1hTaWtXdG5aQzNZSzBXK3F3RGIwYU0zMmVtdVpuMTBNdkNuQTQvaVhxWDBIREdyN2ZYR0Y0TnZmcy9NOFltMTJUaW1IQ1BBN0VnNDU4c0doSVFCUHRDUDEwNlp1UldYZ1JTRDJpN2ljZWdjRDRFUGNnbGVrWC9Ub2M5ZEFJam1tZENvVTNhOG5tVllhR1oyTVZUUnIwS1lsRzVwZmloRkF1Y2RNTVl1VGd3Nm50K2xPdEFMUjhJZUpiUGg5ZUNZN1NEdWhIQzN5L01rWnd4Ynd5eU56SFZtOUVmbS9jdXQyUlJqRXR1Z3V6QS93MHJ3ZkY3YS9CeHEvTWJIbkFGR0hjU1VLNHlZakV5MjRIdFhLbkNRSDR3UWxRZTlLdDRwU0xjMDB0dXNCL3hQNFMxT3F3MkFialVESFdQemhqeTh4aGprVWZwcFhnMmpwUk9BR1djeWo3MUlGN2ttWjhYZCszbXVraXFJNnR6ZmxjMnRKR1VmUGk0TExhekt5SUJPWUZ0K2ZsbjQrNW52WitxNTBmdWc1WTZmYTU0citsSHp0b2RPN1gzVVplRWVXaU8vaHZNcWtMOUJGTlJxTy94QVZsVDJVa1UwS2IxWFZMZC95ejIvQWQrbzIrRkEzRGxXWEFMcGc3aEFwRzNpTkQ4eGlwYUtadUhmWEJEeWROblRGaDVRRktDMmw5UjZYbkQybGRaV3pwaWlhOWpleXk3dk5rbnJRRlNQdDlaMUdWR2Vqb3JMTUZST0lrMGRJUlUrRno5d3Q2dGFnTlIvdlRWVHdpeVFUaGhUWHJjY0t2c3ZjRmM1cjhkMnR4SjdZSmxGTk8vT3BnVFlrcFpLYWhqNlEvYklBQVQ4U3M2aU4ya1c4S29QNGFhbmd1cDhGaW9YWjdaNTgyS3VEK1FVaGFnZEFwRVdJL0VWQXVyQ3l1NzRmQ2JheU5ZbG1QWlBGbktpK1gya0ZSdTMvMzZoSVlhdm0zbjhkbi9JSDlaRXFYNitlNVhyQy9uZzE3Y3hRbXhrQ1dqSG9iWGNaQlFoTkgyaVJzVm5pcTdkQjZzMC9RVEx2ZElHZDFJaTNYbkpHODBaYk1VQzNvK2E5N3NVczlKQnhPVERxd21YYmJCejg5ZXQ3cmZCN0J0ZkR4SGNPUVZpZTJmTkZibGtQVzhZY1VpUEl5N1Mva0Y5WU1OT0xta1daWUNsZEV1UjF3WU5WM0JHRjBTOWMxMGVPYUo3SXhhbE0yakxRVDdNcTAxTWVHNmtJNDhXaS9Ea0FZUDBYS0dic2JwTWJIb3hac2VQZ0R5NkJCSmx2dC9IZm1ZaDRSZ1RFV05xYllpMkszS2Y2ejVualduTXk4UDNqWFQ3TGFBSlRxbnVyeHRXenpPbEtTT05GaVNneDhKOVppN1lqMXZhTlg4UTRiL1N2NGFBd3huQ09mdHVNTXVUcU80aDhEYVllZzlkaGFjNGgrK0doa2RVMHRzcE9vNGRCS0lTb285SnBTOG5kSCs3ZkZhRFY4akgxQ1RsVVdQRHV5cFpyaXBnc0tFRHVOZnl2ODJMNnUrMUhpRlFCYjJhUzc3Q3ZOdXVKMXhrT3R6M1IvMGZ6a1k0SC9IWEpuMEVLWjV6VWJ6Qm5qNzhSN1l0bGVrRytSMGt4VG82bURXS0Y3d3YrZjRvajdnWFFDTk1Rc0xET3d6NDUyUWVVYnIvZE1ZWGZSUFFZNFFTRVl1Yy9rWXdvTGVlK3owb010ZlBSdXdMOE5Hei9rQ29IUHV5aXU5OEJqUmFOUGJGS2lFQXJWRU81a2FLd0lPdzJKTUVUL2NHdVExNnAvREttOVgza1ZETmV2NzRnYm1BZk9UL0JIR21mUjlOeEgrOHNENVZDcWcwNFFNUi9HdlFkWkE5dC9ZV3NQbHFWYWdEcHpEMnNmSGNSeHBVNW02dUV4cnoybHI1YzF5R1NrRzl5R1pjeDMzdEloSlNGTG1ZTnBsTjRJYXNFeDBBTkUxLytLSGdaT3p2V2hvZDNXbUNkamtKaFY3TWNMbGRiZEtYNmxmR3IwaFZsUWlONDJrbUFabWQ4WEM1T2NKQlNDbmFEakpCL0kxUGlwTE1Pbko2K0RiRWNsOCtVYUJDNHhOTHhnVTc2TEI1RHF0ZlFnNG5CcHp1eXpaZi81eGtQeVN6R0xBSGpldE1Ocmx4bEVyTWtITWhTTlhkRUNFTnpwOEVGZ0l1eGdwK01pRXNKRVFMYjNlSHBCKzBSNjNaU1IrMG5nOXRxbGhnc3oxQWRhbEhZbHBFNGg4NnVUellrQmhJMnF5L0pPZ2pMYlUwd0FxOWdiZ1dDelc1dzRhKzhPZDcyWTZxenFXSGdIcWpHaWlRNVNSVEQ1cW5sWTI2a0JSVFlYQ2pMWFhHUjFmSW5jZXQxaHNVc2pJWGI2bVd3aTl2Y2dnVWQ4MFh6aVRZTVhTNksxejBqa1FxTCt6dW1rNERLSTNNTWxCcm9tbDJpSy8rbGxWQzNLY3c0a0lxVEs0QXo4SnJkSnBwWEYrZUlSZ3Zsc2tGWlgvcDR0TGxCeWJ2M1IxOTYyY1FDZnE5T3oxRFlhcm9VZFF2ZitGZ3dUQ0FTK0hIRDJQcjY0dDU3MTVCWjErRnRaVUF2cHNHVk1uTlcyNjF1KzVaajMwQjFEbEs1eUV1VGw0bndWRWdHR0UzVHlpVXlHRVVaNzZacitJTXE4OXhsSlhRVXJRNmlCMW94aGZJbkZSMGxsNGtGZHBCZjdwbmZ1L0dPcm96M2ViT3dWQVU0RVFFZTZiS1lIZUwyMkRBbU54OFpLUHBMQXZleDJ2L1BOZXNJVEptWFovVTl2Nm16aWFzM1FKODRFdUNFQ0oycmRVenR3YU5UdzVwaG9ENUZmRHdjbzdScTFUL3Y2dmFEY1Y4d2FEUTQ3Vmw1bnp5SDB5WDdYK1YvaXhYVm41TkxRNzJ6bHhBRTFLZkRPeGRPaGtLaVh5WFY4eStNa0ZSTVcxakluVmI2QjhxVzAzZHRVL28weFBLaGovRmpIN2ZWR251aTdzQ2ZkMjhxR1hNaU9IbHpuMVFYb2JwNzhOWkY5TDNNUXdsdHB5VVIwSHZZam5IbUdzUjRmR1RRNkhFc0p0R0V4Ly9ycXZOQU9kVHFsMm5JNk9LNzJmTk1oWW1icjlLL2JwSFppdWRveWkyV2Z1ZUFPUjYzTWp5aXBLUVZMVW1CZUl5WUhRejdhd1ppYWRubEM2U2gxeENGUDRnY2R3NG5DcFgxVlF0Tm16QUcwNGdzRHJ4OHZrSzVRUm1QR1Aza3k2ZDZtSlJ4aVRBV0xBUk1qcTl2VkVDMTVFZ2pyL3hTSHFRbjN6bEYwWk5Udzg1UDVRY3RrVWtFbTdjaEdWRkRzUHBRUHdhTGpFR0tFbk1NUmlRYk10Y1NRUkdQRXpNS2d5dVM4eUVOeXdaejBvQWFKdktaSS84QlgxVEVBRW8yNXpEdTM4SWl1aUJLMzhoQXBmRlgyNlVwSVU2TVZ2ZU1qeVc2ZCs4T05nRmZDSkhRSmd6bmRTYWZhQXN5SE56R0hEY1RhTHJGRHAwdkJkaVBSWXdBQk9MVEYrdy9OZEVYK0c2RFBCbkZNZE5JTCtkam1JZEJCclBZR0UyWTNwT0FLZ2l3MnVhNFNoN3l1b2ZnSGtUQ2gzQ3JJRmFNYm1XUUs4VEFJOW51S1RINys4NkFvT3RWMmNkNmpVd29kdzVvQWpieVZPRThRYllMdmUvL3p4ZytuSjd2cVVXSlRtOCtFS1UramZaMzIxVEd0bHFqOWhMNnZMekRiWVpJN1hJdWg4SjRhMzJRZ1JXeFF4Rnpmb0tqZUJzVDRhb1ZaV25zbExNUTRod1RYZnlHK0RZdWhCcW5iOWE5MVRjYWkwT2tKWkRiejY5bVhHbUNZWjA2YTVjb1hQMDN3QzRMZjJRclBTZkxXUGczTXlpei9JYlJkOHlzK1VrQU5IcC9VZGl0Q1ZJN3JXenM4TzY0SUE2cFpVa2dLRnNMUzR5ek5ML3JaTzZOL1JPMEE3MnZaTzI0WnFzL1RaMVNYR2l6MG1nSjNOc1hFcU9oTG9HVndjdk9vaUhlM0VDTHZhMDRlRXRaaUZuUmlWQ2FwRmNyT3ZzV3M5dmVYeW5pYU9qUFR1ajBWVmgzRG1RVG1Zak1sc3g3WWN3NVdSeHFIdmVtdStYVnM1M29TQURNdnlGY2o5YmNTNW9NMWVRazRLa25oR2ZrQk1LOURiVVFBUUZQb0c2ZzhtNlY0M012MzB2YlQ1NUdGRTNxeTFYRkNLK2tWV0dUNUg4ZHViUVp2QVJvcm5ZZE9tS1huN2piQ1ZIU0NwRmNYZStxYmoyekNYcXhhY2VzNkVMSXpKRVJrUldCQnp3QUt0Y0lmQXRCUEs0dlFGc1hSV3paaFVCeXRSa2M4VjA5M3ZJbjA1bzlXMGRka1R1YytZZzhGT0VLMk8ya0IxcytaL2RWSWY2ZnpHWjEvbDZzV3FMdk45dE9hUGVIdnRtRkl2QWhXWlBOcUhXMHN2b3dqYytrd0xZVWlpZnZDdnNUZTUxQUVFTVRJUko5ZzJBcHAvVnNCSm03NGltUVZ0S3NyNnNkNnZpcDA2SStJNy9KMlE5Vk9oZ2FQYUZsV1lTenNwWFhFQjNrNUVWb2l5Uzh3YW1XZ21LR1h3cFkyOTZrdDhvcDdCTTVqNFNQUS9TNElXNHNKanBQeXdma3VHU21KWWVlWkR6MEFuSjJQSlkxb0hiaUN0OVpLdGRhYXFvRDQ5WnNOWFBqNXM5L2V3dkg2ZVNDUFRoL1h3U0k5TTFiWHE5alp6eE5zMWNuakNnakJ1bkptRjJDcWZzWWFUa0xETDJDVmlCcVBlbUIybW94eG9hZXlZUGFTNDdRNy9ZSWNwNlJRTmlhS0NqNzB6N3huclRLQVhTOWNtc29ydmNGT1VUSE8xUE5mZ3ZFbnhGWk9rUW5qMGtiVVVNdWxTTlZxRFczeGtZbWtVT3M4L2xpekhab0pBYkZIcVRnZllidElkSmg0QlNjakY0MEU3V29qWUhZb1NmcWptZUFwb2U1NzR6UnJMaW02NVA2L213Vnh0S3pTdUhzK1hHZlR0NlpNSWJiT2FkNUtSUTFzUjBEV2Q4UlpndVJEK0QrYm4vSjE0YXRDZW92d2hKdGxaT2pBaEJiRGFraG1YN3dJa3BpVTFRZUE3eUdUNU5kb2xSenRRa0F3VXUrYmxQMkV2UEsyQzVPWGNRazA5emdzSjQ5a2dBZHFMcW5KREFPWmxRL2svMDBReE0wQlFRdXdMeUtqV3VER0x5Qy9LUTB4Y2ttamdNVVZQU2hvZFE3NXN0eEw3Y0NFdVczRDFmM0dabzNIYnhha25WaHdXS2VtNC81cm1ZWlVzM25GbTFOSjZNRmJIUzNjZWJZZm1CVC9SdVdsUXpaMkJIQ2FvdDNzS0s5RUxZQWFMRTBpM0F3L2pqSzZSd3YwRnFUMzlCQ2hNQjA1a2NiT0VxaEE5WFlRWld3Vk4xRkZCVE5EN1NFcFJrQ0pLNm5wNGwwM1JvL1NiTC9zVk4ybjBUSnhwc1V1UnY3eUl4SXJZK1BJMjdhZCtIZ2NMMlAvZCtFREVjZytacVc4WEFLbFZUM1FaZ3l0RTBVVTlyQ3NmNmtyUGRIaENjaW5CdjAxNi9WeE9DOWU3NEE1RGozTUtSc0tFQ05RM1A1Q293STZ6a3BvM1MybWltMlVpYjJwcmptdnBuUlpqNUNBeVo3ZENKT0s5NzJDRkozT0xFL2IxSWdSb2tJeHNXWjVucjFjck1wMnNaRTkzWjhMNnpKY1ZoM3NYQUR4YjA3RDVKZlYxVjErQnRVZUZiWW12Z1VuRDhpOFJKK2lFMnB0NjlOZXZ6SXVwb3ZFOEpQZ3hwZ2dpUWFjeERYNHBNMm5ObVF1KzNxL2ZBaUN5Q0IvYTNTYzJTaDl6VHNHL092UDZ0Q0FiVCtkaDAySjJWR1JkWFlZK2h6OENXVndCdmJEdkxuUkpqWkpWREgyTWFJV3hmaTR3Zm1wb1VvTHFIdVZvd1NGRWtuMUxEc2FoTUt6WFZYYTVvVUdrb210aWQzWEgyc1lsckhBb0dDeXUxWEYwbzZoeGVHWmFZazVRUHA4Z3FNc01OblUwK2lnbjQ5eW5vQ1VWY0VxODlGMVlyOW94cWhKRW4wOUF5V1FaSWFGaHlRY245SFB3L0dRR0pTOEJqQ0twMWhoQmVDSFFaZ1FCVE9JUjNsRkd4Y2hLY1FCUitMQkk2a2ZVNUxyekprd2J4OXZOcjE2eGdYNVBtRFkwbkxzcUp6bXJvSVN5RlZzem41WTBDd2doTlJQVy9veHVzUjdIbStrWVVJU3BnSlBKSXJ2TGpPNElRZG1UbGdlNG5nRjg3RWFFYkpRbDdDOU9DdWpITUtrb0dCejFJYXFENTZ6NnAyVjB6cVJadkFFV25ZVWtld1F6OVdKRnpYcjlYZmh0KzAzMEcxRGdnVnJ1VGk5djlndmY2VFV1U0Q0Z2JZZlFZNDJPdVFiWk5KbTJ4WHdqeWxja2ZOa1ZyMXB2OXo0bFh3aWpxQ2xQbjk1WDhrT2dlQXN0SWNFYXhKRklzai9lWFQ0TGcvVDJ6WHJRZkhsVlhIS256MWoyK1ZhSVpKZTN0YTdMVXJZNlQxUzJndG5pcFlTdkx4VExqQm1aNE9tcGVnaThsNElBSDJac0hHWXptVzJoRGk2VG9ZckhiWlh2Z2ZNaklSbXVjR0MxbEpVWGhNeSt5S0NwRTJqZGE1S1FHMDlOWXdTQlZkMnJHV1dSQlc4NElJQmVzTks0clVkKzZwTUg3MjNVT29CNzAraHFRbURtbktEV1B6SU5TcmVkRXMzQlMydFI1dEtzVVEvYmF2YXAwUW5OVHYrNllJcm5vRVlwbnNyeXQ5Ym9sNWIrZGdUeTJ5ZHp1TDVPQXVMRmo3ZmJ6dmJaUzNNZWp1RXB0WGhMNk9memlkVXY2cWQrWVhsUHBoc09sWThoK3RBV04xOVlMSk44SnBzQ0xFVVBlc3NOOEdmTTJPRzBWK3hucU1aZjZhblBHcGxOOHA0VG5qeE9pS1pYblZ2MVBjcUdmdGQyU3hNWHRMalhKNFZZMXpwWk5veWF1WUFTOGx6NGZ5Q0lpbUF0Ync0c3ZqYTlvaUEyclJSUlU4SDJ1ZzFjVy9MY2g0Y1owbGJ1UHZ0WjVRMnpMUkozWVd5SGpsTmJzOVhBYmFtY2pFSnR5ZTZac2dEcnhqTWRET3pNYUVNbnJZRjA5dzJHZ1FpeXJkVmJQdFRqdGNuZTlqYzBlZmJXa0NHYzNMcFQ5a2VtU2w3VFdPY2xPS28vd3BiN1RkVXVPRUZUNmJTbUwvUlNVTWY0dlQzUmo1aDVjU3QzNVo5WnYrWGh1MTJ5ZjJpNlE5alF2MWhjeFpGRnM1Q1ByYXExUHNpSmlvL0MvRDNnQWEzTzJrekt5dnBNZlM5dFpTMXFnbUlwalh2elpBQjdidHRnWnRkWHhhWUpPNHBndmkvWVBsOXI5eHBXRVJvQ3FEc0V1UWpUeUhJZGxIb2IvejJadFU3Z2dRM3FyVGN2MzdFZUhWM0JVNEFvM0dUVW5EcEtEaVFya0ZDR0o5YnVIUitTcVluejZHa0kvVWZNZWViTENwL0NtUWxZZlZBYjBiOEtFanNLVjVFbFkyVXRQTGpoT2lzQTVrQW40MkZCNDMydmswN0V4OXArZkd2MWsvSEVJcTd0WEhxRU5zOTF5djRZa0QvU25NT2ZzckFSanJzb0wwek8xQWRlUWFJVTBxTDRVKzRyK1pFUkdrTCtSNmFVVVRBOTJYUytaRkZETTZtR21JU2pyZUpUNmI2VEhHd2x3dFh0blIxNElkdGh1N2w3NHZiQmtGeVBqc3laRkhNMFRRa1BjT0VWTWg0d3JTOGtlc3lScFhDL0FBMTR1NXY0NThRZGY3ekhHelIrTURXMEhZcFF3bXErVkFaRWFSNlJkTUtlRzAybVdoaklSdnVTbURSN01xM2xYNmthWnJQQ1ZocEUwMlAwRHFyMVpCRTV1bmlIZ0FsTUVNSjFMUmdVeFhnYzQ1Y2JCUC9MM21nZy9pd1h3NkptV2NWbnF4TzJzaXVvM3d5akdVT1pjdkgyVzg0YjNhK2hLa0NpV0syNzB5UFZQeURNcFFyMDQyOXA4dExzUkxXR0tMb0ZETUlvUFR0RWtQR3NHalUwWDNvZ1FnODBlazU0Z3RmK3VqUHExYnJGcGNIUnVTcTFXRFdOWnZkVFRHVUZCU1RuaTA5c3M0RjdZSUYyUGJyS2lTbDYrMWNKbDJ1Q09WTkJVOGNwUHFyTFhTUEZaazZvT2Mxa29PS2xzQ1VqR09ESHp0V3NvSG9FTnBxdVNUa3RmN2ZUeHV6YXZGWlVKSkNCVVdVeU1vZlVOb3VQU282UGtzNEVaNHNHU205U25iOE83dy94Q2VsQkNUcWR5a2Nob1lQcStibW9HeWw0MU9COVhDYUM5b2RQRmlyRm5XcDk2TVp6Zkx4Z1JRdWZkNmo4NXVodVZUcVd5azVSUFNma3k5YWxVTGRpeDdlMWRKZ0pUdE1WV0d2dUhuWEhSUjdySHU5V0xFeEFoT290NDJLZFpWMGhsQ0JiczBVVkIxczlCWVV0OFE2QjQyMU54NGc1VU5WYUpoK2Q3MWcwWVFXeDN5SWZDODhBbUZaWlRPanBpODBoNm5XV0xnMHB6TWltZ3pNLzdLRjEwcmlEd0JkUHExbjc4eVZpZ1ZrMzZRWS9pVFNpY3dwb0xpOWlQNzhxeS9HWTViMzVmTGExejlpVTlQaFhTS29GT09JSk9wckRRWGd2RzM1Sks3Z2l4Nm0vQ1F3QWFNa1BkdUdmYzRGcEt2eVlrTkFaWnVKU3FhMFFOQnVxMzVpYlJxd1pycVZhSjNSd3RzZlQ0eWpTbXdYbHVpd0p5NEdKVDBGU09ITEFJeDBKZFBUZmNIM0tXVzdrK3piWnpLS2FnMXZTQXdRMnNiazg5Q2hUVzEvZEJBdlZ6KzRtQnBNQXZPUWVReTJtR08xeE5OQW5zZHIxWG93eklyWjZUbDZZVmhHaCszZlRib1lJZHU3a29jV3NmZE9hR244OVp3eS9LbzZ2TjdRcDJRTFlBUHMzNERXSnNsU1p5NHNaUjNwUFVuUi8ra2pUYlA3dHhLNmRPRVVXMjJPYytvMUtnTFMyaGpkVUF1Mktuazdmc20wNk1hN0h6dVk2cFNFSFVxVVljelQvWW9BSmdjL0VHMEJmY0xSdzAwL0FIL1BmbjlRR0NrTHB2TWVlcXdLc1NNalI3VXNjUUUvNTlrUDQxaXMvUWs1MDdZYnFuU2s1NktPaGwrUXBieHJmaDV3ZkxTVlRzTGgrU04vRitydEYzclFCTVlpYm0rZ3QyQ0ozbmdKWjlEUFUveUMzSEtDeVJsY2N5cmJXUzdJUW5MU1hzNDVkaE53ejdOZ0c4c1FQcE9PZCtqaDZnUlovS28yNzJYbXg4bGJaOXZUZlYzR0o2Y24raUFYbmN4ak5KRUFtVmZZOGNmRE5mdldoQ3k5OTBiOW1DNDhNZGRpdWxPTkdYdXFFYlJxN0tDNEtlMFpJQ0IzVmpFTkd2dkFLV1pYVlBpVjFGL1g5b2lqQ2kxbE1rbHl1ak94RVJ4cUZ3QVJmdjdqRlRhb0FSc092RVFPMzF2RUltT2JUWU9LSHVmVG41VU1reldKMnkzTEd5dThuVm9tRjY5dlRMSU1paWtQOTgxcER3THV6Um16OXZhVFFBa3JpL1dMZXR3SGJYRDJYMTdyeDFKRXYvL1J0N29MVG4xL0Jtbk5uNTRVTW1FeUFlMnB0ekc3bnFXSlBBMGZwRVQrUVZicHJySlpuMGxVSDMvRWxzajFnL0FsSk4rSUNVdVVKdStlSVdySmRRVEQ5djNpT3JXOTdXTGk0cXVFZDZpdm5aajRoLzBka2lSVGlscll4RWZibDZSdDBET2k5WjFPeXdRbDFZSWZES2lWclM0WjcwR3FManN6ZDFUR3Y0Nk1adEFvRVRyZVgvTnB4bFlIVm41VFZyNnRwZm1CdVYxUUI5a2JJbk9OVjlSaUxaSkVSQ2Z4UjFGQ2FNaUIyV2UyTmcwNnNvN1k2eHBiZmV0UEV0RVErNEd3ZjV3eHR4SmxRWXVyU3VWeFRVbENBN0xNMi82eWpTOEJDTVVZTjAwa0VtVlRxYm5pekVRdUNSRmpuNUl6bG9KcnNLVHMrL0pnUTlRMjZGN0xnYmlJYS9QZ3lyZkxjUVduaXkrZWd3UEc4UENpanFCNzBrSUxUbkdrZkZ0S3I4MEhaS21ldk50QmxTS2Z5NEZKWWUzRGtEZkNBbEk4VUxXd0EvbDBRS3RjaGQyZ0xRSVQwU2VOUWRESWpMaEtFcW96WmxKSTh0M1RFd2tGeTFKS3dvd3pSMXRaTGhPcEpiNGw3Y2dIV1laVjRHZzQyUlVicjlabHBYQ1ZOa05ZRnJtWFFVYjY1M1pLdFRpWEliUEdSeG9vZTNaaWVFNmhXTDd3bzJ3cUdvbDFKNjBwRkk2c0NxNVc3aE90dkNqcE9OQnNXR29LL0Z1eFJpbElvWDVlS3N1WWxVdzQxdVlDZDk4MkpjNS9YdkpVZVhrdDhSS05iQnREclpSRk8wNmY4YncrRXZYR0Y4WjYycmd6bWdFSUc3VHpNdWZzU0RSMmg0eFJHN1VQTDVhNXN6UTdrWWJlU1pCOVFKaytGcmoveGJZQW9XcldvQlFDK25PZi8xRWFoUGNMRDRIVTJnV2xOVEhQMEFValQxWXZBVkxkS2JyS2Qrc2RYNjV4VDA0OGo1TWFXUWh2eG5WQklrNWk5M0pPcGVNM1N1cnNHY2pISlQ0Mjliak1qWDFGQUQwNHNvZzc2ekZGMk8rb2tyZTBjTCsvdDV6eDJ3L0EzUGVYU0ZUU3lZLzA4RVpidnMySmNsRnBGVVY4Y2ZCOGh6WE9aZmNKNXBEM0l0c3lnQ3dSVXhSVVl2VlNDZWcrZUVxYlFPdkRkQW45bzBBSG4yMXdiMnV5OEYxa0lRMTVmNkdIR3RuRjhYcm5QdmhrMWlKMFhWejB0TGlyWHB1RUFqOERGYmtIZEJ0ZTh3Z0p0Mkp6UUxYbzRCMUpyU3FYNkFaWkZ4ejhBSmN5b2sxdmZUZDBhNXNBVDJvUTlmbUV6SDI1ek9MTjIxL1hocHEveHFBcFZnbE43Ymx4SzdsZjZBcFN0bktscXNuV3ZWWDA5eVo1KzhFamM4ZFQwdDhYc1N0YVRpSnE2TStyWlZ6RVBFUFlXbmZqZnlqZzFXd1N5ejYzdTJYVXNrbG9VbUJoS3lMY0lhenFDazZ1aHJLNVkrZU5YMG5iQ2R4cWhVUFhBUndzK0hvbXpjK2Z1Q0NkREdQZElYTHZyRDkxUWpPcjZKV3hhdHZtbENYNWlNTGMweDNnYjNyT2tqdlBHSW8wbzJ0R0ZyclM5SnZEd2xHbWJVZDVsK1dZY29DWGhyd2p5bUc3TUxMK0dxMW92ekIyVmFvY1NQR05ZaHhLdlBybnhjUU1HTTluclFjVEVWd1JOekx0QW5INk9kMmlrQ0lzL1lWZldtbXMyQzFpN2tVSGNCVG1EOVdidTFLV2NKdDdRNHh0dmpNMjVsaVhPWCtZUFNSb3NtaGhJTW55VG4zM1dQVTAvZkhLNGZmRk5UTDI0WTVHU2s3M2JNcGEvY3RsUHBsM2RDMXNEdDNMUG5JM0RXSjUxSTc1MlR6V1hxV216N3pYd1NSYXBhRWM5NU5IYjBTQmJLTzU1dm9zN0VvVlBSalVMbHU5L08ySEVBcld5TlA5UGdjU1pVNVVqUG96ZW1URm5BSm4wSTBqV2NBSE4yR3JCcDl2UEVoSUZOMzNkN295ZkttU2JPWjB4cjRjMlczTW5pM0NxSXhvRGJJUDFOcnNNL1ZmWG1saHM5alVBRUNZckVTM08ydXVoN2tlMWRwTnBMSEl5MHhvVFJkaGVqamJwTDMxbFVHRlpzUDc3VWgxdUlBQWcrQTE1UjdWWGRRaER2NzY5K0ZBb1hUdmRzVHZFeDNCTVBEdFpWVEZ1Y1Y2VWxiMWlRWjlmdU00clhReWhxTlhCNHpDUW9YTGtKdFNkQTh1VFpkeEZxVHZ4ZXFRcnF0cDN6YjdmTkQyL2c4Wk4za1BnMHhBOXVJU3NEMzZvT3lVQ0lUZWY4M0Y0R2RsbmZiaWliaEsrZlR6RkRLZFh1dnpyaVFSN1RjcWxLL0VYK3VJa0xUMThlbld4VTI3dHZ4d0poUy9PWVVSaGt1NmtDUXdrZFRXNnJ4bVpPZCtESUVJQlk4dzZmem9iZmhmWUkzd1RTRVZ0Qi9HSmhWTXY2a0M2K2ZJSXpkVkdISDM5R1p4YU5qakdCamRIcVQzeGt2NHZzdllRRGdNL0VXRGMyM01HQmprMHJvZEQvYnUwRnAveGc2RGNiRzFhYzZ6bWoyQ2JBNU1ZQ1BKUG16UlJYV1hnZEZYQkFXZWduTjUycEJBTG5wc2ZOM3pqYUZTUTNTeGhOeVp0TDdIcHY4VzR2NVdqV0V4L0JUOWQ1aFdCOFJPbXJFbndIdXM1TDF4WkNhWVM5cis0V1RNWUlvcmFvYThzd2dKWW10Y0xwUXZhYk5OQmxxaFNUZlBPSS9RRFlsQWF2VXZsZmdudFVoTzM5cjNiUFdvVFF3bDdiZ0M0OGhqS21pbWd0bGtHMU5oSlZCSUZDc2VEeGdkTDV5ak1tNHE3S2FrTG9vMVV3RldPQW5UeGVORFNXTDVXSUhHOUZrZzFpTkx1WHM1UmxRS1poNkIzMFhIdjl3ZVB2L1JleG1XUnBBR25SMllINmtsQlBSc3hvNUZCUEdhaVZQa2JzQXNselhVb1g3N3pWcW11WFN4T1V0a0NFSG5RSTdrNnJ1MnlSTjNEQUR5aFNXRm44M1k0RWY4aGV6aUhiVDk4MlNEZG5WK003SlNkdzVqSUU0djdrUlNyK3kzaWIvVVAzVmZvLzI4Q1IvMUgvcjRBNWc5SXZYRDVZSmF3b3p3eElkZWNVSGZQQjR0ZEhFVmhXdUdtdEFRWjZPK01SR2lIVFdyY3lqRWNXTC9JYWUySk9OUTAvOG1WbThwbmpjclFNeE1kWnhJSnIrQmtnU09yTmIyNHcyaHByUWMyUXNVUFRvMjVUdS9uclJkVDNYL25yejkvMU5OUGUybkhWS21iQkNEY25UREFNRWlyQmZoenIrcEhnaWp6K3NSTHROMW9TcUtyQ05XSVJibnBhS0ZWK0pmQ3YrVTc1SWZnR2RobmttNWk5eHhUNm9ZTTJJZkJhc1ljZVQ3TUpzczFCQTBnZjNBYmkzMGlnMHg0SmNWd0FVbjliN3kvanJJcGp4c0k3QnFLUHBiVUgxR2tkM1BZZmZyWFhDbWlxN3pXaUJEeTZaMjNqUVo4SFZGN1ZEcG1DeElCYVZiZVF1SEhQajcxYVR6bEczNDd0b3kwbUhEZFU4YlRZUmFDanY1S1ROZEJvdS9LMEFWK1c0dkY0Y1FaaDhQQTZpekZhVDZ5bHdOMVl0MlZoREt1eXRpOHlyZW96NWF6ZjVDVU9IbVBCNVRpai9NaytlYTJlWnh3eDBaU0pyNkh2OC9EVmNMbHhlN2wybVk2SmZ1TmRGd3VOckcrTC9pMmY4L3czT29VQWY5N3RUYjVNelBhQ1J3WXhDN3FucGcvaVRmMVRsNUgvMlY1YUJrR3BvNlRRMjFJRE9FbDBFSVNvVFJLMGhLQ1RIU1AvQ0dUdVN1NWtWYVlWQlREdW5FV0Q0L1NoNWhxQ1J0N0U1T0liTVIzS2YxTFlqWjFQNkZ1bGRaOVVZTy94aDBxUlhyMWJ3U1VlN3lYcTcvbytlSm5vMVdudFZUbnM1MGVoVTNPVFh0U2I2TWc1eHVzT2ZLUTRlcEJ0MFpOTlJyUFJFd05EL0JsOHUxMitGalYrNnNuV3R5TFRMb2RaM2s2TEo5OHdVSDdJTXhYMmdhd2I2d1Q5aWVEY0o0UXIwZXpmUFZXNnA3RWZHS0haMUhlSmxEcUhYMTVqcjcvZVN0ZTlMU3BPKy80NWx1eHVnWXRaVGZ6cm9odWxiNkp4bWIxT1hqZmZYbURjcll0UnFVeXFIdUVrQ2NjYkhEK3JsZ0NLVUpEdlpqV05TY3pEUnN1ZU9zWkZXSDN0K0oyNTFoZzVjWU1kR05ldnprTzhSOU0vVHVoK1B5bDk0dDVSamlndTNZTytheVFCdEhsN1IxdDRzdlB4NXpJeVNFMkpxZWY5dm9ibWpJV3NUOFZZVmV0cUFVaUlLNTdJdkJubWdKQWg4bTVpQy9STzE4K0thMUFEZ1IwR0JLZHJBRVNKRFNGMlBWUGs0Mzg5K00wNFRsdys4aFlHZ0ZMK1RiNDFMSUFWVzZDYVBweWlHbVFyeW1yR1ovUDk4ODJHU2doTVVtWTQrNUlDb2p3NkRqdHdRYzJZbDE5bW5vT204cGREbnluSGNPTzc4WUttWDlNMWkrcVl0UEsybVpNOWY0eWZsbTJ0NXNuNW5WL1daVURmR1dCS08xZUc5R25NZWdTelp4M2JsU0p6Vm9ZWHc0M3ZkbTVzZGJpYWlabmNhZ3V3VkF4OGN6L2JWaUk3YncxVjhiN2ozR0hRdVpyQjc5RFZsYnJqTnJkL3VQR1VZQ0RGd21KVmV0OUxVU3hzRkhNRUpndjRqSzJYQVZMZEpzclIrdTNzTUZ1WWFsVXBNallXODN1QUZoZGh5QkxGbHNiYVIzOXUyVnFiN0FEd0NpYlFrSjcrREJFVzB5d1I3MWNkTlRVVksvVDRPZmIyQ3dTMFJpZHl5b28wcjNianllMWhPK1VibzVyZUR2UWlwdDcxOWdyeFpvL0dYTEhMSldFQ1c2R1pxN3NiME9WSk5ER0lONERoL01FRVI2cUI1NWFheko1RldUNFkxUkN6SVdEbHE0cC9vMERRenN3SVh4WnVYYnVVcnBFcTBBRUVlVFVKMHNjQXVoRldwWnRJYnIzbU41K0F6RFUybFBYWElobzAyOUNKenQ1THIyQUtEWTRVblU0ZTJCWXhNNjVvQUhpaFJkMUIyWStnZEp4SU81LzRxbm55ckxiK2c3UHlyQ21iWmtjb0Ztam1UMVVYM29LYVViS1pXMlI1SkVPM3RlWDZ1RGFIdzIwcUJBMGdsdVdPcjQ4VTk2WGNkR3BmRlBnQlZma0RPampQVHoxbHNoRDhrV2FqQy9GRVFpeU50VzR1UHZlNnJEYkdINmlqMGIvUHZjVFpTNGVNYWpWMFdpM1JOUTRqNlZGTXdpQmgxK1BIY3dFNXoySUNhZ0dlb2dEcy9UcTJxZFdNaHErYWNjMXNGZDg0dVBSUzdCd2Q2aHRBVGxHVGx1L1R3MjhSYm1SaUN2UTB2WXlJS21zUXhHZ3h1UlE2TGVBRVBjZFlVYWRCeDBhYmd2MFdnWFZyY3ltRXhtb3M2Z2p2VmFkdlB2MXFTSDlYeFhSMzJ6Zm5iWld0N2RtdnBQYzZKQ2ZFZWw5dG92NUdveWlUOEFTZWFpSTFPejNXSHg5Nk1lUVdxYjd6UlR0cW94UnBLT291WkpZbnF6NVNaV3ZGSCtNS1VQT1NCMFRsd0l4ekNWYnJCeTZwZndaMnFCb2FoTGprWFlXL3RHN0NkWlJkN1hoSWdHUXVDdVJLMVNnR1Y0SG12eHRIVGJ6RUhpZkFSWU1Xb1IwSVBjRXJ4RHlZYXB3WERwWVA0MUhwMmd5RU9RZ0JTRlcwL3lWbmxsdEE4M3ZRYmFMQzFpUFNmRW9YRUtnS0pSdjFPRlA5R0pEeGFHbHVlRUtoaG5GYkhiV3ZOd1JCaWRqblJiU3BqaUZNNkl5NFhzTVdXQk53QVU1b1VkVUl1MVhTSlhOcEVqUGhvajI5ZEVyNk8yd0JTdkNNMy9vbjlaOTNiM01EUkxXL3B4Mmc3eTN4bTNkZitNeFQ5dGFFaGVOQi94RDl1a25LS1JQeVFPOFBoVTMydnB3Nk96REkzckdlSHppMXRkb1NHWUsvU2pWM2VaeXRXeVM4cDErTmJNSVpydnNsVWhlYW15MDFoOVBTYUVUekU0NnFnMzE3ZkltREFDbXo1ZUVzcXR5UXZOVzBIbUZtN3VrTm5zZzczdWk3dUwzeTdXM3ZvUW5aRlBzQzlDWmxqNmRuRVJOaXVwZXhDbEMzWU9nTHNmSFQra3dKSTJrV0lZcXZwUXJhRGd1Q3A5VHRDZXZYaWE1U2gxc1lPd0J2ejJKVTFWV2k0N1pDT0c5UnV2WVJ3bVhQSHltZGd0MWVpRlRtMC9JTHhEeFFPVFVoaEtZeWVzTm5NbjZLM3FJbUtTekJEZEd5LzFwcFVSdUtENEI2Z2twcDYxdXJmQ0ZJanVTNjhOM2taUGlsN08rTHBacHluUWtOMVlibk1NTzhSVTV2M096YjJBZ0xYUUxqTzNWODNMSFZ5ZkdWekZIRzliZXVFcWlVd0xJYmFMVS9sc0ZpZUswK29EYXN0dWh5UHpodkxpSFBwVnRTYWZWSFFPZkluUGpXRSttNkhsL0xKNnJzRkV6MXZLOElHUE45Mlk2dG9CRUROeWh5L2JvajZ5ZU5FVzJmRWtLZS9CREdaNkZpbTV3YWM2NlJIclAydkkvMGFzWkxReHpQRE40a21HUTVZNVJHVlpUN1lrWVdXZE04eHZKYlhvNWxjWGF6b3FMNUtQN1d4Ny94WW1OWjBOWHI0TTNoK0hwMVRIZ1g0RjhzckhsRnArbEQxWmRWdUxlYkdsR2duWTVkbUc5bHY0aTUzUDNrZk9yaUVxUlh1bmd6eUR6MEVZZjIrSjRCcWVrY2RKZG44RkVrTFVrSmZzdmtTNUl5Y01RNk5mRFp5Z1pOeWVybzN0dGlqYUtvVG9LMmRyYUYwaGN5NnRQZmZCaGlzSHR0RE9FNjdWV0drZjYyOG9Cdi9jQnRqZ01SMGFHY3lpblFDMEQzTUlnT2doSE5STXgxMlVoUkNPcTdXRW1pQ2tGTG9maFJUZU51WXByM0pycHRtOTBHeXVSN0MrQ2VKOFdONjFZL2xMaWRaSnFVUWtTbEtkQmtXOEw4RUpRVlZSN2c1NUVzaFo3TWZDTU1lbGlBU3ZnRk1DbTVtM0VISm5tOThCQnpoSXVBZ1lPc1hxRTNkeGpBMURDNkdnakVmVkdUamI3UDF6bnFyMXVic2Uzc2VSVWFaVlNvaFozZUZzN0xsN3BzdzNoL0JSa2RJZldCeGw4a2VHOStGYVVrd2dVRXhDT04xcWpYN2s4WE9kTG9uSGdHNW9HaFZDcjljNWo4Vi9oVjJqaUV5dmcvTTdvci9FeXdabWVHTzlZNmk0aGt5cUNiaXlwRWlvcllSRWFFUzd4L2VjVFEvNlFBL2dTRzdNb2RyRWNBUlE5MnUrTSthdXNNdzk4dkZ4S1NKdFRrY1RwVDZpVHVrNGo3d1NTaUc4RlhjckdwaEZxRFA4STZ2K0poaTlBc0xZNWsxWVZFcmc0dW9SZkxXQzQ1YTMwRnVUTG1saWVMeVN0aWVWUTZPclRlakRxaXErbVp2cXRyS1AwTG90alh2V2x2OVFqSkZTZEprTmNUZzZWYU5icXQ4MFFRcFJOeGEvNW9aMW9MSndjOExjOVFDT29ja01XaWREcjkrelN4TENlVDhrOUFwRUJTTE94UldFaXByUEVTR3h6U3lLUW12dlYrV0Uyb2ppd0RNYWxqdFY5UWJMTTY1c0k3eURDWE92b2JJekw1Sk1RWjY4dC9qd0hvYzdEa3hZSnN5a04xcHJ3anA4c0gzVnVwNGxIaGtoakhFUGxYcnhrUjh6dG5tZWxiYW4yaG1vTDFWbEZiTkYrOGdxbnp1Q0dxVGF4UWJNUk9IMURsM2J5RFA0akZhNDl5KzR6UEdGQXcxWjlIRHFLMGZ0cTBlV2IxZXgyMjZ2RkxXOGpTK3ltZ3I2Zkg3VVcvbjVhQ2R4R1dSN3VjZ1c5WTBVRThHd1MwNmdYK0dBOVJ4dWYvaTBoeTJlYnBHd2I1S1l5YktNamx5S0YvRmdxeGljT1ZKaWhjR0lNOG5tMUh1Q2JBYWRBNFhBemFIQ2w2Q3ZYR0Y1RCtVSm81N3pybVkwR2VVbmFBVXZEa0o0M3Z6anFWeUgwc2RnK3NnRGJwUFNLMEpIUXVzMzA1UkxpUW9CVlFoMEN5RTIyRStJV2FnM21aZG0wSUZXQktSM0VuanhFZ2d4dmw4cysxVEpvZ2RhM2dXSDhGOEVGS0lBUzlDZXduOTFjSEY1YXVwRHZ0bnIzcGkzQy9GQ0lyems3U1NYV090ZXIyaGhXaGN0Skhlb1c0d0Q2OWlBcGJDQmc5RTJVa3JGOHI0ak9ZYUJTQmYxcTEwV0gwR1BxQVprU3VZdWE4Y1Zvd1hrK0tVdis3eUc3Q21iTld6dlNpRCtpNXIveHpEWHlmZGg5R2NiZVFUMmJ5bE52SWxhV3lrV2RYbGZLWkQyVDB1TE4yNHRDWENpQzBFYkJpUXFjdlRnSkdydVlLOUpLdTAyNUxham8xelpiSnpjZzdqaGM0WjVyYWwxV3czcjZyd0Q5ak9qL25IQVQ0Y242bTA3WlBWWTU5UzdoT3V5SWJ3QnlEb3pnQjZwQTVTWThlZzFMQW9tUFpmM2VsWTU5NjFKL2FsejNsVFFXNnpQUlM4WkZNeEFoZ2tJVFNGNXJGY2I0TWhoQjZ6TzhjWUlNMjZNQmhuYzBKOG1JTUgxRWRYYUdiMDRhUEJCb1RTTmdkM3U0cmJGOWEwMWJkT24vZ0ZGWnRqNWFxdG9PMlVwa0IzcENRc0x4eGt0OWpOTE1oSGtPQUdUTTdPZmlheWVsV0xnSkE0Y2tlaEJrdE5Ydk15ZkV4STBzbnZ3K3BqbTdORFFxbXNBbU4zUmxoY2FyUW9ZNUpacDlpTG54anFoVnhoeEhFVXpOT1BDbFphTDkrQXExbzdFL0pWRVptN2V2VHdiVTJWYUo3WVJMZW9aQWVBSWhEZzJuUm9ld1ZpR29WNitTS0hiL1ZCV2NoTU05dGo4cHZMUXZJeUJHdTgxdEZEeDFvMnJjSk15aUdSVHZSSE1DMk0vQlYrS2lCeFhVbXVPb043OWlWbisxNWlxamtLbWVBRlFiSTVWK0JWeUxMMjltVy9wQ2tpd2l4US8waGY5RDhPcm9QSTBmNXRWVWkrWFN4dnVRRXQ3bTkzVFQ3ZS9iSXRoQm1BZVg3YVhIQnpPSWk5RXRYRXRmMGNWcEQrS0xDQjQyeUovT2tYZTAxOHhlNk14K2dTdGNIM2hwQThOQmJ3ZStJbEExWnJucjUrb2g1cHUzSGh2bkxUOGtSZU5iMnU1SkN3T20zelVmMFhSOTNVeVFGc0szMUhOVGZJV2djblBXL0dhL3FBYXhqOUlHd21ZRVZKUmJUekdLVjRmNDJkSzkyWHlUeDh2M1pPZzFxOVljanRhSDFmN1FuRk9LYjZ6L0twYitXN1VyUUJLK3o5TDFQKzlNTWRRZFdNY2FtTnNuaFRrbWpJYThYUzdrYVFidTZpdHN5SkpCNGxxbmNTTkcwdkRaRS9XU2tyTmd5RWFWTDVFN2wvUUdoRVAxVFZicHA1ck5oMG41WDVFeHl2S0MrMjZtT0RQcjdQbmh2R2w3MFBvbW9lZTM0UTR5SjZIQlpyNlVRQmJLdXdGQU9ZS2phdVgxRElwR3pLYkwza0hkZmtJZ2FQL3RTRHkvRHBicmVhN28zUWU1dUdXZ21sb2RZeEdoZXI1cXE2TWtzQkJyNExJTEdvc2loTEdGK2Y1SGxOZzloZG1NL0RJUlJzZURrSmRoMnhEekRXZ2ZxL0wweC9IeUZJakV6U3Z2NDRxZlBwTjhMVHg2SFNGdUhPc0o2d3UrbEUzTUFpenVTYndwdCtZdndiNDQvUlUrZlMzV0p6TjFEN0VHLzU3UjArbmFvK2FkQ1BQTzJBOGJTYk0wY2tMcGNQTFBoenp0RFhVZFNoakh6dEg2b0JFY0dYc2xYakZjRTUwU2ljZXBSZkV1aXZmK1RqTVhJUWVHb296eEdtRnIxZkk3bU50MWlnTDVyRk85bXdHTkgxNk9LMUw4N3JqRzgvd01vL3FWbE5MbzRxcDhTajQyL2JzRHB0ZDN0eklTR3BuWVpUYVExalpMd2NQaGRRSGVvNDRVZ29RR1ZRZVA5d0lkUU52L25TZzJYR3VOcWRDcDVNMG5uQjNhSFNydXh2MStHb0hTOFFTMFFZS21NZXU3b21NekJZWHFtbHZDY1pLYi9SdkwwMVJXcXdMOWUrc2J5ejlsTDdlczdhSGt0cnRQYW1ObC9ET0k2K1loWVAwOG5FTDZxdi9yd2FuU1RjbVRQK2s5eDhiYmh1c0o0dy8wdU1VdTNFRGV5SkpjaEx0emFWR3pBNUlqMHg5cnhzNStReDRUK3NIZHpBbzJSRG5TY05UblBZN0JoOU9PaFV6WkFnQjA0QzY0WFF1Z055NkpZM3FGWWtDcEYxVHlIOElkUU1DZkhsZ01TcnEwaU5xa2hUTFlFVGE1eUNBVC9LYTlSWFhVa0wzOWVnQ0d2L2p4K3NyWVdRYmIzdEQ1VGJ1S0VLa2gxbzZvcVVhak51MlFFcnViUkluNk0vVzk5OHQ5TitqaTdqdEsvTFBNc3VZSWN1ZWRFMTRzenU4RitxNTMzaWZ4MDdzd2FuVkJXQ0l5N0NzekF5OE1PbzZ1R3RrVFBLQlJyQjlhb2xMV291ZytZWThKMkc2WkhkZEZnMFFpTUJXLzFpdWNLNENJNzMxNDlBQ0w0REQ1R2R0aVBWWDQxcDM4bGVXbUxUM2Q3akU4RW9wTGhmUVNjK2dqeFI3YVMwdW95Q0NQNzA3ekJNQkZCdy96MWFISFBva25nZEZhRjhLeDZlWGhIVFI1a2V1Mi80U2FhcTIwTlFTcXJDY1B5c213UVNlSHhmcXZxejVCcUpvVlJtRVkxTDBnSWpSSjdobFdmcXFpdHpxYnpCbWFJRnhld3hQOW5VZzFvcUxzeEN1Nk9WYWZZTUZqaDI5TTI2dS9seGxSM1QrMW9WZmRaWDNiczJNTC94ZG4rWUhwUDJqVURyT2lOR095MGJ2WUU1SG1HN2RyYmJWMmFtYjRQUEg5bkpkRytyMlNqbXBHelhWTGo0MGNGWE55ZGwxUXR2bDJ4Slc4Q05FQ3dOSDNrQUs0KzBoaG9JOURtU1VMNm0xa3lQM1hyT0ZnTDg3NHh6UlhMTzE5amdScGwzQXJhS2p5MUl6WTJENXFTb3hjR0xlMGxRSXh1WUdFYk9MMG93c0pXb3haZXZ3eGUwZzByY3N0YVlMdUdnM2E1UWNaWW1xSkVPempldDhSbUZxMm5QZisrdEUxRXdNNjR2Z0hpOEN4RUJuaUx6dnBNMUp1YWM2UUg1TmVaQS9CWno2RFpqM1VHNlorN3hFTEVmcXRXbkZxWWYxeXlMQUZGRDRMV3FOaVJzcmxuZkIya2drVGREUEg2Y3RsL3FpYmhlTFk2M0I0d2tZS21XNjlmbEtnNHhzejlZMnJOWG11Q2FPTmh3NUI5ZlhvaTBiMDBKbW84UDZVUGQ1OHgvdkltM0xDRjlQMmduU2ZrMmpsRzJSNHA0OXZPd2crMUkrWm5sSFhLRXFsRTRndTg1MnNMSmhyRmdHZ2dsSmQ5K2Q4TXp2KytMWVdZMkt6Nks0N21qQ2FhQUIzKzgzZFJQc1JXVzZpcmU2QzFNMnRwUk5RZzFvTXZKU05oYXU0Sm1hRmpPRWNhOUo0cnM2RkFlRmRacHZvWFRwUEVPY1NnMTVzdlJVeXVrNnR3VENyT0g3Zm54Q1oxMFpOMFJFWFAxR2lmb0VaZmVNT24vc3p2TUdsZ2pEMGU5UFVHTnJtYWhEMWQ3Y01uSjlpeFc1eGxYVGxyNDBkbHB0enlqODRFTUo2NHNjODg3SHBtbDQxY3RLOG9VMlo2NHNLamhSMjlGckl0aXMzbDdhaVhQSlpFa1ZQMWpwNWdpNDlEMHAybXVqVE4wYW1ab2t1aE1TSG1XTk9rTTFBa2Noc09ISWlVeGQvTFZxN0JkRXJITTQyVXVnd0VXMFdsUmY5TWJ3bC8ra2hlMUt6WEZ2aERZUDMwOHhzQTQxZEtsaUNQMTBRRlNGbjNxZlZkWmhVd3RyYlduVTRPRU9GWjZtb1ZYTndzY2RudS84WDZtRit5am1UM1pXSEpTWFBvV0NXeE5lelZobDBnZzhBa0hKVDhPQVl4SDFXWkZvVWZFdG5IVC90T29nRU5OM0NnNVFJNDMwbVY3endWTmxSenk4NkZYNHhzckZYc05LaktWT2JyVkd5SU1wRUQzcXZHTGwxSDlodm4xd0tmcUFLNCtoV1p5QTZyUkNuUFBjSC9mcGtNUkIrZ1d4Y3V0L2FXeVFrUVRqcEs1bDRQbkU0M05PUUZocW8rWFNvR01ybC85c0pEOFRTMHhGZXRlUkwxSE1BUjQyNEdmanBHY29adlRIbWxIQXR6SlM1Tzc5QXYvaDhsODdsNHFQdnpKY1NxQWdHTTZnR3BGRmFKTjNJV0hZQnE1R2xLVlNyNVNIZHJKQTBJTTFhWVkzenpNUTVaSFUyRUMyb094d3Z2OVU5TjBWajFwOE4vUzJTbzBkWGpVUjVCb25Ed3ZmV0V0TVZ5enlKbUMxZlR4UVoxZisxT0JJT2ppc0ZKSCs5a3dlekhCbzFENWJvLzRGbllva2J0R3dGZ2RDNU04QmtjUE1NQW1COU5WMlZtc2xHbTBDeHJDMGI0TG5zVG1QTXNoV3JZcTNzb1h0RkpqeEhLazBDUm8yb1RZOFFGNElOQ0c4TitOSUpTSUVETzVNM0hwWFVxSXpkYkZQdHowWUhlUER1dDRFN3RWR3NIcFFTajJhQmh2ZmVmaE9tT2pqMTQwUGJSWUFsSWpIV0dtMXV5ZHdPWWZvSi85YmM4OEZwdWEvWHJhNDJDanFaS3c3NjdvN2tRa1VYaS9rYm9IRnNmSzdhc2xPcHNIajJTdkZsY1o4WFFJUFROM1dVOEVEU3B1TXdSZmpnR2srSGp4bkEyUGd0YVpIaUN4MW9ORlAzTzBjTUgveXE2U3NLY05sVlhSNUh4dTFrbDVCUHBQRCthL3JYQ1NxdkRYSUpYTWFEMDdrV1FmeWtUcEV6ampETDFMWURPQ2F2eDZsTFh6QWgwZW9PY0FPL3JCbi95Y3JvT1pncEo0STlYL3lqSkhDV0VQMkpmNi9NY085TlVTLzZQSlllc0NHSVR2YVRaTlNnbWRMbE13NWplOXFJcFRFbFpPYk1VQzRpM3AvanpqZ3BVS28xNTRSV25UdXJlTkFPODZlV2lyWHNLOFM3ZzRvblJ0OW9oMHU1UTl5bk5WMlQ3eVNWaHJWc1FFTW9hSzZHeXNaTFVKY2xEeVlZeFJqblB2cHpNUVlUQmpGT3YvdTBRTFNJV0RKd1lQR1MzUkE5NVFUMjc5MVRlTEdkZlNPWkpyUjVJc085d3JQNm8zNXVoNTFOb3V3WGZiTjNEbHV4N1dXMGtQMUtGY2hkazdxNnY0clVHd05wUTZCN2RXRytRR3Q4NG9sQmt0Ly8rOUJEa2RKamRrbWpOZlhOOWNOU0syOUlwb0NZd3R3QjNTaEV1UmJTcCtrMDlna3RkUjRIQWhDV2JPUk8vemxiaWtyVkQ1djVtM21GY2Y4VEFFb29jSXlhRW13ZHl0T01wVGdQNkxxZWs0emZ4ZTMrUlJORDZWNy9YbENBWVQ2TVVlS2RCOEdFM0J6NlkwcG9oNGJCbStIeW1uUDZSckZkN3RwdHhjT3YxTk9SM2NmQlVxTmNqdDZUMHJHNDBadE9rNkoveWlYWk84S0k3aEZoN0ZuWFAyMVZ2NnhhZHl0VHp3R1hrL213c3pBUmZsa0FEV2hzbEdLUDNrazhpRS9uVDR1dGpzMFZKMXNlbndNVUVPMzVZS0NMUzFOanNKQW9GS2xHRGpXeDBCN0xseUFnKzMzU2hWSmFySUMybjFnL3ZFZWE2V2YrWkZnZ216dzhsWWFVeDBoRXBoUy9Cb0lWejFIS0Y4RWhQZTVwOHlrRytjQ01QczJNM0dVNDdmWlFNOG1Nd3ZaUlpra3ZGaDBxQW05cHNDQUgvaW5pUWtRL2NsQnFZZnpxZTZuUmxqWTI5VjFrZWJ6THRMeVZtbFlQaCtNSm1KSHVrRnBhOHpXdFNXaWM2K2o0VTJ4bklDd050RzNSQjdvdEFVdXdyQTNleGRpLzZlZlNpQmk5M0FRVUp5Tk41c3RlS1FxSWxDNHFnNGNMOGVUalFNbTZlLzBiQW1yZkVPRWk2V3J0Y0hSU0N0ZndIaVhSUGpRNGVaU0V5RUxFaGE1cGhXelRMS3NaUjh6T2U4eER3Q0NGSWJyM095ODRneEI0aWdsMjQ1ZlZoUDJRYUJqbEJ3dWw1ajQ2NE9HS084b3RZbmR1emJ6QVhmeGtxQVMwMnp5a3U3RTVGdEJOYW85Z1VrbEYvM0lyaHBsV0NCd0NyRFBPT2ZCRnlmeCtzQWdjM0ovWmJGYWpvOWxHQkRkMnVjTkpwUXBuZ1RIOTkxMHlNTHF3TkRYeGR6cHI0WFp3TDBxeHh6aS9GeGdWVWdKcWFDa1Uxb1NMcWo5MTJBMWt0WksrSXRHc3ZYL1ZURTlYOFphMFQ0Q285bXRUK2VCTFc1NlpkVWlVc0VqTWNrQXQxUDlJVUgzZSt4Ryt5VXFsNnFSdVN2dXJSRGlxeUVLRHp4dmp3YVhMcFZBMTdjSlVsL2pLU0t6SFlBRURFWlZQZytoVnptaDVHWEVLSUJSR1B2Q2hqdXo0T21KOEVVUlR5UWxtYlpwUWsvQ2hKUEwydlpsRk9SYmFoV2ZKNHdNQmFucExoMThFbUN0ZDhFZXRTckc4YS8zNXdzTmFyRWc5cm1JY2ppVnNURURzRUFFS3g4dFAzd1hmd1NsL1dPeWUxV0dScFRCMkhDMTFRL1duNDRQYml3NlVSbFVaV20vbmxVYkZGeHVvdCtlMU9SSWV2MlN4M3R0RUQrNThmQXp1ZFV1a0prbEZsaEJ2LzFYZ1dRNTY5RElPTHlBZjhPR0h3RnNTd2VRbFdXZEZET2VEV2xkQVg1SW9oSGU3VE9LNFZUSk4zM0x0bmNiU21Uamluc3BYMXdnZmRmNkVGZXJBVHhYNTlLbExQM1B3TEZPN210a3pteDNMN01HQmk0clNtbXBBSmtBR3IxckR4UmRhdXBLSlZkVDJQL1JhSXBiY0RIU2k4a0VpVVJWVnZRUU5iN01xd29lM2VZdGJlVUZEOFJjZG1VZjRHWFRFaFNId2lvS3lQS0JCcUlld2QxSkZqOVpUUnZEMENXWlVrNXV5ZHF6a05CS1laZXlmRDYrQnBFOWNHaDNpejh5RXhDR2hvRnpXU3pGMWF2eW1uYXIycllrampMVCtpT0xhSmhJbk1TNkxrSUZMVHFCcW41amNmL2RNMVNLQTdTVzJka0VWMm9tWVROTEdRMGxBNVpFVEV2WVdVU29WRTQwZk5BaGFlRFQxbHdTU1RFd2M5Sy9CbEJ6L09EQkloa09SQ0cwYUNrcGZ0anNCYXRKQXV1emhaRHYrQ3owQlo2NkdlbUFlOHp0WXpCQUE4RUJGN0piQnczTERmeGk4TDBXSlU2c1pLNGVvUjdnU0NCOVArSm1PUS9Vc3JDTjNGWVV2NjEwTzFORS9VaE9xZi9mSHM4S3lhMzRtSmhXU3pFaGtFQXM1SUhBWXJwVEh6VHNsd0dEQ0trbVl3WktwcmlLOUh4Q3o0RnB3ZjVSQU52K05RNzF1czlsNkYzL2R0dEI3OGhwTTBlZDU5b09RZXdlci96QlM1RUIramFpOUttRlNvNmcrS3VTUWE4YXo2ZmJubmhFUUh4QzZWekYyMjFjQUlFc3o4TEZxa1JPTU5HM0xocXdCejJNTUtCc29UemcyVVViTjFycmVuMmJtQzMzQjl2d3B1aFhNWWdCS3hTMElNbk5TbHRXejFJckJiNTVkdjd5dFpobHhXZTE2cnhXaDJiVGtkbXhuSmZ5L2pnc3Q4Y0xhWFp1dkRtR21yR3FPSCtGRTM4ZTRYQUpoQjRkaUoySVlJTHIzTGwzd3JuTEFuazM0bXIxM1hodXNEUzdHVmUrSHM3Znp5U21EbFA0S3l6VFREWmpIcEpzaWdUdEpMTndWZzZUVDlQb0RSV2RnbEdPZm5yNmVOTStrSkNSL043MEZSYzBRMVIyUzVkd3cvTFZZVWdGRE1PY3JYU2Yzb1h1Rk9taW8zRGpJemhmRlllbWRqb2V0UXJmUnlRZ0pIZ3pORlRYN1hCdjl3M3RtYlU0RU5VL3huVU50TjlnZ2hWMzhieFBvdmF4dWluajIzY09CT0prY0ZSWmlObmp4TWVXV3poMkpZNzFkbEp5cnUrR2kzK2piRko5VFpmVHhxdU5QdzB5Tm15cXpSUUJhT0JqUUpVUVE5K0dPUXVPbzJvY1F6Z1VtTkNXOEZNN1dLeEFyTjR1MTNudjdqZkw0MHJIc1VxTVgrN3Ira283ZXo2dnVHK1NjZDd4TzBVTW1nUyt0OCtjdkhDdWl1MEN2aFhYZ1RNUnJlTWlsMWloTW9uK2sxRWpoU1NDOHVIc2lFU0dKbWxhY3JTREgxL1FGUWFISTBwZUtUQlFkNTBpbW0yTFBpazBXdThuZmRIQUw4TE5rbG5CL09VVExxaFllSWc3ME81RVlOSlBabVBRR2pKOWVRdG9LQ3hGM1h3SlZKKzB6Q2hQbTRtbVFRaFlsM1VGUnRNcFBHV2c1bEVwQzUvKzJQL3NnRENPT1ZYbEdRM2VmYnVCOTB6RWZEMHRGY3VNTDR6Y3JOVXpqVStxNXBCcm03S3lmNnoyN2l1b01VdUJKelBKUzhkclROaFhTTWkvSm1XazhXaExNb256Y3Azc2Z2RElHb3REdFZHZkF2MmY0M2J5VUpVemdjeTZ4MTZFSmhrRFNlZGRLOFlNR3hWL3N3a2p4S2VaL0ZtRE51UVpEbzkvNjVvVktNYnZ4cnJzZFhZajIzajVnRC9vcURUM1B5NThSNlFqZHBoM0JMZE0zNGNqUTQ0RUZ5OEZ6aHBmeVFCdkE5OVU0U3JQWmNIT3NmVXNrL1g3cFB2T3pYRGtrckZ1WVFKQ0pzTUNrZUdvMDJEcnczblRkNEQwbHZqTHJoMjA2cmk1bkdYYnU2SDVZTzVORHdUbEJqeE5pZEhTVXRXVEhOTmU0L0txSjJweXBKK25NTHdnSzUvRm9PZ0RXL0p2Zndkdkd3YjZWenZzTnp4bUhhaUZvUGZzWHdOQkJXeFBTL3hJSDhOS1lJeXVjbzBFQmF2bVVQTVFyaU5veSt4elhpWFdnWEFnL0VwWnNiZzQycldyTnlRbUVLUDVEUFZ4bThoNThXUzNZZXgwV3ZlWHp1Ri9zYTk0VndHbGlNUjVYZHlXcXJBU2JZdnIxN3psQ1gzQklCT3Jac2ZBbVY4OS9Mdzk3dEw2K0h5Tmk3WGFvOGMyUWNOVzR2eCt1UWlncE5CSGlhL2FRK2IxUlQ5QnhkY1ZLc3A1R0hVVFFwbDd5aXBGSmk3dnZ6T1BpalVuWEZVdk5GVFBIR2tYejMvOGEzNEF4RzFEdXhOSDl3cFZja3BLU3dSUllpYUR1N3BiRS9vUFVtV1ExUURvT0lQM3BuMWJSdENjaHZnaTRNdklOVllvODNLcVFraDZWV2U3ZzV6SmFkU29XaTFmc0JaZ0VIaW1wcjlMM2M4MUd1VWlMQkh5R0Vzelo2UTF2NkVQVmJQWVNablQ4RjRxOXN0NHRlTk1ONjMvaE9OZGRDK1dSQWt2YUhua2tUMjBwUmZNSjJwRTJ2WTlLL1FqVXhCcnRFUm5nb1dOMjVManZoeHBKa1JmL1FqK3ZPTUJ2STg0dnNxb0xhcHVpQ08zN2tYYUZqTlVPRVNwbWRydXFFVlVMejVBUzlMSXo5SlFtMEZIWVVJRW1LNVlLdnNreFhJVDBzWEFBTCs1bFhBN0R1MkJTek51VXU5Y1FTVmJBS2x4WHU4V2l0MTdyRkJxM1BtRHZkaUZCNzVualltSmQxdDIxSFlwa2EybEZoNFVCUUZTWXIzYThZazFEM2NGRnJ1OGsvbk55d1RaU0syZzFWcW1RTFFCeWF1VC9TNVZYUVZvbDA3MzFrSW9OWi9LTGV0THU2aWVzd081dVRybW1lazFJSG9GL3NiQnRyZTV2QjBVRzRQclZ2RWpMcXBsanpUWFJxdnVuY0dSWFhrcmpaRlZGcDFobkRRRWpKSkd5NU95enpOeVRzNkZVeWR3c3hRSlhyTFJPclNNQzAvRlRHcndHMGMwaDJXSzNMejk5cENOYVNVNmJjMWZ3VFlMRTJCeWtjSi9BRDIvWXEzajJ4YVlBMU50bjRsaG1ucWtka1EwaXNaT2hxMllUTmMvZCthTCs0QzNZUWVaUmdyV1kycnhnV3RuQVVvaDNFWU5FSWNzWlNhMWtlWUp1ZTdMTW9WMlJjeDAwN1Y0SEd3ZnNWa2FWNkxQUEpUdkthTm0xemRLN3dKZ2VGam1MK01NMFdZejBQYTdxK0F5am9YcTkwS0NiYkJVUitLS0hNdGhGTEpkemMwRmZuWXRIK21GejBWeWdVT1ptbnJrS0wrTFBSdnI2SEJWek1mNHQyMUt3YXNlWDFzWEJ6aDlUTUNoKzVvRFhSczROZ2c1R0IrWHRYRmMzNHpxdHlIbUJjWk8wYVhGbnNjNTNkZm9DMnNPY29tZ21TUk9FSFhlL0JUVlQ1R1BlTUgwK05nRXlGUlVYM3paejZDWDdyQkVHZ09JNFdWWmRqZ1NkQlB5QU80VVFwYVhQZUlBaStleGRPMFNENkp4WWY5bDhEcnVzbExNZWQ2aHNScWp0bUs0eGxDYW5rM1JSLzIrMTRzOTJsUHYrMCtEeEFWQVIzQ2M2UjNucGI3NW5vL2N5Z3MyQkRpRW5PNlZZeWN6VkhaNHlJN3V0MnVYeDlOdktaUE5VeCtlTEVEdGZOa0VlaWtnaUZGVk42bHhtcjFzWmFLVmNVQVdPcTMrbWR5SGZSY043dm9OanRZcnpFVU1EU09FSTNpTmtNbDNpQ3E5Wm1vR1Iwc2IvT3d4TDRrM0JuSUIrcGJmUVJuQzkyNllQaXRiNXJ1b3BuT0U4U1ROVTNNaGE0S0hjYy9xV2dtbkpObUEwU0dsSlFIaU8vN2FubFV1VC9VaHBmOWFwdmhjV3Ryc2RHckxRcVJMWkRQWEZWVVQrYW5jeFQwSStua2t0Qm1wZ3R3a1NhbnlSSFp5OGZDcnFCYXJhRGwveHFKc3B2Y0puYm1iMHpmSXJ2clU3KzA5VGl1cGlUWUNJSnBYNDJ5bzVwRlFGU3J3VncxS1BNNnlJQXY5Q0YranJoTjNnSVozSjc0OEdMVkx1N3dtWjkwZ2tKQkFZQUN4T0VLNkZwcFVwM3h2eHExN1FSM2k3QndFNVFycDdTV0dQd1VVM1lEaXpITkh3Y1dYNi9seTdhQmxIbkpuOGJpeWlnOGNYQTBvOWtKZEV2Ky9WUTBQb0ljS0RhU09Lck82MENCNWl3WTl3eHVOT2RkLzgwSFhLcmlTWm5xSVRJS0ZidGwxa3ZEQnJnZDZTVzF5TlR3aFVRN3ZJWWZRUkdEUGF6a1I1QUhiOEYxQUw2Q1F6UWVpTlo1aXlDc3VQV0pQMnY4VG1MSzRkOGdYcVNaY3hGN3JRVTdpdmFoQjlDTUVNN2pWQm9HWU5BQVBEQXpmMmhWMlpNTnlHQW03ZGtVZ1BYY3FwV3dSajRsSGo4TDVMcnR6dVBkR25JSkVPNUdSaE9tTUVQZDZDZ3FEMkFyWTBmUlRodFJydEtaaDdKOEtaUzloYVNPQldqR0VKQjMvZ0tXVTZxRmFMYXIxbHRYS3Nhd1dtcUYrL1N2QmxZQWpGUkg5cXNVMDhYdkpFWXd4SFNVVUt2VEIwWWNkSDl2ZXdvRjJ6aW5la0FzZUlLQkRIQlluY2tmSXZzT0NNZW5rY0U5M3loRkxlMDhvNk1yZ3k5RFVuMGJiVzA4aE51NFNLalF3cVhaZnBzNkFWZzRtdm56UmdDczdSdzgveXZZTFBwSnFRUTQxa0Ywc1BvZDhjb0oyNENMRHZBaXFNU0lRandOQWhFSXpRL01ld2lYdlZOd1BzZFJSdmpzaFBYckI4L1ZOc1hBSHI4eW1DeDd3bHRsS29uOXdxYmxVeTRxYkZrNGVUeXQwWXdZeWFMdVpCTXhmbXh1a3kvZ1JRRFJTUzRWeGpaRFJhMEQ0Ky8rQXVXQjlNbmY1Q3pOWE5JTEIxbkhEN1NlMXJ5cjJyUzMvZ1h4cWhaTXBlSHQ1OURrVXc3V3l1WDk1RkhIcG9GZk1sNndDT0MvdGZwbWlxMGVDVFVtK0FNS2NrWHJXY3dnUGxnbW43a2Rxd0Z1L05mQ2ZkbnlpMThxYUlOSDFKWjI5a0VFVWpmY2FiZzd2a1UxNFd6M1RETy9pSDhLU29BZmw3RUF5cnRnUFYxS3NtWmpUMDNCUVBtK1hZeXRXV3EzTFhxaTdOOUV1NHZ2UzBrM2JGdk13VEVVYVp2R3JiV3NMc3h3M3dNRTVVSit6TWwzdXdkRis0ZzZTOTJjWGNhYkgyMFBWWlFNL0VUNFZ2WWtUUWpoamhMSWE3cW9icmxtbDM4Q0ZqN3dRQ1Z0Ym5weER0RkRaVVF0UFBEeEFzZHRiN2drTGt0ZS9LRFR3UzE5ZzlVK3hzeGREbkkwY0ZodVprd1BLNEw4SzdodGhEWUl4Vzl1ODgybGVaT1V5Sm1JbzJXdHpWK2RFdGxBMXFqTmhTaXJCZTN2T091eGVuZktHK2ZudzlQUmxOY2E3MVgzdTZTcXlueHFBcDV2VTc1cUFTcmRmWVBoT3J0OUQzWm9XdlBXQms0OUIyYWp4Y3ZZeTRlKzJsbThlMG5USkw4VnJSYmM3WFJkbDY5cWZucitCMTlaUGZXck1HQXFHZUdWNkhMMUozb3dTVGljTC8rdzVaZks4WHhkOUl6em1UaTFyZEk5eDY5ZjVuaXJvc3NMeDQ2Q0JiT1JVcjYrNTNROFMzSDFpS3pzOFMrdndRTWo1ZXUxT0NCZnNxckx2VjFscWFQWU5GamlVUFQ2bWNxMEJDTDZpNDBKQnY0YVJLVDNDMllBWEIwTEI5RFRsbnJyODg1d0hRNEdUcjhEamtSMlpWYTZvTE9WWThzMmVMYkhlZXJPbHlZbWx2eGV3VSt1Q28yM2lYWFlKZFV4MmZBaXBheFdacy9BQXJ1M1ZkRFV1eENUaEhLQkE5Qy9CcDYrOXRtTHFkWUFsR2tzbjNpWUVDM0kydG1xN2VvNGh2UlExQWVSN0lBVXV1M25ZY3BsK0RJMXVwU3FIRWxEWkVWbEJqREJRK2FmblBBbG1vSnF6NXVVZDJvd2lnODJCV1FnUjVhcW44MGc5aUJXKzRMMzFTdU9RVkVtTEwydUxDK0VCbG5sQjl3WGU3SHhxdEZ0eHpkb2NTWWNmcUFMb3NVcXd6dElDeGk2QTNJcTd0WWZJbDI2Um9UR1hibXdWNHdTalBMQjE4dTNsM053UUVGMHBLKzFPR1c2Nit6NGNtS1lwRmJteVc4U0FCcHJMeEtzb05rUnVRS3d2NHJBMFkvcG9RSzRDcGkveVE1aHNqSGhzZ2lDN2VwaXdDb0JaME9ubjMwbXMvZ3ovdkZzN2JWcjFwa1hycjE1SlNKdkhZV2lyNFdjUEhwY05NZEQycG5nM3JiektVanB3cElDNFR4R2N5c2V5RllwZEtCTXhDNGkyanBqNzhtMzFuOTJjUjNvaFp5QTIwVVF5RDVxdHlleDRqVTRDT2NoNXRtU0liQ0Y1NEhsTUNkNVh3YUFGWFhkVDlHL2x3U0syV0tjaEJEWGVvZkFuMGk4aW9RU1VuNkk4bXhZekRFdGV5eTN0LzlrSDRHcFFoeHJIZUpBSlJsWjZxTU5wVkdGZTJmUkpIRTNqSE1zSHRYZ2JtbjR5eWN1ZG5ZQXFKWmphQTEyUnVDZ2hpVHpxMHF3UnIxZW1JeWc3YXNiMmlBTklaSVFiMTBnM0lCWVhqNDM4UXhLQ0svKzVES0FuLzdpRVJaSUNidUt4a0pDOWpqV2ZQd2ZSb2pyckFEeUFKNzM4WGpWOTNoYWhRTmZYdURPWFljWXhQNEE0d1MwYW1nVTZrb0FHYU1GUHMvbHB2eEp2TWdVRVZ0TkZ6QjFhQUxiZ2dNMFlpa0xBcHA2M3MyeldKdmluUklRZG5MM0tVL2QrNTFnQ29LdzA4WEJWbHYwV1A4dEZxUS82L2NkbXpXMWNBRHdXQ3Zndjc5WERTVHJCekpaQy91ZVkxZUdyR3BmamtCajlteWVOZTZhMmhWaHpnZVI1MWh1YnNmaFpXYnYrV2xuSmlySzVUNEhJYkFXVThZdkE1Vys4N1dOKzVxMGZjWmkwbjVDQ0pZeEtHYzR2a3RGbktRRTZ6eXEvMy9TUTk1bnRQTWxWNGNiTGFLRnRNOGMvbXJ1MEgrUlRKaXY2c0tMeTBNd3NKNjZSL2FZTE1CZ2s4ZVdTRWZTVWhHZGwvM1pRdm5JdEFTQy9ZRDVZdnY1SUxXRzRiRTFCbmRUSXdiMFIzRkM2c25xQ3JGQWkvK3VvcXVIeHlNMXdOYzBhOG9yQWtyZWxnbzc2ZitISWI0N3lJbnU4bThBeEIvcGVsR1Y4NkFIbmN5RUpaUHVmMW5jSnVLS0VZazBpdHhWNTVPTmNTaVpZcFNYUE1RZjlsM0RHOXBDQzZPakFCZEVzLzl4cEtrZ0dtYXBvSzdEZVNQNGxER2oyNUd3eDVVRGJ2elpubzVDYmhGb3ZDTjZ4TndoZWMxRDZSRUZ3RUhXaFR0YllaWm10MEJ1QmwxZVdLV3dLTUVzcU9ScWVCMUVyaEE1ZXVIQWphdjRMWkMwYTN2VytUYUpzWERUWjRuNHVERWNrejdzc0tKK0ZXaU8vUGVWT09MR3VCOGYzVGJqc1dNbndWNVdhc2RXYythcVZsVGZFaks4RTEwMWFTbDhHRGp5R091Y2pvYjNHVko5NHVLWWh5blFpTGd1V2lNSjRBWG1Id3pmVlpBS0d3UGhTOWFTSUJHMUxKZUV0dithNkdua1JjekJ2cFU0OEl2N2Y0L2lxRWJ5blpCWS9JcFk1THp4enhNbDhvUUFpYlZXWHg1UERZTVZjMk5zb3B2QkNUT2F5S1FFYkFHK01kT25nbmoydmEyTTF2U0dZME9HYm1xbCtFallSTC9WeFFnR3l3b002am5iT2RQTm5ydS82eTZ0N29qSjJ4QkdiaU1SdktaU0pUL0pqSlFhTGU1UVIvSUx3a0loQnlvSEp2TCtHUlNEWDhacjN2K2xHRDVPMGZmbitHanZXZU9kMjY0TXlUQ3ltbU5tRkVLb055THpjTFZpblRBSmdCeDJSVGltZ0o2RjhuUlhvS0kxZkxUOWVFS21CMnE4TUpaL0pleHl1SmJkVkV2T2wydUE1N3VOeGxKU2NtSyt2bHJBQnQ0ckdCMkMyQ3ZaaDgrU1BsU0YwZEVuNXZlR0tQQm1FT1ZGaTJXa0Z0Yi9reDY1UjNtWW9ZWHRBMHdqcmlrdDlxTEh4eUFjRDUwMUx0SlpmbC9SUXE0cFQ4UUY1V3NPeWc2NFNNQXFMVHM4MEE3Y000YlE0REZuZ0JoSHdiQ091NXlwWHRZTnUvZEZBU2szbitGTEJaQ1pObStYZS9GOUphcCt2c1RrNk8zbzdyRFErOElyL1ZQZzZiOTFBYVBabmhVMllXM2xRNEtJZGlyR21XMXVybU40d2ZMajNRcGFCZDl4TU5OMUd6dFBOUStHVWxxclpGeU05N2txRDlUdkpFK3JkblQrVVdWZ3VHdjRKRGNoWE9BbkRsSEZVVVl0bGJwa3JlVXZkMkoyOTZiWDZSU1Q3RS9ZN1gzVWNEUXIxOU01ZHZGcDlQY1V1S0cwZURNL2FnQlpmZ29HUjNzemRMRWQvK21mNm9ocFBlWllEY0xVTXVDcERQQkxEc0UxMDMyQU5kakFjQm5EZkJEM1prWTBWKzJUSjNudkRSb0VPRi9sTXJVbmthbmRUWExGRkJCM1lZWGJPaHV4NWxKczNicWZ3OU1JQmc0a2ZtODlyUmk1NEluQ2JRMjNWeVVtRnZ5cjJpeFNaQVBrc0lKSUo2Ym9aam9SWllHWDJWbGhLcTVKKzZPV293LzJmN0gvUTZycitYc2JoTm52SWExbVNWbWNNanVnTjhNckhMSGNjL3BTb3BSRlVoVEtlcHdzTHI1WDBVcStCQng2Q1F1Q3cwcGpQckhQQ3VFTTB5V0gxZGxUU2k1OTNJU0JkdDNiYldnQjZ0NHl0SlhtUVlXZ21RYUNRcTJxR2Zxc1hLbXlRbmVHRXhxVUlOdmhRbVFCaFhKUkxBdFEwbm8vM3kwSjJ0OHRRaWJaSkVKRXJXOXM1bXZpNGNSVUplekJjYmFjR3gvWGk4OTVFM3dpQTM4dWJGdW9SOGprZXNRWlZvZ1FLQW5CeENWMDJLL29iWWRQZVlvWVpuY2o2VWp6aG91ZkUxRG1qV3p5elRaWVczU2cvOGh3alo5bUEreEhvL2VtQVprTkkzKzcvREs4a0lTaFZWS3d6dVlSS1NYSWJzQ1AyQm5UMm5XSnF5UDFWVlFDVXBEbGZUNW10VUNvQVZVQ1FKTmxaQ2ZSYkpXMjFPSDRud3U0d0NJbFI0cGt1TzYxZDVtY2NwRjZ4L3FVQTlmWkMrYm5yZldIR3dNUGRsOFZmOHZsd2ZEdnNtckh4T1dsd1M3cHRtU3Uyc0FrWXhYYzNTY1hnYVBsR0EvR0dSN1hHK05VLzk3Y1pqTXFJZDdPM3lDSzJRa29HODRzcHB2N0ZQdVBqd1NTRklUdzdtUDhoYTJBZTBOTmMrbUE3Y3BjRE1yTzU5TlVSKzBmZEFsUEFZMkVLQ0wwTTl5YmpERGJXTFJSdm5XTmlCVWh2eVNhbG1paXpSQjl3aTJJNEtMZFFTOXFjd1A0ZU8rSzZUdVNrQXlZa1h6RHhiSXg5VGZBMC8yMXdwenJUdGVHd3Y3SXdjU0lxaElvbzVDQmdESjk5anpackxqN0NVY0FOK0wwN1AzcDVWaHRxRVB1Qit6aldaUUVXTFZPMEFlbTEvZ0ZKeWlkTXJuL3dMZ1I4RkZRTXdsbXVuQVg2OEJtdnlKclZUckdlNEdSdnN3NThTK1UvSnlZTUx2dnBsOFFQL3lFNUdNTGtGdG5HR3ZjY1Yyc2szcVk4d3lLMlJHb3J0cVJzQk8rVWd0dlF6ZEJIUWxtOTF5TDV3YWhLYTZqNWQ4bVBITVBxZGx4SzloWlJxZk1BNE5USkV6Z2cvVUliWmZCbmpaTU43ZDlUWVRZSlpPWE4zOHEvRzJjV1FhQ2lhU1R5aGJNTGExN0hHNjJ1elRnM3AvaExwdloxbWwrVTF4UWxHMHAzS3BQRENBZkh3czFubmZPUURDNkRJQTdyZnBxcUw2RVBLSDcyV1NORE5oRzVEUUtZaDlrTm9XOWRhTGI2c0srWUpWVVdsaWZIc1NMR2VabnFKZlhXVk1KeEw4SnA3UndsY01WZUJ5ZDNNbzZpODRSQUJIL0RQTE1FZ3JBUEdyTmQ0aVd2TDl5ZnUxRjlOWFVuek5hQ2xjUHpORUk3K0xRQThuU2tIK3dZMktScEh3bGhsWkx3Q0laQ2JVVW5jTE1CTVNIMlppL0NWdlJtT2hkTG1zN1dTa0dXVmxmTk9lVVNKK2RkVzY4amxBVzkyVUxyTlhYREorL0JwcmptTERmLzlLK2ticmwwdHdXRDIxaVJMak1FMk16ZlF6YUpmOXg1aGthL0FzK0ExVHhNbjAraFlHV3NZZ0tGaHdRWVN6VE9NdTZEdUFvVm1GRFc4MGx4WHNDM1R4WEdxbVNNWFc2RnRRL0dFbGEzU2VJWWt4OXIzSkxESVFaejRwWHB5eGt5RTk5YmgxRUpIK3liYVZIY0pZMi9pK2ZtYTFWVEFHVVhKZ0YvYnRQeGRoQUxJOXJZVFRQSVJ0NHBzbkdTY1NUakM4cjBmejRNRTM4MEYzZzEzUVY5OEVvQVROTTM3b05UbTdMVyt2UWFTT0dwa3J1Wmk5Ykt2ME9BbmtaS3R0dWpuaUJ0UHlwb1EvOU5pSEpvbFFKK0tPUEtoZ3hrRW9qeWxBMHpGeW1FczBzRW1sc1oyODlIUis3TWVBbUVuT2pwRHBjOGRLWEU2M2NueWh5VXRzMDY0UG5qMW9mNzZJd0Y2V0trVlk2NkROWk9Ndjg2NzNDN0JmQ2RDV0taR1dHSkoxaTVpNTVMam5EejNmbE5CVjZhVGF4SXZGR1MxSm95djlNRVJzaFc4b2dJK0UvMGNVQlkyMG52azFxWVVVdGVWdi9kM3hmaGE2M1NkTWhpVmJ5OWV0cmpJU1dQbURQVGZadGhNd29GcStaSDdtRzRtOWkwRTdjcW1SN0YzeUhRYk94WmpVZWlJME1YaFd4cHFyQTAyTVMyNnhpTytmMklPNFZFZXBnWmpQVlpIL3Q2OFByT08vOE1pdG4rZVhwYTNuYUNQU1BBdm5HaFdlL1h6QWpNOU92VG0vQ1ZuV3VVOVFKeDFoNXlWbW1xamFkNjNIcG5WbmtUWG4xb25BUEUwbFFMUEtDMDlJS2FhZE4zOVJ3UkhVdmZpSzJoOHdJWU9ITHRoTk81Q3NnaU5VQkdLVUJsSXk4Q09qK0g1eFRKOGFwa245eGVoeFp2bjBZWVg5S0V5TUpJV21mQ2Z4dU03RVJZaG10WmxJazlwVmxvWm9pRHZac3piV2taT2xuWWc3bEJwcEE5bXp6NExVRnhrLzZaSGN0am93ZkhINnBQWGhkM2w4cjV5blpCaEJVUkFGWmwrd2NjNjE3R2U4Y3dpVUplNFFNaW5YZkpiS21zWmlGM001bHFPK0R2S094L0UxdnZCSmNwTnh5dlpuUTE0ZDVpWGpSTjFXVERzbXpJcnZseStTRXFGK0t6QjZ1MngvYmtFVjUzZm1aRWgzSkYyYkttWitpejRMNitTM0M5SEtlSWx2dDJ0NTJ6L2k0aVh4ejdCWkIvaERrdDc2Wk02L1N6VDZKZ1Nqc0xDNTBkazl5cnBnNkwraWJVeU4zWEF6YjZXQm8zTTRNTUJxKzBaSmtqamozb3Z0R05Zb0V2RzVkNEQ2bm9ZdHJiK2N2Tkx3RnhHWEh5S21sem1kWmYxMGY5Y08rM3B5Qmlhc3l3S2w5SGl0WVA5Y1o4aFNSdkFuNE5YQnFPKy9VNUN5Q1FlNlgvNzNMakp6d3RtN1lGQU0rQVlFQTdWSng4blFTaStIcjdlb3dSUVhvN1ZwdjB1V0RoSStWdG9FOGhxdUVuZC8yRTN0ajhiUlc0Yldia1FLVDQvWUZuV2pwOHE2U1BvYWJsZDNUMDBZTkVLTGlCMjEzNHFSTjROL0pHT2N1TmkxSGhpYUxTRU1OdEIzV2t3enJvcXRLbGZIWU1vYW5Fd3dxRkdUcUNJd2lwRThndGhlK1liZzdieFdwWk81QWtaeGQyYVdONGhQOHhjLzRXdWNvQmhIWVpjNkxhYTFwKy9KOWJsdlF2bDAyQkpkQnErMmVSMGVBOERjbkVwenhVRmNZTndjUjMxTkhEdjkvcy9ZUGtWVkNOZDI4eENCMlF4TUFjb3V3dHZXZGJyUzNlcG1uSE9ielAxQXlibWRkQTdLSWY4WWNqWVRpQnBuandoY2pXYWNqYmM1aDB1ZFFJdlhsQ0VNQlhrNmorZFdzRGRoVC91bUxpT1MzK1BkRUNHMGIwY0x2Z0xpOHd1WHM4MUs1dXZCMHY0QmR4Q0xzTWcyWFV3RktpUDdsTTBMc241R2VNTFpuMW5kTTZKNmlZajV1NjVRZFpxWEV6N0Vjdm5FMGpoMlB4dUs1aElaL3N6UWxkNFA1d3A1Q2k3QWxFY2tZZUFCWmsvN21Nd21qR2xOeG5Ma2NtTjBtUFRHRjVjTi9KaXAvbzV5SlJNdFdYeTl0SW5US0hydWtqeVBFSjFnR0NOV2VtcldvdlVKUWtGMzg4WUFIOHdpeHdnUE5UUXNNQjNwRVlGMStveXlEaUlUcUF6TUttcnJ4N29xSCswdGtXbERid2xOVTZVOGNNdlQ3TkRaNm5iUUpPT0hHeTB1cE5UY0t3WGp2RXpOMFN3bUVTTERmY2NNTlgrUDAvRWtnNnNvQktYeTNqRWdmMmk1WXVxNFB5cUJSWFhHclp6RHczaEtRcTRPR3BsdGkxcW96clZMaGZUcXFQRG5pazM1U2tqM1pSajJnSjE2S3BkL2p6MitrRkJiWGM2R2s0WmZzRVNCTE9CM2ZTdmFCUTFMamFNYzdqS1NDYU5Qc094OFVRMGdmQTVvVnpNNFptZEp3bkUvcXpLL21FaHF3TkY3NFlIQ1RkaEIvZXkvSzkvUWNBcmhkeGdGcmx1SHJSYnFQMmRuMXBvYkRmWnpsL0F3anY2K1I1QU5EaWdGNFZESEV5dG85MEtoWGNaOG1DTFFDTnJUME5XYWhHUFhaTFB0Mk1XcUU1cEJIVEJzcGp0azlkRCt0UGh0Qjk1bkVJd0wyTUUrQUtURHNFU3pmRFN3TFd4b1JUUzRBMlRpUk5ucWh5RFBGYWNSdE1YcWlaeGVDT2RDK29TQ0xLaWpVMGRHaVNoakRpNTd4cFR5cVlLYXdQMjd4M2NTaGs3SnYrL1NRZHY0QktNRHlwMHVzeFRHbVJ2OWJPWHhxVGNpNmZpSzZ0dE5aNjJBRVgyUm5uWGVmV1ZRZzRYOS9qajVCQmwvSUJzVlRGMkgxUzZvRWNUNUVMSmx6THJ3UDNrUlhCSWtFSDI5ZEltQlRzLzg3aTV0azRIRUFmWG1jdTB0Y0FEZGZvWllKRHRNM25IZ1d3ZU44S0NIVjEyd3hKQjQwa3g3SHRPZ2ZPWEJKdkh6NGF5TTZNQmg4TmdYb2ZCUS9STmE5UmlmaTlXLzVxRFZEOHN5dEZMaXdEd2dVOXd2SS9od2RQd0xmRnpjbkFqa1p1N2RMYm9Wb001cHAyZS9ROWJwdklMeVNPVXcwSXZSaFl5cXQ3ejhvSTE4cXdWb0QzeFdWb1lBVzIwVHIraEtmcURsdWQ4NURLYm5YTVpmSmRlSlVEVElmek1XcDFITlBVOFVIaTFWeUF0QjdwaHY2UmtCSCtsd2NuQndFcWdEMTJtVStpSVNhVWhpaTNwS2l3cy9BM2h3Z3pJbEx4VzFyNW1pWXUycUtNNlR4WUxUejRWYlZvMXB4YTN6VmZza1F3VUI3N0EwdzRMOHYrVHJPb0VJUjlDeEN6aDh3ang4NjNEUDZWMlVVRGV3UW0vR01sK3V2RnI5VXo1WVl3Wm1rT2d2UTR6cmFPV3duNysraDZaM2hpWUI3ZVVIMnZqOG00Qndza1J1ZzA0aXBJblFGeDA1YThMWVVPS1U0U3M0eVJIMFhyWHU5Sk1tZFphRjFkTGlvY2dHOE1Qb05xYkRjQXNwbTIyb2tyZGRnZFAzNVhaRllKSWpoVURPbERMek9pYWxNakZHNC8va292ZXRpNmxKSnFPTzZicE5pSEhwMFVORVlLZCtYZlVaZ0pBOFZPSjN1TTRGRzRBaGhtVkR2UlNyMmtWMjdDaWNZSjNkNkJmZ0d6VlUyRlp3emU4aTFZSnluRDhnOWY2TS82TzRhUHFGOG1XUWRIZVVCSTRQUzdCZkU1VVB4T0tEMjJ3eDNQeDltamo4UWc2OHkza3pYY2ljOWZ2RmlWLzR6UXlvOTY3TWFTbERRUGpGMEtNNm5MZnZNbnFFMHkwbVZTaGRnbDVVYTJHZVdrS0xvSHNsSnAwajBGVm1Gd1E2UEFCMzJzZmxsMkwrS0JGRjFXOGNvc0JpTWJ0N1VXSWJ6anczR0NLNWU1TE4yZ0dOUFJGMXdDYUp6T1BBTXpBcXRQb2ZHdjVBMnR6ZDc4dUs2SnJGNUxTRUE5SUh3TG5uVkY1NTlIWFJ2YWFxNk1kaFllMDBpVWVXZjRUOEx1OFlQZWEwcXZQbFRXYncyaGQzSE13M1NsdC9qVzYvUWkvWm4zYTNJam5oSVdFM1YvR3lVTzZHSmx3d1VaclFuNDMzd3VqTWxWVTlyeTJ6N3JIU1FtYXlmZkdOK2VlYllLVi9hUWZaU1g4MmNSaXMwRThoYm1RK0VrV3RlVzVoQ3pEeU5aYjI5azhUVE9sRVh3bkp3VVBha1FucTdqNWZpYWFDRmhIVmJwYTJwRFZuZCtCMFA3d0tRR29vdGk3SmY4N2FjVWEyRkkvMHNoRTg5VWxNaWFhdzdnUDI2ZDQ0MWlZL1pUSmY4SXAyK25xVEhFM2RrdG9RY2NhU2lyaHhRUmF3NlJZSndJUzlldDA3RThoQjNqemxMak5mVHZLTzRhK3Jka2M5MEMzd1kxQ3dVeTRwekNmS2dBa3VtZkprZFY4cjJrUWk4cjN3MUF2a01TRlJRSlNiNUVYTGQ0Q2xIclkrL2YvS2p1blF3SWUzQjZ4R2R6Uk9laXZ5YXdZTHROZTMxdVcvQ1YvL1JUMFFqcUhXZHd3Rm5jOVhORy9UNWk5Zy90OHdPdmViY1JMT3RKMVRvVmFxbjFia3pjeHBlb1daQUZFV1psN2kya1ZId25QZjY5eFovQ3pUQ1pSQk10Smd4MnhuYWp5NG5ocXB6Q2o1VFpsQ1NuL2Q4UDdGNWY5MzQrbDgyQjNCV3MyWXZhYjZLRmI4MkduZWMvbnR2ZGI1NFRzZnRmSHg4T2VQNzEwVGJLcjRmVjJYODlOSnAyUmZ4aHFjSFgzaENRc3BXekhsVC9rclR0L09TOUxSTUlHQVlCbEc0UzZGMzhDNTlLVHlsYThvQis2RmN2SFc0K3BUemdROFFQZG5ONFhJNWEzaGcrM2pHYmtJOUREaStEZDI0SVU4ZERDWGtXdEpiZEh0QzBnaEk3V1YzZno1R1BMMDdTTSt4ZC9YNWVkMHlDOXJNUjdiVDM3ODJJQTFXVHpWRENyVkF1cG0vTWlxdGNqZm9EWFhlMjlac1RTR2FVSVV0QUdJNmE1UnNQRWNWMGFyajY2TU5xS0dvYnZ4eTRoZ1dlQWRzMXFsRFpDQVJCaGo1WExMbWZWRzhxTjJ1dHRGc1U2Uy9xMU5HZmswREREcGJHRjlGN204dlF3RXlEcVU4MDYzem5QSmRhb2w2V1hud3ByaWhMV1ZjWjAzSWl0eXlLQ0RCRkJ0Mzg3R25ZS1dXc3dkWUs2VnhVc3hSMFlhZis0bFUxRzJ0U3F0TitqQWxYSFVkeURabU5oeWZFdFlidVlCLzdtSDU5eklyZ280aWxvZGkxeHBZTm9tSlRHUEFPQjVGcU9GL3ZhRjJXQWtVcDlGT0RocDFQYTBXWkZRRWMxRC8xVTdKS0hwTUE5dlZ0MDN1cE5jUmM3Tk51ODkrUmU0SmNKWFJGQVNEVi9wYzNPRzRFUUt1Z3BJVmg3K0ZLU2xvcitPQ002ZVZIKytFOXZlbUoxMUhtTW0vWjVuVmJ3VzBiV1lZY2c4akx1dmhlQTNJdU0yQk4vblV5N3FiTGtkb1l5V2RBRW5UaEUxZy9lV0FJeGQ3bGxqcGR6MDlsWkczU01YZVk4azhISjVnOHlwNmozeXBEc0NHWEZGVXQvcHB1cEhBTVdFZ3lOU2JOZDNXNnNYbXQxczJ1Rnp1cGhjcVVpY3pHK1EzbitldUVlaTJFSGExZ3c3RHdZcDlGS0RhQnMvd203QnJDSmk4ZUx5bUpMRXlIOXh2R1BSRVhSNmdBbkV5RWh0TFh2Q0tZYUp0U25FbGN5QXhjV2FqdHUveGVqZW1Fb3R3QU16Rms0enhvbzdyNklYeVA5ZTRYSnR1NmxIV09BYkpySXQ4dk0zR0JoMWk0UGl4UFUrQ3YrMDBXei9PM3ZIYW9rcUpnQWRYT3hPaTRaOWNnYUtlS1dkNFlUK3dPOWdGclNqOUYxcnk5OHBQQkFnNkNoanhVTHV2dTlqaEIzUzVLRHA5RER6RFl1c2JpWGtBVHZvamdRR2hyYjVNYStpamIzZHoxVlY3c28va01Yc0lqQXpEWHhzQk1aQ09ub2ljRU5yUGJqQjI1ejdyWFROUVM5NG90MWE1bGJ6MXE0N0tLdUV1aTlGQ1E3Sk4xVUQ2R0ZkL2NTckoyMlpoTzNXUE5SbjdYVnVYOFErbWFYR0xXRXk0VHJBQjdxaiszZjZSaXhvRm9Yc2xRWTJROGlNbjlrUzFQb1RscVFYMUZOc2hWRzlVRFk4aUt6ZVJjNFBEZjREU3VZM2dvZEtiWFpuN0N1OUpXNzJ6Ny9iN0tNWDk2dTgzQXpTd1I4VksyN2ZTcWdZcmdvWjlxNUdCU0t5b21KWkdvUUFXWURCVHdvcm5SeXpIVEVEZUlGMU1EOWxqdDJ1U3d3VTVyR1l4d2dzcTRER0VlTVA2UDZRdjIxZ0NieU1TdUl2bDVIRkEzeFdUOGRPeU1iT0p3OFRreS9TSi9CdTMzYU5kNUNTbnNZOVVBTklHZnlFUWRHTnZGc0E0eWlkb1hwQWFqMGt3NmFZZzJHWXJJclhYNjhobmtwSVlYUCt4TmhDa1VUZEVTYTJiaE5jYkZNTjFQc2tuazVPYUV6bmYwYll3bkE4K0pIczM0elBQeFB1RHV2dmpHeGFRekpKWFJoS3l3MzNzaGpLNS9tejBqODhXZ3hUYms2OGoycUt0eXVPY05uSFdTMXFBZ0RNbUFaVzFDQmIrbXBTN2tYQlhZY25Hbzgyek9pdWl6ZFJ2UkFoeWxFRHFtaGJrb3AvaFNwOGRaVkNRd01DenBFRGFUKzJDVFBkZXowTXl2N09RYXVZbnJjV3drdHlIZjZUQlg0TVJhYlhkT2hkSFVWZXFKS0ZETksvdUVUYzdZZVp2azNYSDNUMEk1NEpzMHFPRGk2YWVIYmFGZW1IMHFDRnVGSHk0b1phU2dwc1kwV1ovZWhndHhsUVRFQkI5eTNWcG5FYVJ2T2FmWHRMNHA4eW9DRmdod3ZnZmNBeUFqeTQ4MFlPUkN6UmswN2grNEsxZzZoVVhzR3JiRU1OOHYyQnBPRFlBaEpHT0JNbGdjZEFOSFBhMjdaYzBmUllIZnZObVlsYzI5cWJOajdLNkwvOHBiTENIV0E1dm9aL0EwS1hkby9XTjRqRk4yUFVUc2o3STg3WWdGNWg2M1ZjRk9aN3RiTUVMRS8rWDFGZVB6RGVTWHN6S1JIUlJOZ0tFM2xubVNnWXJ1RzJZdktyT0xVVUJzUERrYjIzS0tkTExGQTlYRjFESEgzNWl3eDFxalc3VDIwZ1ZEamcrcTFSMzgyVTA4ZjZZWUlaNEtDbjRpY3VnNmVGQWxlcm4zY0dTdXh2dDNrZXFwc243aWdHUVA5VHRjVTlOV3BOR3NBcHFaYkpUUDJTZEFSMUJBZk9heFJOUGgyaGxkTEo4T2ZaWHYxYVJBTlBuVGVtQm5MUFhrNW1KRGtRSEwxR08yN2ZFeW5heHJYZFYrT3dEL2grZTlUOGtMT0JOMzZrQkIweEMxeTVKNU4ra0lGSExldDc2TjdWSjdGaGlFQklmMDNwU3dWYzg3WVJ5SUUxUGV1a216MW9VRnMvb2tyWTAxYzBDdDRGWnF6eU9ubXNNSnIrT2t5bW5Sak5PWndUdTdUL2dRdjZCdXNxakVmSXBaSEQ0K3RnQllNUEJBY1ZuZjNCeFcwbm8yL1RuUElSK1BBUUpLZ3pKRU1YYXBGbSs5OG9KVjRJbFk2N0RpTEpsaDgxaWoxczA5NUxVdS9hU0xxOFZaQ0tOalErZ0ZQeDJybUNiemQ5a2NYRDdBamg3L2p3dHBTMWp2SlNzeU9zQjdLc1BKaW9qSHBEekVybk04aEF5ZmxYTkxhc3Q4ZUxvTnRUNGhFcko0S2pIZ0NpTFlNSHl6dnBSK2pvaVpDcHFrUUVvcDBJbVhxRUFvMDhGb1F3LzJQMEM3SHZLOFpldWpOMkNQUUZDblBoSlJXSjVRaEo5U1hVaW9VUW1OQjVuWDZoTDJ0S0VZamE5bCtudEtmblVTUHdNcVZEVGwzTEhZS0s1L09kYXJqdWdUZUFlZXFsQlpWTURkRUNTUkRFSWhBRUNqN0xJVHZPenRtTGIxdExWdHhJM1FIcGhleldBSjhQbDlSUXg1bUNqLytPL2F0b0I0ZHNqWktOWmRaZDZWWCtoVGl3RFVaMFFrR0ZjRGhWOWFkTDlpNFcyMlYxY29ZUzlZZzJLRW9yZGx2YWM1d2RZRllpcVB6RmNDV1pVY3gxWWs2WEhJLzFCMFlVUzB2LzVEN3lyRFczSVMzeFJDb2xnSm1uUU9TdGlXZndzNmQ0Y3ZlcTd4amlpK3RaUGU1c2FzaWxXWDBHdGZBYkxUYU8vb3JtTzBnQU5vOFNZdHJwQ3RmMnR5N204MnNSNnk5NVhGMG5kdGlmVW9vSmJYa1pQL0EyMWpTRnc3b1cycjZ0L01YaG5Ld2dJWG1OdG9VMVNBa0FqNXpoZ2hxekJtS1lGNm56Y1RrY0lOT1BMVnhlVG1JYmFUNVZabG9OM2ZMR1I0UXBVeitnT3BWQlFCRHRZdkx5VnZhSC9BcmVEcWlEMVF4Q0JRcGI0VkF3M1dPUHZvNTFCRjAyWHg4bkRLbkJQOHhLSGxWUHZCSm5lb3RzSEJIUEZPMzNrK3pEOEVSdFYxV3FxTTZtVXBzVkhUR3JvbjZZanVpdzRicmNxaEZpa0c0MURlc01WVUxnY1FYdG5rckQ1R0RLd2wxcUQ1N0ZVYmNHclViUTcya0lMNGgrek1oYURtYXh6VWplWFdPNGk0U2FIckhCbHJUQXMrVm1HMzRhUFcwa2wwVUJrMFpTVlFRM3h3TjFGbVA1bVhHL1RDTkF6dVVoamNNUks5dnJRaXkwbE9zanZDWm4zckRleTRDZGo5TERvU3l3RTFjV3JDUE43QXVGVGptQjc0anZtS0ZvRURoRjZYYndPY05WSFhMSlZyMjM4MHlJMUJhbktYSUJSUTk3NGZFRGNiUmhSeGNZZlU4VVpGN04vN0pxZDh1R1creXA2RHdVUkQ0SWt1aXNqbHgwWWtLckF0QkdjOTlPRWRBbzRWV3kvM2NYZkswVE5XMkE2azRrSFlheFpDbzlBYmZjYkx2S3FhMmJlU2FGd2l2WVdQcnZZOVRCZjRxOThvekJSWlVkTEJsYm9FSjd1WndXRk9kL0hBZlNaWGxLNFk0VitnVDIzT2JUQ3NzQzI2WGp2dWxYZWpBZ3o4Q1lIOTdDY3ZpVjhkSFoydlZySkxjUk4vSnMzNkNqRWFUdzFHcXV5USt0Y1ZJa0JIQmY0WnRTcmhkbktNNnNYNnljd1Zubml5RFQySkJFWkVUMEo5a0pzTm5aOE1oam40RHErckVHQjk1bHhlUWthZkFWaFBtRjVyYnpyRGNtTkZaUThCU2hXalhDb0t0SWRDQXpJUFdJRjJPSGhONERYZnZzMHdCTElhSFdWU2dWVmVFSDNnRml3Lzk1VjlFOW5WRDg1cU44aDQ2bU93aVQrT1JFcEx3ZEtWZWN0ZHVieWNQWHBEeDRvRmNPdVZXVTJQQ0Rwak9ZVGpaclUxWkhkL3k4S0xGZExoM3k0K2p3bHg5QjNOVmJiTVhyaFpDSEpWNi9TUmI5cFBmMzRrNFlWb2RrYStmUEVqNjlTakZHVFFac0xkQ01qLytYQzlYTWR3RUdrZ20wVkpXNkRkOTg1ZmY5a2dCVC9wNjZhcS92QlpjUmhZVjRYTjdJaTNMcDJPbnBkWDZqVVU5SGk1U3Y2b2J3YlBrNS9TeXNHd3B1TVRKRGc4bDNmeVdFcktGajBWQ2V2cU9rcFdCV1BGaHNpaFpoQktTYVJDUVFCNmN1OEFFc002dVYrbE5vaGpVaElVOXg5M01EdzlPNnpWNjhKSzJObDNNalNha3dnWS93Q3QrU3YvZHZvWlNESUViUDBNMHcvbmVvcDhSdGNiamtkbzBjREpBWjRNRG1hQTlVZzJNMHJMVi9OT0pIa0xsVVFBdU91RXFTcHIxTEFhUVUyYStvWllBTFpQcVhVa2x3MWptVXg4dTBTcTRVeEV5Y1lhcmUwMWEyMlZLZGFobWNNbkRNL2R2bHRFUFFWK1YyaUdReDJnRWNJV3RFdEFDVmMyOU80UDRUOWNTRVI0VDlzU3p6dlQ5OVdNUmNzTmMwcFpPbkhGTzdMTldJKzI1VGRCNXQyVGNQcXRYZ3crQ3ZieXFJWHA0eFpDa1FyVE15dllIMkMvQVlEd0FaOTlPemFielF0c3I4R2NVdEFoV25pbklQWE1IY0Z4QlVxKzdVWWw0WVJLUWFMY2JoMmNnVll3WlJkOE1JMnZFVitxOUZ0bDFwZzdSVkJUS1pLaWhqejJWTVVHTEpPZnNpL25RdDB0dkVML0JHcmZOc2E1TGNVVGdKTGZRcTBSZ09CK2JYRnRjV00wUnNEUlFKQVE4cFUrWXhFbXlTYTE4eVB4am50VS9QL2p3MmJqdkkwd3VZdmlveS9UeU9ML2liWFA0a1oxclV5Qjh6NVN1cVRYVmtNT2JqYWMvR2NJRXFIK1lSdlBOV3NndHdXVnJ6a2taTzM3ZlF5UlZYYlJ2amVIZEZyTzRRSEhxMnRMU0xUamtBb2hPQXg3VTZ4SURqMHkyckpDS2hBeGE1YUhRN21UdWRYblp3a0g3ODR2TjZZOU82bDFvckJOU2IyRk42TUxJV0FkRkh2c2hBeEphZmRxVm52Qlk4UWJKK21Ha3JRQ1YyeXhWdVUzQnJ4NkdOeE5CaGVUejFHV1hxSTFCem1rMEdLTXhmUXV2WDRQU1pwWU4vcDRIY0JxTFJVOHBTUXVhYUlHeFcxUkh1YUFPcENWUHhJRkRqYnEwNklJY2YwZzdaNTB6U2lDUFNHZHYrMGwwN1hoS1czUCtxSk9DZlhMUUhuSzcvQzRGbXY5YWdrSGwzUEtGRWxrTDRpczRFL3g1MTJRWHZ0M1hwOXJRNW5QN291eVlpV0xtM29QUUJmcHdFMDhvRUJHemdHdStiTDc2QXE0TXRDU1FhSTZLcU5JQ1VQWGpFRFoybXh5eFp5VXl5VFpXM20rUEI2a0pkQ1d1cFM1TmFaVWNDRUdIWFhFMXdaNkdWUTRSU3JIdjlINWtJQjBVR3YrcnRubG85bjhOd1pZZ0NkRk5ncVllZm5xVVlRSlFmQ2s1Vkc3UVhxQ0tVZEtMQmsrUmg2aFExV1NHNzRXWTViV2syNS9Xa0hXV2hzYi80UWhwVURYZnA1NmlaWkRwbjk2THRPRFhoRzlCWHk3NG9WTzFEc3pFeUlmNC83cE5Wd2QyMndtTnlXb1VvV295MTg3dnFxdlBaOXNPckhiMzdSclFaeXV5YW5GUVVoOUp3L3ArN2tHRFNtTDg0Q1NvNVA3dEhaUGdNNlY3SUtLVFJKaXJwV1JvTUZYajJQOUZtakdpZEJ4WXdoNVB6amFZdUlkZkxWYlJ3Q051amhDTmFlamhuaVVMMmZ0Z3JuQ2lHUndpcEhEYUJpNTYvUURkZStkd1BoMjRUNDdlRkpaa2t5NFBmdHhGanZxNWJOM0FaWUFMSlZPRytoT25OcHFyckptcGhZb0p6OHBCcm9GZlZPTmJ5N05TMG5XbWJxaE9qcHBhbVBwT1RXWm9LaGhFQmw1bk9ZNENRa1B1M0N4YzMzdDNHc0tjbVVYTENLZlcrd2MrcU5ZRzlwUUtsYkN1WmZvS0pyL1p0djlyeDNHLy8xb2F4L3pSUFQyNVduYW1mcDhRcUV3dzBjOURuVU8rQUNPSjE1R2IrRFRVOUcrRUVWRCtNYm9mdFZuZzlDYmM2NURwbXRnSFVrM2tJalpDN0NwN1BBbTJXV1o0Zk1rV0tRNHhDOStnNFVVUjRWenRqTGkzN2xsckM5aUhBemdkamJjd3FhTE1SRnQvb2tqaldpRXFRTGxtL0tNRzQ3Uno4UUp3YWxHSlVjcFc4aHVrWitZVTBvQVZ6NExUY0VCcHN1M0JpWDBORXlJeVdSSytIS1M3TGJxbVNZZm0vKzZTY3hzNUZDNW1PK1NEcVg4OVBVTnVReVcxZU9ia3Byb3dkYmtyLzdVaStJeVVyLzVWdnplRUFWeGgrUTFTWi9jMnNBaVNTbG0wM3BFRnRERTB5RXZCZ2tuMURlelpuTG5wVTVDM1ovaHNGR3M0b3BkNkd3K0tIbXI4NXdwZHcvbkRmbkFZendhSDZIRkI3RVRGbzBnMDg5ZVpnNmhHNmJzYXJYL2g5T1dlQXp0c3dxaTcvS1dyTXU1VXo2aGxsQVpwenA3YUhpOTlvY3BWOGsxd2NIZDNkekQ3Y2VUQ2VQTGJaQVUzekVWUE5BbGg3emIwL2diSGNTRERCaVordGdFeXVSY3BZNkVCQmVnb0NLTmZpSWhtOTI1UGJUK0NRM1pRRWNCYm8zUWtGTFBqbHpZTWsyQi8xeGNDUCtmWVlMR1RxVlFtRFhHTmY5SmNMY1JLdjR0bm8yREsxQ2M0SGRqSyttN1Zzb1A0c0JpZmRjL01JZVNXRUZ6NUR5aFE1ZHBHS1R1WFM2WVlhVUIxcDFFUUQ1TkdtN1RtRVBKbHUxOTkxZzZSK0d2VFAyYjFPVTVHamovaHdsQ1hxZFEwcGxpdk1waVA0SytybkhteTdkSjA5Q1B6S3NyVFFscDBVSWdDOWhkUW04QWhMN2s2QThBc0tiajlGSnhCQXZmd2NXV0NRWjRhRUtOS3I3YnhRcEpUdTZKTXFmS0QwaFZnY1Z1d2FnVGlGeEg5RjEvcUFZK1FCWFBTSkl4ckVWMGF2Q3FUUUVKU2FjUHRoWG04ZGlLUDBVVmpWdzR2LzE1Ris2ZVYwRm8wYW5XZHRjZzNNOTF5OFR0NzBramJySDNmOTlHOWEwOG11Nm1GblVDalk4Wno4MWFpZW9jTG15Y2F6d1FTcHpFWEMyVE9mWUZRZm9ndVRaZHRsYUhrWFRLWDNYbm9EQkVLSUd2Mmk4YWpVODRML0YzcURFZ3Fvc2JTdWQrQS9RUHNUZ2lUVHJGMlhFUEc3ajRPR2xNVFR5SnlTYURKakNja3FIL29QaU1DWkFwc0gyQUhxa3M3eUU1bWcvbjZrNEVSU2lBNmNOak52R0N1RkVUeXJjNlduMldIR3QyTkpTeXB5MmhUNGxDOElxazFGZUJKa3M2Z2FXeHFWQTB4c1lIbFkraTdqWmlCeGs4ajhrbEFtWWp5RU9VRzNnRjFHUWgrYXkrS1l5MVkzUFhvUWhWTllFcHVGN2ZXOU9JdmFQQmhmR1lxaDZzSDVzOXIrc3Ard2t6MDFvL1lMSHlDL0gvai9XNkZQUTRRY2lZTXE3c3B5dmpTZHhtczZINXNSUTY5ODlwWWFLQWJjdnVibUhPTzcvdHMxeGlOSS9tNTdnMEdjVzkzU3ptV1ArZkxXRWRRaWMxb0RiOXNERzRQeUtVNjN5MkxjVW9oVTlvK0Ivczh4aU4rbzZqOXF0d01COUg2UXh6Zm1jYXhBQjhNeG9xZy9KWFBJdGFSSkVFenhrMXMzYnpYUXNmcXRLdzYyRVNET3ptZGlObmk0elBQNi9COGNRNDFER1hoSXJieGFPTXZTQ05rZWxRU2FoQVBnRy9zSm9PRE83OTRzNHRialluajZlT2R1OWpSbVd6a2lLb21aWlh1Z1JjRy9QVG82VEhoTGJ3bXYremlKaXJvc2JlSFpDeFdOUTIyV0VmQUxkMjV1dFY1dDEwdUVzeGhyL09iaU5mM0o1SkVRbExCSlBac0I0RXdyY29qaWZSaTRhMmk2eHpISHZWOENsSkltUTVWUzFnOFZjZjRQbjZ6UU1GdzljR1cxb3VqOVhXWGkxUUp0ODJFaEZNOGppNGF3a0dOKzFuR29iYU9aYW5zUnFQTG9yYmQ5di9GTFU3TzFxM1JkUFRYazJjZTAwRksxVDFWVlZHSHI3ckZHNm0ya05IVnFiNDFvanVCM3JSK1RyWGZ0WWw2aW9wZHFyQjZFdGVXbVlyR293bzRibklzeURxV0dOZnRHU1F0WU9BL1RheE1LWGpUdFYwbGtSdjluajVGM2lsdzNhYnFsc0piTUtVRzdNd1JxQkxrL2M4c0oxVHBvb1BaalZmOVlSVXdMMTQyRSt0Mjh0NEt6NVF6VzZ1eWF2STZNZVF3WGtRYVhNNGpicXZOZVk4WWdTUUd5UGswWTM4VFVzdHVvcDN0ZUgyTTJlZ2laSTNYQ3B3ejhTNFd3N1NYdERlcURPTExraDZlV29IOTlnb1pnaTVRYUZqNVVmOUIvQm1HUHgxMVdrYTF1ckpkNmJzMVdXZ1NpbHdHZGxNNEUyMDcyS1VqWmV3M2NKRmdzWElHV3I3WW9jY1FTeVF2Tno4aGw5UEtoMHk1MzJmeERXZUZpRFdLN3BHcFdJSGhQa0FWcEZXOVgwTFlyamJtUVhQaGhkOTRJNnorcWltR1k0bEMrWTJkMi95c1BpSEwrUDBhTU8xMGdFUy9tZU5Da3hMTTY3Z3lIR0xCN29IeXNUYUVBdjNDdFhRcmd3RDJSMkIzN05HYjh6RUJPNjJ1Umh3YjlIMnpYL2UxOGREL0YrWWhkSFRjUGt5OUNvSDY2cHE3MHFPRDh6bExJNXN2YVJUb0lwVnNLOXR3UERZRi9rQmN4NkI3VE5wK1Fuc0gwd3FNUzliRmg4Rjk1cUFHcExJek1PSERIeTluQ3picnVUV043ak1UdmxOMFErRW9nTFRuQytNem5VSG9EbnQ4cnhpbVpSQkh3ZVdqTUZGaUlSdkMyQlBDNmN3TFRta1g1NUttcTl3L0treG50ZEZyRmo1UUxlMWh5aFpZZTlkS1lJZDN0MC9yYkYzbS91ZUN2VHZmbW55aDI5a2FLM2RNcDVidktBVmJPV0k0aW9uTnZmci9IZW9uSjd1RE8zWDRKdWdueFBpY05MZEJGYnlJZGRKanVkbTZsSEIxSkVCQ1NDelVxUWlNTkozY0prVUkrRTczVDJ1QmQyVUxuUS85cDZmSSsxR0JZbThuV1liSXBpUk02VHJxaENNbGxZam0rNUxURVFFRXI5RW9KZGc5bUJnay9CaUtmTTMrQUpKZHZKRnRSUGpBdGtpeVpaak8zSlJjVnRtZ24wb1BWc0kvdDBKbi9MMUZEc1BCOEMvNUVyeUNqWG9ySit1V0QzSTQxQXdpYktaV0xQT1NIQ2luNXdscnJ1ZkluaHBEZmhGeWl1ZzU5NnNDVHNMVjUzQnIvcEhXenBPNldtNGxzTkZXcDB2YlJWbDVvd1grWWZZemwvaEs4OXgraU8zQytJK25hbldkTVpzZmVqMk5oS09xZmpSRVZQclRtc2RwMS9hSk5ZVk1CSlhaN0NVVjJuUkJQdWhSSXlEVWZINFo4NlZQR3VOUDQ1VGxmVVNBRHVENUtpOTNZbjZhRG9IWTExQ1hJU2RsWXhwalVEMzF5QklGNFpZOEpYZ2pjVmdDZkR3OEUvaWdOS0Q1VGczeFp5SlRNenBxZmFGaWhkOCtMWG9uZHo2QUVoOFhiZFhTdVZFT05DS3VYb21HdUhPT1pheGN2VkhqTUZJSGJSTjZFRmVnUnNSV1dEeVQ3enNFekFiYldzeFFsQll4ZUEvby82TFJPN25WNUJ1eDczN1ovUU9qdk52MmtnVGJ0RWl6OXUySXNVbTBaWVhPUDBUQTFmRGZCbVRyaFduRGtGcSthdWxtNmdLUzVLaVp3V3RRYkpwVmdnSDQyeVN1ZmJWRWlqblp4amdnRFhweTIxRmtkaDZOc3lUaHNMQlhrYkVsM3F2NlpKNnlZUDVEMk4zMDNnbDBPblVBd0RZd0xHMEdHWDNDalA5Nm4yOUx5ZzlSbm1QaHRjMFhOeU14bFFXUUJGbUhaNitsUVY3TnVsT2Z3ci9odnJmQm1Ic054NzlsR1JzN3Nib2EwODk4bkQ4aDVsaFpiQ3RVWmR1Unozc2NZb1Rkanh4djNaS0NuK3kzbEVOK3c3NEx5NGVTd3IzMWE5NWFSSEYvNitVUlVpQ080Rk9LNEhwclE5b1NHaThLL1A4R1Z1ZmYrejNpS3oxanlKSUV2dWk4a3lHK2ltNGxvTDdkS285WGZPd09RbWRNVVhJNUhLSUZ5L1h5S1lHZC92ZjBhMllUNHdyN292L0NtR2ZIbkRab21pcFNLellzbUtNcDI4enkxbG5na3F4RUExMEwzWndIaDBCaVBVQ1JSdk1DZ1M0b3dLZWk5ei9ZVUFaK0pPYTZuRFY1OUhNOTFzYVIwYlJNbUxqQnRmVnNQcDVwdFRDRmlCUDFsdkpXYWFNeEt0LzYrQnlVUy9XSXZHa2pvVzVURjVHcG8rZ3lEREJIY1pvV3FRQTcrQURXZ1JNOVRQR251U1pDTWRDNDJsQmVKMjJpM1ZPYi9mWWU4Q0xZR2pBcDB2Y2JpZ0NrRVRveCs5cmo3ZHRLWXJhaEdQRjNGdVNsVkU0cVZUeGYxdU5GZVpmbkV4eUVpaEtWTm9GRjMrWVFuZjBkL2ZYUTB4SmltaklpbzE4WDBEVEY4bVZaNG13NXJrdFJ2Z2gzMDQxRVBIMFdhbTVLa0NEaHFaeFJXN1ZUQTAwMlBpMWdGYjFwMEhxVlBRUk1JUkViaWZRZ1R3aXVxNEt2SGh0UnJuQVhuOVpsNGM3RkFudW1hUkx0Uk5rRFRubVpubGk1S2JRQnRCZWZmTnc2eCsxbUtteTd3N01qMUM1WnluaUFWd3pkWVk5dkxseXRlNmhsMWVOZkRaakxYaEtaakdmWXlqUzhZbEk1clRJSFMrVmRkSVcxTEtWYlJFYWd0QXFVQnZyYWRjaC9pUy9hMk1MUlJGY3NFeFFGcWQyVUxxNnZaV0dmc0NKTXhUd1QvUktPSGJPMFlwcGVSVGVla1p2WExSeWs3V3Q5dzZZTVZ4cUFyaXNjTk04SEx6T2dDU1FtUEhPL0xmWUVSeW9kb2ZOSHh2bllycGJGUHJYYTMwUXJHbm9Od2VnaWpHTUZQeUIrZ3cxdnBwNEcvTldaWEdLYmpTMkkzaU1FdityRWVZdy9RNm9PeFp0aDR1cDVTUHNNSkNveDQ0RkJGc3hORU93dkw5ZHd3bDZVWTBjTUhDbkVwdXZEL0ExcDJxZ05vRStYY3pKVmJOSkxGd09nbHRTdEdhWDg0akhiMjRUd2tMS3NHZHMvRnF3ZXAxWldiRUZ3c01PWlNrQ1ZyWjBQR1luTWwrTVhwVXdIdDJpbDYrRWlFd21XTXExVVBZQ1N2M3puNWZpdkx1cnZnWUppTFJMZGIzcm1FM1F6bUh0a3ZsMGVEVGFBdUs1Sy9zcDJQZmNTMTB4Y1p2bG1VTHd1N29Oa0dka3hIRDRZNnE0WjBidG9YTDRWN0h5TFlyaHdrWERLb252dVJ3Vnp1a2tjVHVteUVsUDgrNkhjY0ZmVE4xWDEwbnJWanBIeHo4TGg0VXVkL1pseGZFOWp1UmJUV3U0RHpaTEVBYTdha3Q1T0VnV0drZWlzMHlsb3VqZ3YwSmFhdGs2c05DS2FLZ2M3RS9DUXJMOG5SZmN2am1vbkZTVTJJYiswUXRkVmExN2JtVkhnOG4zM1pHSDdZWmM2RnlyQUZIcExpaGxpTi9ESFdwWUVnREtiazhOaEJzYU5VUTRZN0RiRlptMEZ5S0x5WlJ0QjZYaXlYQkNIZ1l5bFkyTGVraDAzUVdGVWRBNkFXclFSdWQ5Mm4zcHZnejYram1wQWE3OXFPMWN5WWh4NEpNNS9Ob1ZzQ3NUQTVRZ3R3LzhLZlZjbi9nWFcvejg2dTN1Y3ZFaGUzdnVkMmpOMERiM1lkTmpMV1JWZkE5elk0aUJKNGpyYmFxQ08zWnp0NSttTGdpTHB4QjNiSkxzRDJOVlB5a2pWcTFtTGgwR1plV2tOZTZ3YkJrd2U0OWozT1dOY1FuSTR0QWtXdnVJc0lCa3hYM2ZDWTlvS2cxcFpzdU8ycGd6bVQxalZLQldsSUNGSTQ1T1pyNXdqRGppNk5ONHlhcWVXTFh5NitsQVZZbEY4dHYyWWIvMy9mRXZ6aHc0VWF4dlNna20xUWZQRUVHK1EwZjd4bXRZczhQeVQrSmc0S1hZRjA3ZzFNWWVHUjQ2WGJjckZDS2U0czRwSXhSZ0cvSUF4ZDdyb2NCbnNaMG9ERnZrVjR4TDlDVTVLMW8vT3Mvd21CQklTVndXNWVvZ21mbzJmdzFZKzdJY0M2UnV5eGUram5DazlUQm9paUNmWXRCWE94QjRJME1NTDBobjFKbk01cUZ0WnBXeWNrR25hMUE2ZmdSNkJhNzEyNTY5Zjh0T1hsMVYySnA4dm1ocGVOV3RXUDRQQ3NGYjNHdFJaWm5wblo4NjhsbTlzUGgwZ2twaGh4NDdYZ1NUYTFIOTg1Z1NZRjZ0TXVNb0pNUUxZS2puK0tqR1VYQkdGMzlUTmdyOTZoTm9EdmtuOUN0WEJMSnNRcE5TcWlZTWJiSGEzdGtvWEVVblVMMnF3WEppWWNzbVlMWlk3ZTJ6Zlh1OGNOMHE1cjNOaldyMGx0dG01d2JKT0NxOVVsbWlnYWUwQlhwd3FsWjd1ejZ0d1l5bTR0N3ZFUGxBU2w4RXpLQlVkUXpEUDJJRE1zc1dGR1IwbmFKa2VtRnBOZUxMTHJlemlUOHM3VXNiZkV1YmxKZUtBUkVHV1Yvd21rZkJZdnNkRG1NVGxsdzFjYUxqSFJPNHZ3ejRPYTNNWDd1cG1WUmV3Qjk2WG9YUEF0V3hRczhjQmpJSWh1S205VlcvckpWWXloWkpoQ3FFVFN2dUNiSWlvcnNxSUFYS3owSTV1K1FuTTlYOUpwUnQralZ3ZXJhakMrOWpmVkRQSUZhVGpCaGFma0hPTVFSdDdVQXVJM0M1VjFMWkxVcTYzMWNIbTRUN3ZOakZ1WE9UMkxXbEJBOXVxQjNqSnBLZ1k4bzFOSHZ4WDUvSzUvVXJyWWhMVmVOdXJtYjYwSEhPRk9rRWFsQ1MwMWdDMDZkNnJHemlxeUhHNHRrZE5vdTF5NnBrREYvNXFaTitsM2tYYzdPSHlsUmF6SGxFaXNveU9JUlJVM2V1N0pyR29IT0ZGaGk3dG5lWWdMNno0WDFvZ1lFYlFnVm1sUktDOGo4R2hDdlpLM3BVWURIVmdycjZ5cjRMeDNoM2dMSkp5eElyYVBRbWNOV0R5U0pPeEZXdGMzU2FNdm9oblNpR0grcUdHMXpGaVpvSlB0SlBvMVYxdnhVd1dkK2hHQ0FMRU5FNzZKelptZ2JhTk1LMHR0ZzFjRk9lWnFhdFkzUFBRMG1NckMrVlh0NGRtM2NVbk5KK3loVFFrSVg5aC82QitTU3E2aVRtU1NuNHdVcEtNS2Rac2Y4WnpGMmVXNUExOGs3d1BIVXN3MkJwbGZPM2RxYXg0TWxLaFhyZzZVT2wxTmdKdUFpbHdNemlxakZJTHNCcytKTEM5Y09WM2ZVK2h3U3FZVHQ5b05TVWpvZ1ZUMlVVcE5CRzJUV0xEcTBNR3RLNU00dHdrTjcyeWRsZ0ttQ2kyZ2JsRTRWWkJUVVIwVVBqNjFBV2JrMjcwYlh1T0pZSXE2RkRHV1ZtMnYxYVdaVTVPREhJeUhORGNQUFAxK283eDlUdDdXTzNkNWFDeFJmM0dnMFFHSVZYSnZCMjdsRXBwVU8rYUpBd3UyYkxoYWlsL0FaYis2c2V2OENEelpGcXk4ekJDZC9KYW43YmVvazBQT1NYL2pOUGhETnd1cTVmMjN5Y0VTT3hmNGNsWWtuSk9jemYxRGo0TXRVRFoydWNoL3VGNEI3MlliUkh2aGk3d244allONm42ZjFMcllTRFJ1OSt4SjY4ckV4Y1BFa3dFK094bGxOSEg0ZHZsZjZlRFljNlVFaGI1aUdhSW4yNWV2M3pGUEU1cnJhVTEzR3N6SDVvTmlUZElqbXVCVzJhY000TkNKNE04cDMxWHIwR0c3MW5xeW82bUlxaUpLSTdJYVZUQ2ROUHZTUFN1VmJpRGsrVDdpSmowWjBDQmdDUmlGMVFDOERrTzhoR1ZubUZIM0tiY05wcEl5RHpzNFVUNEhLV2JZamdEUHZQckc3TnFjeTZ5T095QkVvZDVVK0dmaUFHeTd1QjE1MjAzdVVnOXJPOG5FK1NqU3ZTV25LeE9PUXpBVmwwaUxvNkYxSzdsOWhzc1ZTWExEb2ZRZzlybGx0YkM3NFVBdDJDbHpGNU1OWjI0NHNLdytLRk9rUTMzZnEwMXBHQ2o1QnZzT0plVkIvdG1nNUhvOEFOem00dFB5MFRjajVsRDB3OE9nbWZmakJKYVdkekxxQVZvcmZQSkY4azFmcU9zRUZlNHFUcytlR284RTVJa3BhcEFRYmVVSWZ2M0VVd1VMeXlORC9mcVhvTy9yNE92OENqdjBlOHpEV1YwZFhoSjYxMHBmbUJYMVNzOEt6WEowYTlmY1dlYVJISzFxSFhMY0orbEdmTU4wVkE2SEZETkJRdWRldXdSUjEvY1dUZ3poNTZBTXhBNFN6VUtlTE9WekFMUUN4YWdBQlJnS1RyUUxtNXhMM1B0SEtJOUt4VUVoY2o2aXg2M3ZpMWRIdDV1QlppZmtWSjdEZTY3Z01USDlmSEVSeHcvWm53eHIvcnVoc2svM2VGQm82bVl4VjFPZURoSTBwV0NYcTQxY2lSSW5JZFNmOGxmYlJ0MDVxYXpiakV4MmpCVGhFNHAwNVNFL0xFYVlQNDMxa3p2RGUwNWlaeWN6cXVCUjVaK1JwNVY5Z1dQdnhwWGxVVTJwS1g3OFFXZ2tsVE9sTXg1eEw0QXoyZERpZWFyeWQwSHJBL1JQMjBNejZzRUowUGNNZDdFTDVDeDZCcWxKQmkyMXdBRStLSjN6NXpLSE5CYm1HZ2xISUJFSzkzT3Urd2hkaVhqQVZGNUgzOVdabDRRb201OG1DQzcxK0ZLbVFlY3hxOXh1ek0wdUdzQ3E0VVpkSXdtVGR1RnpBcHpidnBOclJVVlI2V28xOFAvSkJzTFdCdks5cjdqVVhMZnFaZ1B0UEVkeWs1MHo1M05XejM0aElmVVNWVnp2ODhONUVpMWFtV1RpTlBZZ2N4RGgrb0dScUhMNmFEaGNLMjJjR0ZvRnhpRmZ2ODBsWURyaHVrRkJHY1JabkxEMDdtdzZCVjFnUy8yT1RBNWd0K0cvYlJSOHg0SnMxTnBERWNIemZ4cEd0bG03Y3BqZ0VPczMyUHg1c0I2UWxtZzJEQWNTRzQrVGhHcTc4UVdrUmFDNm5EbU9KUXBNZmw1OHd4dy9ueFhwUVFLN05CNkhISzdXM0tXdk1LenQyMzJxTWlWNENIcmNmSFdhYnlUU3J4cllsZHZzTWE2SE5EVlBqaWRZNWV4cmZoUmx5U2VieVArcFlaTmw3Y1VMZ0NvUFpCTkhWZzAzTFczU0lVbmFsVTRXWFFxclYxc1lVb0lsSUtGdVlQZm5hTTJHTTN1VTR0U2JSeHpja2xmMnA1L2RwVFBvNXMyciswbHc2ZW5iY082L1krZ0N1ekhRVUlCWS84ZnpQd29GR1lRcllYeEhoY3YvVGlHWGh3dGlnbkp2dTlNQVBnMnEvN2czdmYwRXdsbE9PU1N5K1pDQUU5Z3ZSdnFmUTByNmVlZFlFeTBQREVUdDY1UWRSb3ZVSU9xSDhwL1FTL01mQkxWN1VaWmpYV1hJcFRaakQ1Uy9aTHVHZnNaRnhoZk1iQXNkZE1aMlJEdkt1aUoxbXBnOVpoekRwYlRaN1dCUjNSam9OZ045R200bzNLSFByaWEwb201dlEvOEk2MXd2cXhSaU1MbnF2bHFiWW50aVI4Q1lvZDRxMEgxQjBqdEJoWW9zWnV4cDBLMUM3QmZYdjJuczU4MEpXZGh6OGh0THMwSHJnWGpPRTZtOXpDWkw2eGNpeXpxYy9KYWVKRC85bkFiLzRsbkZ6VmRMTWFlUnhuS3I2QXFvaGliaVVDQlNHc2JUUC9jdGJMYzNiVkQ2bHRwM21iSDNOcWc1eGt4bjZ0T3hEaFFXT3ZidzVMRlVBdTdaV1ZzTk1WWjFieUgrVjFBNWMvdFJQeTJxeWZ2cnF1ZklwNStzU09RTDRWaEFGS3phZWloZXJQeFNjTlpKRHhYSEJxekVsTmJHQTNYVUhyQ1FSZmpUL2ZMblBLRjREeHFaWGlFb0xQcUZvSE9Ecm5UeStGUWVsbVJtNHpjdXpWeHc4Y29uRXI1VnQzZUswNC9vYzVLVGpEbUM0cTlXWUFGSmdWYUg5bTcwVVlnUnR0SlJtQWNTVzZDeUZSSlYyYXYweUdjUllIa2xiQThRMHNXVW9ERVdSR2h5NTFjM0I3S1NqUjdSY2tsUXZFVStnZHRJWVJJdFJTY1RjaEc2NzI1QUdLTEdXbFVkb1gzaS9DNmpuTXN1dWgrSGtRS0V6d3EyM1pXcWFkQ3lTZG5BVXIwMStVQkM4b0NoU0FMYVdQNUxmdlVmdk5PTEd2L3dPOFdrbVJEeHBjUlNYUEpDY3FnS3d3TXhUWTRhYWk5S2RCRDdUSUZ6V3VhdTUvakFwWE5vME5TWVlydm5rVnUzUVJPbGtzc0labGM0Z3A0QmtXc25BdDRzSEpSdTI0RGFUQjJ2RXRjZ3kyUkZYOURQTUF5S2hmUUN0a3k0VDVPQjVXMjBmRlNxTFNRY1pEM2dpZXRwWm16Smo4Rkl0b2dWc2ljYmo2VTV0S21KN3BuRFRHckF6V3dmRWVERkNpL1MxZFZYcVVKUCtoVkY5SS8vWGE1M1NiS1NZdlV5Rm5tR21pTmNDM2IycU03ekdTa3NLVmZRejVNWUlseTlJbG9mVjhSMWpCTEhkNjR6RUtxcWRrM0F6ekVvcWs3YlhSZjdxdVh1SkZZdkl4VW5PWWJrUUpJb2VoeEk2UzNTTk8yaEw4SnFpTWVuOHI3bmd3QVZIdlhDQStZNmhDbXNlM3UzUm12dmcyeEtHdEhUQXMwRHJLRHQ5Q3hjQWtCc2NqRHhJNTU5L1VyWElOQTlJQ0g2OVhxUGFQUGI1U2RoSU1WL3FHVWh6cGFHa0k0VWtmRzdQVmxia2o1bVluOGY1THdmWlRYdG5GMFN2NTFVdlRWQXhYSWtJMFE5OG9keExza1NWd01yMDBIN3dScDROd28wZEh1TGlCOGlvMFJsTW1TWUlXdC9YcTR1bUtSTUt2cVNrZHM2RGxaOEo5RFpHZXM1cnFhUHBQR2Z6V3RQa2dValRuU1ZMMjNsTitSdGdHNkpIQjEydGhMMHZnQ2F3eFdvaU52S00vamxVMlNwNFRsbll6OFBuRlJTZWZJT3hkbXAwRkVWSFBWeDNrZ0dKWmpGZGhhdE1rYzZaL0ZsYTg2eUFldzlqM2FwWFltdXhrOTFxUGl3R3lQOXVlaW9Qa0FQaXQ4MGtnRVo3bEhod05QQzhyL0hyQ1FvSld0bDhUeit5S3pkOE1XVmFLd2p0OCs3QzhEamhoaU4rZkRQYlJqanUraW41UkJKTy9OS24zM0pPbnQzdGREOXBmMEYvSXpLYXRpV3AvZXV3OVM1TkJHSzBuSmRwYUUrelFxWmE3VDVZL2FvMGlxN3lnUlhkRFZXWVNVd3ZGdDIyczdNNzAvVWVPNmx3SjVSbWtDYm96NVlCQTlITXZlQ2d0T1B4bDdQMzQvc3gyL0ZocnpJdnRwR1ZKZWE4bFdiSGhKeGJGMGhxS2tmNmFzWFRCeXF6ZFVESnk2cC8zbldmWU5yMGtDTnZaMzJzdTUweUNzNUFVRHZLNTVpQjhJRTZkQkZvWWFrVGw4WGk2bzRQUXVWY2UrcDYxZWRleGtKa0llc3FjcmQyYWRLVm9OcVcwdzh5S0JpdCs2ZEw3aTZ0d3dQMWhzczVkM1ZQVExFUFFpZEpxNkJZTHZrOGtMQ21iaFpjZEcxQ2RKbXQwMTBmVXp6bEQ1WHNoVVBpNTIxOHVVNnVGU29lb2k0VHVUNkNDRzQyN2RxZC9XdTJ2MURLZnZITjlOdzN5N2hIM3g2Q05oY0lWUytLWXB4eGR2ekZYNitReC9YTlF3UDFISnFjbDdyRHpqaW8wZjMyZGxBL0FreWI0MVdpdVRmWWQzMmlaUU13RnlyZDZSZkZaWml0cE1KcHZHNWlXSFdzSi9TdXhYUFB1TndMQnNnQnRFYjBMRk9RdWNjT3FWTDBKMkM4RStncjdic0NzNkVjaVVINTFZMGhZTUFwMmNEVzh2WjRwdXhHSFcxNWxiRlVFcVcybjlzWGpOcjdmWVMzSi82dVUxeFFSKytMamdWS05UU2hhK3dqNXVVdGU5aytRU2d5UkloZ2JkUlFUUG52QnhGeTVJU2hNK1hBejhoLy81ZjhuMkE1dmlaWU1IYnZySWlkeTBOWlJCK0lHbjBxQ0I0UFp6dUR4OC9CRENlU0pCWnNjc2w2dnQwdUoxYnhRNnBzTTFOUWVNUGhZOWVEODRjcGxFaGdINEhUdE5pelUyTVlxREpncTJvcHRCRDM4cTRUTDl0blpJVjNiYUN1MkZxS054UkVEZTlpQmJTQTBZOXMvczcyR2hkOG8zcXFoU1NLb2pZS0dJeml1TjIrRFJjSGJwWnphUTRVa0FKcWRzaWFRNlJOOXcwY1luWTUxbE51SFlEdFRXNEFIdVdSQ2pObHZIWldwdTd2bjR5bjBsQ1pNVnNIN1RNcXQyNHVFUEhBQWZLK0crRXI5QURoNEFFeHhKQzJ5OXlPbEVMWElEb0hRU3BYc3A0bldWdVZIYUhDWWZNQXpwelRiei9TOFRpclhXQmpTb3hYN2VLa2VJTHJhMGVwQTNFTEg3ejhpMm0rc1dqd3ZmbFlOdnBLc3J6ZzhZbFdpOThnNmpBY1NQUHk4SjAzOVJCOGxmRUpyT3RrK0FZUVB4OTdvQTJ2TUhzMTZmSnczOW9iK2dqQi91ckRWRjFnTTIwWitBbmwycFlwODJKVW42TGNnVHdPeXA4RHJkNTRzTTFpSWpSNjRaTW5McEVWaUJDNDVQc1B5RTNTb2Fzc0k2aWN4TUxmdGJFeG4xVWszZ0VlVWF3blNMZVJYNUEyMkhJS2NnSXJEUDZ4aTdDZFlDMCtSSmEyMUV6YURUUHhkRCtQWTdQcHFhbkZYRlZ2VkRvb1VMUTVIY3dUb3dTdS96RXNvZmE0d0VSTFQ1YVVldENkd3pqQU9hMnBNREx1dlhxZmJWa2RSc05WeEF5TzBMUENxQTVFV3FzV0ZTWFJoNE02N2xmam9lUExJY1M3L1NnNHlYSmRIWFhOY0VFK0RBdGh6TmwyUCtEaEVtMnNwa0d2Q3NlMVBBOGc4RjVSV1dEMUJKd2IxME9WZHJRSG1FalBtQjBvK1JHZ2RaSUdnMCttc3o0YS9yQ1o5MndlWlQ2RjVwdyt1N3Ywc3FSVDRCWW1DV2N3Ujl6Qms5TURwTEJ2N2VJWTh4TGZjQ2FHUzdRRE1uUTJYZWhkenRoNWFWN0xUaEdsOVB5cm8xQWJuQWxUL2Y2dXd5THNUWS9lZXY4R0pTK2dpSEE1OXNCU0xBN1ZMRGI5aFk1T0ZjQ0pqaXkxeTNUeW5UVDRlZVVHb1B1SjRncXlEemc4UE82N2hicWpzb29IK1lubUpNQmVpMmxHaENGTjhGVEpDQ1h3Wnk5MnJOZDNwbXppRE03TDRWd1VNckMwdWxTdUcreUhSY0dwSlFjZXh6T1FjZzNhWlZtRFZnQTNWdDRDMklEMkhlL29CbTd5NTVOU2xUY25YV0NvcWtBR0lxRGRGOVoxK1c2NXQyWWdDSU8vZVVZUUpCRHFRcW5GU1U4TTVpUFVWWEpURU1JWTZPNnpoSEZTaXNPMWk4TWlORUNkeGtBOEEzR1JCditwL3JBYkVXLzc5aUhJRFNmNWNRenVrZzNENnlBaGo4VGQ3dk9POFpOYzRnV09WZHNEZkpiNHdIMFlUN1pJRWFiVnE4M2FtQ2VWb3daLzhVeDdNRFdhbzR0Mm81d1p2VEhlTS9OQWFOemh3SER0VEJrS203VXU3djlUYm4vNUVlcXBTdW1DMkZEWVlQdjQyUlE4R3pJWnNjYTMzUmZrUmd2WW1xbHh6UWtyTWtYRzUzY2xXY0ZqdmswV3B4eTA2SXJiVmRpa0NzTU0rODZsZFA2T3pVRFpzMUpGK0FXaGdwU0NrcXdrTEptWDBVaHZNSU0yTmlpYS9mMUozb043OW1tcVZaQVhXamx3ZGVWaGk2L1hEWjlZYXZGc0ovRk1sVmhSRGczakpRMS8yMWRtbFlYYVdkRmgxKytNeGN2WDI0WmVaemxkQk9RZTZvR0FLRG04WDNCaWo5Z2VuNFFDTVFDNG9LR2FWWmlhbFFOWDI3NGpPait4VmJmRGVPcVF2Q0JHaUdndU9Ba3dJcG4rVnBGZElDMW9JV2luNGpGWFlCekJyRlhjWEFOSTlwTSsxMElNVGZXdWI5S0ozazRUWGFVdmFzOE1SYkpvclk2T1pic3ZTajY5RnZLN3VRZU05dUF6MkZtMGlQRVFpT3lZeDAwd2hMb1BWZFlWK2hCdGdIK1FpNmcwMEtoZElZcUk2WVlMVEtqY2VCTUwyaG90NS92TXhZcVFCUkFvTE5YYUFIRzNmWit6ejVnYjZPY2JhaWNXdkxVcFczaHR2Y0tpWC9vZks0THkzOGN4em41eW5SY2pIRzhicjc5cUtRbEI0YTRSWVR2UE1tMXltaTVrZGtHWjV5Q1pDTVRKMHNXTFB1eFVBeDlSYmh2VWRNZm1OaVJVS1VhUHlOaXhpTXMzNmRZdUVvR3hBNnRQQ1NWVUJuTEkxMCs0bzBvUmhkSlNUVEZITmNpYUxEZERFRHQrOXg4Y00zemhRN0Z4aFo0UFhUempKYU14aFlsY1pmUVhmVkd1YkR1RmFENStteS92UXF0TXEvcUtnOVloL1VPbzJ3cTFXVTBZTnVEci9SUU1rYlE1Y2JOVnRFdk1pOXpKb2Z3TWw0QmhEUGFVcjMvRk5Jd21LSEg4VzJXUVpmUE5BaGNkREZEeWUyUHR6allSN1g0OXZZY2QybENmK3BjVnlaSnN3dys4SVNGeWsvekVIa2NkYXA5ajhMK092ZlVOTDJzK09JMlhYdldCMGdoNWlxUkdvV1N3VUp4b1pOQW1SSXhFQXJQWnhIYWxwVkVaeDh4Mm5RMVNRczNkWXJXYW9NeE81VE43N2Q3LzdJREJGbkJIUG9kL0VFVGUySkJSamlLc1hnbmxmQXM1cFRwT2FyVVU3cXpCV0t4WFhLNlc4QXlER1VBWFRIazNzU2FQVDNVQUx6SWVnVEJHT0xrY0xwZG9FUklwRzVoczlzVjlCQTRFelVZRnZpeDJld3FuZkFEUEkyY1plY1JjRFR3UGZjaXpoL2w1ZjU0WjRIK09xUXZXeStINngrVTZnd3UzU0hhM0Ezcnp4UWt5YUxneDM3ZStxa3lzSUtOaFBkRVg0aWt5RUhseEZwaWRLcUs3T0plb2RYbmZ2aU1BRXZXRjBOQjZaalE1WXV0OHV5Rzh0VFltMkpTNDRrMVZEdDJ1Sy9rUE13OVFXMDV0aWlRWFBGSGJLcmxhYWJ6ckxXM0JjOVQzNW0vZ29vQVFaWmxqT3VhMmdPQm5uOUl3QTgvcnV6ODg5dlIreHhPM3ozRExqUVpKTS9Nc2FybUx1Y1JiK3JtQjh3WDRhSXp3M2ZSVUdLTHQ3RWwzbno3dlI0bGNZcUF3OUhmY3lQVCs0eUFQcS9oVWlSRklmZkVwNXRVZFBSTWNMRVJJb0pjZTB4Z3MvT010OTc0T1BIaHNEdlp4UDVUNjBnOXBIN1dyOUpZR3NoWS83cEhtRG9jdTY5aEtNdkliUEtTbmJsVEFsK2RXQUFheGFGbmNYVU5DdjJHUllyL08wV09iSitYRyt6MVNEcGdCM1ZyQUcyNE51Wmt6YlRZNGh0VVhIVlFmdzRMbmt2VmVVaitDcTFKWXBNS2hiTFJydTFQcElIaHBZZXZHNHVOSlhPSisvaEptblBUcTVwemtjMlI3SDFsc2JLOS95VkRlMWVLTi94NGExNFJ0b29CWEhnVm5tcWZMWWFGQWY3VUNwZ0tQajVTNHE1Z244L1IrWXgrUitBRFRjbERpSGppMDNUY3hkZHBJMDRvVDJYR2F4ZXI0WHNJeE1GZ2J5TUIrUHJ6UkFvSHdaMUpUM0wzcmR0QXBCQXpCY2xsNWRiUTZFYkdGQTVmVmVJUFZHN1RVV0dxTGhSNllVMjdLMm1NRy9aN3FVTmNUZEF0Tm5oTldwRWw4cDNsMmloTVMwZU43SDlyUG9uZ1Arc3FqSE9jZWVhVmZESFRyRWJaT1ZKUzltM0tsQ0taRTlwUWE5eVlsRkVWZTR2bVZJckJVbjdYOFpkanhtczNjditrUU5yTGhQY0hnc2FZeXM4UUE1TEhMSEtvbzJIU244QzhPRkthckJHT1dYZ0ZublVvdEVHZU0vWmVLdnY1Z01FcDZDcWFIbVYxR1R1TW04MWxaNkFXU1NYdkE1WWgzVHZyUzVIUlNSVEdkSTVEeDU1d1c5K1Q2SlcySUdacmk0amQ0TDFkSzBRSWxvWk8vTXo3NEhpbEJWZVMvblZ1WXZBYU9HcU1KZDJKNDArN21rL1dSMUhSSWZOM1VkOUxqRDlncXF1dHAxVGh2Zi9ZOG1hL3ZBaUY5R3J6LzNuRXNHaTdmZHVpTkh4VWs5TVZFZDdzUHlGSFZlS3h0bk5laFFhd0d5N0IxZnVJVDJOaDgwZEw5TThZdXRFVmM0clk3RUNDZGoxWStXb2p1U2l1bGswdms1WUlzdDJIT1ZsQ091NEQ3ZnpNTnJUZEFSZGdocWE1V3hqek5wTkdxbWFhU3J6YXo4Rk5leWdERUVSUFV5S3l2RnM3ZFlGeXk0dUhlY2IxdG5tTlhDSTN4VFUxZDJaeWpHdFlUdko2ZnV0aDBRbGE0WkdkamhLQW8zeUhSM21vSnpNOGFUTlY3ckVsWWZEZHdvSTFwYlZVSCtNS0liWkN2eCtLNUl6S2ZBcytXQldkYmN5TUlzS294L24rdk1OSHcxdzQvOFJ3WVIyVWRFSThTYlFuMDJTZHpFbmF5ZkxPQnVTbkh4a2RMNFg5R1dSZ0pKaTFRbWgyN040TlhhTlJjc0V3MTQzYmtRRkg0SFpwcjk2TGE3MU1VQytQN0tRTVQ1SVZkWDhxdnhEMW9jYmkxZEFrS3R3NzBnM3UvUTdQK2VwdUFxN1BVZzliQUorUjR2OHBXVFU4cldrTjBXZ1NWTjFZbXEzSjEyMllDYzJPMHRiK2Jvdk5kb2lJTUJHZWpLNUxWS2JIdlQzTVRtOVpiTzdPNXBiWks5UE9GVENZbTdVMU9USVJteXhlVk9wVzlqODRkclluZ2RTb2NHQlJMVktFRlMweUhZSzZ1YkZLQnZheHdGaWhBQVAvdGxKSXY3OGM5YUNZMmhlZW0xb0lqbmsvMGIrNTk1eUdISFkxTVZ1NEw1TlBpaGRlWFNWc2xKUzA5cklvMmpmemI2eXZFS05HM3BBSTBvNUJ1MjhyQ3dtdU83bUNHcUF6d245Sk9pS3hoSVMxSlNlbGRHOUVpNktjbzJJZTZpb1JvSGFmc05kNVBOYXlGbXZVdW5TcUxpTXlBVHRnUkpNS2dVZVNJSUZzK3pla0lVWW1oOXpOYzM0NW5HclhCcUlYUFJRVE42WmlQMWp1UjBBM3VTUkNJVm55eENLWU12Wkw0aWpLNUh2dFhmVVJLNzVPUk95ckJwOVlPUVhUV0o4eUY5c1pGUFcvMGo1djFjLzBCc0Z1aGkwSVlvYkkrVHBGYlNtMlJkdnRFeUUzSVdleEJiU1ZCTkZFZ1d2Zy9MdGlqVmNrRzBma3U4TlNOQnBOSUIrVlNuU3R4dHhaNDZHdU5oa3ZkZ3N1c09WMFVyak1QM2U2bVJwdm5tUXhaTXovQVFaNHU1VGNRbE1IWDRoTEZuRUR5Zm1uWk9jaXl3RGJzM2JXL2pqN3A3MHoyRTBqeER6S2dwcXNuK1k1NUgzc1kvZ0E4YW9xa2RTZjhzV2J2c2puam5LdXVpNVlxRFhwT3ZvaFFHaHpIQnl0MW5YUW5GMHJFZ3V3NXErZlp0MTB5UWRhQnZ6Vm1ubXp5bG11c0Q5SzBPdGhJcTlkbFg5ZFR4YjVPVndDeGhZeHVUenZYWDhZUDIxRkRvOVZNMVEvWnFGcFdzclFZL3RkM0Y1WXpidFVKbUpDNlVrZjBnNmhSaXZyVTRVU2lYZk9jTFhVZ084OWlOR2ZYZDYzMGpzcTdBYWtqdWNTZWVsdEVhbDJTZlJKczRHdjF5Y09QbHFabFNwd3pwR1VjVGNscmNHUnVmaXVWN2ZzSFBiVXJ0L2JJOUlxTG11bWRMVUEwV0pnWGkweG8zdDYxUjhERGJMUmVqUXNpTDFvSXN5bURWK1hBRTNhYXR6b0xreWJHT1M4cVBZSnRWeDRYeFRncGRTMlN1dHlQbUt3cy95bDNCclJIT3h5T3RManE5eE0vRzRaY1UwNU9YRmZiem9xRnZYc21ML1RvSEFYV29yU21oeDR2MmNObERjcy9ETS9DNjgwcWdCR2J3MGpzRTl4T205Z241RDY4WERSaitMblN1bjkwTmJGSHlvYndPcVJhbTVTTnA3cDd2V0NUYjNETUMzbmkxYmZaNjJaQUNiRzgvMTFCRmFHdWVDbGsyYTNyTzUzc3BGMExHWUcxQS9vTXp6RlI2WFh0UXZzUVlkZjJnZGIxc0d5aXEwRUQxeDVEZ2t2REdJWGYveDJBZXk0OHhHZkZlelA1L2xOaTZwUWJmemYyeWJPby9xUjlwb0hock8wMGU2aEtxbVh4cUUvRGpkY0dvQ0R6aWo5bzZkRVVicG9CMm1xT3Q5VmtTVFJPNU05VmFycTdmcTBnVStJMlFMb2tLaUxZSmUvVGxhZ2NEYjRvRTVFSzVPUXNiWENYdWdibXdRLzlINDQyRFZIdEpKNkNzbFdrUi9uSGU5VVdUcEoxdTNjMW9lejl5akdyeVZ5Q2RMU1F4OUtaUS9kUnVXSDF4Q2ZrOGdqem4xQklZbDkvNndVWFB2YWtOUXc1anU2TktEcDJRVzhERDNUaG43eTRYZ2cyZ2pQVzNIdytxNFZjZklieXd2YWdkMjZhVWJQRm5WcGVzbVFlMUxDODZEWkd1R2R4TGRlRGhuM2tkaStNVmFvcDVpdzFOa28xRW50SmlhcVg1Y0hpT1R4eUZIelF2aVg4UjB2b3NMYTJ5c3hTM1dKSjBJbXNuTlRKOGtZdGxiVytSVmdrSmhhWnlUdE82ZnZMaXZINEtNRU8xMitCUlB5TFozMzY3YnhObnNMK0lZN1FxNE5mLzl6TnQydGc1V1A4cFF1RDdHa3ZRMGkyVUExaHA4Y20vUXluRWdhNUg0QUFPcHRyMmM0Mk0vbE01ekVob2NMNlg3TjRPSkxPQ3FvUExYNG03R282bElIM1RMSVVucWlwcThka1plVGk4OGNabit4eDA4USt2aDZNYkh3d1M5VXZtNVFYNFNENm5ISzh1Tm5XL21pTCtqQmN5cTZxWXhnRGdQTWZHTTJYNUtyTW9NRVE1Z0FiWk0yWllJNnVsT2pZMFV2UTJBVTFXb3lMVzFLSWkwMHh1bHNDL1dUMlJ6WnVUMGFJcVErZHd4UmtmNmJ5cXVpRDRjS09kZjVyOG9XUjdld3RLclJhNGNKSVNod1dyMzRzbVI4THNDd3pyWm1YNldVeC92YUExb01BQTc4akdKNHh4MWJyVFB2RHRWRUlkSHN2NDVBZi9zYWdRdXluVUppSmpMK0pTRVd4eFB0Y3U4bVh3d3BjZloyNXpVQ2lmaHZuRitzQlhjaHIzd2hKMlduRUZLMmtQR2lROWQ2MzJWTVVKV1c0VE4zSUlJV09OV3JZVWswM2pVV3AyMXFTRzdpbTJYcnoycDVld0dWYndpamhkUjdwS0E4N1MzemtKL1RaRG9TQTV2WE1EM3kwVXNSUkFqWFJKMzhvRXhqVWZ1ZGpON0pqTFhsL282aGN4K2ViY2xGTFBnbTQvSWN5VjlFMmdDSEtoNG5pNTZBcU5oOUtJbUJEQ3lmUVJkNjRnR2NRVmMreHdIVi9ReGhEQThUMGVYazliOW8yYzZ5emFMNm1LU2wxZThDZTNDUHJCWmdWeEtabFJKbDZCeDNDWXBpMGlZN0Z2Skw3MUtFeDNQUHJjM3EyT1g5dTEraU1MdTM3VEVTUWZWVURVdEEwUGx0R3k1V3QrZFMxWk8xRSs2c3J2ajJYajhlYkVxY2JBZVJzbWtHWkFxV1N1M3VVRzFtRGRxT2x6OFduMm1reExxZDFhclk3ZHB2QW5tV3JOS0wvR3RRL2hhbDVIS3Z6TklWbmxCNndoZkViRVBnZ1FuUGl1RUpNTDU5MDFwaXFlS3hleCs5RkROcXRWVFhsbkpRVmpKVEhhR21IamNSMzJPNlpsOEg4bEp4UE5ySHpqa29IUVl2MzNzWjA4MjV5azJqN3hCb0puOWdjaHFRUHBUcERKalZRWkN4aUdLaTB3QUlDNjAzbE5hR01RaFV0ZEJVT2I4UnRhVGtCYm5mWENWdnIxdTQ5MEZUS2lBNlNzdkFjQUJzL1FNaUhURlpxZHJ6d2F1dGt4VndXNjRHbUVheFo1Q0NDUGI0d1htQndGT2RFTXBNZFd0TlZuU2EvU2RTQTFkTExDRVpuYWpMakN1d01pNFJxUVFpSUpzbjMxTEE0RXQ0ZDMxam9FUXE3WTRSUTN6cWlUV0RIVjFEOU1WQjlXZ1JmZjJQdmhtMnlIanAxNER1OWtLbFhIanFJRTZuTlNIVUdiTlljN2J3Vll6eFlSSWRhdmk2ZFBGUFVBNkpRYlJsYjlIc0VDVG9SQ0NIUzQybXMvRU0zTmZqOG9LZ3lzbkhiMDlGZW1acHFVakVOR0h6VkNDZUdETEh5TzMrVGtBMDlva2NobkZyZ2N1MVZBQ3FoVytoK0JmNG02SXBicEswc0ZyeXJ4aUVJb3MwZE1rZjhTTXVDc2EveUQrb3kycXppREJIbWF1Nloyemw5YWM2eVJ3THlUM2NaVXg5Q1BnVGFManFpWkJpdEREMW1CSWhtRjVybHZjOGNzeDlmMnc1OW1hVS9NTGdBWmNaWEpQSG9lUXQ3SzIxZXM3aVVHNW5JVXErUXRhaUMxblYyUGQ3cEFCMFRtZmdmQjBaNm9tUTVWK2svNmJQa1lDNWxrVHdqSmNHZFIzWjB5YVEvS25tVG91U2EzWDBNSnlKV1pxL05DMm9kcHBaYkR3aHE4dXBIdUJIaGJmOTVHY0FENi9rZFh2am56eXgySHRqMU9wbzJLNkJiMWZmd0R4RXp5SlpoZ0lGVmN0dTRJRlE2N3l5SUs2MXBESTN5aXYydXRaYmFkN2U3S3YvakhDNVpYSlpxdDZROXFJRThmaU16V1pncWdCUzRCUFowUEZFUUpPUVU5bFlvcGNTQWJUN1hEdWJZaHVFbGg2REJ4dEVLQ0V6WTBFenEwbWFKbFZLOTZSUHNXN0VLKy9ZK0hWd3hORWhLV3FIZFJQdUtIakV1aXQrdVF3c1VSSDRVZkJGeUxSVDNUWmFTbTdOOGJzUTF5VUlQOFd3NHlVKzRwL0F3TWVKZjF1anJ4Wm9iZXZteEdkZGlTSThUQWhuNlNaUWRoMk5JdmFFdC9rOGFRMVRvYjh4ZDdjWW4xRmZYeGlYT05ZeExubTJsWVNWNFoyTzltQTNrMHhibUFXYzF4YzhrMVpSTmxvQ1pCak85aGM4SnBnM0pjM0pkS1JUSGlrNjlicTVrbDVzbmhQMmtYQko3RzV1dUtMd25vWlVxRHlxVU91WjBJTkdCT0xPdFlrYVRDZStSbzE3T2dnSW5KOVFmeFFOVkh5M2w5dFM0K2JGYVlyUEVlKytuNU9Md3VFdHZaRTJNYlFGdHZPdTFScTFrQjMyYW15aXgxUkJIcGdvUDVuNDBUN0dSeWZUeFhrMGsyME53bDZET2RuTUMzK3V5Qm1MaVI1SUl0QVZ6NWFCeXdWT0NMZEVHLy9DZC84eTB0N2NvUHVTbDNGSFlRdlNBR2xoM0Jhc3hQdGlJRlJyUFM5c0p0UEczckF2ZXBlaGlocXQrb0EzeUErdkxvVUo0N0J1L3hYNGFjUmoyd2tKS2l4QmVLKzBFYjlOekxGNTBaR2NPU20xMVUwSnBaaXFsdFVSUlRjS2RPa0c2RG1tY3djRmlXeUdnTFA0OFU1L0M3c0dOaXNCMlg3NnFweEhqbHpOdGlTMlh4cFBoU2VRaURvMHBOM2t1STZEd3AwS0ZxazA0RlZCS3R6T0oxYTBxYUVIc2ZzMTFQZXkyZTNQVjVieEFocVp6K09hMEtOaU16OXlia2lPcXF5dWQ2S1JUZXpuenRYR1lkL0ZOeUhjWWhPNGg2QVhsTG00dzVoWDZRYko2Y2xwb3hlUHVHb3V6TStWaEg3aWVHK0RyWE5jTG9ZOGozMm9jR2JnZUNVclFFbldRR3ZwVUtJTXliaXgwNVJLK1JPNDk4MHNZdmRpREU3MWpWeVBDTml0S0twc3djTjAyOUJmMVNoU251bzRjclNCaG05OTFCNUVFNDJ1anFydHR3eTdPZmoycTRkTGZ2Z2RMVGhQY2RqODRwL09sbDB2eWlIV2IwQm4vL2FUZmFZNUwwcGdvSWxNMVlVaWFHYmt5T2VSQjhyMXY0OXA0UHJuUm53Z3BPZVJRckUxdTJabnROei9sbGxZajFYeGhZeW5PY05UWnduZU5rQWdPUDNpWTMxTmUrMCtBTUdhNXJRb05yNjUyd2xGMFJsU0prUDFPMk53OVhtcG42OW5aQWdUTGh0MWdDMWdxTlVlaFJES0VyWjMvYlJLYVJSeXY0eHIxZWhaV3JjT2ZQN2trUWIzYUx6OG9PQWFsT1BZb29EQ1FDMm1LLzBSV2k0V2lhUzQwSzhrN3c0dU1qWkJuVmxjZktvZ2ZOOTVtZTJlR0gyZElmcU55Zk9VS2RoRUcxaVB6RnFsZkoydTkxUGJPeWdtWVRkaHIxaXl5WjNlV3JRZlVPN2l6YWdBWExPSXllK0FQdG1icnVGR0NJR0gvc2FERzVrUXJhWWUwQ0ZSSkNaYmhBWlVPay9RZlJQczF1eTdNdElTYzdzS1dYM0R0ZXEwYllwa3hSUEZ6emt2MWlTdGM2SjBkc0k4M0tQTjEwZnNQQjhFSmFVUzBwejVmVWlvZkxCb3RmOHhRUXJzNXovZnowb3NnbWxxL1BsRUNieGpNOFJkelhocm9KaDcyMHF4VkIzb3VicFJHWUZiRTJKRFgrY1BsYllOc1NVV2VsUDF5SFZzZkszMTh0VVNpeS81TlFsN25qcDRiU3o5aHZsaFBhZ1BjaHN2UWN4MmlESjZ1Nk5ld29HWVF2WVhkSWtHcllGai9IUzh6NWhLOThnREkyT1hEVVZ4SXJ4L3RHWWsrZnlrZW9lM0RTZFlxOEtCTU9Cb3NjcjMrdHFMcENWNmY4YVFWM0dIOWphUTlvM2ZrZ3Yvbk93TUJaSXpmRUplNlpHMXBvNG0xVFVBeWdlMGJzTUtqMFJLdGRZZGZrMUZOaTQ5cTBMMDJBY1hiZlQ0MVgvVlNxUmwxR0pvby9DOEI4eEI5U0NodFhZNnhQNEVjSnN1Z0tEUjVLVit4TDlYRlVXUi9MT2daQW1ReG5aRzdaMGN0RVRkblFzSnUxWHZsWldnZFVlTThnL3FwQy9TMmU4VVJ6c3phbjlDNm9aK1NSeHFVWkY3NXFucU5QaTNlclAwenlXcnNDbkNQTjZsTHhoRENrN2tRQU5HRVB1SE02RTY0bXN3WHRFUGYrMHVUNzVUeXMzU3BQbFc3dzEwaTR4QXQySGpnVzZhTjB4Ulc2aldTTFhBRkdGbFpuRks2TU1LV2tyUXRaZDkydHBERzkwNWhhakVydGFydlJSV28vY2Q2YVNFdFVObDFRYktHalNKZXJvSDl1bmdFS1ZCc0UyelFmbTZMMWhiZkpoZTgyUzNKcXZqYTRUUjFhMXZwL2JsVjUwTTJpRURnbjlkUnVDSktyMjBTR1F2MS9SVUdhZUhucjR0U1Q3T2pCdG5DNEZ4UENER1hHeEZWaFVLRzNCMXBieEV5NDdXMTJNZ3ZyMjhIRTY5S3V2eG05MktjV2Vmdlh2cEs1R2QxY1Y0ek9IaG9QOUxneEgzUGJ0UGxzTW5od0NmTWYveDNLaDFSM3A3UDJEeUVWSFlYOEU4TGZUZmlUL2pYcEI5eWRESXRrN0dnNC9OcXp0bmtqSjY4aC9yWnl2U21NNjAvdlBrdGdvYTRYK3JqcGpWeFptMVdCbFVtNk9CSElMQmhIcnh5MXpLWE96amVkUUJGV2cydGdrZHZJbkpVL2psS2NPZUJNUzdadmp0d3ArYnY4MDJmS09GNStPeFFkR3pKWTMrb3h5UFBBUVhaRGpZRmh1YjVaZWRrNm81Wk5IYnRUMmkyR0h0cUg5KzFHS0RqdXVySklHdzh5RHE2WTVvMW1kTU1HcEc4RVlZUzR3ZVZvZDRUZGNnaXN2MXQxcEZ3a0RTRFJRWFlLRUN1UUlrdWlDZVBGUG1JUEhzUkFiOEhwajl0a0NPNzhzc1RvSEIyVDlKZWxqaktzZ3ZjaTgvZXl1eHNwOWxqMm10bEZXQnJ6RUVTSTBPU1hnWUNVV3lyZW5RTGhROWJGOUN3eVBoTWlTRi9UVXBPYXp1bGJ3K3BsVlZLVGJnMVVMb3FDbmU5K3oySzdQY0VDYnpIejh1YlliZFFpdHRmWjJKcFQydGVpMFBSTUh4ZlZ2ZE8ybmdGNTJIaFdaOHd5Z2k2YVBNL1JyUDBlNEU3MFMvZGVzeGNiaFlNbElPT1RNT3BnMEFTamNMQ0RQUFNHQnRkYWlITTFsQXRWMFlodjFFU2k5Y3F5TG9mS1pxcVhnRFJad05pazRRN1hKNFNIZURoMS9sRW5ERXhwNVQwaGRVS1hVMktOaGNZaU9ZVzVpVGdRUmJNdUJkSnJIL0VETWYybmlQeGpJYVk0YzRGRVFQUCt3MUxHL1ZPZTJaOEFVYjdMeGs3Rm43blFNNXZVRjVjZi9kemo1S2wvQ3FFOCtrT1EvRGtLOEtBZ2lCR2p6ZUk2dnRJMStHQXh0OFZpZFBYQkJ4alFscDhBd1ZIWnZ6dGZ0cG5BNUlQbVhNVGUvM21pYzNHRkcvQWduUEZLUTNNSWc0V1AxKzhQb0IyUXEreUcvb21HL1piVkZHRlpHS090Rld5RnNuSmZZa2dFR0ZMVHJpbldmNFZSSjVJM0lpczRBWDE4ZEdIWG5uemtQVzhuOUVYM05IVitzVHNqdm9KMnZrS2F0RXpiYkI3NEJZcUdzZERrdERMRzBRSW1Gcmt4WkR1ZExtbll6WW9xQzdLWFM3LzFPNkxmMkcyMVYyWlRNaXhxb1dXc1Q0dk90TGxMMG00OVlIZ2F4UHIvWUVrbU5CVFFpVmtLamQ4Y2VKWkV4RGNSSEVXU01PMXQyREtxQVpDMUw2MjYwYXRtS2pvMWNuTndINVVReE15ZVk2OThzUEtLb3JYQncwWm1HNkpPNFhiYmlMTEJtWjVERldscjgxcHV5MFlnNDA2bUlVTWw1YXVGRGJGa2NUalZ5eC9kZURJb25jUEhZdGU0SDZ4YTE1WUlUNG5vUlpDaXZITVpEaGdXcHdydUhHQ1ZjWU56TmcwTFZwWGJLdU10bjgzS1kwMzlHMm9jTU5GeHhTSExrUGdySTJkY2NkYWFCWkRVMVhvM2kwUlUvVThoYy9pV01GbmNMRUIzRHFFRzdzV0FmTDBtY1hhWXBtWnR1T0tya3k2TTVETi9leEVtODk1aURsVUhJWEVqWTBxZHB6bWhnYVkrY0JBN3kzYm1EWjZZaGtNYzVsS3lNc1IrRlpZL0NGM2NyRDZ2NUlIT25TRWRoZmtOK3hhOFR6OU5UYlBDZ1NKb3U5aFZvSWx6TEhLTXhiVStvd2xtNnozSDVtVE83dTI2aTg0UmdpbVlGOTlOY2d2Uk02Ulp4TmVoeURrQ2QzalZCNW1hYWNKVEdqWEFod3JRYWJaY2h5ZzJjZmpQWVJicXpBMXlEOFJxbnpQTVF5dWIxcXBrOFJJWmdoZHEwV0g2L2dvaVE4K1FLUlJVTXM4V1JIWU80ZFd1ZmpFelpyc2Z4WFVmL0NPWERrQzJtTTNuT01NY01jMk41bVRGK29aL2hEbmw0OTVmMExzWmV5dXY0N0MyRlE4cVlwb1RsdU40VVh3QlFiWG9aSkM5WUprVVhIMEN4Ync5ZXpGM0I0WnN3MFRjZnV6eHN4K0w1QzFYZEVHbGhpY0ZLNXR4UW1hb3hrV1htUEsvZy8xZ2dvaXNDMWVDSkUwcWlmZG1sbWpNSURXVXlkdUxEYStXRVVydWY2dVM2a3hsUE8xNHF6ZS83T0JUbGhGUFIwVGwwUDl6cEc5TWZWNmgxZm5TZGpDVVRIbXdGZE1uSFp4U0hNcW0rRVk1bW40QlgzU1ZsOGRzYzk0TDhCaXV2TEd2MFI2SHAxRHMrN0ZlUGppbE5RVlZGV1pKSXdSdC9jUzFKbjdzOUIzYmgyVXpDUks1aFRrVzhLTVd3U0F0cDFTVzNFb0JveE51NW9VQ2l1R2pLSHNyTTR4QTdGMU1MbVVBR0dXdWEySitHTDNReGpsb1RZcXlXNXBNanNLQnFmQ1JXWEhCcmIyajlvcmtCVDBNNEtBV1FETXlYaVJKMEs5ZFhxWTNwSWN3ajdHSGNWdVlDNXZaeUVSNGVXeEVhbXVQbzgyNktxNzlIV0RTNmJpQUpHMHRJUEl1bVRIbEM1S0FBU0xjMHlVNk9FUFV6eHMzbERac0VQVmJVQWhVWUwzYUNYZVZ2OCtOWkJxajNPbmNkV0I5L0dFNElsVFZMVWdmd3BBOVJ4cG5KalNFRklkazg3V3pWUXBTWHAyeXhXKzArakNIcWhsL01QM09zaXo4SDltMTR4ZnIvcHBQSjZTM0wvRHcrbXd2dDVvTWJCQlhsM3ZZMkFTSElOaUh6UDlCYXloeEZUZ01uYnNRWjRQRmlUczU4VGVCYVFMN3Y2Vk1mT0tjd2xwNFZHQXUwUzZ4ZE9pTkVtbmJoRzNlL2NpK096ZTZRNHNZK0M2RVpyNTUzMEllZitNWndyLzVFTGZBTVlKSkNSR3orbUpyNSthUW9sbkhGeFI1MzFBM1VGRXJLSWttNFBiRTA5bTJ3dUZ3VHFCcms5OTZQK3A4YmNsVXc3RFZpWDlKVkNFM1QwbURQVXV2azExaW05azJVZFl1dk5ZbVRBa0RmQzJnQUZ2TEdkOFBqWDV1MHhEcGhqU2tqcHRIb1RZeVlVZnd6SjFSdzFRU1hvNWRtbk5DWkZNQU1XRkN5QytITGl4UlZSeXkrVFU4MmZFRFlMTVBjblRrOGw4YUZONHIwbjFYSVhGN2NzTjVUeG9QRXFVbVdhRWZiZXhrVkZ6YjQ5SEYzTWhSd2I2ekVvT3RDZ1dtRkNrRzZyZ0FBcHFLNnlHeERxUWgwaHRjb2crTHpDQzZ2VE56Mld3TEs4Nys3K3RjbVJYNXBJbUtrT3JxZGptdzNMemZIREY4VXpDZ1FEUnNqYVNFKy9EdXZqWndsTE92ZTZ2ajU2ZUFXenVqT2dZNVdodmNxSWw4eEg4S003cWtjNXQwa3oyc2hRbWE2VFA4eWJDUTgzelhSc0t1SmVQMUhaWWxBWG9XQWNScWhPV1E0VkNJWG0wQTFWNkVzVkxwc3p3KzRaa1ZDdXBmTU4yOWR3RXpsQm13NWZobDdheGh0NkJBTlFaNXdRQ1ZqSlIxUkVKNXY3UC9uQUhQbUl6WC9FU2FwSFp3QXRhaFRrbGdoS09VMGZWTnpZamRpbUFzdFA3WlViQ1ljeHZiU3pPSEdQbjlvUXpmTXVWcjZMcUJTVy9nRnhkMEJEZzdLK1ZIOEF1dkVCeWhYWjFtR2JLVnc2SGk5cVBSS2xlT1ZOdUVlNjRtZGE5NVY2L2pIVGFJcVo3UzVoMEVIR3hacFpuU3hzV2tmN1BIMVNPTVZwZzVTa3F6WGVuK3hQTTB6SEtiRHpselJ1bDVIY2tZNTh0QVI5K1ZuNkU1NTRpMS9RZDl0Yk4vWFd4Zlp4K01ocjdMK0Zuazl2cFFPRWNuNVpPRy9TYlZpaDV3Y0tmVkVlU2hoVGQvYXoySkRqSFhJSWY4NmZQZm5NK3Z0V0ZTRVZpS3hFNW9tN0JaVlpsWENqMDV0T2lLOTdRbXF4NXA1ZEl1WmRZZXlnbFg2QzVJWmFRdVFMYVNqSS8wNjJraDJDNEpKMjdMR21VQkVORzc1UVBiaGQzK0pMc1k4TENyRkV4dlZsU2NidjdnZXNCSUtqZTRUbGlDeU1mRjgzZGhwUG5nbjh1N3NKc01KZllqUWhJaG00U0VRam1VeUUvczhkY2FSRW56M2Y5TTFPTkdJOXVMUmYrK1NQeDZhNHJHSnRBYUxNaDlqd2t5d0Qyd0Jta0JnY3hnU1hlR0NTaTVlTFkxRFM3dkUyRWV3Z29EQ0cvekhtMWFQU0RQdFMvVE9TUjVXb0xwQlA5TXBRREt5L1R1dHpkenZoM1VsNTRPdjNoLzU2eTd4d3BIdk9XTHkzQWVxYW1YdGk2ekRMOThUR21SSUE3NTlrekZzU1N5aUdIWWRVQlRVVC9XdXdpZGFoN3VRaktJTjRsclFmWExXdDc1OHpWOC9wemZxeDdFRDJURWVkZDU2M1J5ZGVGcERtc2FraWt6UVM0cTd3K0Rjd0orQ0haU2QxV3ZYamhsMEhnRnVJRXFubUhVakM0YTBqVSt1TGZ6UE96Vk1lSTB1dGlsc2tveUc1b0FDVU05VjRpSzZ2WVdEcWw5cDRqbmFXVng0bTB3RUtzZE1aeEdHa1pFanJ6bnJXVVRGUnI3bWZaRkxLWVQxTWlmYTJYRDBmeVBsMjlnWGxaSG8vaTNUa2JzWEo4Tk9WY05tM3pndVF6OXRuWSt5ZTdnYkY5cHJXWjE0MldGbENOWFZLeVdYNHAvUXljYnpaNEtjd3ZKdERrdnZkT1RNVGhoYjlSd2xJWW0rTGh3MlFZdVdLVGtubFFQQ0lBMnFhMWJ1Qm5TTThHOEJrMHZQdUY3YTFjTFhYTnlDbldRQkxZZmt4KzZxU1IrYndSWlEwSDhMM29GVFVDZHNMSlRXSnd4STNGeCtCSk4yZ3E4QVdJakhtSE5OdXo4VjRiRVd1dzZ3RC9sZmhNdld6anRpVHMvSHkvZERPT2p2bVF4ZUR2QjR4S2xxWHE2bElwblFEaExMaUZOQ0Fja0syYzRBT2h3Q05TRHVFcjJnUWQrTklXOUpSaWxkQ3pTeUYvclEzeVYreWIyNldleXJ1UmZYOGw3VXdIeERmUU5XZXVGblNZYllqZnRIZkc2SnMwZmgzL01tVmlsVDFTckdCQy8xd084TTVZTEN6L05qbERRcmZYWlRvOGVaeGptTHllSldQeG44TGlHWi9oMlNOR1JicTdMVDkvOW02OGZoeFNhYWE3dmZ5Rk81azN6Nnk5MkZHemtKVjkzckZXdEovL1hJaUpPUWtLZzFaK1hIVjViNDZGdDZTaGk3VjNBVkd1b1NUSjlBWnl5eGNqcllmSmhHV0w2dUt2T1BtOVRRS1VBclE2RjlyK1Bacm9ZWjZBNGRFV1l1SmVVS1VibHIySWdDQVFUY3A5eE42Z3F1WFFDR0h6RVVkaVA4dXBFQmpEcG9kWXorbndkS3FDZTRNZCttQnlYTGlzOFVJN1U3QjBjR2tqcURhWHdRMEUzd0V1bkIvYXBGeDVEVnJVZjI0NWxMUy9XV3YvMWpKYkx4MmhrMGRZUnV4SkFrSWJrN0J0bktjVjYwNEJFMW5ibXc2bUNVRFVlZk9NR3haNnFKcVBBWUF3dnBOYjJmM09YdXdTL1NrVjdyNVNITUloYThNWmQ5VEhXejZUYlBRTUIyVWlCVG5jMlBZMXN4TUwxZTNUWDMzZHdNeldHNUNZamZVYmk5dU9vVEt6cStjY0Vac3BkMHZTT3haUnlvSGNMTWlQS0xoOGhaSEJkTURoc0JPU041VC9QbFBaT3o1ckJYU0pGdHNEdDVZeHoweHQ0R2xQVU92ajl4czA2cm5KK0pwb0lzOFBuaFM0Y1BRZDlaRUJXdFM0akNtUTlXM0J4Qyt1YWlBYTlyU3pYdFJqbmhDcUZNN29NY0hVV0g5cWtQSzVzRHFrMjdsZGdoSk12dXA3dHZmWjBXNlhrMGlEcC9UNVVuYlozL1RKOUo0Q3J2cjJ1aGdPanh1TDN5SEtqMkJyY1FtUWtPcnhMRm9uaHJBSXkxbFVZRnRuYUU4cUhMYkd4RHJTeDBMZTFRNkVudmdRUVhGVWJzTTBMSE4vNFEzRFAwMFFzMWJYNFJ5Vk90WDJEczhOeVRGOFozZVJ0TlVGWDE5TVRzSHQ1bys3WkVvVUk4cUFpS1FOUGdhU2psNUNOTzB4ZzBRMEVzaGZKUVMxdURlb0h1SUpia01wOEozMHJyMFBWK1JaTVI5Ym4rampNZ1F1VkdvMWV6aUdqUjNUTklyazV1d0pTalVhL3JUQU5RMmcwazg2dDVOUWhnLzZmMDRaWHhDZm9FdG00RDF1eHdQK2gzZlJjRUJCc0NrdUoweEtQb2YxNVlub2dOeXErYkVXanhNc0J3ZURsLzhlRWRjR1dlNFVlVnBLY1dGOWtabm9KYURlMFJXdC9lOXRjb1Z6dGpleVNYR2ZsMDBacUNDbG44Q1hBODdPK2hNQ0JkUUpxSlMwMWQ1K3FjOUdHY2c3bUJMSHBTZSsvaHNKV1lnRGN1b2E0NmlOeE92SjBzVzFWclR0VVprUERWekNtM2ZsbEhNWEh1bmMraDMyYXFDdGRDbEJIUDd6SGRNZE1YQUUyQU1VVTdRTWg5UEJmOGNSNlhFNmFFWGtHcEFEc2UyWE8wOEdGeXVhUkZPUjluRUs5clpVZ0xuTjdSUEpRaDBXWVNOditoUDJmTEkvZVM3bHFVK3VKZ29jenhiODRmVFZoa2hOb1pvRzZ0Q1BPSTMzRHgvYll0OVBleVhKUHljSjVKRWYyb3dmTytKVlhUV2c3UjRBNUphSkZQOVU3TzNmeldNWU1uT3IvQld4aU1tNG44OVZVTWFYK05VbnIzOWozbWVQR0o4bitUSFNsbDc2dU5LeXBUQ2U4Y0EwVXFGUXpHWnFBRmR3SmtzQmJuYTZkcGtWT0xXdVNTRFNVT0ErWEVjY1ZVSTlnMlM4U1F2a01iaWxXYUR1b1MrZUVaSm93cTE0VUo2dE82Z25Ndm42RzdUSkRyMW1hczBRZmFiMnlPdlNiWTh2UWR5b1BXemVEdVU1U1VBOUppWXl1OCs3enhnVG1qaHMwUExITUlZcnB1QjIvMjRwSm5DRUpOaHl6VUthTXErVW92dmJYaDIwdGdOZnBta2FUanE5cEpCUi9HRGVCckdMYUNNVFVIYlozb2tCeUpMS09EZEFtQnRHUWRXZ1dHbXUrSXY4aFNYTzZORmVzMjdoNTUxT2piNDArTWlXdWhNVTFFbHZoOGZQQkJ1QldxKy9FRVhpSTZPVTRnVmJTSG1ybS8wUm16TkFGZHdOS1V4S1hnOS8vUUhOV0Z3RU9UcGhhQ2tHWWZDRGluZzhHUTFhVXQvUHB3cmtCcndkeEF1NXQ3QXIydXdUSWJsVnovcHlTUURTSFloL3J0U0FZcDkzb0VUcUplNVdUcGZxdTFQVUxDUkI1NVhPREFsOEw3MDdORmNjVHE5SE5IVi9rTXlRZ05WbXJGQnFXYlRyNE80OW4weDdEVklFV1RUQXU2dHpmZTVSKytSWThPSWt3aXRLZ0pmeU03Y3laWm11SUZDbVU2VWJtUjEvQ01zRTNadWJhNm9relZFdkcxclZvaDBXVThYckc3d1hwWVVUcmVkOXJSbkMyZktKNTBPS1l1dDQ2QjRsTlRWQVB4U2tNeVhWY2t6RmllUVNlL3lvVFFwZG1leUg4V0ZiZ2NtdjFCTFdLUXFDM0RCd2Y2Q3ZnOTJzZG5oQ3pEMi83eExGSWh3M2dVa0plV2l4VVpXZnIyeUJaS0wzVGxqcDFxaEt1NTUxOVJKa0hEQUd5M2plSDhGQW9xSXBtVS9vZHp6eUlKQkhpYTFwa3ZvUVpqTzZUWG12cFVmM2NhZmNISjJ3Q3pLSVNsZWJKT2FBNUhGM05yVnpKYjdtc3pkSWVLNnRjT3kraEI3ZGdZOTBrZGNvQmhuWXUrSXNmOW5lVnpOYVg3TjRFYmRHcUNvNWxrNkh5c2RTTXVaZmRHRjloMFExL2t2cTVFTFk0YWEveWJiYkdlNTdPalZadXhpaUhhT1Bnc1FhOXcvS1cxLzAyb0RjRFBmYWlwTXkrYWNMZ1dod3M2T3JMRng4Vk56aEJ3b2FUWTJNRGpadUdydko4UU5hUkh4dEttbUgyc241UThsdWV4dlpTakpVSFBkZFYrdzRzZmVXNHVOU0VkcjdwZzdzRHVJWVBJVW5PYU1ZU3UvTW13V0R0eUtVcENCVjd4S2JZQ3YrVHNMamtFQ3ErOVlMUUlnTmU3YUVMZjdLRGJvaXg4YnNPSEVOZGpxMGNHeExLbjNYM2dBL2t3eG1vZ3l1WDhobURwSmp3VFVVdW9GZ0ZYK3FDNHY4NjZ3YjdkQURaVlhxaFh2QWR6eG42NldOL0ZoSStDVkJPMW9wZjdReGpBRmdBU3NYbkVhVEh3WlV1NlpnRWpFY2ZTMWZMOTFVMnlKajhJcUxMcnByZ3JPZ1FuNWhXYktoQ2hnZUhEVVZYSjhGRjVOSE9MaHJjRGNjb0syOGxEcDQwN25keXRrU2RkVU5zcTBDWlVBNThPUGRPcG5ZRnRhUWlTZWZ6STFZOUlkckwyMkZjK0R6cFp6dUgzV3RFQ0dUTC94L01nZVRJTFFZSTJLWG9QSWF3NXI1RmR5ejBTeWtpb2dkVmpnKzFTMTNCZSt6cERRZVFQbExISzZjcmhkOUlvTUQ4UnBXVkNJcDZOY3lBV3padU1QSlZZQTdrenI3bzlhK1pnNkswUTJXSys0Rm1qaWRqQnpVQVA3M24rTGJ5V0Y2NjI1dkJoaDB3K2l1cUpPdFdZZkRnT3JxYmVKQjR6VDMrUkcxcmw1RFpEdTZJR2FxbnRtSW1tdXdtV1FwVjVrV0pYVEpybldiNjFZeG1BQmRlREhwZzBveWdwWTlWcXlFeDYxMmVjUGJzaEtDaWwyUHhvQ2tzRnM1YzFNc2t1NFNlYldtZEk2Y3lhbHJNYlZZNHlpY0lpTWNRZUFIVmlzaUJzWTh2VVZJUE15b204N2ZnbnpRRnFsYzQ0VkVjeUlYRG52Y2Q5Z1BJYkh4bDZNZkNWWExpa1FvSFhGeWZNKzBCcXRJVlB3Qys2S0VGYS90WHpocklyakJaNy9VU1NRYXB3QXJYWGlOekhCclpLNVlUZ1cwaTAyZ1AwYzhoVEF0c2Y3bTdHMnJyZ1ZKZkpVTXgyN3k4ZWxsWmwyK2wxMlRYd1V6ck5yaEJaZDBxek5vRTMzYXpQeHlZSmNqdDZYdWhEcS9hNjRhWnVtY0p1QnpwT2JVY3E1VW9vUEdacmxVSXlaSHBIdVpaNUs5VFVHK1F6TnNtV3FNL29YZkVONUcyVFNqMldxQVVsRVBWRWlGb2JXdnp0SE1HN0JraEROYWtVSkIra29YcEtnU3dMWnA2V1FXTzJqK3cwQisyZ29yaGw3WCtvRGRpU1kvcGJjUjIzY1NlcHovN0lMTFFDU1BZbkFPbkRzbXExMjFsWEg3Q0Q4L0FIb0RwRWRoTkVzNUl5TWJaWHZIYlhiRmRSYXhDekkzcTVId1NBWE1DanRDdXF3WVc3b01jZW10N2FFTHZkOHNKcitOelU4T1ZmVDNITVl4bFBMamRrMFlvSWwrT0Vjand3NjVCYmdpTkJobFpZSzJHcGNVblhNanJJZVdXKzlyazJYcEVsWVNmbEJNN2FMSXp6cjZ0TUhPQnEwSGVvZzFycHBEMEF0QUVIdSswU3BXc0RPNWdYb0xlRU9aS29SUUxlZkNTdkRsMGRnV1M3L2pFVjEvTnBYeCtGcmI0Zy91RWhZY3pWRmtReTNLYU1KaGovZDIwSUJYYUZHOUo5cE80Q0gzZHZxbThjdnUvOEtBVmtmcjNZNnBmZHZvNkJUZ0xUa0VFRkU2c2g2N3I4cnE0d1lWRlRBRTMxUmNXMy84Z1B3aW9rTWZKa0Z4YjlhWmYwbk9CY1FPeCtCN3REdUIvQU5qMG0wK2VCeGJ4c2k0c1Z4d2JtMmRubnAvemwySE1jemNsdjlEbUphazBlYm5JMjhYaWYvTW1MRkdNeDd4emxBVzNyMWdBTVJ6d1ZPUEVaeWcxWVM4aVhjQ3NHMGtPQ1E0R0NKbnNXd0JFWjFHR0EwRFVWZFB1cE0zR0Z5b1lYZ1UrSVJFZk5RRjE1M1ovRktuM1dsTHAzUlpHOStCOEV4NmR4TTdER3RpbkpjNHh4TWdaU2FnSGcxMFcvVGJEcHljeURJSExJR29IOU9lVmZxbkc1aFNMRVVCMlhLb2FCemVuNTYzMkp0a0c1NHdCVm9ZZXEraDBlcFVLNGdwU2cyV0xud0hGQXlmRDFMUmJEOE5PVFY4QnFHZWdVQjM5b1ZpVzQ5TjMyaWYzb09pRytkWTZSQUFRYjRvcGJsZldxdStjcUs0OGpHVEJDaFlTblNSVjZLRlJOZk5USCswbytwYU1nYlBIeDRHNzcrRGlTOFFOOXl6cUZUQU9CeE1zVWgyeXB3ZFE5Z1BJM1RhdXJyeS9uQklDNk41bm1nMGk4RE4xRmVlN1pLdGpTS0NKRDZoNmRLUkNzV2x5dXdSdkovRUpSZU1KQjZ5ZS9vVVpVSUdPUk5DM1QzZ2ErV2FGNnpBNzh5Z2RQdlNuU09RTXUvL0tIZjMzSFRUd3ZXcTJRWm00YllpeTFaazVCdmorWGtlYVdqZGhQNkZ3cjlyajRQV1ZieVArTE9vVVA5SXkvNGVYZXpnSXNCaVpOOERxN3EzL01VV2hpMzZOYWpQNnpyWWFjTFRvdkd3RVN6U1UwWmVENFdVeHF0QVB2TXExbERNWWJyYUJLMWVXVkIyWVJMci9KNEw1K3ZOdTVrRkxWSzBIT0Y5WjhjQkU0U3d3bCs3UDFGUTI5aUU5bklNZHJCWXJZWGdYREc1VS9yL1krUStiNjA2MkxBTXhWeXdlVk9ENXdRSFBwRk9ubzdEb2JBY3B3OXMvbCtSMzJsbzRVa3ZOMmNiOVM4azNOL0J4QTlWSVFRaEVpQUtDSTh4d29NaUlPQjNVN3kwMkVHRU9xN2h4ZW1HYmZZeWtZak04dDJRbk52OEQ1c1c5c2NrWXB3b0ppaWtuaGM2TVM0VFM5bzd2dHBoeGN3SmJPNHQ2eWFidVZDQU03dzFGSUREcVNRL3VpdGJJQjRRYi9IcEpsMXRWbkVBWCs5RzM3Ri9Sa1B0RHBWUTBkSE9peGFCcTdlcmExUDBJS1R5a0hIZDBTMVdzMFBERUg0MDlBaFVBb05vbFBlTEJIcXA1OWZlSGZaQks4UDRMRVVxT0JIMlhmc2I3Vjg5cGNUVUpvTEVsYmNSVGhGa1cydFMwR0ZEYU9lbmZXb3pOazBWOHg5ZVptVzBxMTIzRmVHLzlRUmhDcFlyOXJaeVYya2ZTQkp0cmZxNE9iazdFQkZoNy9kZkFBQkdmWlNCc1Mxdnk3dU9wOFBDZVROK1JxSVE1V2FZMHZMYUs1RXF3SDJQQ0lxYWxBZFFNcVlhSUNkM3hoT0dHTnRjbTlKZkVJNldFVXRvR1JETTNqYlZVSlYwZHFwY0ZUcjhPZzQrTzNuN0tzT29hWnBCQXFZZzBmdTBieWJsUGtRWjd0UUVwcEo3eXd3Y0xsNU9BMVo0RkJ1WUZxYzNrVHowYWIvUnYvM0hmdGF2MW9YUUlabTUrZ202VFhnMTRCb0ZOdkcyY3hOdUpTNGs1em9WdWkwWDkycDc3aDRYckIrMkNpRml5aWY3anpKN3hCQXZNTFBDNlZGNTM2UU1aYkpyTko3Y0JyZU5tQTlDY3ZqN0pJbDYwWURmN3QzZWU1ckJ6dkY2M005T2FqWnJVakFhUkc3MDhSQXlKeVZrV0VxSjRVTDJEK2hHd1lMaW1pdHhXWXh3bE9pODhVWlBSY0liQ0JaMENSbXpzNkR6dGxOdDMxaE52V0JvZmFOSVM4d2J1RFRFaUIxbHJXcjA3UUw2YUJHdVVSbml3R2ZUVGVBWjI1OFNXV3RNWmlnbEVBV0lrSVNTSTVmOXNRSkUrNVdKYTdhSWtxemdPd0V2cGVPNkRMS08zOFVPSnBMZm9VUzl0YzFGZmJpSnI1ZGRwTC9uL2J1YWdPakxYUWpnSGl5M0w2UEpqZmJWN1BFTmt1SWJVeUF0SXVWTlJkYXdyUTgwSVNTQnQzQ005OVVzSDA5K2lncnBhQ3NwM09qL1lGeG5TbFFTVkZ0T3FCQnNXdGNobElMRlRLNjR6aGtBZVdZWEdYRXJWaWN0aExuNXdMNy9XM2FsejcvUFc4ZWxVRnFuYTJkOWZENTJKUDRmYVhYbEl6cStidzRhS09CL2dpcTM4TEhDU2VvUXpVcjFZZXlrbWp4V1puRTF6SGdIT0s1c3RnWnNZNVNkUjJaYnFVK3FQWlNYQTloemdLNG1vNGRFWlJaZDNIaDVEWDBXdnhlMGlDR3RYRlhzUHBqNlh5L2xJNmY4dGNacTdjNjZUNE9vSzNuUUNXRmViMTJkTzd5MTQvM1pRVEhkMTNpZkNGallyRW4rU2d2OGpOZzhLN1pIM3p0SEdSWEpNcWVHaHZzRExFK3RKUDc3aEIzZkZKMEVQQ2xSUzlsQ0x3OEhmVEJIcDBoYWQvV2dtWEhkS3FXNTlNRXI1RTYveklVV001YWVxSlQyK3R6aWxXZHowVHI4R1BQcmh4b3FOOVdRa2ZjWmFHOW9WY1JQamI5TFNrT0NTMEZmUmVmZWlxdkpLN2YwQXVremFwRHF4WGFyQ0cvVVZHVU9KRmNjODV2ZGdWSzJqMXhPUXM0SCtIUFhCSmNlalQ4bkxPWjNaZ0ttS3NjWDc2ZXFiWFFDOThVZDU3YjZzVkZUUGFPV3hjU1Y1T2dobHBoeXd2Vk0rWkszOE1lMXBPaVMwQngvbUg4aFlyakRoeVdDZVkyWnJ4R3JxQU5CVU5HbExjUWlNL3FkaXBkaGZNTFkwK3hSUDkxTkRaRTJPMkF4azBuV1lJcjFEdmF6WnNlejNMazg0TTlvbmgxK2tkOE1wbjFMaTlxMDYvanRjLzJ2MFBIb3JSd0owaGtGWEpZT045VXpxUnNBL21LSWxjU3NvWnZaZExsV1VqMWF4VWdqTERCTDFVSGxuUEVCU09lYjVtUFFGeGM0VElNa3pCcGZVN0tjdkFsWCtSQjg5dzd3elB3N1pzSkdPZFlLdDA5OE9rTENWRUc3dzZBUlU3WjIrN2c5ZW5QbXZnbm1DeFBpVTZzbmpFcWc4YTVwMVd1ODNDdDRSUzNhM1Uya2IxcEpFdkl2ZllwYUZXME94WTAxVnFiaHhNZGVBRlpvODNWK1J4V2taMWkxT2ljRmNoTEJhaFppRW8rSWVLZTlRaDJsMDJFbWJDUmhXaG5RbHliOGovOGlTMGFJMnYwUHdwU2hkbjJNQlpUUlhaTHhRQkF2UDZ6WXl0NDdBemtTLzZzUE9NdW9ZNExJYi9jSVRDWHlLM3N6WUdWcUdVdWQvbVNEREdjQjlKeElKYjZ2bXc3NUpPN1JsN3dZQ05ZWXV2dGZjZUNzTXpwMDJyRmUydkxJN01sVHhONmJLVHJDZXhXbmdrWGcrQzJ3WmZjR29xL1BabmZUNGVQczdKRDd0SVJEQUVYOTJkMWZZSWtzMTFHUVdYdm5KMHo5MG9wbzFIcU9LU2xEK2wyL0VjSi9SNzdYbyt5eVpaRnp1T2tGY25tNlpuSyt3S1JOQ2lkTGNXL2V0Mk5mUkh3ZWUwb0dlVGZONWRUL0dJRjBleVY2bENJSDUrdThxaHpkdDk0R1dXV3lBaGNzQmVVZnNFdjBrWmo2L1p1NXptcFFHNmZHRFFiWDNqRWw5L1FtVmtzRWljOUhld1BXcDQ2SEhDSzgzdEtkNk5MRWd3YWgrNnBVZmlLN054Q1JXOU1JTndUOUJTNkR3RUxOWEpVd1kzdXlTaHNDUmdIUGZ1SUdDa2RRZHNHTlEyK1R4QmF6VzY1dm5kSzJubnBNcXlqb2t2N1dKaHB4eHVzaVRmcEhGaU9sUTBKSWdOM0hZUXdLb0NCMW9Ob0xQdG5GU1RjRWZyUGMxTTBnaDJjaWM2UktXM28rQy81SzR6VEpJU244eDRhazVmTmpxcC9BU3R2WUQzcGczekJhU0FpV2ZhNUo2Zmk1Ry9waitSVDh3RGhpVzUyK2UzYTJWZDdkOXpLVlZ0RTZXVnp5NFMwQ0V5WWpsRnQzOVdob2k5NHgyNDI0NUt2V2ZmOUhpZmtSbk9RME92S05Hc25OR29jS3VvTTVrZUxWYXFFZzVlWUJFYXdsdkJ2SldHNzRrNUk2WFVDMkljUUZPY0s5ZmFqdWg0RG5TU0dFVktxUWtKQTE3QzJrMEdGb1VFb2lTaGNvZXVkb09lUzZVeFE4UmJ4azZ3cGI3MEZ0UEZ4R0xRalRuNVc1NVZ4STl6VGJRcmduYU54NW94b2g2Q3dJUmh0NDJLZ0FkZGR5YUVleUlqR2FvcUVKMngybjc0b1lLUkM3enZVUWg1SFV2NDZkR3NSQTFLNmxlcXY0MExBcFpNbkJlaVpBRXV2eEI4TGpoMTN1ckNlTGxCZG4zZzdXUWpPU2xUeHo4U3ZsTzFDak1rTnIwT3VlMjZWWVBza1dRRVRkOUxCa2VNN2c0WnQzWEcxWkxSYXY3ZkFENHJpbFBtbGRpN2lhYUFoSFlraTRucTNUeVJCcDNsWUllOEpUL1VMVmh4R1dWaHlRSEQva0crZ212VFFzbUFZUTJDSVNXc2xaU1FUNlR0N2lCdmo1Vm5mdkhnU2NsWnlIWUlVYklkdGJOSFBlV1liNzFJbVVnTDhwazd1SjlkR0R3SGlkQ3VicmVLREl6VVBJOFJteEhQcnh2bWZUSTY1MklLUG9wR0VUekRpUDA2TEFRb3BPcVdFRDRZYXg5VjdMeGVaTWpROWxxYU9JSVlkclNZV2pQM0gxaWxtd1BmKzFIY2Zma3lNNjNhb0NRNVdKRlFqbmdNT25PTTlCTHNZWUZOaWl5YzVlazFXZWNBL0pNdHEzYlRTOU1SRXNXa2xzRjFoSWUrbWVER0FHVkpncXF3TERTTTlaRU5ZVnlBc3EyOVI5VGlzZEhtY3pZdUxKWTgzcmx3dDVUYklxWlQzb25mSncrT1BINjJTK1AwNmFab1FKUDMvZTN5K0NHWFJPb2dRdlJpdEw2SDllS3h0dG5PS2FLOGRhTzVKZlVXY2NLRk5zaGhSc1hUb0VlOFE5V0N5VWVGV1hHcGNBRnB4Nm92K2lUOUlzOHZQTWtBN0RaN29uNnpTTHozQ2NsSm1CUmszZ0lDd0hJK2trWTVvZnhIbERFUXVtL1NwRWg4NWowamdpQlpjTnRJazY2UUZFUzQraTArajJtaWFJdXAyS0ZHbmtMSUh4bXF3cGNBQlJhVFh1NHh1alZZY1FzRmhuR2o0bS9qR09mUzJERlpnNnBUaHdMTWk5U1NLMm55ckxydEwwWG15NVNOa0FQSGp4U1NUTWI1ak5OWlI3REtrMWplSjBHbW9NWHVkVzl1RktZLzRsMS9LYlhGbGx3eEM0VllrWDcrTEFJV3VtL1VwZUtVc1FxTGNGWU9wbnNIR2h5ckhlc3dFY2FQR3FCVks1UDRDTktXRUI2SWhZd0NYbzNGMjFwazJrdGFxWTJPODMxR1BkTGFUNXRReW9vOFNtUndmQjhRYXBER2l3YXhZbkxVL253Zm5IUDVKSlRBbzl1cFBJcUNpMG5KOGRhOTludDhSa2pHeFpuN3FERFppOWRkdjFYVUFaVW04bHh4WE15OGVFaDJ4MVRub0pRZXpQN3JEa2Z4OVJUeTdabEZHaVp1WG9qekc1MEJic09vd1BHaDlIekhpRU9jZlJNd1JndVpjdG90T3hPQlk3c1JnU094YlNHMFNjaUswRUhwRm1OdklIajRXeHNnOE5Db1A5eFluMFN1ekFJc2FYRFJUQ2pwL0puVXp3RCtvcWRJaTlndXNxb1NmRTlqZHJpb3VlMzFHblFuOUFoajIrV0YyS21ROHg4anpXUmlOSWsrS0wvc0Y3NitpeWRoSTcwVlBrWUpaYk8zZW1tTXRUMkZaRUQ1SGQ1QmF0aG05Q0c4RDdxa0E0NitUZVEvWEUwREwyYzd4SVFQVHlTWDhoZVFsdG5lZzQrWG9zdTF1dGZUL3RGVHJHVWhyVzM3QzY3WEVWeWNLQ1BSY3JiZFZodWk2VlZkdCtpT3NSdVdiVUhBeml4TFQ3Q3NkMEw1Y1ZLR3Jyb21ubENhSVFrZDh6ZnpOTjZuWXFlL2RFRUE0MUFHM3ZlUTVGeEtLWXV2cEFUTU9HSjdVNTY2bjZ6UytPdkxjNXVwZ3RtUnNHUHdHaUxzT0FUSVZMdytTNm1neFZaMHhNaWUwdWt4ZmFGTmpCd1VBZXRmYnNvV3JITFNXTC9xa1dWUnVJbncxcWlMR3hlWm5kMDA5TmJUdWZPZ2dnZEVzT0FaY1plc2cycFUwcWd3NXYrY1lSV2p0M3puUVk5SmRmR3VSN0tybWp6NURjTlAvUFRxSGg4MUJ5MTNXcWp3cEJhdENBRlNEZDhtZTNwelcvWEFkVWlLSWhQK1RZTW5oeEp2MXpPNUZ6OURBSkxGUnY5ejRhT0VvUkduUjNxN29PTndpL2RjZ2Y3T2s2QzV3KzBFK2wycjFRSlkvb01MczRON3Y4RHlGdjVqeTZ2N1dWNXFBMm5FMDVUVUZUVGtibndEaXloZ05zTy9KM2lVMU1pWXZtc1ZrcFViWFpSMW5PZGc0d3NGcWtONnZCQTFuc09KT255WFNrLzhEc1ZkcnhUQVJXSjVXZFVFb0VNZ3hISElsZlhBV0hkcTMwb0g3UE1jdGxaVGwyZDN0ZC9iT0RLMWluSDBvN0lNMHhkc3pyekxEVDFmUU1zdVc4V09xTjBweE96STJ4WEhJZ01uOW11N0d6a1M1NkZoaEpwZy9vUnhxYnRtMndrZlF3aE8yRk5tN09kckNHOUNMMnJ5Q2x1MEE3cHBhN2oySGpOL0pMUzhBd2MreHRFK2lxSGN5eTJvN1Q0ZEdMWllxbnN0UTZSay94Y250MUdZb3NMekpUT3o1MzVuaGlBYjI1d1k2Z3BubG5OQmhvSnFqN0RjMlZGbHhla3dKT2xjRmNyY1JhN0E0VU5qUGpTd0hRV3NBUm01dDdIaDh2ZThUNmJUOEFGOURteEgzeFBJcHFyTlVhbHhJSDFEc01jbFE2TVRrTFRibGpTa2lhb3BMSmU3U0JNMEJEazJGVlU4ZzBsYzh1TmMzZ0JscEhoWXhNU0o1WnBoUjNOUzZNUFAreUVmbkcxMXp6dHpZRW9SbmlkTUNqT1p3Kzl0Y3FRdGxOS3doT3U2V2VCamlzRzExb1c4dmZBQlcvUGtLK0svYXhSci9ORFVkU1RPb0NjeER4YVNqMG1kbEVJYzBFamZBcC90ZHZFVmdCemRtMGlRNXFGTm8wbmQzMzJPc25zWmNhNzdhRXRNSnU2bmw4NExuallxcVRJNnZlWXFXd3RCZUpyeTl2K2ptd3lxVTcvMThXaTVTTkJlbFZ3cHBpUUdGMVhZZUgwcXZVREUzVXlJSzM3ald4c1pQOS94a2FUTjV0MUtkNjNnUHFmS1ltS0V0eDRIYVdZdkVPTWNBamZtWmlST3VXc3k0VEpLOEt5Z1FnQ3dYNUI3clZUeDVmK1k5N01aTnlsWU1jVFAyYllVTGRyRmxKOHhxanh0UHYvK0JEd21xekVucHhHc20wa2VaeExGaHZjcExYeTBsdGVKdzYwUkZLWVB3N0ZjMWVzV3lMbmtTb3pRK3A1ZjFZWHNKNmdtTnVnMjRGNTMxbjNEYW5EMGRTbFV0alYwNy90NjQ2cHVoQnhNYURvcDhwbTdSbWRiR2xYMHZoVjVsVDZpWCs5d0JNWEZUbzh4YWwrRDBRRFM2Mk5veTk0UEorc2dlQWZRcHVSRWZsZFRKYklKTlpDd2lvQmtwV1lmY3BTTnNadEl0TTVkOC9rYkczaVZYbGhIOG1KRi9lUWd4VTNEMEt5ZDFwWUt4cWxRc3hOQ29YQ2FOVVdvRlg5QitrYU1IcjZlM1Q1NldGcDNsNkMzYjh0WXFDeFJSRXdDNHdGU1FyUUJYS2c5UDBxeC92QU4yY1M2czk3SUVua0V5MkRyR0FGelBUZjBqa3VtZEdqL3FvS3NYNWVUcEtTZFQ4b2FVeWF5RFdmNTMwQ1ZUNENQbFhWWFg3Ukpjb1FiSXgyTVlCU2JJbTg4M3NtcEUzMmpJVWJyeXZscFpyYVF1ZGxRVGhzZjgxNXZ5SWMxUTI1aExZNjJwU0liWmNwZWdISjBmdHpGc1RSSUt2V0FCakt4WmQvNjdSZ21CTy9mdDBiVnlUWEF0L29kU3FWQ0tlRDMwVmZVelNtcEtqVjJhYXYvZ0RRbU1TMjAzSmFpYlBkY1BKU2pHV3piTHRwY3pGSzErZHB0MCszZ0N4TDNiSDVIbS9ZWk03aDhuRVRxUEYyMmh1NUVTMkpyYnhCQjRBcEN1bTF4RlRya3hEZ24vZk5MWXdxS2VRZ2Z5NFA0T0RWNUg2OUxrbG55NXl4VlNHSHZTWGdjd1NyV2ZjUlNPNmU3OUNRYjhTeVNyOC9FNUNhQWJNWnduMkhpd1htUEZoSDhJTzc1WVJTUE55bkU2dXFCczZMMlhtUXBwcXNsUWhic2RBSitRcndnTzQ2aVAyRGFrYi9TUE5paWNGT3NCS0grdm1mN0lOeEJodjExN2I3TWUvTmh0M3dCZ1FxYVp0Rmx0dzNZRVZraUFjZTJPbTluZW1TRXprWForWDA0RGRzZ09hQ1BFcWxYbjNUdDJUSzZ0M0hUZHh1WUlGbzVmNlAyRTc5WGJFU2ovV2RKL2hJdWlkai9jbTFnSHFGZklGTEd6MkJXL1J6TloyOWQ4Sk8yQ25BREM3SDNsUlJvaTJWclZTT3IwZlhpdTdIbGxmazhWR29WcFlBN0tHZ09rS01udmRQZ3RCRmRhVWFXNHpNU2RTUjA0NzQ4cEwrRUdkS1N5OEJ2TFJiUDdsM1FtREVsL2pPaGkzaWtIYUFoNGkrVURHSXFDay95S2NyTzVQZWg1VkV4KzVhRXRCWFBzZW55dFdzNE16TWtUNDVGRUFsUXJ2Z0lXR1Q5a2VvUVlkR0g2RDVUNGVqNW1DV3hBaFlFYUdxbE5RbHphWEk0ZEpBY1dSZjVSQVdsdUIrcDFuYmlDaUQzM3pBcFEyUEp1YkZkYWg0SmJTTmp1M2hYMTRqUE44RGZXMjhqckVSZFBXMnNBa3VIaGo4SEN3cEVEQTg3TUxKRE5XOTcwNHBhSXBndVA2Ym5pU3VlNXJ6dVk5WXFKdlpERVQ3eVZUMTZuRUN2dmJRSS9kc2NmQ0FabUpjVXFKKzhlaCsrTWgvRkNydVd0bjU0NjVJVUVnc3dudW5UM3RFRTVPaDJaVllKaG1sUEJXMFkzZGR2b3VxbFNoL3dIbUo5M2NsenN1UCtSM2JId1NZREpPSzFpS1g5aXFtYnJZcFN1MncwLzNrUG5WNWhsZDdLSDgzWEZ1OG9kWFVXQ0lNWjdaelNpR0dZSW1pL1ZFblh0bmxhM2pZVlEvckZxSURyZmdTUEpjM0I0Skp4RUpDYkRXcWNvYlJwRFVQNWhrbG9qeDIzVDcyN21rMDZFdXJRa3IvNTJRRWtnd0ZlckoxMHpSTWY4NER5WHQ1T2dGbzZMcEFKc0hIRThSSU9yMU5Bd0Urc2xkVTQ0ekEzZlBkU2lEaXE1dnN6dDJXeHkxODR4d3lUL1ozTzBjaUp4S09MOUduRUFPUW5nZGNOdG5PL2xvckFSNmpyNm5XUkt3eERZaWhSdkZzdm5Pc0NBbGd0K0xwYlVLSUFYZFVrcDVGaFpFNzVwSzFkelJOYUMzTll0WXlqdmxyNDVtTnFyaENTOVhHTzhUWTFxaEdvbzRIUVl3Z3F1NVZWMmtzYXRDNU8vOEYyKzBSU0JoZUwxREpHYkZWUE44cVE1SmVlYW5DSmlRYm1qdU4xWGdmNlF4VmJISmNVUHlwSG5DN1cwSjdPVXh5bkpaemVBdlByS05oTTR3THU3UkRvZ0lNT0dMMkRteVRZZ25RYWs2L2VxRUxmWkNpUksxL01oTWNxdVZXV1FlZjZESUVNZGcxcE9pSVVaeGRxSWJPdGpkTmIzcmFiQ3phM21jOE1FVkJ2OS8zbFFRVmg0SjZsbHdRNnJUWnBueWdlcHRwOTVQc3RvZ3A2MjUzMUFwRTMzKzZWSmV5VFNWSUtEdUdDNG9kVDVzbWlFRDFia2M1aWFuQU93UTIxZGt0Q0xPdU12eVh4ZTVyYnV1MG5IOTFLTllyaHdjdUtDbVRXYndkakx4VktTUHNzdVhhRFdYSzR1UjNFbDdvbnZzMFFubWo2WmxVbXhKb2ZUc2lHakFpZWJnYmRybngzbERrRndyWmFKZC84b3dWb0NsS3RPb0JKY1FHZFIyUUc0TVNaUjJzOWUzc1g0d3R3NytnS0NSbmpaMGtBUllHcjY3WWNoVEwwLzBzOU02Zi93UDNMeFN6cGk4UEd1dXBLYUN6Z0dKMzhZZXIyTXhTQ3hrelZuTmNBVTdzS1VSNmorTktsS3owSnNQemhhZVUvdWhZeG0xNWhDOEJQL3BnL2k1aUNyWkg5SE9Tcy9FbWZzaSt4RENFTmsvSnZRVGNUSHI4K2N6SXloQkZYaCtnQ2p0TGdzc2IvdWl2dHBVRHYzRVQ4NWQyM1pMT05HTlY0OTNXUXU5dzYzM1J3d2RqUXJZY1pqQTBua2ZkZUJaR1FrOTFHVkhGczB0dHJvWWV1dU0rWU9oek1FU0U0UHUwL1BEckpqeGx4Z0VuZnJ6a0xLN002RnZyb3dRbHF3TVJ3SFhkMUd6Nmx3YlViNEYxaEJDbFB0eUlvdENkcjkwNlJkUURDR2hHN2E3UXVpNkFjTEtpdlNqS1VxSmpzMTExL29oeExSVmQwWmpxR1BLb2wxRGk1QUxXdXVQQy9UaW1LM21LS0JLSkg0aFdSazlNck9FV3ZURFgzd1VLMU1HZDNDSW5mekE2VThjelF4TTgyWE5STGUreTFHTmpocHBiVVNOK2FPTmpJTmRJQWRHM1RvWE1LdjBobm9OV24ySDJ0QU03VFhMQ1dyOFltb2kvYVAza2lPV29FWStSZWQ4ZGhTSXcrTk95ZFd5KzRxSVVFbjNEOHEwMVgzdmt6YUJBajlEc0JpMFloMGxNTGpQSjg0ZDl2RHlyb0lTLzVMK0o1MzRVeTRSNVJWbFhaUmJ2T0JxbExydzBhM0FJaE92NVY0c1YrTFM1NVdpZXdNNXhFWTFQS2VKZ2tZbkFkZDQyY3RFRlo1VmU3dEw1RkQvM2dnZXpNNk9JVWhRMTdGQkUvKzRud3FsM21JWXBCZDhLMzlYaEJIemcxbWR1dEZobzF3SzdwUk8wK1pqWVluVUE5VG01Z0U2dnB2ajllbFNPT3hQMGU5c2hLTmJIWjV1K00zdi9ud0Z5TzdMdFhyK1RkZHpJV0RGV3pKd0lBRzVsRnBVcFNOUll6Wk4vbmN4OXpMTEFOM0k4cnJ2NE16SjVkUTRYc05UcVhTVnRhbG5pcGtNRSttVU9SVk9mUDZMWWI0TjlJNnNEdGRUWE50ZXNvK3RkK3NGZWg1ZTJVM0VnRjh0NHlHL0V1anVkTHBMZHp6TG1jUEdMb2VBeGZxSVkvOEZDRWpzKzY3ZFFxK09NY01UKzJCcVJ2eThXbjNwU01pWVJHRjBxSDd2czhFUUlPaWZ6VVY2VklBNWxibUM2Y1FGYThPWlhBT0hraDdjZ2tib0lScHNudzJxdVlETjk4SzY2T0UvWHVwNHhwWjhyRDl6ampGVGhzcXpRcVRvU3haVlhQZzBPbGlIVFBqam4rMlg1Vjg1ZzMxUnlSaUJiY25Ic1pGakpEM1FZSVFpWDJmTEczK3RYMS9xcE9lVlU0VjUwbEh0blp3cURSdTlSTkgyYklUaXFINWFuczJLMytJK2l4Mmg5c0U3MFBMbi9malNyUi91U3hpZmNOaXYzbE1aN2kwMi9Lb2FWN2pIa1NBVGZPVlVIOHBqYXNBaHRtbzh6cnU4VnVEY1d3UDg0TnlSTGR5N2YzcEVNZkROVjR1OVZKdGgwWTV1cEVQWlpUNlFVOGI5WkxIK3JxRUtBbXg0ODJ4VThZV053Q1J4MWhJRmtBRkh1OXZQVmtOQkFqcHBqZlI4Q0x4ZmgzRFN0SU9SUjN2TXp2NFVJRkVpNHJ4UDl2cHdEaUN2RFRvSjcreUdScDNON1Y3M0FORE15dTl5TGMrbDdKMVpiZkZCakJRQWw0NGJHM1FXY3owWGtGMkFUN243cDEyRVQwWG9qUWIzcVZrYTQzaEU1MGdiL2RyaGs3dE9RRFo3SHRSdEE1NGNrZ1RYMlBXaXJ4S29ob2w2SEJQQXJrY2ZZQTVLL2FEb0IrL1l6QlRjOTdFSFREWDZ0UEtjWHVCM2ZVZ0ZkQ1lGUnNrMFd2b3NFRXpRejUyRWxWb1BSNEgvNWNBMExSKytlRGdIZVBjbldXaGsrY3NLa04yQ1BuTyt4akcwK20wb3VzQWx0d0dTbWhIR01zejNxMkpid2ZKUCthcy9QaUV1RmlQVUVNZS8vUEpGZUVqWDZFYWNXaC9hSnVINmVHVzJuSmM0WG9TZGhYSVk1cWNnTFZxTDY5ZGd2akJDSGlkWlBmYTF5TmV3VUtoYkhZUXhFbHVHak4wWFZBMElLYk1sekViOU1GSzJIVGM0eWEyZFJGZy80NzU3SUJEdml0YmJWeCtzbEVaaFdIUXFqRWk0dHpmakhId05MSlhPM0RiRllmQnhmVWhKRFNzeWdtbmkrajlvbWdoMVAvaXRRY2dyT3Y2c0t6MTIxMGhiZjNuMkVRUjhjNW1JRXYxVVZKOEJmd3hxdTRock5CUlBPclBDYU5GMlRLb04yMFpZMmM1eDYwcVpTWEFRZElTUUxhVVJwNzM0ZkNveGI3S05tSXpiejhHQlZ6UnJ2MXV0QWVkeG15YW9aNytrRlRVNUt4ZVdQR2FlU0RwR01LWDdiNW5NSUR6Y1B0MG81QUJHejlKRWdsdG9yNm0reWVrcjNmNXBRa01ZSy9rMmlodk5Fb0RUeExhdmw0YTJDanZjN3NWZ1ZGeVZqdGNJTytlWFgwZ0VPa2RxL3NOay9PclVmT091TzJBdDZCK2QyenB1OHI1c054V05DdU05QXNQdzRBREkvemNlNDZISSs3b01KVStZYjlnNWFINEdVM3BOWnhpc252NS8vOG9IcGdpK0gwd1laOVBYTFp0MTZNUGpUVDJVTzNJdyt6TWdJVVZ4UzFxZzIxYzQ5VlJ4THVMdnpFTFRoUFJOSVlvT1N4WUF4NEYxZ1BCNHIyS3Q2Tk02d3Z0UVdkZnJYUG5KOWFJcHZEVjE1Zk0wUlg5R3oyTDJsbXdBT3BkcmJwdTFjSi8yYzdHYTJjWnJRaE05RlAwdElkVW1YMWsyOHRidFpZNm4rMkJlNEtVdXdORzZSclJwUzBhRUNnRjllb216ZUtyOUpKNkh4Q2J0YVpDbWNiRjAxUW9tN2toWGY1bnlsK2RBbDM4Q0cyb21MNldZQnNCRklGbnIzMjJsYURNckZXb0hxYjJFVDIzU3JkZTRxbXQ5UVRjMWhnVERmbGR1KzV0SCtxNyt5cTc1bVJCeUwyOHduQ3FhN1lycmdnOTNUQUJUckpkZi9wWUY4RmdVeDMxZlEzTEE5eHN6ek91SUdrNnBEa3Zvd0ZVZFZ4aDVWekVEYmN4VE1oREQvcUsxYi9mNVdYZW1Kdys2SlJGM01KNmtIZy9jMmdHb0I1SjBqZ1VER2hucmRYOHd0UDI2b1VWTGE2dmNNY00xWUFjZTJ5RnRzNFFqWEhTVThWR0Y4aWlHdnpHSmllblV3aGdKRWxuYitsZWVNYmg5N2hROEVnUGNhczBkd0piS3dHQmljR2IwZlBLS3plb01KSXhoRytQTUVjdnRmT0VNbko2KzJnWVpsK25WRi9ZTDVjS2NOUy9IRHFLSmpKV2cvY2x0eWR3Tml4QW5LckwxdnA3QjBTZGlDcndHZ2ZnTU1wSHBlTDBhZ0w5OEphbnhrbzFHRE1hR053Y2VoMkxNWnhkcWFTQnpoVGk0ODJWaWE3ckVReXhCQU1TOFY5c21FMUtlMHk1eUNsaEFQWU5LYkMvcm1LK2hROTdBMXBLQTF6V09BSnRJSkF3TGZCempEL2xMbHd5Z3o3TkxNejZhS0llMTlMQnZNVkhRRmxHYzBEUEpxNUdzV3VvdWM0ejc1Sk9FV2doZEd1QkpGQk1STlBPUXlYMVhieDhKaGpmZ0RGemhCTWV0aWNIdGZKNDVZc0pBSjlBY1RLR3FrcVRUWFVLeDcrUjBMcDhXeTlkRDV0L0VhOS8wNGgwUXpNcmFTNkdIQndibUhhT09hUlY2YVpVYTdIbjF1OUlzMDd3MGZvdmZkS24wVUwzZ1QwdnIrQjUxTnBQWG1CRDVMNEQvYmE1ZzMzaE1aZmNZekhwZngvZ2tSZXlWWHI4OXB5WmZSSzU4VlUyYnJJN3pmQU9TajhmSlA2YWx6VVQrMHJVMnRPeEVkY05KcmhheUV2dHFmaW9hdXM5SHZOUUxsSEZQcGg5V3pOUUZvL1FjVStBWHZUM1VZNVE1S1VUTDVLUG5BQk1wTHFSOXFGd3Yvdmg2VFE1cXYySnBqOEJIY0V0Nzc2STVEb3pQek9SUWg5TzZHOGg1SDduZTVsRnJLejZOYjBUeTAwVE1DNFVrS3pDVVMzTDEybEFyTElRK1VJM0tkdDdFWnIrZkgxWXBaTm9manlac2NYd050amZpaU9rUG94Y0FWN3B3c205WFNuVXB5NDY2NFVaclVib1FuVmxsMElBWlNXZTN1YWFJU1lQTHljZlZlRW50cVh3S0NiZy9teGsycU1JQWNDWEZoRm14emk4RG94bENscXBCUGtkSDhsRUdnUVhxdnlCM1BTTTdyS2ozRFNFakRtS3psWGZOWTc0NzU5L3BnVVlqNWFwK1hJMCtUc3V2eEd3YzFiL3ZKZmxnaTFBVHdrblZIZjUxVDl2NDNsVFlUM01rMGI4R05wdy9BM3h1b2Z2cTRzS3pxdXhmVmFNRGQ2MG01QWpNRjlHOGk4SnJ1aHhzZ1Y5VUpIVHNvditQTXdYVjhiTU9sNkhEaVN2RHFqY1RRM3A0a21nTjJXbUNyOTlXU3RtZnhPSnlsOVRwUFFUUGUxcm5tTTNXeStNdnVVc0Q0L0p5TTF0dE1peEtnMHpmcHpRcE1aZ05QQ0VSUTdYemw1S1YxZXZmL1NDZkFjaWVhTGR4ajFZa1pHV3Q5MjhhM1hKS2NVK0tWYUorOHQ2b0F0Skw5TENvcnJwZ2JodmVqYWlCNUpzdWtvVjQxaFN1d0svUTcxYktOV3dWTXFPRjZCZUVQZWNvaldpWkdQMGY5VkN1OWQ2alJXV0hSM3lGL3IwK2pIV1FsNWg0ZmlXSVk0WWRSWVN2ZDIvdFVFS2srQjNrTnVqd29UNVFmekJRejhCY3Q4cnR4UUhEaVlYcmdrbHMvc2JyU0srbHNrcThvYWlhZ2JhOFg3aDJ0dDBvcXdGMWdqQWd3MkxGTVRhRnFCajNsMkU5YnhsejBreUlFWHJvRVNGMWpMek1JVUUzM2FCVEpyL0s1Y0RtMWRlQ0E4cDVicFJsVEswTlVCa3VmOElMOWhtQlRTaVQ3d1hWTnBWZHA3SnRpc1dDYll1bUFOQm9qK2trZHQ1ZGYyR05DK2JZN1RVdnZmMVNyVkRYeTJzS0JKVngwaE00TkQ3anNwKzMvVmdkV2lVNTR2eExxbzcxd2RxRzIrNFE1ZWhvTWhpN2pXaktLdlNucDRpaVpiYXNJOWtsZEhaNXlmM0NWTHhWbkVOZGtmMm5JbEdJbmxSTVN6Q2c3M0ZzMjJZL1ppMUFoRXlCQUtjUlN4TGlndHNxb1hwc0tTTHlOVk96TFFFNFdZRG1DL0pCaGtBUm9lSSt2RFFoK0lST3FjMVFKMlpNOGhHWDd0aU1Fa2ZFQ2J0QWU4Z25XK1FwdFA5cVZEbWl6anU4VWtVN3ZCcHlZYktNcGx1Z2xUUkFidFVTTlNVNWZQSi8rWldKYXJGMGJwTFlkNzNZSWZ6VHpBRGlLbjVOOS9kUGt5a3hBeERsYVZOeUlOZCtJZnNsY2xOaEFsV051amo5MFd0VkxZcWFwSlg2NW5yT2VkcGViTnVrcmNIK2VJbmo3bXpFK0poVG10dGpLSjNqdEhTazIxNXB6ZFE1RHRkdC8xUGxtbWFMUDg5Rng3WHZaZXhwSjJIeG9rVXR2Qnkrc2JMdGN6bkpvSG1TVkFOL3RFbXEvM0VKMGxjUE1tamZ5dG11VEhXYXQ2YTVYRzBKaVoyZ0ZMSm5nWWZmVGdLZnVET3JkRHBoVWN5QXQ2b3o0TXVNWENyTVUvRzR2YUNrelUvcDV1bzMxUjdzZHBxWmZsSTlHbzRQbDBqdHpIMlIrcHFJMVBOMStPaGxSdFdiVmNTenVyTjZEVG1NdFpWTHJjM05XSWlKdWd1RVlvaEJPV1hYNzhNMmlYWHJ0RzQrTW04UElkeitycU9TU2dRWmJuWjNETC9aeXJCV1JBT3R2K3FPVUN0SWhZSTNJbml0MnlWWGRFaUIveVZsZDQxOFdIdFJKM0VOcjhPYS9VdFQxdzk3OVFjZnRNRVJFbzBvQTBrWklldE1XWXhiTHRCMnRua0QwYnJHODBVTU53NXhWc2FlOU8wSTZwYnJxVGF2bTBTV1A4MUN6Wm9JWVV6cFVRdE1wU1B6Ym1rK3lkakw5dkgrLzlScFdvRFpRU29sbjM5U1FCRk13UTNuSEREb1l6c1k1Wm4vNkI5WnBCTjVoY2FJdzZqU1dPT1cxY2F0YTVxeWMyWWN4NzU0UW56Z0hwKzcvdEJoalVoK1d0VWRQbXZGalF2M2xVNTFlb1FCVmxmZzBQcHdMK3hLV3pleXpQZkJRdjlXNDh2V0hnVytZaFZBaWdXNWExZk1QakZRVm9aK0psaGxWYkZtOFRJR1FKakVpRjQ1VG1lSlhkWEpGWE8wakF1VG9XMUNvZG12akk4VVovbWVaYnAyTlFJUVlEQk1WOTZzUUhUVWswS2pSWERSeFFoTVJqMlp1UlZsU3J3TVM3L2pkbmdvemt4MWxuU24vUS9HYnk1Q05lWWNKT3kxNXIxaG9kcFAzMnp1OUo5dDRDbGJGdkpGSXNNdXdQSy9zMG42czd2MFRZWm5oWE91ZVp1dXU0czdNYldrWEh4NzhsMzZ1dGFJNGNJM0o5MVFlYTNocDVUTTVyRmxQZmFvdDFpNlhqUlF3TkFDYWxtcndIYWhUNkprMDlwQWVyUHA4Q0ZUWmZ3MUZQRlkzYzlLTU9uSG9HU3NXTk01Z0tScFhVS04wM3IxdEtmSUFUd0ZqOFFUUkZZVnU5UnNjTG9iTnlKL096K3lBRC9MVGl3UHlUTlcwcFBRUENhUjVFK00vRFhPVUsrWlIyUEg4ZnVFQW51cHFOd1FnN2NOYlN4dEpRZjR4U3VodFhDZ3ZicG1Fd0U3QklMY1luUHo5eGtqUWpqWjBVK1FDcmZlaWxrRkNOTTYvOEgwK2JmMTJLbU01eVRMOUJUSlA0QTVFU2UrRXFJL2NzaC9HYlRTMHBLR0dNSnU2ZkRFRW5ubTlYVStBWkFIRlhxZEh6S0VrR1pEOHhvQkp5WENUWVhLYkpqdllYSHFpNWxCOWM0Q3czNTUrKzhzc3ErRzhmRXJVdFhuZ01iZkpyQjdxVHZxVzhMWjRjN2VNWVhQQ3RIYXB0NGxlUkxjQkZERG83Tmd4ZmVyZTlLTWUyZEx6Ri9zU2RTWHlCdkJ2alYzRXNBZzZNWEhjZWh1aVZWZWVYMGtmcXpmYU10R2Q2MUJwUXN3SkZOUWFiVnIwRkVBd2wrdmMybjVib0FZdW9OcEZpNGtIN044TmFEWDBtTEtsdlN6TkZPK1h0L05pN2piS3k1WlRYclhMb21Pc255dHlWaE5MK21QRThBVjZKeC9NOEl5MHlxejlPREUvRXdTeERycUNLaTJTcVZFVDFnSlhHRmQrSU1OK1RJQWFudnpZa3libTRmOEEwRzFyNHNvc2oxU0l4NU5hbit2NUg2QkZSbTBOL1ExZ2x6OFJmWllYL3hhejhtbzQ4VDFqS2VLYWFjeWdEcm9nWmZkVHIvVmRieGQvMHFOdlNXaGpzbzJIbDFtWE1uNTBMMkJNS2tSWi9MN2FxZzF5ZmdTVWZDY3pHSExNUm02Q1ExZkFrelJKZGdHNDl4VVRGSVpVaHBMMStEOFpOM0d0ZXVvTHZPb3VFZU5nOFpnTDVVbzBiWGVIbXFyRlJqWlk4bFR0RXlpSi9hYVV0NmU5V3pBVWs3MTVMaU16WFQzbkhONjlEVDdQR2szRkZjSTVZOVBKZnpHdjdIWFA1dVBpWGVsY3RSL0ZFUHRDQ3VOcjFodktHWTh3clg4UDBzT0I4VWs4L0JZdnNCNzNiZEUwWU1WODRSWUlUeDlmaTYrVWhuMmZEbk0weTR6QUhXaG95bDJvZzRmY0dUODl4K1BtaEVKaFlodzMxWUhrc0V2TmMwZzB3T0pYdytjQ282cEl0d1l6WkFGUWR5emw4Y2Vxc3hrSUVSR3BmOVVMYlQxcmpYWk9NeTd5Z1lZQUdCeXVCUW52L29RR3FmTU8vZEc1TDNEUHdMNzZHMkpNbVJ2c0tEUTR0NlZjdzdOQ3lteFA1QlFtNW13S0g5OWVHWGVNb1BpYi9nMTlCUms1ZW1YcHBtU2FPMmxPbDdPWXRXUmhBaDUwZGpLN0NzTUp5enJRRkFsYXZ4WmNKK3JhL2tsdDYyMUFuMnlmVWdiZ3RtdXRqMmNyOVkzeEE4dWZScklBWmZKZUhMV0VBUFltMDZJWlJRN1JtVlBkMWpqUDFqdmhtL3l0cjZWNFJ1TEYyNEFYMFFVZnhEU2luS2xNd2Y0K3ZjVk1iREtRZlQ2UWI2VDdONVdiYWwrYXJEMDRDVzkyUTZHcmdUSjRTdk5qMy9EWmo3SUlldm9vV1ZZczFzeXEyRHZHN1NVSHJnVUNYSUxITzVsVHBiUnQrR3FseG1Ld0F2VmU4TFo5NTBWd0JZdEp5YjhKdzhzZXg3UE1DS0hqWXRRbGlRZGhDLy9oenhUZjBLYUZyS2YyTTMzRlphTmZwTEMyMnRvQWtGQmphTC9ocDFCZTgvVjFjNWNvZmVCOGlXbWJzNUtlUENJTU9KQkx2Z1ZFd2c2ekFMNE9XVkQ1S1phL3ZPTFpuMnF3NkFkb0pxcWhvT3kvcUZjdk40WDUvcklBdmg2eUlMOXpRY0RzM3l0a2VGMmhReDI0QllGWm5udnhqTytNNmFheUs3dDdMSDhvdkVKUklqL1F3ZXhOc1FnVUJhRnBrLy90UjlwN1FDMUhMOWlwcTlXSDZZOG12OGxObUU2VXc2L09sVjAzTi9VR1hqdWQ1NHFIcG8vWitrMzFBZmNLMHg4N0ozUzJnNHhKZFNvZnhkbFZja2RnSStnb29SODRlTmxNRGJ3VmJIcGNrZmdVMkdVdjhRRVBPVWNST1pOczQxQkNMVGdOOFlvZ3l2bnlKUko5bnNMNFdVQ3NlVGVFZVNMblRnNDN0NWcxcUZsYTV2WXBvdXZEUVdNVUh4MFVZOGE2NzZyS0hvSHQwVk4yblRSRWNXQW14NjZKWlZxZGJRU2dJK1dSdWxiM1ZjN1V2MCsxYnhsVGFCV0E0T20vOHZmRmxJZSsrL1NWcHpDUGowcFdnbVN1R2lFSGFsZE1xQksrb2N5ZW5qaGRHK1BMbG5VVTRYMWNuOVZMeWVnV1MrdER0YmJucEQ4Tmt0SEwrSitrdFViMjhZbFkvdnB6aFgvL3NqMkY3b2N3NG5VQkVNVVdWYnhDN3hma090V1d3eHRDTDFSVkhlQ0Jia2o4UktkSmZaY013UWR5U2VQQkNJWkYxNmNjSTRrRjlLMlI4VnlwZzM4TlZtLzZZYUlSN0JnNDBmcThGZWdDanZscTExVjJNQU9iUzFHWWszNnFNeUJHMmNEMHd1WDN0NnlMdFdsUTlWZis3TGF6UDhpcGhLQmpuMHBuRzhwWU5NY0FGZS9iUlRvTDlVeWtpd0RjbFpzY2xxbk1ZTGZpTzRDODVBdlVHUkI3cjhiQ2k3Z2M5VDhiZGlQVUh6bDNXdW5ZVnpzWHArazR0MFQrZXFNaUZxMlNJMXl1RHBwa0FQN25YWm40ZmZaZHBWV1BNYzZBT0dJcnhTS2JxQ1ZxOHowa3gvTDgwNHZVS1NxbFg2emxsM0VLMnJkdFhlQThjTXp6TXJEWms4MWRvMlVMVXc2VXorNjdwY2t4cGFrQVRHTWlLT01pR1BXM2d5dk0vbGlaM3dNMHZGOUozWHN4OTFWaW9lSFpUT1FhZDZwNmZDL2g5d01GcFkvcnpXTWMyR2d0TmlhTDRIblE2ZUthUHVteUpZUGs5MytSc0RFSWs5dzl3SnZOWjVwWVp2V2YxVGNGcG4xWlJiM0M5SUMrTmNEMm5udkpjaWFZNXpWSUpQQTY2dXhhdktDOXJyQWkya1NpYXdYMUpZankzcmhCRWo1K3NjYUVianAvbHVYcnIzVm0wMGc5K28yR2grTi9QbXJRU2tKb21Ud1pEZEQ3OEJwcWV2V3N4WlhuZG03L2FVRmxCKzVXYUZMM29jSWFpcW51bEtTVkVWMVRjbHZCV1ByeE9aYXIrNkZpdllta3dlTTkrS01XclhSZjBYZWNOa3ZXKzlzSERsdStneC90VE5qUFdPak45MlE1ZFJIQ043TDc0UmVuQmRsMmN6VHZpVHFRSy9mUFk0cUdybmtlNzI2TXp3LzFyUkxLdGxGbVZsY0FydnN4TjlLMzZUSEo0WU14dWhQaGM1cUhad0JkU1ZlclRkS3VlQ0FoRzE5UG9CcVBOVytlZWtVWjdxSWttK2M3WUlIcEZnc2pCRWt2Mmd3d2h0cUlEQjFKQXp4RnpvWWNIaWJlM3dYRnJzc0dqUjRUUWNUMXIveFFBdE4vVkFBTjc4UmJuQmNvWlh6SVVFQUpubVBwc3l3QTJmVXlhazRmQVdQbUZ5TUZNSlZUdW5TZDdwVndEQ3dOSk1pU0RsVkEzcnRoT0J2ZEJNQ0NGZWltRjVCNlFvcitYaCtzZHV1WkNQS1dMeTRqN1pjUWkrREhUVHRBMnFXN0JHOTVZZndLYUhIeDZNR3J5bXRZM0lkaWZxNXFkam9RaFE5L0hJdUgraDdkNkhjZnZyelM4MXJMMytyK2FCRTEraERUZnR1alF4TjhleWQySUxVcVpwTWFmaGdSMFluNmxPRzhLWWcwRzNEMWNMVlJrSzVhVmo0Nmg5OTZ3U3NmN2FlMm8zWUtlQkZENUZheXlvSVVYQkVFQjdkQ3l3RXBJSmNQV25DUWxMdkt4NzdvT0hTVDNyUFZmWkRVVGoydElSQmhtOXVaeG4wU1RMOFgzT0ZVeE5SaHdUTytOWkF1RThpeG0veGFUc05NTzk3RVI4V28zSjROQkg2cTNkYktiNmN5YTdCZFI3cWJmQWlTcjk3WlZJdDVCZHJiRTJwTXZZS3l5ckRWRFpUc2hkU3ZlSjNxUVpBQU1VUUNMK0x0UHdFNGdSejhUNTdDZFpqSk1EV05ZN2NXbWZZR2xsOG9kMzBPMmhZRkl6eTg2K1pHZXpIS1BxL09xNFRYSEl4VVRjMExaNUF1OVo2V1RjUXp3a3RyMS9rbzFpaStIczMzMmZaT3ZhSVQ2cnZWTi9nRkxzek5VMHZkdGpONEpoMm5WMHVpY21kVUtPQngyTUJ2K0tpak82Y1Q2WUY3QWNyRC9BdTI4OVVqSGFpYjZOV0JQMzZBQnlFZ0RMaUNobTE1V29pbkRlWE5WY2tFTEcxTVcwZUV2azZheHBVcGt1R25qM2pvQmhocVV5ZGJDTXdxd3dPbWMyMXpROUxzVS9Tc0YyOVNpZExoNXVwcXJpT3JHUVlPMnV2VU10M2wvMWgzSGRqR2xnVi9TTGxrSmlGLy9peGtuU3daK2FRYkpEOXBZUk9ObDNSK2FEQkdhZExjQlpLOTlFeEVPVUhmRklEa3ZHTjVTQzRFRmJNOEsva3NDL29jVWN1dDZacjMvbHYzRk5nVkI2RmRnUkZrTzc3clVFMkJ2a2FNcnBOK0dpWjFYemdxbnlLWm9LaTZGWDYwSHVKaEFaeW1MbENJdlBYOGJQR3ZSdVNKMVdPYVJuTjVJZS9OSjdxRWRqRUJJRHduWTdHTVV1QzdHU0JoN1loY2lBd3I4VGRxc3RXc3hBaTFKcjhSZ2tlVmtZZ3ZTSXdveE44b3ZWSUFpaHNJdVpqaGdicTU4T1hKTThyUTB2bUhITGZ2bkRsNmwzY2dvWTBJUDdzY2d5TWNjMjFKOVZ4YkFFaFp1Mm1pVjMzdVYrN2FVeW5qUFQzMjV4L3M4eW9XS2JTTnVMMVk2KzhHQWxrWlVDcGdyK0ZFNStab1VOVjdqZjVtL3lnaVZndmo0MjUxMnNOZnNpVitTKzdWeS9lQXZ1RHdiSVhEdXN5VHNTMWozUGJhZm5EbEVUT3BQd2ZGa3g3b3ErTG1zYlNzVHk1M3ZXU2pIUzFPUGZQeENiUzNpS2FPRXRkT1g2bnFPTDdTVmovSU9jNlhzWHphSlgrc0FNNzdFMjJNeXoxMGdIcGNScEN1Skc1TEhibURrdm9Zemkyck9YSVZZSDgreGJnM0dhQUswdlhsaWFrWTdaWGIydGJla29wVjNuck5pbGd0SUk4aGI4d2trOGlZazJNZEpzM2Y4aHFnWSt3RWE5ZGlxNjQ3c1RlT3VnaGdYVmlkcXlVYmVnSlZjM0c1SEZYc0Mxb2taMTFIWVpVbUUxbDJISXZQWm01VytqcS9UTHE4eFkyYVdqQTNJczFDWHF3YUt2QjhjSCsyUmlCc0VuZHRPcE5TQmJWNVE3SWo4bksvT1VjRk45a2xHZ0RSck1acElQc1lzQnhrOGNnWEJ2djFUM2N5QW1WdzM2WVFlU25aMmJpRGo4Zk4zaVFNN0pmelBVZmNoOWpmOHE3bmJJdXppRVUwcHFJSnJTYVZ0Vk1mU2lyKzlDOEkxTFdmQTIyaUZxTFZnbGZLVlV0Y0luTnlab25EUGFQZE11YWFMWThrZDlhUG9yczRGUTkzcFVvNjJZUTNvZG1weFFXeWlaeCtpTkkxczBWUUJmZUkzbndkdGpwU1lDYmE1b1FjVWtueUkrdHZNdmVydHlCVXl6ZzN3Y0NkN1I0YlhnMDd3VU1tbWRteGRUUFZTZzhyckpMZmU5bzNNdDRqWDBKYkEvTURCMENzbDk1Tnh6VTJxRzRwckN3cnJYK0MyeFpQTUlabnVvTk5VK1BpRFlyb3lMT01TS201c1ZSNWhMNDliTGYvaVFWbEJkYTR5bkJZM3JLM09iN0tBbjRMR1J0bjNCVi8rZjBwcHNCc3ZFaE5oOERQTDRsZ0NQYUR0UThmU296dkF0Myt4Q2J5bnZBcUFXQVdzRzg4NW5VTGUyeHBLMkxxVjAxVWErdFJjVHNmNkV1MFJUb0JFK0tZZVVzRTJWaDMxWndkUk80OVlHd3dUSzNQdDBLSHlJa0o5UEFTVHh1NXhmc0dIb0JjV2pmakVrNTAwSEd6aVRVaWFvWE1TMnA1Y2VsZzdrS2Q2dWVCQ0kyajhpcGZ5eFlVVmxjU3pMemd1YlVMRlNjN2ZNNVFjbGZHRGVTb3dncVZnZ3Z4RmFlaVVFSlMvWXBaYjhUYXF6UzVrNGZzdWJJdzVkMURHTVhJa2VvMFpmdU9TR0xsclliTzM0Sm02ajRDeUZ1YVhaWWxFSXQyd05PMmpPR01DNEw4U3A5U0FpQ3h3blNqblpNaEJIaitaQkcrd3ZKY05Wd2xVY3ZHWEhBblFZVk5JS2orREpQczgzbmdpVnNENU9JK3l2NVExVjZlak9wNXg5TDV1VEhLc2pQTDdSZmp5YS9kSXVCNlUycVF2WDlESjY1WXRMSVJBNW9qY0xhRkpyemZHRjhJRmVmRm1IMXBVVWhYQTBEYmUycFpBYUVzWmhhYlpreUcxL1IyNUkyVXVKbWdEUzlMcDRtWmIybStxcVMrNUpsejZ4T0MzMkZ3U3l2WTE2b3orUUdpYS91ZmdDSGxsQ0VuYVZRcnREdzNNTmZBMUVDdzlISExTSGs4b2ZhUXhnaWxoKzFMSkN6ZTVmazh0ZVQxVnorZWZlT0hSRmh6NHhXMkl6d0h4K0haU244SWJsNlNNZ2tiUy9Vek9xVVhPcnRuWFlvZ1lZb0FMc3FOdVdqbDZ0Y3hLN1pRZTM3WkJ4bWNtYW5oTUcyVTRtTjA4VDVRUnBUaWZxRVZDZGVYSEpBUHJReXJmQ3VwTzY3UGZQalZMMDNIQlZVNi9rem5pTHNOVzJUbmVjc0dkQkJVV3VZWjdXTTVnVWJPL2VwYkZVNlZ3VVRKaXMxd2xCVS81WC80c05PNXhpazFSQVJQOU50VTVURFdiWnR0SmVKVVFLU2t3eHhPclZEV0c0VVlNS2trdnUweFRvQjc0aWRWd2crQWpFMklJd3MrVVVlYk1VVUFJT05WWVNNOENlN0FJdDI2cUVHd1l1RGZFeDBTcG9HTmwxeFFUM3BIVTIreVFqbWZYQ25UMWJUZm4rOWVkdnpHa2JzMWxkeVJWdEo4Ullmd25YNkFUQm1aNmdVdnJMY3kveE5BZHM1OVJPUnRDOGVENXBsQ0V6bk9GK2NDYTlTbEwrNkV6R2tGWUdiS1VIWnJtTGswL2hiUSs5WnBqdnFiS1RqWk1jZzFKcUd6dGtPc01nZFQ0RGJuc2h3RllvSjdia2hacDN2TlFyYzFoeCtoUkE1dkJLNW5lb2g4aW5hcm5oUXpKZ3VoelIzV0dJeTcwOEFXVVNaY2FuNzVjcGZPMlMvczVnb2U5Z2hEcHhYWjBQUEQ5UHoxWXVRMHd6SnhqclRUMytBTzJuVndEQ1RuNU53TEZDM3lpem01VEVpNEZnMkdGcEZzQ1R3NHpSclhGYkgzbGdTYStuT0Y2Z2s4Q1lDS3N2Z2tPTzQyN2daZXNXT21KTU43N2ViKyszVVJpZUhtdDNKdURTaGgra1NtdG00ciszbzdTdmRYT09sdjM0ZGVsTmhtK0IzOUMycXg1ejRncEJUeFFOTjBrdExoa2VmajhiK2VvaVUyY3dLd3NvYXVoRUQwRGVtTExOUkV6V08rVzFldHRlSFNSVUpzb2lzaFA4bWd3R21vNlJNczJxOWVyY0tsdVVNcEhRVm5uME5zeFE4QnAzbTIxQTFJVEYyMWs1ZXJ0aC9lS3BoNU9HdVBiMGtNZEI2Z2FVdEp0akdKaHZocWd6TWw2amUvcFpqZTU3RVhRMWRELzVqY3dLVFJpNDZZbnNDN3hjTkpxRmJXUlpjVG5BVWdEaDRpekJ5cHY0MERhM3gxQnpFRlpveHBsRHhFTFFtM2dndEVKYmpzTWwveEdWT05xUVNhbTQ4SzhYSzkyZTRzNE92NHVTMVl6UGdkV0hDeFdBaDRzNGttendIUGs5dkg1Z0JYbTEyNUJUZ2dwTFNWSS9lT2dGL2JibWZuQXNwdFNVbWNQRzVNVVNPbVgzVmNrMFQzMmY2ZllDcEhaQ0VvTWxVNHRDNEVTQzNqNnBEODRRSnBLVXlndFRpNjlETzYxUjNCSktDanBtYTZRUktvZGZ1SEQvVlJWY0tmcTNZM0k1UlRwa21BaHJlNGNEUnY5aCsrYWZVQjhNK25sdkFRTHZDWE8ycVZNRXNTMmNza2oxUUcyY0xFY3hUNnJPL1ZVVFhXQVR2ajYrU2VCakRHZk94QmxVQm5GcUM1NlhXZFVaQ2lYeDNwZFlvMWtzUUR5TlQrcjVxN3lnRmszMHc3aE1aVnVTOVpvN3B3L3dTcmFKa3QrMzJLeEt1V3VOUHZqOEtoT3cvSCtmN1RqQ1Y0RVlmMVVkWXVHUlMrRnVrRllIdlpsQzZpUDQ0cUpEa1NUa20vWmc3djhTZnBoRTNiMzJqRW5xdTU2a1pPUVhHa3VxWmlTVGQ0czFSblkrT09tMU8xeHZ0dXYyUUg3YjlLZ1dWenRIZkUyVGFuRVJjS21yTWVYSm8rS05uREIzS040dkltM21ER0RnZDRxZUJXTkV1Zk1STWtHbFJTMkd6ZFNUMjBxZUdPUmszcVp4Wjk4T0xqUHc3SlVKRzIvYm5PK3A5V3dyUjkxVDl4dXBLMkx3QTg2b0VCbjJoV3NIRWtnOUJ3RjdFZm0yUWwrc3JubURDaXBLb1BoQzBGclJsNzdnTTY3RGxQcTFsc2VjMlE5Q0Y3ajhLa3Y0bytVeDZXKzYxK0w1Nm1QT1VuK3pMYjBCNVJsMHJiQmF4R3kzeXJYSURzL0Q4dEpuNUdXWGpHd0luTXRxdEo4aTZQNU1UM1YwZWlMSmFSQi91bHhic2JCUW5jYU9vclQ5WlZBQTFxK2RseGpHRWFFbE5vVWdrdXdlM1BZOXZrZUMrUGdMNUdTRE1UdWNjOHU3Wng4NkJha0t6QXQ5azZKM0xXQ2xNZHI2ZXdWRFAvZHMwTG5ZalM2TTFJTUdCcVlJSCszb1paN0tKR2xIOXVZSEsvdWdLK2xLdjBmTWhEUlVVUVVQYmpkMVZYR0MwVHFqV1pDb08zTCtTeDN1aldIVFB2YW1Oa3FtYnB4blN4bFJDeGhoVzk5Zlg3UXB2UFJvSi9vZXdPR20wU2xSclQxTU1LaTNZSmE1U01KdytUdjc2SDdZc0lwWDRueW5xOENzTmdXNHR0WXhoTC82blZTQVZDVWFOTHExK2dMdTBEY3RIemJMeUVQTW1MR09XZFBJd1BwNXdnb0dvQUh0ZVVBTWx6TjMzT29HYW0zRG9VYmhyMUM1UzVIWm45RGhncThiRmljNWg2SUNub0lzbGl3d0d6TXRxUm1WZWwrWnU3VWg2MEhyc0RVL1hvK2hqaTgxVEJaaHJIeEtGQkRlN2VJZTNORStOQUJXRkhCdnlOb0FNaTZWMEp5T3FEMk9VVWwwWUVMaVNHRlovcThBM0EvNWFyUVBUcFk2dU1HYVVYeXhBOFZjY2ZmakFBY1F2STNPMXlwMU91OUloME5MUjhibWQvdDlYWSttMFkvak45WGhlMktDaCtIa3hVQXV0MGJwSjVlT1Y1ak9Wbk9oTE9MT3J4WmRnTDUwcC9vWmpRYkh2aHJNTlBWNGtEVmZlNVBBQ2pNbXdEdWtBZG5OOGVvZTFGL0JVTnVzQTFKcXpNTzJYS0dmSGNXTzlVeFR6ckt6cEkzUGl0R3JycGo2YlgvZnAzVnRRdTRscmRzYVg2ZDFVSGhnQWVEWnpyQUhFNSswSVRhYW45R3BvWU8rNFlWRjlpR1o1UTF2YkF5bVVqMEpvc2g4cEJERXVTNy9XbHVwMm9kay9WSkVEakUrV2s4MVM0U09tdXQrRDVKNE1yNElpVmdmUXVSVWhnaXRaRHZtcy9EcjBoVmtYU1BnTVBSTC96NDZldnVxdlBMWDJBZllHb1ZCTnNOTkFYNUpPUmtHRG0yQ3NhcjNmWnVjYXJHbExCNSt6YWdEU3VxNDgxMmlqMkx1M2JPdFZWSmdXanV0UXpWaHhycnRsSytxb1M1bmJlNk90T0htR2tLUlBNRm5kOHNPZEk0U1U3UUtxUUtpaW5xQ1NQaUl3NjFNOTF0M1YrT2Njcmp2THVrcUNiSXp3UzZEMDl4M2lHS2lXZGZjZmxoVkhTcThMbC91eXpxa2NVaVpFbSt3dVFId2wvRllGYnA1RkI0V1NlM2VTMkRGTHFuakF2YkYrcjZpUGp2SldIQVA5MEdGTStFbE44YkFyamZPNHE2SUFCeW5rOENMbmh1NzBhR21yV1ZPenVJdkt1bVFYWmErU2J0K2owdFJKWVY0WEtGZmU1TDdhK2RZMXFNNjhwVno5Um9TbGtzNXZoaUZFNHM3a1kvaVhHeHYydCtuWjEyQTE0VFk5YVFPM3dDWW9lNWQ2b1k2VkhIQklxMWtvVFJma2Z5MlNlOWZMaExZaG8vL1pBNGEyc1ZheHBUa2FSTWJBSVJHRHFtYm1qZk1BQ2xBdUpRYzJTNC9qZVdrTVZCd2ZGUlgwVGJXYUEyTjdhaGRRbzhyU0YzbkhPaXNxOTlvZ3R0bStLeTIvb2N1N1R2NTMwUXh0cXc4UjVHKy9UbGwwNnhpcjU3QzNacENyZk92SEhNMjRXWlBzS3VuK25OT0Nabm05TXo4WUJ0UWEwSXBUenpxdW1TYW5SWW9IU0djNFlQWlBkMGgxOFlTVEdZVDE1ZjRrNTg5K2hGMlZqaURVUWRZL002dGV1NWU0aGFBUWJhRVJtVWN6dzVCWVlLNUNaM0dMUzZxT1ZxcUlTZDFJRk1jbndmeHB6ZSt2dmx5UUlCczUwSi9acHEwOUJiRE1CUW5vb2xSNjNnT1huU29zUDhwTUJvUGNRTkU5a3kvS2FJRTNIbnlVUDBzT2JjOGRsN0JMTXQ0ODduOVpGSmRtUDM4N3hLeGxlODVraTNnRFNNMFRHUWVFMERXY1daYUNHWFh4ZzE4Q2x6azdkcGZaYWlQVnNOeFllemZ0RHBLcmZNOEhTTTBhOHMvRURIdFdDa09QTE5Mdk9zUmlJdVVSWVo5NHU5cnVicTl5RlJ6S3JrYUlUSXVLa2dFdTV6N3NkR2thNFZ3L2k2REJ6UkpmWVpIR291ZWRvRjVsN2NTcFJtSzl0YTJrbGpBQ1FZdkk3SUMxNGJpOUw0WWhqU2ZEdGN5VFFhS1pHV0lnZ3c4WXJ5R1h0VDE2cTlCM20yUVhoOVR6SzBMUWVudldqblNwMG1vN2s5Z3JYUDE3Mm92NVlNM3RJZzBVTGtVL09PUm5FMjFiN3pFeE1udDV4dWhYQSt1dDc5R1I2aUk4VUx0VStIVTBOWmxEdmQwWjNnaVZDTDl4cWZka1pJbnJJeTRLTVBwZHp1d0ZMZlBSckJhV1RRRGt2cUF1R2dPdzc3Z0JkWUIvQi9qTFkra2lqYktENHQ3VkhsVUVvaFordUZ6MWFWUENiQlJ6cnZ4bjQ3YVJySlozVks0NkhUVlZQL1R5ZWNYQVEzeTFSWU1VaUZmRnJPeW5QVmg3SGU3WlF5Y0pzMVUxdVBKQ056R211Y0lNQWNRQU1GWU13VGFWQ2xBSkhHVjR0ZWQxNE5ZWHBlZVh1dTdIRGJWUGhDUTRlVmVOemRNMml4dTlrZE0ybU5WVTZiaHhuMFplOGtTNFBQWUtwNXllN1d6VFRkdm5FQUVRNVBnK1phSjUzME5mVXoyOEJpZEUzeW1qZ2kwQnVUN01NNys3MHYwb2hNdm9aTU5NSDY2NDdGb0RzODFqdm42TzFMY0c5SjUxQ3NUN2lmQktHcm5STnNBYStuaUN2cnZiZ0IxQUJrc0dPMmZuajloY1hNRkFXUks3Q2JYb2FjSVo1NGIwWk05NXQ0eitBdEVYTG0vazI2eUdHUVV4WTRtYmxMbG5RdFNvbnhKamxoYURIY0J1TDRER2h0TGNhWTJDYTVKSkJZY1NQaHNIVk9DQ0NOQlVTRjQwWitHNjUveFFNTGkvdDBEcjR4enRSYisyZzkrZUVTRjROWTNzMVdDTTZ3QmlnZmVvOXFwZUlrenNoV1NXVGdEL05LOUs2bHZva2lpRkIzczlFTTZUVjN6cTN2ak1HSUtiT3g4NHByWDdCeHl6UGxRcVV0WWd6cjJyUGJGSXlYZ2NKR2t1QUxIV1ZLZjNMaGpRMUhiZ1dJYi9LNTAyclJqbnVJNG9CSHBDUkFrZ0ZaZmVkdlJvZ2RHWmh6a1N1b1J5NUZtTGllZUNHQit0MHNGWE5sdlRsbHZSUFYxY29tdEt1WDVXa3I2RnkwUFVqb1RacnpKL0hrWkJCZUlPeXU2SDcveXBZeEI5cm1EUnBzL3BwWGJnNjJxTTBxQkptY0NuN2NNR2RERW1IS0lPU0gxL1loVHZvNGNabkUzU2cwems2Sm11UmFxRGJMNVB0d0pxY1d6dG4vU2R4QUVnc0I4a0FjL3grdVo3VXl2TXByczkzT1lEcENQZm5JNGw5NlpXTnhFVGs5a3IrSWl5MWgyNWl6RzdrOTFZL1NlVkhaZDN5d21kZFdrOXJKRHJBdFZpV2srWU5wYWdrV1RnN0hxR0NNOHk2R3NxZUFCcnBWQ1Npb2tOMXNoc1h3SkI1Nlc0TFhrRWNLRCsyaWcvd3kzb0pIZjVmVW1sRlkxdUhiM2JTSWt6MDhHV3pwRk91TXc1aW9yc1k3b0tWRWZrWlBnVWlldENMS0JyWFREWVcrSXRtV3JiZURybzM4NS9HYVREODFJSTd3OHVqZmRxNlAyWXNQdXYrMDNDTGFKNXliOThZUmh5ZFh0dlRCa05kV1FYQWlDTEFTT2dmbHRYSW5mMHNnQ1lLc1NyQXBlS0Z0UDM2eGlHcjNJOFI4ZGdvNnFVcWJmZlRjeGZPbjYxY3dGMjZzMXg5WUVrN2lOcTRGdE1UNG44azIrUlRrdTRXYUF4QzYxWHZTM1BTZHpJTXhjSitKRWJReWtrZU1yVTBxSFpqcFlXZFVCazNCQTF6Q0JZZ2lFWmdOOEZIdUJ0NmJoS3pERmwxSnl6dGxHbWI0anZDdHBpdU9Hb3dFaTdmeUYzZWZTbzJCQjdHb0ZNOXBRYXhlYjNrOGhnaklnRUdKNWQxaDVVMFEyc2k4Nm9ZOXJ5ZjgzZkR1OGluZG40a0QzWHlkcFFMZ3kzUW11SGpnOVBXeE1nTDROYUVxbnlob3FCd2FPdjUveHBXN0N5TmljMWtFSTRidzVoSFFwaGk5eGhCTWorQUJmY3VpWmx2RDRpQjRBUlNDSFpmYnBMeGowczhWSG5xK3NHNTBOVkpzRVdFRG1vSjhJYm1zdU8zb2orYlQzckNEamo0bTJ3a2RVZ2dpUnpzUnBmQTRya3pDS0VCTkU2dy9hMVA4c0F2cElPWk5GWWt3YmpKT0FMRXhRaEpINHM3cUp0Zm5RbUkzSWFIWGdhUDNOR3JzeVdUempBdXFkUEo1eGJyQnIwU0QrenVYRUxuZzNXb1FseGFLOUFENlBHUFVYWWNjS0NtalNsSFpWWU1URWc1UVJpMHZlRkdNOHJZRWg4Sm9xaVA2ZENuOW5DYkQ4Sy9kUlJBTUY2b3JleEVkR3VyMEcwSlBaZ1M5TTVvT2lXQ0lYQUZoTC9kc3dxMVV1MW5BeXEzSEZTK2RGN2hGaHU5cHhzN3UzY0FlWXdvUlUza1lHd0YySlRlQURZazBOc0VFbm9FS3RkZEUvT3FVd0l0NklSd3hzMTBoQ2VqVWNCQ0ZYeWdnbE43Qm1GVkZFQVRBZHg0K0liaU5mc2w3RWI3MDI3Tnp3b1VlUGwvY05nL2VEdW9uSzUrV3c2M056alNpRCtyN2tnTEFoalFKTEFXMUkwak40TThPQ2YwK3N1aGhUbStWQndhRlpCTEl5eU9idWI1Zm8xNGRUWUZYTTBaY3gvUmxDWEtKbi9keVpTMlNRS1pGR1VWR2tack9NdTNyWW1ONzhSdTRzcUpEWTFyc2R0T1lZZUFJT25EZmJQZHB4T04yYnBpak1OQkg2b3duMGZJelJmS29OSEpmUFBYMVNySGJqaXZGNGJkRERFTU5hbExGb3BsSktKbWtINDA0QW9nQk9USkd6eXJVbGdCWExxaDlFTkpHOVFrMmVsQ3FDYk5xVFV4cmZ5cFhGdGh1UWZLMUhxWXJ0ZmhrbUU5TVNScDlOL3dSblA5SmIxOEJnUnFhcDlTU3FRMDlDbGRMSmVaQmczQi9FOXk5T3hjN3ZGSXBxMmNEU2JmdVYzdm9aQ2gyVkxPTzVyaENzT2VjZGNMa1BDN0plRHVWWUh1V05IM0FJU0hNclptTGdCTXkrSVhZaHJiZEdTT1lsOFA5d1lKZkR6QS9GL3BBTUgyaHNwc3puZkhNdGh4eXlBbE5LQ0FsRlJXNjJvYm5GVFVweFhkc2h3WmN0SlVNNm9UZXlad3h3b2dYWFRpdTA4NkxaaU5maVltZjJOQ05XS3hTMGgwWksxdTJIYnVBczhLQ2VjeFU5LzBsbkhtOFBpL0JkcHZ4TjR4V20zVWFacDRDUFYwektLTm9XbkRGSzMvOStyeExyMmhxTllpVzc2RTRRR1E0d20xKzNwcDc3bzVMODFOaDE5cldDYlpKemFmazllNDFkTjdJNTNyLzBzZHF1WC9nVUhGNzhsR2pXbTdiQk4reTJMNkphR3NrN0pKSWI4VVZZazFxZVBEMlUzc25MdVJocjdGSUtlMnZQU1NtM1UrRUJBRFExbE1KdmM3UmFQVFVpL1ptcmxqV25maU1yR2dNdlFITmJNa1BDQ0QrWlQveit2c1kvbHkzUTJ5S1F4VTIzcHZoQjM2WkMxNUZ3RnU3MW1xYTM4VWxCNVNTMFYxbnl0Snl1SDAxL1U3YkZzRHYwd2dzczZlaTI3OEhkUGtiSXZQV0hqMC9valBYU2lsUUhLZ0ZySEt6VzNMTERvbGlsQVRKbnh6YUl2MVFtZWhKOTB3TkZsOUcvbTFDTVZxR1pqbW50cDN5MzEzeTQvdWtxVjFkd294VGFvRDVsL09oQmxPbU5iWnJrdjhYWDNNUU1WRi9pUzlxeDJlbXlCUHYyS1VaUVBLRkZOblVmMUpvOFZGZHZzWktaWW9obGpmWnJTT1hhc215SUFuRUFYVXdlSHU3eTdrZ0xZWE1qbFBPUzRYNEltdmRmKzU1MUdES2VUY1JBV2xNcXFvT2hRZk04UUoxcnJrcEFPZ1Z2VlQ2d1hZS3RsREk4MzgwS2o0eW9uMEkwaUFtR0EyZVJyY0hjRklOM0NESlpVcVdLeDAvdUw3dWJGTTNQb0haM3c5MVkwQlp6SnpVSUhWckpXN3VEcTgvTXluTDFOTDJtU0tkeTZjaTQ5OW44Z3c5akFGMGZaaEpVSUg4bkdCVjQxUjdidUlhSS94Z1dFakV0RER1UFF1QU9vSU1YL0w0WklJMFhJVnlyM2pHNlZSRGFkUC80Sk1VM2dEaDRQdVlMZ0VHMUVQYTBrQWFxR2lqaTBaMGRJaFlPSHVCU0xTWDdOcnFmVURaNGJ5Q0FOVktpb2xRWnczN1JaRHYwNjZyR3BOa2RScTloeW8zYWRSQTMweVFBMWdlTGVDK1NJNXJwSWw4ZThNS0F3TUtSbzNrTzNITmhHRUxlRWw4c2dNdWp6QUhLWHl3MHFZWlgvWkZrTjVCcEYweXhWUzl3YmNoYkppVTQ0ZzZla3JhTUtyV2hLa01yWUVWUGYrK3VJLzBaZUluczFidUFCNitLV1hsUVhxZEd4MEQxWUxQb09lbWJTemJzYTFGMllBcktsa2wzMjNRYjVsVlVvSUMyNlF2aHVoQzViWTNOZDh0L1o5UmNELzlSRUJiVG5IUXlkYm5DVlJLcEExaldKS214bkU0UVJXNDl2WXI5WHNQMUQ4Nm0wd3E4Q1grMkdoTzdGOFNSRnV1MTJiQytxNlVsWTFNbWFQSXE4c0NINko4YlpIR2VZV3ZUSDFsSm1kNklkNXdrc1dlSjJzY0NiVERpZnZaV2xTaWcrZmcrdTdBVDd3OWh3WFhDNUt4ZTJQNExadHJZdXBxSjlvQXhuZFVmckROZFNPNzAvV1dKT0NEd3AzR3JtQm81NFBQVGF1U251UTBYY3VMRE90RHNjbjVFSFpVdEk2WjFNVysrY3RGUmNSb0Vla3lSRzh4TVdqaUcxWWx3RGQyTDdNL2RYVHlCYWtHT1ZqeVZZTVJYVy9MMzBVa2EvQlYwRTVkaENIdTdSTndYV0xKZzVJNHpwdGlLSi93b1JHUk1KMVo5OGFLYWp3bHdVZ25kUjd3N1FsaitUZlRzbmRqcHJpamduZ0hvdEk1UVBvY1JMY1pUM2gyQWdiWFdaRktvaHBvRUhmczZ5MVprNnV5RWhFQmpCZDVPeDlKMXdPS0t3MW1WdElzYXNmZCtWNnFXZncvSTllc3lKTk95RTR5d2VSaW5NZngyOXlTZ0FFWmNZbkI4S1ZhNWZjNFpVWFplTVFHZldscEF5eUtXUzg5eEFqbmNaZVkvcm1uaUpzc3grMHZNTFRHVWJwWXNUam1oWU9nZHAxQUwvdHlMQy9CeWhlRmcyVllwdnYwWkdEbnliY1EwOTVGeVJmcGh5M3NHL3kxUHJTRG81Yjd2a29EeVVQWitqTWNURDBIY2N1b0pxRnJ2Y2gyM1pDN0I2UGVFbVdtR1pFSTdMM2tPaTJDcThZejMxREsrRW96MmU2YTN1Nis3R2I5N1pGeVdsT1N0a0hMM0hZdHJBZG9tYnNaczA1dDRNS0J3T0VvbnV6M3Q0ZHZVMXpCY283UExlcElxSFdBc1B6ZnpML0hKaUY0bmI1Zzh6TXpZYlJNZE91WlN5L2ZzSnpZU2tuK3ptRk5EWGozdzcrWUJEaU84czE0eUR3cHZnNVdYY2FadFFKYmxwTWZPS2hhZEV6eTJtdmR5TkRQT1g2dEVuL3lxKzhnSUJQeVZ1d2xXZXI3aUpzN3d1alB1b1ZPQ1l2aSszNUtlVnpHRll5Uk45WFp0T3JlMVkrUGd4Zk5uUzhEZUZCY2Y1U3JJU1pDampWd2RaYzIvdXJvQkNLVzR6NldUMmthQW12TnpzWEF2Ry84VzhGd3djN09ZUlY5UXBXUS9wR3Nyd25jRVpZak14TEQ1ejV2cjBtTkpqbnl3TmtSbGMwVEdPN0dVM2wvMDlleGU2WFBGa0dQd28zYk84bmNLQ2k5a3dTUGs0S3Jua1NGNDQ4YmlSRlJDTjM1L1I2cEYyREtmZWYrUXo5NTYvcWpNUDFUa3RaMUw5VEFYU21IeGZ2YjYrak9XTk9IOVNmM3NVQTFmbTFVZGcya041d0tRNHpoUEY5ZjVMWTJ3MGhkcWtQekhzMDVKaVc2cmJqcHFhb1RGQnEzdm95MXQwVXIvYUIrNWVWUUdsUXhMMkkzQ09pNmRObklkTzNiQm10QWM2NDNqOG9idzhjaTA0MVJZSHlNSGhCY21SNnhWRk9NTGxUZ0g1QjBrUkpDRkoxWG90L3pnOURGUkY5VWdranptelY0bis5OFJNL0hLTXJXcUZxc21uUGl6WUt5VWtlR2hYQVpzSWFCQktMQWFqZjFubTZBZUIrdFhZK1FIdC9qK3VnSFd2cGg5cnQ0SDlDd3BuTVNSSUY1ZGUweWU4VnYrZDJFS0xDc002TXp5ZDVqdDhJWTEvSSt1Q29tN2lWSHZNK2YxZWZ6UDlSZEhtdXJaMkhwZG9nYnhnZjVpT2oyRkRVa2RBbmJkTFhvNnlEVm1LWDRoM0VFR2l6VmI4M2hib05DTGloV2d3NzRTSkNibXRUL1JuL001dXVSU2xielF5Q0dsMkhaMjVudVUyY1g2NVNuTVBua3dlVFNiWGVQSkh6RXlMYlQ4SStxYk5XdjVYQzJmYXJlaDIvTlUvUC9hTExUTUJ0c3NCYkJzbnZLOG5tUDR2SXN1WnhqaHpCZmpQYUw2UnBlSjByWGtNRENBNFl4ZXBOd2NOWVlUY2FrNmpGNUM1TFZ5Yi91cnJVOTBRL3dNY0VvSU5FdG5RUjM1UHIrOE1EdGtDK2ZPUXFybFh4NUd1dnR4amQwa0pVa0xMc1pVMlNna2FkaTUzclRkR0tvSVU0UnpWemMwWE5yZG9nYnhGQXNoNHRRTlRqNG9NelltejlyclpkMTRlZlBsd1FMeU1peFpuZXlxcFYzdFZGa1lYUkMwY2hOZThNQ05IdC9lVVBRRXloY1dMRWFxcVZyWDkvRmtZZTlVb1pjMG5hM0dIZUU1ZnJKMnl4QTM4RndoMkdUWXgzTG93UHFEQjd6dnRQZnZUTktBZlVOMXMrelJmRFJZbFlUV1V5Rks2U1BlelJWTlFUdmVkUmphZ0ZQRGdZS25JU1ZZbmtkZXUxRVVicGJKaHBaY3k5dnh3elVZaUg0V2NUVFFKR0YwZ0FadGh2UGw1dDNqUjdCYkVPd1czcFlveUlxcU90WFhTZ0ZEa2JlMHRLN0dKM3Nqem93cnltaFljVXp3aG05aHkyZ2lSeFkzRzBpZGFKc1pkRXRVNkFRVE95M1RSWVBBeDdtV0xhajlENGxWSER5bWUxRFQzZkpLUWxuLzVGMWxLSlZvTWhFbjFySGJuZnN1ajZOYXNvUXdkcVBMTUlPb2plY0hwQllPc2wzcDBtbjIvVmoxMWdMeTF0R1YzNzMzV2lNVjgwY0V0cngvMnMvVmVXbFAvMVZuU0lXZjg3L3grbE14N2V5ZUlQdDRhN1o2aHJGMVVKZXVieC9EYUh5Ym9EeThmVlJjbUFlZXhSd0VOQUtpU3Jhc0l5MXc2cGFOblRDWTdINHVGcXNPRDdVM0tiMDViSHBvZDQwVnVrTVhybzhTY2VvWFpielBGZkZTTzNaOUd4clZTWitHaW1UVUZvemZjWWlESGdxeW1rL2c5bkhKZ1hBWlNMc3M0a1RtZVJHYW9YY2g0eVlnbzJqUzQrc3JZLzZuTG1zT1BSa1lIc2RyYkllWHc3dzBpclNzM1VKNzh2d3pUVklXV2tTcVREQUpDVEp5bUt4QmdOTGI3NG1iU3ducXhSaXhJUEtUYkY3S284U3RIZVZyNkxsVVh5WjhpSVE1RWlRc284cVkrSlFlNXpGWVNtOGx5UnVFMUh6aWhvRGZhOHVqeC9ud28vRFplZjZKaXRIcERjSVB0MjdvNkdoUDBKcncvRG01Q1JyNU8wc09SWFBOOFJxTitlMmoyMU1HMU55Vjl0aVRKenVlelUxakw5NmE4NURwd093Z3Vqd3c1Q2hsdWhTZG9qaTJKY2d5UnpGUFR1QlhPSDdib2NwMlRha1lsMEhwa0lTWGxiUU1Td25taXIySTNvZ3hvRjdsQzlnUDJRY1EvbzQzZDRSc3NtRUsxL1NvTk5WRStkd3NLRGw2Z21yUmFYa3VZbHNINHl6QWJEYWFBM0J0OHk3M1RPNXpHYVY2NEJDZHQydUtWbEE4ZHVLUWQweHFtOVFxazN3TU51QndZVy9HTUhUVlA0eit0VForZXFCQUxjK2VLSUc5cFpZamVub2pYUXNsM096SDVPVnBtVktyMXBBOFMzZ0ZlbElISnRYcnl0Ly9vdDBqSXAyWmd4bE10WENnTTVaeGhJdjlFb2dRRXBSWEJaZnlkWXdaUEhEYWR6THJ6WlBQbHl3ZTVudHMwTklLQ0Nxd3lUYmFUaWxUNUw4enByYWJBRG8vZHNxVTVldDNKMy9kRkVWTzRtNkFJRk41VzZWQjc1dW5jcml2SWVIMHhsbkVKNXEra2h1WkVxVHhmRTJxblA0STJEL3c3bFZkM0tmMERha0hTL2dqa3hoWXlaTm5VaW5va2F4dkdjTG9Ud2RJOXk0cjB0VlJOMDNNNkJmMWxGWFZRNEozT21XQ2hZa0x4RllHUFBzTk94NHhWOUV6Y1p2a1hGWTNvUW41SGI5SW9vZHltRXArTUF0VXdwL1NDdmxMczVlZEJMdlRUKzJ4TjBScXlMdmVQVGJuSkJ1bGtuZC9JWjRyU3l1WWdiZzdRa09xZUwxWURQNTlvSkJzMEFENVRLR05WTDY0QkpGREFWdldiWG9oZnVtUnFLdzYvZ0RwY3hKU2NweVQxVUxOdmhFdHZldkFiaEtlcER3cnBJT0szT283dlBzUlpXdmlBYWk3cS80c1V5TUtJMWV5TGxzL0lUU2xDL0NKeXQwOW93U2NvK1pGeEtLRU8vOHQ3NnI2RkFuU3k2YXd5NldVTGlUM2EzT09LaUMzUGRNWG1vOU4zek1Kd3dsbVpCZFovYUE0WjNDU3F1ZmN6VitXdnowNmtvZ0JDVkpVd3Ivakk3NGtUSzRNNnJnWFJBdEdmS0JFdkNhc1cxVFh2UUlmcm1jOUZvRlhpVDVpdnJ4R0tQV08zc2IxYWNaa3RFUlJOZ280UkZTTERvSWdnTFAvcHlBLzJCdHBYQm4zMG9lU3JSUGZrSFI4VG9vcUlxM1dFaUx0UmpSY1VkemhMQjhBVWRxbmJ1NW1YcTRhcm0xd0krZGxoWGRUVWNDUkNFUTNMcFI0ajR3QlJDTUxjUTNkaTJCZVBuU1VEbllFbzVtMkI5aGQ5VkFYbmNvb201V0t2cWg3VVE0b1hwdXpIeXk4S3RRRGt0OU05T1h6MC8veTFnKzNXM0IxL3ExaWI4c1FhVE5KVThidERSb1puSEUrSmVXT0NLVHF0WXRmb2huaUxNOG9qb1pNdWYrUTdCN1psWTBsTlo3ditmRlgwRHdoakE4V0R4eUJKeTlWUFpMQmw2UmxIK0dSNld5NHhGMit2T1RDVEZjbGlWR3o5SDZ6ZnRvc1hKY2p6ZHdDeWErVHA3QmxpeDhnQUxRUXdSdjVLMjFTWjhVM2NFT2tGbVVUUzh0cTg2TXZKL3N1aEdncUlIVTlrN0Y3SGJxRjdYaXpwMyt3clQ2b1lIdFk5WklPWG0wWW1UNVcyZFFwUzdVdDJUN3JONVgrZW9RcENMOXNObDNjY0FoQ3I2V0MrMXBMaU1CZU5qK2I0anpqOStqdVFHR0RSY1NWVW15SVUweW9GZy9xdXVicXZqY2VMcktVRmIvNCtDWnZRM2NQNnBBM1I2cThNMDFNaVBoUkhHZDA1bkhQTTdYMFJROVVjMUV1eTB5bTZzYW5KandJeEFieXNNdnlnMVRQNGZYcnlnYm5rZ1o5UDRKTHNZYzNqdk5Da1ZFWkxCOHd6STY4dnZBcGcxTmhOTXo4amZVZmhEYXlnUEROdzQ5SThDdzNBZmNUYkhNMVlFL1llZTBCTHRDNzRPbDZkVzkwOEI2WVdLcy9rQUswN1VMMWtiNUdLVFlZTnJKYmFNZGhWQXZKOHFmYkF4UXFMYnZDRTZFTzZHSmtNNENqZCtOSnhpY2lpK2F5SjAzL0pJMHJvbDgvdXN0RjYrRXNYVjlZdnRNRGNjNGlZZlJlL2pKbUJIZVRkcUpoVENYWmRXdGh6REN4YTBDU0Qvd2tITG5UZ01VVGtzVjlKc2k0aFVOZU8zY2YyM2JzRDNhcUhwWU9Na05FaUVFVTB1bU5maDZRUkVSTWJ1T3BrZE9kR2FwOEtNZHlDM0cxdVBHSTkxVzVxMjJiWnllYkhVVlB2dmRyUFcrclFBbUJ4RmNkblp3QmZ6YXlDSThITjl1Y1hnaEpvMHZzNy90d1U1SEpjMlk1OTlNRnRMdDY0KzUwa0t6RGR2eHFsZStjZ2d5QW5FcUZ3RmNDM3ZCaUFtSkgxR2lUYVBES0o4UWFrWkY3QzNuUE1kajVYQ0ZFbEZVbGhOY2J0Ump2NTZQMEQyQzhHTy9ySDUvV0tLSWJvcWpRMjFPWk5Ham1WRFlFQk02T2I3MHdBWWZxbkZ5TUg4WVRIQjFVZHlyU0g3NVdVbjVHT0NkQk5LS0hXTEpiaEZSWk93UDV5cUpaQ3dYVlA1VnFCVFFmaGZCQ1NZbDFIdHRPWTFpOTlOcDdsY2dUVGxiVVEvWWxMak5DZ0lQYXQyZjc1RWxmT0NndnF4cUZPbHYrd3pNbll0Z1FaYk8xK0FucnVKaDhHR0ZmbmRyNHVPdFkxc2JuU2d4cFNYbExVLzdiZDloV3BNcUVMZmNmQm9BYUZTZHc5dzZzTThpN0NDREpaWU1SOEFlb1lqT1RKcTNoK2x6REtlUHpXeU1TWHc5NmZKelBYUXFwcHNEck40WjNCbzBuancrYUE1YUVGajVuMExURnpVUzBwTzNPRXZjTGdyMVlDRnN3VmE1d1ZWNUZXa1lqb0RkNlphTjJsaG9zZC91MjdmcGZkeUd6cDYrUElxZ1hxcXFRbzV6NG92RldzbXYyNDlwQjRLUkppdXRRTmlVV2xFM2ZtdHNTNVJjZWxoYkx0VHdLNmZUMVZNenIzK0tzMUVVM2NWQ0JwWnhmRk16R1RRWWIzM0dpNVU1S0ZXR09xa0JjMWZ4RlBQa3JOTGU0RWEyckxuamhaZkcrZ1IwZWk5OTh1aDVkbWRxbCttNnJqdWZBM05ZMDZrcFRDTEw5NFIvMUF6SWt5dzhjcVpQL0hQaXZ6a01kT0JlZEpxeDNzbjNIWENuY2hCSGxLYXEyMFZVcGJDQmNUYm41c05XSmtMeDdKbmQ5L1FHalZkbkFicW4zOTBvZ1BOb21tRFlNVkEyUmhaZ3pEYXg2YmFMNDNGZjZLTnF1amRKcWZiSjJBcHVvUkwyOUs0bXZ6UFpDK2Mzeit2Szd6enRHdE0xVlRaQXZUUVZMbkJlcVczcnZDWEZjT214cE1sa0c3cWpXVndWMUNhZ2FveEhZL3k1T1JRWWhyK2lHRUJtNmsyQ0xHbGxCL3Q0eXB3U1luaWh5cFhwTzVoKzVSa1B5TWlSQ2YrK2NCZmwreHpuRzJWdVR6akRwVUl5WWN4NGNQazZDZ0hzbWlCT0ptM0JFUUE4WEdPTWdOSk1lRGw2aVdkZ20zRHYzWEtidlQydVhhNG5jYmE5UTdndTRGaERpaDJvV2w0UkFwOHQza2syc2FsVE4wOWY2cmg3YXdHR2gxV2lPQmttUURFNVl6RkdTZUZyVlBGakZ2WnMrNStqcVBQNStFa1drNWVmUEpmemdrU21nYzhjOStkYlpjd0JJQ3VrTCtnRXFRNnhFWjFscmFoZWltRGJZQ1Z5ZnVua2wwWkF0NDNMNXVvNDNySEFORC9QOC8wY3RpRGZ5aW5YVStUY3lmRmlnZnRVQ1VxWUFGU0RxMDZ1OE1raHlRR1RYRDJwdGtyOWUvMFJ6NDloOXcvb1EyQVRGM3JQNTdFQlFxTzdubHpURlBVcE4wb09YaGUzc295SFJ2YWg1RDY3b1d6Tm44RmtGU3N4R05xRXZyNzYvaTh3b21mWGhzN2pPOVc4WlIvYVZEUjMzRm5xRmJVZzhaOWM2VlhXZC9naGo4ZkxCTW92SU5iZVkvVDVPRnJ4WUJMQmhndlFDOEErMlhyTXM0VnpyTVlYOHovMElNbkdQUE05aTNYdDlURk40a2RVT2hqNzF4RTNQQXdlRnRIZy9neE1ROGlOOURob200b3p2c3dtOTdzOTJLTmE5bXp5WUdiMnlHUVJsNm5JbTE5a1BXUFNzVXJlTndvMnFwM3VIeWRwY1NNOVN2d2pGTzh2MktWYUVpUkNhazA4YjlqdUFzY2pIYXo5OXNaZWttOTdzSHJ0NFlJVy8xYnlhdkltSXhnbVpocGZsRDlWRld1Z0JxNlpaeHp1VXMrRGJVTGJuekVPNlRPcHpVbXFIcE5BVDVqendGUWgxdkMydDYyb29LUGJER3pqTnF1Q05tL3c4MURyb0hXKzdNMlhFOGJnRzdEV2lFKzBjZlM3L2VPQUVCOFZBalpodHZrQlJHRzVBTlhSQ2tOaS9zYkFEZUV1ZnYxNFFlODFUVEVWc3FQK25kc1lMc0FURnRxNEVDTFI0cGFYZzFSQy9lNWRoSmxJc254YWp6anB6U1NidSt0VWs4d1Y1cXdCcHRDSzMxQTFpRWpTK01DREVxNU92NlNlZVR4eDg5eDQ4RDljWC9DTXhZVzJVTSt0Sk5ISVZjN21SRjBtYUZyMmRYSzRuc2Zsc2xkM05mZTFOQS9hSkc2ekRQa0NTcXFMQStTR1pKd05VNGtDSkc4R3o0aEUvUHA3YXFaNHpBanpDSFZpdG9uMHFSTVdaK0F3Y2FLMGg0ZUp6bWhzVzY0akdXZlJDUldjRmVFY1ZLT1VlcXpWbUIrOUpJRHpzVTJ6SnVSOEVaQmxtaHZQQVFZZlMzS0wzYm80MEJCT0d0ZVdXVFJkamdVTXFaUWxqZkwwNWdqdnliQWhFYUNabTFKVnFZdE1oTEpNRU5UT3hpdVp4Sm0ydGhENWY4ZVdMSERjK1lmVWxLNy8vTmpDSWNvd3RJSmNtTnNEeDFSSXd2L25FaG5pb05SaXNmRVlOYWtWanM4WmE5b2k5V1oyVjU4MjJSMEhYeVpxWTJUT2k5LzFwa2kxcm1iMVNZVUdNeXNJajJsOExLNVFqa09sNS9HYUhQSERGdXdDRVVrUENxR0RJTHAwb1gxUVF0Sys4UEt0QzU3MXFwNGxhWnpHQlRyekdmL04wTnllRFYxY0lxeTNPaUFQOUxib0hBWXYwd1UrZTNFZVRDL3d3SVZmRnprSkVib2xlcXlJSjltcnlxTnkxQ0p1ZHdQcVdMRms4WTFaY1g2cmR4RHhNQ2tEYjVPQVdvWmVDS0ZZN2xPdXRBc2QzTGMwUWlsMVZYQWc3RGJKZEtBN21DYlJxSWlDcGVDa04zM3NDYXl1eXdRbmZHcHJTcDJxTWFscVo2Q0dURFdwZmNUZk5nWGRMRHFVSG9iNHhJaEo1YWxEODhPQVVQWGh1eFkwYjRkRnJ5c0FjWVkzWmIzVVZJd0hXRUFKVTdIcGR4S2tiMURHUThSVmJXeGNZTEpTU0JZMG9VS0lOWjcrbXpETExZZXVlUWNPRXU3KzNYVjZic2QzZVhYdDFOU2UyaWZMVnJCMXJkU28xV2dFTTFmcGZ5ZVU3bXJFbENwdFNFY0cya0dkb09LYUkrQWV1NjM5WnJxSGFEWUpNWlJsQk9ibWJMVHlMei80QmlsYnFha3ZiOEVKSTZ6SzBSaFh0U1gvNkJiUDRmUFg1cmJnMUo3eTJQcnNvNmx5eEVQL2wzbm1MVlkwczVUN2xaWEZQY01sR2loWGtuYXlmSHFtVGZTc0RiY2FETUNvMWdyenRZcXJuNHBNRVNOaEVSbGpWaC9zVStwTldwLzVTbTlxdWhubzN5TnE2cFF4ZUdtVDFTSXpyU3B0QmdlMmhKV2pVTkhQVEdoZm9mbkxlODdIckU3cG10UmRpUUdlaWJOSkJtbmFVSnM1WVlxWGtCeTRoTjB1Qko4Z2VWRUFQbVpEV2k1Y3ZzbVlFeTBFOEV1MDlTeHpucXo2OWh4dWhHYTlwTDA1ZHk0SzN0UmxpK1BPZ0xxaktqY1BFYksrcitGckFyQXU4b3MyeUpGTGgvdW9XcHB4YzJTVXJMZmJvZ0JxUFJVSU9ZVW1HS1hSWVdTcWN6N3ZYak9sWXNydllLR011OTBEeXNCeWZLYkk2eFNzMnEvOHRBUWFZMXBNRXdBSkRxTTVud0VaLzl6UksrbTU0dWZZZExmZWRlNXFOZG9lZ3Q4TVo0ZC8yd1ozcWJuSXNNNEhwTFVReThibXZvbW9xaHg0TGtEdjVJVk40THlkYnNUZjc2cmtvY0IzUkkxeEh2UFk2RUxvckRFVWtJRkM0MHNuM1BMYy80VGw1WWJxcDFrRUtGMkRNRDdkc1FtMHdUZStabmpMWkVVM3JlekdJVTMzZlpuNDZLclViYlUrWkhOWHJILzZZbklBUSt2RjhWQ29MY2pmdy9TNHhWTkgyaUhjamRjSFRZS0p6ZlQzY3ZOVmkyMUhTY3k1M3lObzNndXJDMVpCUEdldDgrSHRUeDlkYlVqWU5pdS9POSsvY04rOTh2Zm00eTF2bThaVXo5YVUwa09jTEFvcU56RzRaTEk1c1YzU3NOWTdvdEpkVjlpN09KMnVFazgxdERRVjBjWmwzdXlmbVFqU1J4aTBDUFkwQk50ZENrek1BNDYycnF4di8xQVZ2NWxYS2xNWkFQMEwzekNuT1RwVXBid3kyclVxdWVEb3UzNFBZMGFkWE5oU2xrWXo1SG8xVjltc3M5enlHRThMSE1PMFNIeFMxbENuY0NDeGdZWEgvK0VGZkNYQ3dEYXVhaTlHWVZBcVpZd0crTFVtS2plVHErZGtvZVFXV25DcmlSWFRwMVQyYXY2alZ6QTNsWVI0Snlod1dEcGVRSTB2Rk13QXFvT3o0UUtqdEt1ZkhwUWIyMWFacWRrVTNHNVNUSUJHZmV6UWVtWDBCc1IvZU8wN0hjUzZOanZPTVVrZ095RnRzUkl5NEVudGVUYVM1dE1waVc0VzlvM3NMTzVDeTJESlk5bFB2YnU0MHdrdTBnUzVFTWRMc3ZPNUhxUlFoMHdKdnVWempQVHFTcVR0eUU3cFVKS1g1OGZ5eURNL1R1MFBkUWh2WkV4TGNwRzJ5MVdNVlRlTTc3eEowdHZtOG5jT1lBdHp6cjNmNXJSTW9mWXhhVTdRTHVFTlluNHhYYWVZdU9uYk9IMXZLd1dhUmRMRVlSTmQ1K0xWeERwMkFLNzB1MTNmZHNCMGoyZjl6cmhiZFlhWDZsZFFaMFBpWGdnbkpvUERLdkJXdVNyK3M2ZFRFS2hrcTRvQ0UwWno1VGxDVGtpbk9MVHVXdWNaVjUzczZGYkNtVXp1cDBmaUpHNUtXMHRFQTZyUWxWTExPS3VGOEpqMVdRZUk2QVhDVXprRzdkWjZFdEhQNVFoOWVac0tGWTBkQVFibFV1TjhuM1BQMmMybU9iZkJkNUJrVmFHS0ZGSUdUZC9DcDhwS0IvY1c2UUZtcFpvMGxiMStha0k5T2g1TWpQTmhORzV2OTdBV21QdHFscVdqTzJlN2NZdHZNWktMcEcrVWQ0Z3VyTUtHY1hRaE8vSjBaWkV1ditESEtnR2x1RFBEa2xxK2M0RnZsNExkWE1UY3R5Z2RzY0RpVDk2MjRkbXYyUGZsaUN4T1RMSlViUGNoYlJVUll6VVJQU01COUJsdHFKbk9WQUI1V25SZDN0UjJ6elArc1RLT1Q0azRPR2xMYmVCTmkrVWlBenBKaE9TV3kyZWxBOHM2emtvSDFMbVlwVytucGt4OGtIZXBmOWsxZXZTbkZoM0FEYmJRblhsUGlJNndnaHdXWDF3bkt2cG5saGxwN2xkYzlxTEQzRUlFUlQzQy9zZ01zdVpWMGRNdHVOUVVuQVlHZ09CbCtxQ2tScWhhckx3V0VTSjgxd0RMMnpCSzVLTGloelVOY1h3MGVZVzBVZkx4RmtzNmU5am94NmZwODFnWlNETHU3NThIdEpVYy9QaHZCVjhuNjFSWHpzNnNDT2RMSEFoSjBaQkd6OW1iM2RxSVVnN2RaUVllUlRNZ0UrNUw2ZE5WNkhzTzQ3dmc4eWdYUEN4TDNHVlNJRGdjdEs0bnk2VlYzZ0JaNGF2OVJheEVFdEVqcXFveU9zVXpieGxpRWFFeU8vSFpEcGE0c2xmMjh0a1NpSXFwbHdCUEltcEY5dThxUWtpY1VsdHZEbFdBaGg1SkZ6bVdscWVKdmRqRW95V3NINGdyNXFaL2FXb3ZRWHJNZ2ZNTm1DNlZkSURTUlhZNGJVY0dGSmZHMXNLVEhuTGJKMWxvWHZTWDJ1VUU0bEVma2JGR1hyVlRqelpqS3JnUlBKOEJKTGpDc1ZhVEpVUXZOaHhlL1d4aXR0Q0JVYlh3WXFTRDdsa1RzVVNBZy9ZcTNBSkRsaFM0Yi9KMTN5VUhxQzNYMmtPQ2JPY1Z5dFJpVyt0STUwc2xJdmlpNFVCQnNhN3A4d3pTbnA3bnpDZmwrRW5DMWJQMjFVKzFwL053VG1qb2hVSnpKTVZUQmtITC9uTmtITFQ4dTY1QzBtakNVNC9CNXV0ZjdpcFNvc3pnMkxBOGhaYmlrSnRmTGhCK2hrZ0U1dDJpRmZ5OVYzekZhdmxRNDhuYkFpZFRmKzZUUzBScWhUY3BiZXR6MFBwSFUzbUxlQjU3ZDZYUXZHdi9MS3VDOWkxUTB6MUN5cmUvSkxRa1dsNWFEaHNxTTV4YmlUd1puZlNYWWFWa2lMck4xOGZmejdVUzYvNHJaN2hST1ByS2ViMXRaUHZ4T21TL2VRVjcxamFJT0tFWW5SZTNWQzd0OWd5YmhDUFp3T2NSQUl4dGZJL2dldm9jWVZwK25sMU53Zmx3c3BheHZhYS9pVlZwbkUxWHFTSkg5RVpwVUdhTE1SZzU5aFF5bUVZL3QwN01PRkhEREJkVzE0RTVqQ2w0YjZLUm5IRkg0NWtpK2JHd2xFQWtuN3hmTVBzVG1VM1h0NXNnaUYvaWZtSFhCQTFxZjFiVFBWS0pCOUltM2YyM3dEUERkT3lxR1B0Nk5wOFhiOEhxaDVZL0tudjBxQko3YmM1UzJLVm1uc2M5dzBOV2tmanVOTkZIUks5QmlEVkE0OXRtZVdXWW5uN3RYMWhhMHFQKyt2bVNsaDZCeFFHK0tJSFl6RmttRUdoanB1OWJuUnluKzJHOVVGdDVuOGpWTGF5b09XUXpaQ2QxamJmaG03b054a01oa3ZZclZzSldiRmJ4bGM2MlFseXlaM25iV3AxRTBMNUlIMFBMcUYySEtKUjNoMnp2dkhYZUhpNlFDb2lyNlZoVWc3Q1BHQVpsREduaURWQmNBS0ZqUDBxV3BtQW9lKys0ZEplbnpPMVpuL3dFRjZHeTh5TDk1dzJLdkQzV3NvYUd3WDhDajRkWHI5S0E2cjI4MFBXYjNsa2xPZTRneWxISWJhMWdVK0ZWVmU2UFBCLzZMOVNpTDRSZktzSGJmRWZ5NzlEZWQwNFAwdEcxTGhQaWE5alBGUFFLbmhiVUIwRzVYMkZkYVZLTXlaa3BYbGR5MjR3c0hiUVppd2R1aWFvZ1BocmhGSzY0TUxvY01JZkxvQWlORTFRM3NDMHhTWlV2cjdIMmd2QVZUQmdiWHpVMnVrMjc5ZnM3OFh6Snd1UzErazZRRUtQcGpEdTFPSGd1cTdLS0lXNWZYZnpWTnd6dFIvZzVXZ1BsMWF0MlJDb1NNSW1weGJQN0ROSHEyVmdpZnNqTVMvcmdXdkVhbDk1SzJ2Zmdlc0VwU1VkU0sxNTFEbG4vbUt1aXZDdVFRYjZJNm40allrZUpYTjNMQVU4UnNaVXBmZytBeWp0V05GMVdYemJ3NVpVZmpJS2Y3cjZvbHRlN3Q1NXZiQTZXZmNucHozN2ZKRFlrQ1F5dXhiTDFhdnZXZVNZbitSWVY3ek5HNktkWWtXWUNzNjdNMGlqZVljWjcrdjE1NFFmK0FaWndyUTU0Y0I1RkNOekZYUTJCb1pkTCszZGp2Nm1uM2dxZmp4V1BjWVh3MTdCYjhuTExhSGNvRmREOE0xaW5DL041eEVCeVZzQXgyVmwydHlubmh0ODRvVUdqTkJpb3ZnelhnTUF3MGthY3l5dXZuMU5taEIwZTJpVEc3c0ExNUt1dnBvdHVJWHJwMTd0RXpxTDZ3Wlc3ZjhrNDNvRDBhWlVqaTZYR05sZWZCUlJ5RmxZNEpqdTdzYjRzbHhDUWxsa2ZnN24zcWltWEExMzk1R3pvUmdpQkIxSTJVNUFTZGs5V1A5WU1yZVM5U0NwbUFNSFFrNVg1TWxhcGhlN0w2aS95TWtxRmo4SGFOU1NsczlRR0dSd0E2bnUvNUpKSkhkZlNQYmkzcnJwRFlxV0xTYXNTKzRWWU5LTHAxQTdKNTRBbjVsMkxPUWJYM3NNU1lDOXFqUUxLcCsvcThBYUVneTRCcCtETG8rTVkyenlSYnNoY3BHckVHOGcrYm80THhKbXY0SitNaVp4MTNmMDFaN2ZTcGJhRUxpY1B6ajRMMjVNZXJ0aWRsZkRXb0tOZXFXNStrSUZhYUZKNUFoMGNicVJVM1dWb09hdS9qVkhXcG9IeFpHUjF5T09kL3UrSFFpb2ZJclR2aysvM2hROXRYemdLYkV4c0NpQk1ibzNRb2NGVnFLSzNlZmdhZmVqVnI3Tjd4OEFlelNNa1Y4QmxEVzhiRVVPR1hkdG52TWlraGZSQmNCVUdBbEZUcHBnY05kakE4MzVrVlRBb1RCbFBRblJpcnIzaGx4RU4yU1RaZGJPNGhEWEkrSHNaUi9LMXVUUjNGRmdDY1E0UHZ4Qk1MN1BiMVRRTXc3aXpzUSsrK3dQbGoxOGFybXN0ZldlcFMrb0JFWWJKdUlwQWpIazdmeFA5UnRUZXB3Mzh3bmtMTVg1RkovVlBXb1NhcFB1cTd0Qm9FelQxMEZtS3R5bzhDWWxzUXFGcEZia1o5bTZpUnJTMHVTTHVIZUdJWUlGUkwveUtWYzI1WG5OWS9YalYwWktsS1RES2N4VXhUSUZCRWVjRWRNbXJCVzF1eDBBNkZvTWxRM2dxZUtzYUZ6Yzg3V2pYZ0pORWN0YXB0T0NnZmx1aHdZc3cyK1QrOHdtYzhkU2lCMVhFYno5a0d1eEtKVXczT2hqUHFkbnRyNHFMMXZiV29MMUFseTBWRE1MckY3R0l3WStBa3BoeThIZXYySnNBQzU4VGlkWFBrcmdIOHQrekJ5M2QweG5LMEFwcG1ONE02dUVEQXJuQVJ2NTJacURuOXdYN0ZPbk1DSE81TG9NaTNVWEZJdWtRd1lzVEZ3VWs1WmFxTkJSU2pUNnBXV3g5MFI3MEtlN0xCemR6bU90OXdCOEt0bXd1QXJ5RG42bDhEOXZnUlJPa2RkQTVRbEJKZ2tVMmhybHpTQkQrL1lLeVJHLzdrUWxZQWJTYVRjUEhVaWpJZDFiWlR2MzAxVklzanVHQ0pMdEs3LzZETnJNNnFDSTRuZWhIcjFWWjJyUzUzbGpLbW5TNW1CN01QT3VCWWlTRkRTTWhJOXlyNmJ1VWJnMlNsU3NBdUgvQytGckVXMkpWZWhkTmdpa2REUGRUSGlHaE9CQlIrMUZRamsramRqMlJ6Z0VyRG9xZG42eTgxdE5FWGhxclRnaHJYT01lTk43NGdjd3pJd21vVVM5MnJTNFVZZis2ekt6VG83QnhITDJJTE1ISG42b05ndjc1bjgwMnBsWkVYRVVaS2twbVNHQUNuTHJZZHVYUWdoVklZZjJtMjNpTEFJcWV4VlU3cmxIY1NXMXZjdFNCYmJFUG5LQXdSODlFMzhoZnFvZU1ISUY3R2tSM0RadzVqcXdrdWM1bk02bkwycUYzSnRBb3Z1MkJ3NkpjOE1LVzJzNDU2cVpoNldrckNZK1ZSbjA0cWZUZm1nUXJKaElrWHBlSEVybHVjeUxXYXk5R2R6VHAyUCt3RU5Ec2NwcnhkK1ZUdXVCOTJBVmozZ2FhRGJpbzd2eVN0ODNiSzl5bWpHZit6YW9oYTg4V3EwM2owbnV0dkNEZWNlOXNMem1DZm9Pa0ZYMFQ4Ryt5Z3hUWjNsNnNZQWRFeDdRK2lUVHZwOFNDVUk1Y285b1VITW0rUmFPSWM3eEgyRHhobmFaR2IxR0VsaldncG5ob0dYN0E4VWZETjFRak9PUW5ZbzkyS09qUTh2cUNJTFBOaDFYenhTeVM4TWZoN01Da2U0YktJTWNYelhieEV2OWk4dnFlK1RFRkUzZE1tNWdpcW5yZXBHbTRKQ0tFdStsVEJaMXBlbkd4Sm5UYVRvT2hCMnpxb3hKMFA0Z2hIaXYvSW9HK1MyZkhhM2EzYmNNK1kxSEkrSVB2WUliaVRYR2w1K1hURHhRZ0VCWHZ5KzJ3ZHI5S3lJVVN1dk0vNkpHVlh3ektMSXVNZGNaWk54K1NXa2tuVEZNbnV5TzFkbTZGR3VCbjlRa2N6eDB5SmZWTHUyMHlPcERNc09yaDg2d2ZGa0djKzg4MXI0UUloZEFtbTNDUUE3Y2U5NnlLQ0FEcUExRHd4OFR1Q3BraVpyaFJjcnkrUmJkVERZczk1cCtTZ3ZZRTF6Tmh1RXN3aUIyWndPdjJkQ2Rzd01uMWs5MXdhMkc4aFcxcE1RSnFRM1F3RkhObS8wS0ZIeWl1VUJ2NkhqRjFOV0JzU3RkYXk5VTNiaUhxaVo5a1h6aXEzU1pLNSt0NlFWbFVTWVB2Z2tjZkJ2bklzUHZGMVkzS01QUWQ0ZU03RTVMVWpFQlloc3Bjc3hmMzVJeGI4aEdLYmk0ZDhtZXhkdVQzV0pNSWNmMlY1NlJxRS9sRkxVamEzQk1VNXM4U2k4U0p3VEthK0ZZUE9TeEpEa3FIc2k3eWlPbUk4YzRtdWliY2dndm1JVk5nblNwbHJkUFZ3anAvNjZ2UnliL3BndEEwSnJ1b3NDUWg2M0w1UkNudkFYODBRVlZQMVc2cEtyWVFxVkY5VGxnS253dEdwOUhnYmF5L1FMY1dISWhDNjkrc2tqMmNyODlCRGhMQlo4RGFEblV1WFJlOE9tSlBRdG5RMEtFMXBNKzROQ29DWjl3S2JtWFRNeE00VFU1ZWUrM05lSEVNY3lPZWpLZDN1MENra21RS3VxKzhPdFFhVm1aNkRlTm5QTWRNa1BsZzd2Y203Smo3aXZuRThwNzc5VG5QRGVUZm9NSUpVQUgzTG4vUmFhODY0LzZRbjlXSzIvQUhNc2xTTnBXY2pjWEhBL1k4ckZBb1k3eWlqS0hoSFVldkovL2ZyZTA3SzdHelFBR2RlOWptakd3OFJnZEJJNjU1ZUJZNDl3VDNWY09yTHp1dWhvSGVLdS9kaGlRN3ZNMy9EWVY2ZXRaWTRGRTlYaXY1b3d5bnBoTmNlSTdNeDRDNlJzZjc5aUZBTjZHME9LNHNQQlVQemNPVTNUTXJyanErVWNTZmFrZ2lXZk51OStlSG5IeFp6YTNEaTVMOHdMdjRpQjBYNUY4U25TVGxtc3ZUVzRkQys5SUFvSTVtbERYNW91ZDRmWFlULzlTZ3lNSGUwV2RPSEc3VldBOGx5dEtrVEkvQmx1TTJRRUQybzVyYjRnbnpydzdqS0FDT2pUY01VS2g0Qkk1SUFjUkZsTUdkZ2RrMkpCYmhxNlVYUzJneml6RnNWU2VXS3FQRlZubWtUMXdWd0p3eUplZzRKVkk3eE1NUWhsOENEd0IrRFgzcjg4YU9ROURMTkdORlNDQWxHdFRRQjBoV0tLb3VIaTB2eFZZemV4MlI5ZjE0aGFzZHhTcHkyblhMMU5CNVNaMk8zY0xTTm0zOTdYYmdRU0VyZmkvYkJpeGY4a3QxWWlCNmZIUE1VeEJ5a2o0eG1xSFYvaW92LzRiV0hkUktlU01nODJwRTNGSXZXYU9KbnlETmNJaWtEWnIvbDJvYnJJVzd0U3dUdGtpWWhqNndjMGFuOFVJUEpEWkxmVGVOTkVzOHBLdTgyOE8rV1pjb1pkbGNmNHZsVEtiQTV0Qkk2MXYvZDdLSGwyU0FqWnV3OHc1dElsNjM2S3VKTHMrRWFmNGtoS3hSR2FpZTRaOHpnNFlFRUNpeEN1NGNsc0Zwd2pFMVp1aUhtK2p5dnU3TWJxSmcxQjNhZFFxOEJjQ05IdHhMb05TVWx2SUdaczNjMFBHY3pYZEM5WjZiN1hOaHRyQU9BN2xvNitCdFgxQ1hlNDlEYjlWa295WlRFY09GcHRuZ0lzaEJ1eERncThDVkswb3Zhd1A2WkM1ajJFS2lYd2g1SjkzRkpQamQrT0Izb0p4WExNVVF4MkE1bFlOWEF3WHlzZEFCRkw5SW9Sd1czNU1QUjVDZkt1My9MMHljNFZ5Qm83eUFpQ29CeTJtMVVuenRJdDhPYm5yQWVyenpzcXRlU0Yza0dnamZRMndkQmtURWVLejM1OGR4S0hSY0h1MlVrN3RnN0FoaEJCSDFBZ3NFbk1PTFdxdFB1aGFPcTU0d1hpMnF4RDgxUUdRVEJvWkp0L1IxZWQxRFVmeDRZejZKcmtiKy9FK1JPbXJEbDhhYTMwOUhkaGZKYXdZOG1GRDV0WmlXSHdrRGo0TDFyTHdIZ3dBZG0wT1UxRE9yYjlwK0U0eTBIRVJSSWNxUFpjRGdJcE9yUGlHWkVYSXVLaUJ6Tm1jQnUwRVk5NEh5b1ZWZjdndDV4UlhqV09wVXRFVVE0QnBBM3AwTkxDRnVyM2dIUUJYVGNsZmdLbm9kTlpucGdrbkpyNVpOS1FUakZBMVdEQldMQk1ZaWdENkVuQkxteTgvUitYVWxNbEs0TDdNTm16c2xnVFJDYy9xOGNaMS9BU3BSdVFaK0dOcUNYVUF6YWs4VlhQMTBWaVBRSGQ3blNBOWw0Y2ZYdXVkd2s1MzR6YXRLK25lQTZyWWgyYmlGZjBPelNsS21yYWNJb09WZFNtMUhJUngrN1V4R0xmYWtvMmg1NGNRVDhPRC9kaXhXeXBDa2Noa0gycllSOEJJUDBEMDNYTGo0cGJYeTkxampRY2RIWjlzb3NyOW1CVzRDVitiNkdIaVRaU0p5a2VNU2M4L2o4bEJFWlhsVXNlL2ovQ3psK1YxSU5ybEN3UnZ0K2tPVVlpRmh5UWFkZlVrN3FOUVUyNkVnYkRkK1oxTXI4NnFQT1QvdzRWSmtLNVM5bWRtZXlLRkM0Y2JEN2VRV2sxdHhUT2UzbjVZV0FkU3dKdkxqMW1jWDVWVmkzNk1pTHdrLytvOHRQMk1LQVBrcU56bENWcHM5MXp3UkdCaFlCTm9wR21mbTR0TmdPWllYMEdWdkFwTWx0bitMQzhSV2lvOUoydGhlT2lUN0VTd0d1ZXFjUWxoZ3ZqY3hXK2hoVW9NeGYyWS9BeVpwalV1ZS9lNlFBVjFOMnlCUHlzUHhidUdHQkxib0pwVjZrUzJGa0hwY2JjUVgray9HTnZlNW5HWm9Ld1Y5R0o3UThnai9oaUZpVHprOVpvQUNsOXZnOEZjS1kyZ1M5NWtWcnBmazhsQVBGeG0rcUxEL1NCQlUxMFRJN0RvdFp0bERIU3lNd2tZVUlwMnR3b2R6d25YSHRoMjJKK1dpdk96Vk1QY1FXK09FNTNvV3hqTy9vVFBkTzBmNjl0R1FNcXg5OTFIMkdHQk5ZNmNzT00zdCtDSHIya2VTRkp1dFZlZGgxTDBmeFRYK3N6UW84SjhKTVJSbmhZRWdwV3p5M3FnWGVXaGlFVE9GS1VxM211bnY5QmRMVVNKNCtCRWVGNnFQRWowYkZERk9Zc1BLdjE4dFVaUEpOSmhRdXArSGtZN2p5Z0Q2bFpkU1ptQ0YzZFRMakI1cHEzNVgxb1Q5Mi9QM2kzYm16bHpJMXpaN1NGVXpTME5sSFZzK1hSbTArOEUzcUJGV1dsNU5PTk1NTXpFYkdYSW93LzBhK1pFdWZyeFltOFYvUk5wUWJJWWNMQzhKdTBBZVRRaEZlLzVIRXlVNDJGYXY2VS9STHBDK05ZM1NQdmlFdEVMQkJtNU56VVBZd0x6ZkdxN2ZXaU1Hb0hhQXQ3N1NTdW82dVp2YndtckNZMHpuUEpoWG4vNzNDYkNtendEb3AvSkhFUzhXczFIRnBHMUIyeSt1RkdzTFBsYjJaUDdpcjdjWkp0S2hZaXY3WmRnZ1lLTlVTK0E5cXROL1hna2k1WG55enN4b1NDWEk0UmFlaytzSGhHd090anhJL3BIV0J3Y0pGTXQ2Z3hNVUZWMlhIMWJoTitZTlhScGVHT29oaHZ1QnJVendJdkRZM1ZSQk90OGRRckNlbTYwOWYxSHQ3NGsyNTd5MnhSdmV2aHJNT1Bwc0xRdmlqRlpNYnVob1phTHkzMUM1YU0vSC9oMnRGUjVyeDN2VElDVS9Jd3ZoZHAycEZ0eEVMK1YvR0ZjZm1iZ2kydUNUMGg0QXNZTThvUmlEa1VNalhLVmlOWVNiVU5zK0pjWlpwMWk4NEwyalhuSHlRc0gzOVZSMnRTbXV6Q0VTelpqalBYcEdwSUIrWUs2OC9LSU9HSzlobFk0UnFMWExsUUFMZFVpOWhtSCtkdmFTSHdhNFpybkMyK1AvRTVLcVN5cTJYRWZyNTgvM3RjMjV0eTdyRmhGcmNUbnhMbEhYZW44S2xLSG1sellNbVMwU3BoMHBUU3pNSlhTZ011SzJRaU9uSVVKM0dZWGowMkMxM0h2UDJ1d1pzWTg3cTBxU2R3NHI2ek9QTXN1MTVESVhjNmFUdm9wZjh6REtKd2tNNnAxWk5waWFiUi9HVU5yblpwNjJ2dmxISU9YWDF1YVJLSmpZdmtHOTA4REZteCtrbVdFdkpla0krWWhLSWtFdSt2WXhaeUxuaUg2U2tKUjczM0V2RUZOUWFVNzlDaDJpcGJTKy9TSlMvWGI1cDZ4OGEyTW1uS1J2dEZZb2JDVkNRR0NqdU05clE3STNvNWkxTGY2OUtXcStPa1ZYbGJOM0pXNC9OeWZZMTBmYWlzTlZIckk0VkRtaUZ4eGdSL0ExeE4wU01VNndlOFlQOGVmZlRjS0tmYlpLTGNxNG0xV2ZLNkJHRGNKQlVRYlBTQ1BwM3F0UzNMRmkvbDNyTzhCSnFEQXNSVzNDU2hjY0xzTUhtcEwxaU5PdldTdHBhWUp2N1FkNmVncEIrQmJIc1BwRHNWZ2pZY2c0aElwOE5OOHV4OTZmbW0xL2JUYm9MZUI0bE8zeVRjL2Y4ZTJrTHJDdnRReGpuSGZlK0NxSlJFbjFHL1gxSVJaNm9yRmw3a3EvNlI0dm91SmhzWEk5aFpTVDR1aWtJTHQvQ2Jza2oyZGNVUVVGM2VmUFVpYkM0UWZmK3o3cDhuV0Vyd29ZZ1VsWXlVVGhnWVR6ZmNJUEF1WXViMmJuSDV6UXFHaXBNbmpmZHhld2FJd3NtSWhSQmxrRVZ4dy9rOGRiQzkwdUlDd2RYRlFWcGY1VjljeVpoQlpuSURTd2IyTUxmaEFRSUdkL0pyTVg5MDRQOE54SGpBOXA5dzl1b1ZXMkpiU3pnUndmTFV6SDU4R0I4em01NEpjOG02N0FQSmRZVXYzb1ROU1gyVm1GaFg4WDcvR3hYZjhlMjFzc3Z2YjZnU2oyZW1ITUs1OWZBakhnOTJLNGt5VG1QRVIwVXI2clBaRFZrL1gxa3pEMFFBNENBbjZqUEo2RlNpU3YzdFZEK015cm5zV1NEbFMzR2pwWU5jRWxhTmpuSWdDeDRJZE9aTmZVNFBHQmFGNzdLQS9lb2RybmordFBMSEZlMWNSRjNhZnEwZVRsVkdhYWpSUlFLS0VBNWFMUUR4M3cvZ2RiUkVuYktTc1JkOEtOK21hQVNIa2pKeDVQcitCMmVIcFRBblo3K25Db1hNcUUrZUQ0RktIK1BKd2liaVdYbnp1emt1R3JxaTlvNElhQ3FaR2pDYjhZK0pjREg0NStRM1VNK1NRUlczR3MxK0o2QzhSWmlGNmR4cEkvbXcyTlljdXNkY0hQV3psdTB5cVNLdVpDcmF6aVdnblArdGo5TzRjV2RNM3NQblRodUtwcW5RZE5sTjB6YTFFMGJCRGhoUnJGS1daMzk1RWtYbUhURW1tK3hUV29kdEVwbGRwQ1M2NmtvQjdBOExsUyszK01wNG5SOUpwNG5YVHJrc2xsdlhEUHVXV05OaUFsNVBKeFh0S3I3eTFxdFFKRVliS3hRRWdJaW9rUzhwUWUwM0ViUjNSb290bGI2SDBRTmF2OExWdDQ0RC84Y2FneWhXYUUvb3VLbXkzNmN3emowV2lUSmQ2YTJJZzVWUWFvT1dGZXBUWUJnTWVqYzRqYjR4RHUrVEFSTGFJdDZvK1NSc1o0OGUxY3oxSzdvZDBvejBpSTI5WXgrUCtJaGtXNDlMUTNiYVVxa0pCVlE4aGlsQ0dXeHVGZ3N4citXdW5MYmpXZTRoY1FXRjJSMEMxU1REMGxiMEIvOTFieFdzR1RIaE55VHZrMTl3S095Z01TcEZNQnoxU1FiUEcrYURuclQrbW9qdzc2YVo2V1ROditqaUVzMG1Rb3FSb0xBeHJJRFB1cyt6bGJYQWdSaHhyM09YYldyOUcxbk5kUHZNWjYzUVhRSEdFWnRKazUrQWFPSXVjM1dzb3ZEbEFZZFc0cWcwc3NGSWpvdGU2VUFwWG0weFY3Um1NZG5RZ1lmRU5Rc2kwYmFlZHNwM0QvT1FFeTNyNDRJaWxPaDkvU1N4T1BaTEJxMmI0QzdxV0FpV05ucWx3andTbmJuV0NBcE5zSVRaLzU0UURXcDM1TGZRTmlMb1ZlQlZ2UUszMXd0Z2hhTUN3ekJpNHNKeUhHRWVCVVN1UWFLM0FEbTJPUm1vbzhycUdDSTlINlNMamhjeGJRdERoSUo1d05UTTRYdE5TYUs5UVdHSmxTcEthSCtDWXh5STFjSUI4QUEzL05xenZzTWtpMFdvOWJ2MzNrT0pRQjdEeDFUNUNIYThtK1RqN2lYdFRXT01Ib3RIKzd1OUxReWlHdlVCZnJtMUs2UENPUXdmaEYxeklGWTBJQ1dPdXlRaEdsTStaMWIvR0lRNlliMm9ITk5VTVUrU2FESTExc3JXVlcrZGYxM3h5OUQybSt3cWsyUmcwWGt5U09TdFQxNkZQODRNblRsN2lkVVErVkFaMVNEZXRndXVQRmQwcnVxUkgwNjR1a1I2d05ZRFN1OWhWVW5UUkFBV29mZVlzdk1pQXZZOS8zZ0k1OTc1M2kvTXptOTh1NGlVYU93ZVFoQkt3QmdzbVhKU2hqcG5rVmFJY2I5ZkF4Mmc5TjUzSExkYWdVdmlMSFpwOXB1VUs2K0JFdEVkczVIcmRrTzNOdk1oM01DVHNTSEVtbmY2dlp4TkV5NkFQb05rbU8zWlozeHcwYzdHaHZERkI1Q3RkSzNNNmg2UHRHRVRlMktMQ3RyMHFMUXVwQVRUL3pjNGswMElQYWtWVmxsN0F3WGU0WmJSc09yMUp4Z1ZmS0RzdWtMNW4zd2VSM2lrN2tkMkErZEFGMVB4NGtTNHhlWmN5U256Y2t2VHJCeEpwZnZyUjJEMS9hWGNvVUljUkpaakQyNStYdWg1cTRaZ0VtN2VseVVEWVVRU01XN2JQT3F1dEk4ZXFtNTJacG5WdlZJMHAxWlhZTHMvYWJEUlY5U2FsSU5YMUlKQ3pjRWtlUDhSeXdxZGgvY3FtckVMZHAzcjNDaWcrT3pZc0pEelIzNHg5d09uR2IyUmpROTRyRlNDbHMyRzBHMU9IN0RESDFaRktlL05BZHM4OXg1TXgxR050Q0lhZmRzVFFZZm9lM0hyTVpyeE1jTjFXSk9zdDljSm9GSWlnRnZHOUFxKzMvQzZJRjdyM0kwemFESFM5dHFwOXVCYmRUUm9sdE9HTWRSenlrYmdUK2lvMzgzbHpkeVFXK0k2Yk5zNDlYWGZFYkRpeW5OV1lVYlZORU9xSDBEcXZDYmphNlBEOTdsSXB4ZzN4U0d4ZTh5OXpEQisreXp4MzI0NktBNk90eDdqaDZXS1pOMmx4Ry9ZRlFrV0VyUXFTbWpqK1MyNFVZSG1mQkhGanFFR0FhVjFlaGJCMkJicFRTcGZQc0VnVXNEeTU4bGhOUFdoNC90Ynh2cU05cUJ4TjN5SGMzZTFlY2FIdnZ6ZW5zOXNicW1CcExvdGNWUFEzVGdqRkE4YzdsYlE2QzQ5YmdHZUp5bWQxejB5T2ZSS0Y2cUw1YU4yaERYQWw2WGRDRytSVW9GUWZMamFQRFZqbXgwZis1WnFNV3BxN25VR1ViOUVPL2J4QmRyOC9iSFpvSllKNlZqNVhFcHNDc3JZS1JqeTQ5ZVYwbWxFQm5aTkVYT3JoMDl1VmtxZlliblZQb09SVHUwRnlKSEZjYWVDNnpCOUxHMTNEV3R4UGlpMExNZGtRVEtoTytOdzdabDZBdEx4WFFzOUVsUkVDcW9OM0ZwQ3p0c2k4UnMvMEtYLy9SdlJZbnd3U0p3WDN1bjNVWmJhR2c2cll4TkRZNGhzbHlFcW9DUVJ6Z2dML05zS3ppbmtGTUhrMmhKV0IzQllOQWFFREVRRnpvektmSHNjdDVyVStsRmx5YUFoWGZvMTBQQnNKOGx0YktzcU5qT3RPS1ZyZ0c1YmltWUtJK3BNU203Sk0wNHVKL2JYODIvZGxSa0xDaFV4VkNIM3ZzZGkxVFluV1VLb3BPcWtYTGp4WmlyaGY1ZDVlZE4rbGt3WVE1Rk5BRE1yb2xrUWdzdklsS1BZVGg2TXMwaVF0bDBrdHRrdUlZR1VleFlsZHRnRkV0aEw1c2RIRkxlNklSZS81alZKdEpNU0VNRTdRYjVnMHZWTWxJQVNvcldsc2oxL0RONCtVU29WcVYzanhsTXVkajcwcmJmb0lJbGZmd01ZUDdEQXBCMVZueEFqWHpSNXdOVTNNQWFzTHNyaXptOVh4Q3dlSkMxa3ZwNk5HMjNIMXVQWGJ0QkpDTGN4R2ppU3FaenBVT0dKSGdTK3dpcy9JOXlvZXFLY3JQK0g0YS9vMlNpMlBKMjQwRnF4dWNDNm1qcDFrOW5JbnVlU1lKb0YxdXlaQW1peXorQmV3dGhZY0FybHYvemFCcHRWRWJWdTZsTW45Q0JuRmV3QjVNV0lYU1FuU2QvTW9lWTVDNFYxWm5PZ3BjTVNBVTU0SFRieEhQY2RqcXNZVkM2L1AyeHpHMjlMMVVpTXgrUnEwd0hrOWJrbkxvUG12bTJpbVptdklmT3Fwa3pRY3NhVGtsVFBWMHJkM01OazRacnBlZXZ3Zy84MGpYS05wTUJlOWRwRll2V2gwTUZpbG1HKzBWSGhvcUV5Q1JQdHdwcm9ENGY4eEcyTG45cW5qcUh0Mi9Uc2ZIUlp0Q3N2V1QxejZmT2dsMXJwYVVYSDI1VjA2UkR5TXVCOGxLSEMwZ1JkN1JzaURFcUV3T21lTCtHOHI5SGJ1TDIvME94YmFQbzdsbWxoeFlRSFllaWplTUJzTTF3ZEthYlhMUUovVUdTMDB0eFhXNTRuQzROUVV0U0xUWVFmMllzM3FMVXpsckw4WFl4aEp0dzFxS1NQVWtPZEN1cjd0K0c1UExkM3FmSnQ3ZnY2dEJ0S3lyTjJWVmt6UDhBTE1sNjFFMXYycmovc3RYNzZHNktkaGIyNXdHZVk2cGFxd09Gemh6RVhEN3lSZjFPV0d2dFpMdm0ya1dsTS80UVhMUTJMTHp6Z3ZFY0lscDZVMkFidDZzbXFOMllWQmFVbjdheWJiNmxoTkhGVENiVkJsejRUSitiOW1MbTZZbEpvODZOWGdnU3FjZm5nU0MvbndKaWhlNWpZNjdHaElRdER2Znc5THpyNk51MEYyZSs3UURROVR4VGVYOUFFTEJ0UkxmMUptallnV0FoYTVldmkxdzhOV1pvMjJMYlJHTk4vWnkrd0VtN2NYSlZEbnY5cVhvQ2w1czQvaURReW1jNzhkc25kVG1uUlZXcjk4dGFuZXdpcTJyT2dseHcvNzJ4UmZtdkhsei9zdE93Tm5oUWR0OFhxMmNvTWM5aGJpb0lTZzJReElCWno1elVUcWh6U2FTcEZneHNteVpsZk00VGY5THN3eFlMWGxBNUpkaHhQODQybXFBaWlQeEEzNHZ4cC8xUDdrN1hCWFVmK0owYml1Y0h4YUQ2NnJidlNlRkNlYXNNWTBuRHZaVHhLbkF3WmpPb1RscllhWHlsOFB0Mkt0R08vdmpiNWtYNEJxOHFHOEMxTGpDY21HNjdaRS9QRFM3Wm82aERDZndmYkFjLzRrbC85Q0R3Nkk5akZsL0FWK2FjVDBPRTV5WVNNYnE0L09CcE4zZGlkazVHRVpnSUh4RkMrT0x2aFljN1ZFNG8rZlFEaHR5VmZlNytEOVlwalJ0L2NUQ2pvajZudHBCaS8yN2hYY1c5WnpBNTlDUEVJRzl3a1BINzVUVUsyNTc5Q1l1ZklNWkVkMjdLc2IzbXRLTVBYcDRkRVQwQVhLZ2VJdmoxT1ZRUVMvdGhtRVRIcVZXN2FPYi92YnI5dGxSUUp0QTZ5RUxNaE9seGF1ejVNQmVUdUY2UG1XOEpKSE5JUWxNb2g4WXZGQkZhS05YdUgxTUFFb0tQdCsrRGJLNjRCQUdSdHArSzFOVzJmbGpJSWFCcG9rem9iL212aUVyZnlMZ1kyR2hRUXF6OWFXQkllSW5saWxlbzhBSjJvMjcySlhFSCtMMnF2U3JZSmFwclN0a3lNUk9BdWNuK1hDZXdCRWFFZmhqaTVHRzB3SjBtZmxBdnhWMUdBUEdSa2JSU2ZWMi82U1Fucm5PWmNjZFNHWXlremdJVlprUG1Ic3oxcTk2Qm9IbXhCQ3A3YnNKV0c4RlQ5TjhYN1JDUkVXb3RHekdnalZza2FUQmR2Yi9UVnNyRTVXNTBpRTlPdXhmNGpObmVFOGpqQmR6QzY3Q1Y3WDk1b1MxMXFlNW1zdXl2b3RnRTNEYXJEL3BuV3NHNnVtbVNjNmRIMEltaEt1a25oVDBFako0emUrZFl0eTdZMmczcldQOGEzM2pEL2tsbzg2ejR5SjBlRGpNVnJPSnpzVXAxZEhRdm4ySzZIZFMxZUtiQVpMdHdKN1dqNzF4NU05UnY1M1EwamswWS9QYzRTUmg3K2xZWXVFUVpoTnVDRDNZVlR1V1BQZ0ZlY3RzSndlVkloby8yOVV4dFMzMXRXWmRGdk81dG1XSnVZcWE4R1RHVmtrVUpwczlOejZmYXlORkpIZHBCYWRxRFlZQjFhazVoeE9kd2xzSHhqcmFwQ1RhSDlrNlBLbUhyM2ljT3RyRlNOOHMrMGNWMGJKOTFneEN4Z21JWU9xZlpGVlU2RjRKb0JweFRBbEJRa3JtQy9YRU9MZE8yZmVaZTVkc3RwMFNQcDJNK0RUTEhob0xKOHA0UkpnSG02TCtkQllyZ2p4QjRUWWFVMTNBZ3dRKytpNVhPa2ZkWElaNnluTHlZbUsrV0xZSERObUpZY05RTzkwT2Mwc2lOUjhnMWZtM21Xek56RGlVOUNITnFIUGxvMzcyTmlKVzRHZlMxZWZqMXE4VXRUaGpDU04xeFpvQ0NXRys1RWN0T0RiYm1GT3VxUVVCUlpFUytNNnZOQTFyS2g4dDZSZlZPdytHSHh6OHJQT2RDK2ZpMlNlN3ZBNmJtY0dZbE1wZDZBWkpDZ296VFdOSmZuZzZmS0ZWSHNMWW4wOThGSkhzZXZlYnZPU3hHUVQ0V3hLVExPN2MxaWo5dFpXbzdORmlLdHBQaENZZkVIcGh3WjNNL1k3QmYxN1J3bFhzQjl1b3B2T1NhMWtzY05HWWt3M2xGWDVQVEd4eUx0S1FHU3dPNHRVZ2J3MGw2VEFLWS9iMGhhNGcvd2FkS0Z0QmNpZ3dXaVJJNkxyb3ZKYzVjajF4ZGRSaTlrcHNxb0NSaVlLT3BGWXE3OFpUQ2pmUDJVVGM3ZTllZ0dtNjhETi8wdzNNbjdabyt3MGRobTN6U05YczhybWFERnlhZjh6S3ZVN1VaeFdiT3RlZmpYUG9KZG5odzcrRWRlcHlRUDdaaUJ3MnRsUWhMNEZQc3BRNlBra3pZKzZrY2dwZHI5VGdZQURxUjJsOGdwSHlZMWVjUDdRMHV5RjUwcmsxWjFnRko5blIyVmppTmNqRWd5VDh1UmJLLzJmbnNNc0ZzeW1KbGdzeE9WRlIybElJQ0pCam1JZ2hlZ2FZVjdockJuZFFYOUpKc2lDU2pZbEE3MFNTQXRwNkEwOWxCbkFrVHR2T1hMYitYVW5ZSUJXK1JuejRGMTlhR3krVS9yV0t2MzA3aWt1U2p1d0hyU082ZUIyYzJGZ2xIOE1ianhFYk5MVnRtZ3F4UlJrVE5vcitnT200QWs0TkNyS3djQ1JUVmxDOVJUSW9WdTFCNGpiaktrQmp2VU1LZ1FKS2M0b2hEamFoVXQ2ZXZXQW40cnQrYTgzOTJIcU1CZW55Sko1bEpGb1E2N0JjZEplSktSR0laVUFBMGFiZlpmZlFpcnJQYURxMGRDYnR5T3M3R3JuQWQyTXJlcGtlQWFBN0p1U1NnaVRLaTA5Tk5ieWNjeTk4MFh4ZXZQSHNTUnpKdVRZWHlRaEZLMTViQlhzY3Qwb25YMFhmZmlrWG9TZFcxRDlLQVU3RTZLTVJJQnhCL2hWQnhBT3dndWpFdHpKdkdOTjhXbmdyQVBWSldRK2o5Rk9lUzljZ0I1dlhpcjV5Wkl4TFdSRi9CWEtHLzByZHhURVZFUUY3OExSRHRZM3hycHk5MmJkdDh1a2ZtNVRxV1gyZE5UUWtESVFWdXJKanlBK1R1UzREbkhEbmFWdnlvMUdVSnVCQkFlNkl4SWxQTkhjUmp1bisrem1yWWlYYVUxSllpN045a3RyVldadUJrdjF0eXhWeUFXQU4rYUpCU0hBb01IdW5IVEVSc2NuT1Z4SE5FRG5WTlhHcjZ6NitnQkk3SzVRdmd2ZUw3L1NVbDdOaTBoY2pXSFo5bzlCZlRSSzBwUU04bkNiZEZpR2dIVDhvWHBveE9ublFnVm81b0YyMzQ5blJhaG9PU1VjSUU5ZkZLeFNYOEhaeDRnZk9DeUhIL2xNRFM2a1ZhaVJyL3pHcW1xZFBYWDZSRTBIeWV6RjczR1V6b2ZydEgxM015K3hMTkNvYXpGMEhwSnR3RG1Ec2hxdllrS1hWOHk1QUxVYndYK0psaUtlNi9sMk5RUmlROGxxM3FsSnBYRitNV2luSmhMdW5JMmNHQkZra1VsTVVXRzBlNm9YTEEvQWxITXlQektGeThLZjVCbjk2T0I1R1IvT0hUYkZSSldRMTRTQmovRENZUmljeHZOUWh6ZmVmU3NiQlduNDcyQU45czFlVXgyUzBxU1JOK0pqVFUybVR2MnlNV3o0SFdDTmVrekJYNnF1cGJoQlBNbG53bURMTnh2Y2doNXFXK3FjTjZrTXBnaUdna2RNSU5GMENpYlZQZTlTbVFaU1AvbGo0NjlLUzllU2kyTlJiQWE4dmFCUG9uVE1tZXBBVys5UTFQYWw0TlljWXdRT0w1cTllQi9ZTGhWTWNpWWQyZ05Bcm13VTVLbmVDSUpYY3RDVGFoblNpU215VjluQWhSUTFMQUtBWFZlalJ2L1VxeEswUWdySkFlL3RHWUZFeEIwYnBqL0E3UmdydWUvb2ZTOFB4dHBRMnpveklLbjJ2TVdGUDRjWVBJenU4Uk0reGdFS1FWWXJPa09OczFyRm5hRzZKSlVsSHpWVlJITEFEaVR0UFkxQkE5RHJCTVQ1b1oxbmxYMCtpTlFEVlZ2bXpPclpsL3BwUUNCM3BTemFrSjNSN1FDYXl4ajhPVnJtMHR1Y2ZpQ3V6RnZkdEVIL3ZSNkdIREhIVmlra1lxMzgrdEt4SmVsRnNGaklOenJIWWU3ZXhXQ1hISlhvc1Z4OGhCdDYwenQrbDJHSjRWZVZzaTdlbGxJTnh1dGFpWEw0NEtjTUhsSDFWSnRvZ1NwR1dHQWtFbnFlalRhVW05UUR4N1hxZDBwb1lIajR1aWozQWQzUUxpbGVmWjNMUXFWdDZaNkJ1NVRZaE5JYmdrcFdjd0lsbEZTUzR6NHVtdGdGVlNOYjNzN3ZibnVUYVJtU2psOGZ1Q2VzZ1NtS05HUEU5M1dGWnB2MDhuVVRMa1EvTGdkS0RBbkQrNmc5YU1xNkVkNEZIcFZCdFJsTjdEdUEyVGVkN1FXVU5uUmFhZW5vZEdxaUdLS0NnYlRKWU1OUzBZZWVuWE5ETnR5UC9nQjNOQTN0cHZ2YnU5emtZYnZOL054OVQra3dmdkNpM2tUV1FXS2ZRNGc4L1luekk2VjJwUFhsaks1ZmpoTDNVQ0loUzI0RU0yMXFIT0QxWERhQXlScEVHOSszL0hKclhucjhqeVBWT0QrdmM0cFVqZEs5ek1hdXBWYXQzZXJsTk45QjdxL09ncndnUHpmVURlM1oyRDlLdDZoUVRsNDdSc25wU0dWUGVkQ0dlb2cvZG1uVS8vMlQzdVJobVdBS3FxZjNrQXAzNXI5M1cwbWtNVHJENVN4dVVlZmRPVVVhZndhZWYwSkFqc1NCOTdYQWUvODcxYXZhbG0yaklRdDVXSytwR1h1MXhsaGIyS3ZxUXVRUSsrRzJYN1VRQWdSWDgxMGxZMFYwVmp1b2dud1FQY2l6SkpsV0l3Y05zTWNRc011MXBsRFZ2WUVmMHVqdWZteEdVQ1kvUnRyQ2pKMXdKd2VwSWQ4SDZBUit0SExyS2hUK3lncC9uYW1VajJDRVRqdUFJSkplNVorbzBUR0lBSUpCSFA5enJnUWZaUE1yYjBySTMxVzhteXp6OHdBUHpwcHJadkl3dlU5THZkcGZrOEJZS1MzRUxIMFJ2d1Q0S3NaNXE4NmFRN0RZdXVuMUxTNXN3eWc4ajJRZ0tFdXQrZnVDK2NnamZJUHBqL1BwYXlXQkxMNjNrVDh1TFBwUkJ6dmVqUERuaS9keitLckdybnNyb0t6a0dsaVNNam1OWDd5STVKUXdaR290MTVNbTZXOHczY3M2MXFuTE9jN05Kai84c24zNkVQYkljN2YrSHdkRWNxY0VDNmtWSlp3UFNLL0FPTzVKSWgram9ZTkNRUE5kOCszRFVxT0ZVVnhHTmk2dUhEb2VOL1lHUVhNV3c2elRBaGJSRnVpSFlNSVpCbytXcUJUcnZ0UnJHWnpQYUFSM29YVStnNjJvbVl3Rkx4KzJUNXZNaitHa05VNnYraFJmQU8wc1hjNG9PNEtRdGhVR0ZIS29CVmkvODlkOCtSSFBqbnhuZzVQMEhKSmpQNW9wcEp0ckl6amprMStZSTd0L0FiU0I5ZGZqUHVpQ3oxNml5VEJSZ3JuckZ2UmZvRkpXWGxjS1hiSmlaZFl2K2p5WE4yWW1RNXRGclFhQTlhS2NVamtDbm9yQkdkRDh3L1VUZzFZSm82YWNnbFJxcXVHZytiSzczbFpCU0xxOFR0akRoak1pbmYzVEF5MmkzelhmZ2NxOVdZTVpVbGp0WXh5RFBGR3dLYWdHb0pFUXJNUjJzbTcwL3M5UUNYL3ZmSno0bURmU0lCbHlYOGx4SUpSbno0blpLZDNxY3JqdkFtWFh0SGVHdnBSM2pMcFI5VFlMRURiMmVucVdjam5yaWd6c1BqQThVbWdmdEovR1lnQUpxWUhCSk1qckpabXV5REc2NDVCRTN5b2xQc01jRU1xZUNyZkY3NURiMkk5Q3Z5aCtyQmdldGNvNWhFN09EWE5tNTN5TWFPREtzZ0I3ZWNvU2VERWtnMW5jMzlJNVZzdDkyM1RvOTZPNTFlZDRCckwrQnVCRE02VnQvVWd1ZmFNRnVpUUw4dHdETERHTkJJenQ0eSt3a3Z4REpwR3NMaW1aWGp2cGllS1RFUnphTmIzTUs0UU1ZVU5GejNhTzRUclA4allWRnNGdXBxaHp6R1diQ0lXVHFRUTk0UitNSzZ3QzNIN1B6dktqcW8rZE12bFU2Qm81S05kbk0wOWpLWjFRNmcxK0lLMmVCTmNWTmhKUG1vL2hka211cU40SmVLSXJiZkdNL0FibjBJT21kN0RGVHRKbVl0Qkg3cTY0MEkxM0NTRFIyWHQxdndJUFpwemRJcVVXYTQ1L3pDcitUcndtOHVYTUJEdDZ2ZDdEL25nMnRKd3o2djdGVUxxU3habEpJaXYrTTNRN0JrMllvQ1hRb0h0cUhMU21Fc0FCU0lNUVVRQnArSm1rTFFkaGIzWGk4QlpNUlpjNS9KTWNYbXdHeDZuM1F6ZitHb2RhWE1rT0tRV3VKU0JOQUdTVkZoUzVXVzYzbnRBUE1BVFRHak1kS1lnTVZGRVlKb3RnOGVCV3lwb3dmQmZ0TG1XQkxaL2ZUS0FPamdzZ0xsQTB6Z214aC9lT3N4TTBNVGpLVWpvQnhkY0htd2tCTDE2TncxSFZYazlwYnJCUzhVS3dEYUtWdFBhWWl3Umh0aXBjL29hdEFtcHRNamQrZ2R1dW1UZm1aVW5SblEzQUdFTHp0ejcxakZianI3SXlFUVp4Y0VDNFE2cEJCZHo3RmRsSCt2WTJsVGI5cGxMQ242U1lEK09XS0d2akxEa3A4bmt4c0RVdE00V0hWMjl4QWRyZ3ZmVUZMUnEzT3pJaXRwbEpBZUxWUHRtVnVyNko4Ym55YjRZcU9JbDhSUVZCbGFtMUszcndscE5JV0c3eFJIMXRjdVVwNVV5VHBacGVuNlMxczBnbEF6OUhYUFFtK2RTbEFOUE0xYnhSN2dnTi9nbm9GdklXY2ZTWWRzcmRaclJRem1tRkpxalU1YXJzTzE2azFrR3hISnpkZzNiSGNDMFZoVFJUdTFzcmt3Z1ljQnN4TXNDRVgrdHoyZ0VYWXJscGI2Q05qQW1pMERlWjVXUXNDWmVERC81emJ0cGRiOWVsa1F0dkN4OStZeDU5MC8zVG9OL1BSdTQxbTMwMng4Z2o3UGhoak1CQU1jMURxYUxxNEthNXNmVE1vR2FTNktiYkFTV0gyK2Q3TnBjdXhwSkNlL25WQVRYNXhwS2RHRmdkb2F0YUs0c05LTklKeTV5NUx3S2RsYis4d2NtSkxXc1Vhcit4YkhIbzhQcnRjMDQ3elAxL3B4c1JxQWtBTUtNMFhneE9GZjRZbDZWSHM3bG5ON3NKRGZWUmZ2Mk5iaVlrTGpkak95T2xrY3RNdXlxN1lOVjB5dDJ5SFdLNHIvamI0bWNNYXlWc1ZJYXZMK2FFSUNIVHNtbS9xbFVaN3hGUFh3Q3FTR3dxTlE4M084TG1iQVpXTjBZazU5RWloMWl3WEw2U3BhWE5KOU5mT0xmejhKT20xUlNTWmNFSExJYjNwNnd6WDhhN204SkxuSU5HN0EzdGpqbEtPUTl4RDdaZlN6Znp6WUNuN1ZrZ0YyTExjaTBHeElmaTNxQVdhUmNoelFrUkI3Y2t0cWlwRk81bHo0SUtUdXpSUzhGR0JET1pNb1Y2M1hKOE5QYlVHeHR0RGxRTjNseS8rQjZRRGFHNEcycExUTjRjdzMzVWFVV3VTNVAyeHNLbnM1ZFVjZkFhbDhUZThsNG9WS1NvRGkzWCt5ODhwZ2g5bFZqMVdjYkhLTysrbjJkSmJmbkloTmtUaCs0OUxPWlhZZ3BpcW5CcXcvN2x5akVka3VUemgvUzdkZDFOTCtUWWZiYTBVbmxuZ2xLaHlycGgxVXdQT2dzV3VNQkhhNmRkVnRhc2ppK0Vhd1JDWnVMTW9BZFFxUG9LRzFCTlZMMStIaDhBbkUvNDI3bHVSVlppeHNML2V4dG13TjVDU0lNekZFak5SWkN1Qzl0U2l0SzBLMzRYT2ZHZnQvMEdNRi93eXB5WUZmMWVkemF0aXhhZ1V3SGJ4U1h1SjFzRlIwbHptcy93WVNIYkpMT0hCbVg3Z3MvY3VhZzRhdWtUTWVFemxNVEVvVWd2R1Nid1NjUHBUb0pVY3kvd0NvQVJEaVVSQ0hPYzlsdnJCV09OVnpzcXNZQVJBWm1CU0JzR0xhUSswcDBxMkVaaWhDcldzcVo3RXFtZ1RqY05HeWtud0VDa1VxSk90WGhBRU5aWlA0VDVCbGpQcG5PaU9PS0F1d05DQXhXZ0hFUHhCaS9MaWhQdmtpMVk4cXNZbEgvN1Q1aXJSMkdsMUF6WThRTTc5ZHVpc3JHUUI4Rng2dm9tVU9zMVdKOTNuY2pHN3ZqS3lOaWJhSFJ2T1FaSUJic29Oc0lLNkQ3a1ZWaThOMmh4OUNMbmVlNFg2bE9peEFPd0dQVGVPcWRYY0MvRDNSTG90WFVnV0hlVUlxWVJSTDUzdWsrN2ZKZDNxall5VkhJSUl2akg4a0dIK2Q4dGJPNE9HQUdyZ294NUEzemF6RTc0cU5jT3R5aHVxRFl6bkxKVG91S25sMHlRTkxKeFlZb0dwN25FVElPcjJPOXpnQ0FFUW54Mkh1WkQzU2Q1cm52WXI2T01yK2hPSVVHY2JRcFVBN0NaaHM0UkV6aWE4ZkoxY0VXU2o5bDFVUUFNVmlrN3JUWjJtMzQyMWorSFpXNjZzR09OekJkdFNBN3ZuRWtOWFdYWHhLU0tJV1FVWHNlVk1HV0hkQ0dwUFFwWHJ6a2NNSldoeEtTbE5TR2taQ1RHcVo0bHJFUnZkOXUrVVE4UzBFNXlGb2VseXhDQW8wMWY3MFZMcmNOR3IreUxDdVVobDd5N2k1cnRsemRIT3AxNTFqSlBMT2s0cmR6YWpFVVBoWm5qUSt6cTF2TGlyb3pyS0pTT016R3NQZzM2dFZOckt4emlQS242aFpYNkN4azFtL0dFeVpqUy90NDhxMGJTZE9LY2hLOU1JUElVcGRhV1BrYzd5eHhVNTQ3Y0ptb2piUlBleWVQOE1zTjB0YnFWMnRpRnZ3aTZnTUlHL3VlSkRRV0pSckxxK3lhajU5VnVBOUNHMlNOUTRwcllQeGVsekRJcWVhZmRpZ2dWMFlHdGJnNjh4a1NlQUtTQUJkZ0VBYTNmM25GL2pzTWhhc2d3ZGV5SnEza1FYSFpQRWFVZ1hwUk9pMkVBcElJMEFJQVM0UnJPOW51TXlZYVduL0E0ZGY1RGY0UWU3ZWliak8rb3UxK2RYYlo5cWl6NU1mY2JBdWh5T1ZRWDBnb0Q5QmRUekxhMDc3d2ZRZVJTa29uNG04dm9WTFRJOUJnYjJQNjI2M1ozUGJ5STY1dkN1SllJaERiU0FJZHEvb1VucG5MajdVZHRCQittaXR4RWpHOUdNQ3p0bVpnMDNFemFnQVJadjRiWEhhYlNOMWJYWjFxWWNGNmhPWHQwVmpQRTlQSGFmbDRKL1VVenZqR09tbmVUcTJOSGp6TjhnRFd4b3pPUjlUbkc3RklYZ09hOWlKNzMzS1FMRFROWGJ5YVFyTmlEYkc2UHBHZFMxZC84VFJnc21MNUNabkcwRm9WOEh5K2FQWS9yOEpMQk1oaG5QSHdEVFphQ2F4dkVhSUswYnpXTjRmc1k3VWdhL1FiTmRMZ0NXNlRSNHpRUUtXQ1I1OENHd2E0ekVqMzBzSVBDbjhhangrTmNTUk1LbmZXSG9DRzVNZnNrTFlpOGtFbVdxNmFiL0wyOFRkYXJzRFJEa0tPekRUMEdQZm5JalVCMVBrV3FpbmMxN3ZXeFVVdTQvTmxOUjltZEN3d2oxanFyNlRTcm1MYnUzOWUzVTJ1ck9Qay8vOUN1akdNRWtKYldTQnY2b3VXNXk1Um5oOWZSTVZuTG53YjlGSFh4VVU1SzVuaDFES2VZbXFOUDFGYkpHR1JtR2xQeXZNMFVyRFc4ZVQ2MkM5dU4ySHVtMk9DaUJMNHR3bUFDY2JlV3Q5ZWRjbGVOOHcrdmZXdDFkTVI3RkRrV2tLUEtwYVVDZSt4aHFJYlNQZTE4Q0REUmVvQlpkeWNWd2EzWmNqS3laUDFENE12Q3IvdVUrSTB3QVExNWVlNURaN0tWVEttNFQrTlhFMStDVUhRaXlsSnhFd21PbEVnMFFEb0FIVHpxRU1KTWFXOWtLMkJNMTNJTjVDRUpLUG1GWHlMQmt4cjJtdlRlRmVMWlo2eTJNUjBieEE1QStwM2FINVkvc2pYaWZSMHVTbTNaOGxhOE00ZG05Wkp5QjNVU2FJUlo5MWc5azNhaDllRTFOK0JDSmdmRGRQVmR3bXMwRFM4bS9FSUFKK2Z3aWo3Y3Q4M1VwbzU0QW1zMmNIYVBCZ3IvNGJxOXhyVkNpYlllNVVNSHlid0JTMzIxS2ZTem8veFJaUlAzWEZ5NWpNcE5ETWxDbC9qVWlGODl5WmZTZ1NuK2xVeVJtYmk0VTloMzJaL0JJRHBhMDNhVldiR0FZb3NQMjVxTWZBd0xrUFJMTzFVZk9sa1Z0dUVHQU1TT1h1djB2azdCV3YvSnk4VUpHTjJnN1ZscXZManYwR0pWVEtRbHEwMUQya0JXZTBUaElkWnB0YUJDL0VTV0l1V2JpaVVNdjJHRDFOSk1sc2c1UFBtSWxhU0tyWjVTSkIwM25FMTg0ZHYvT3RqcENib0lqbjlsd1VoM0FsaDRHRVZmRVRoL3B3WkdodENOM05TYVdrVVJGbUFFbU04R1Y5Y0grQzVyRk5QUW1UZUxmYkdOTlZEdmVydGp2am1JMlVrLzNQZDF5WjNSTjNZcDFybUJhMmF4VkEyaGFmd0VybnoydWxmSml5RndVSWJsM3ZVSVNMOGFjVms2cDRkbDhwSktmTHZla1ZwUWgxekZjRWVtMUgxb3E4T2dqL25aZjRWQnFMMmt2RktJVXM3ZHNHb0tubFRZdVpQUjdwM1BtUXQzSFVFOGtHQUFGNGprSmUyRDF2ZmV1UkFRK282anpTdEJiYlFWdk9zYnhpS2psQ3V1VW45QWQ2dTJCMDQyK1NteW1rcjlDSldwN2Vaak1VNHYrNEhHWnphMGtFM2xnd0dHVGZRVE1TK3VESUpkUDVSWTBETnd6aEdhbVAxYnNVSUZhdFh4ekd4TGZic1J6WTV5UUFjNDZVbCtwV0V4cVBLemwvcG9lbVNkQWIvcmFMSkVwc0ttQlAzSWtzMldrcXpKMGlmYURjb2Q2ZTZHTmsyN0c0Ujl1MHlGWUhuMmRVOFB2WkNpaGp1ZDJ5dUpmUUgrbzJqemcvT1ZYTjgremJZVEF0QUdiUmVIMXRwRE90RUJoZUJJc2pxcllZYVo4UWVucG9SclhXK1NUd0FZYVJ5cG1OU3hUUk5tTUdtL3VSWjJKUDMrZWdGUmpZUENScnB1cklxZlBHcGFYb0NqNHhXS0haU01CWHFoODNTSkxIUVp1QUV4YlRWZTBkZ2lSN29nWm82V1QvOGl2d2crM09iVFhpOUVWVWlpN2JSWjB2ZHd0SkNyem15alcvaU1YODc2ZEd6R3FhZ2JBUFdhVW9wZFd2aDZtdE92ZVBHWlVKdGo5aVBLWkN5Z2NlOGROMFJ6TmNHOHFraXU3aTE3ZjJ2QUNWNlRCZkNuSjg3VkNvRDZuZmxzRjk0eTN5czdXMmp3Q2xkb2dPRWRMM0VwMTNzL3FkMWVEbW9tUEtYZm5JcVBvTW02ZnJHUWczZG1pOHZUbFVKazV4SnFBVlpQS1JLYU1VMk5BRnVRdGk2RjkwZzBuSGpQT0RaUEljOHlVSmNZNWNjS2hQcjhuY1F6VFRaY0JWeEg1REZNb1MwSGJjWDIrNjVZZ3ArMjFtSUJEZG1GU0g2UTR2cDNpTzhiL1J6UUoveVBXa0tQbXErUTJjMzlVaTBjM3Z2bVJPaUNLWFVMOEZlWEIxcjBVNk9pSlJFb3lXY0tiQ1ZSaWpBU0lyUVlpajdoU21sTzM1dk5oWjM4WTVMQWNvWGM4RmoyM3dlL1puSGs1SFJKNUhZSm1VTUFuT1NVWnFwb1R4VThFcUFUcURPazB5VXVIcXNWdDBSTHdrR0ZFYnJRQkxmZzhiVDdxNnNqQWNVQ3lQd1lrb28zYVpvb0NzaGh4M2paSCsxSko2YkhsckpVNW55ZzVPK0RqQTNOUjJkMzNDUEVIRlpiRndFR0pkN3EwZ3NoUWE1c29xRm9xR2xDTVRrSFVZZkwrbU4zZ25aZHNPY1hPeGpEamVUczBCUTlLb1lMSmZpbHdvRi9ac1JhRjZDK1hkbmlIUGl5ZlE3QS8zMXdtZk43Y25HaTJIME1CVnNZejJYSnVTNWJ3ZFR3OGRSYXczU3IwNUs0RDJ1Vm9HSGtrVEx6NG9LWFUxVTlOK1dOTXZLbUNPNGgvdW5nUnh6Zm14VXAzYTk5MEdCUVlqcjNwQ0MvakNEOVlSempWNG5BQkx0L211UXcwaDNFOUkvZjF3ZzlMYmZDRzlSWmF4eDJEMmZTK2hsY1hyQlRpWjZEZHNRa1FhOFgvR2c1cTR0SjlaeG9qc1JOQ0pMa25OQUFLS1hHMjJHRGRyeWJqS0RwZFdNVE96QWxVUHJ6RjRxRFRXcEYrTHZGOEY2TVdnRE5ZZkNUeVRpVEFUQ0E5SzBuUTJDbVF1dktSQ1Y4c3VkSWcvUWJFSC9EMC9KUnl2aUY2cjRYOUpCNzZtelA1SEtNZTJjbkthY2RhK0Z0WU9kMENNQXRaNG5iSlRCQ1VHNUpiNDFQZVBzdzFiY1VmQUhqZFRNbExkNlNUNmRGTUJKQ0ZrLzNVcjZlUVZFVmZXSHdJcm56OG13dENiRm1DaTN0TEhpWlhYR0hqSnJXbUh0TzE5MDgrUitUU3Z4R3NIWkpaZHhYQXhRMTN3L2NBOW5FSDVvWDZ0RWxLOFhiNHJxNyswaUxLZ2krRnh4RXdhZXlzVTlvd1poVy8zb1YyTVlFMlFSOS9sNFYrR0tDTFY0c1BMa3VvK2dhaHRDeGdlT09ZajY3TXkzaEtwQUtIUTJ3R3lpekpFbDErcldwM1B0d1JEV0VNL2psUmkrMlJ3dDNXSytjNnljbG5rNjFNcTZhd2sxTHgxMENneFJ5d3RRdWxjb1BVNUJFR1hZZ3U5VXArWVZwS3h0b1dRNUMxbUxGQzlUeXhrZHI5NTZkU2w1cnFOc1RwOGVQZ2UycXBFay9FVS9BeEwrbEwrZGpEQkw2Rkk0b1RpLzN5RjFOVEVjT0lrbDNIMnJ0dFkyQVpyVEh3bUNZek4yQnlselBaS0VzZXZzYUd6bStwMzVnSEZzNEM1bngybjVhMWExOUova1lWb0tFcHB0WDM4WFpoaE94SGQyM1Q4elpROVZBVjdoakZyK2h6T0p0RXJsUFhHWjgxckRsTVpLQ2Y1U1hYQjhGdnNXWFF1a1A1c2Q5UnZuT0tGN1hDOTlDOFdtUERKUWoydjVNWStBMll1UXZUWEJ3STUyYXA0MzEyTkNuUzVUeFBSaGRYcGsvSVVLMFdmVThqdWE4Vnh2dksxN0JZQnFTUk9LZC8wUU5HQmI1SjZVVUkvdDk2b1FJcGpLVmNyN0hKN2FqZjhrYXMvSVpqZzlxdXl5Nzh6K0ovSTkzaDA5bkFkY0tpV3diSDhkRGVhWE9aNjhsOHlBaXRGUDliU2J6ZkdkZHJFSDZyeDVWOHJhQVBQcStmdmJhcm5WcWhHbFcvcXQrYUo0dmY3RGtYVFVQSVFKS1VseXJneEFmbFVIRC9pVmo5N2drSkRaVVNCL2t1N3Y4c0VzekxMZnJQYXh5TXA0cmRDRk55dG50NzZFUmpWQmRVYjdxbTBZTEw0dUU1TitTN21nYUMvTkNiWHYxQVF5VGdEQVYwNm5IUHVyemRwdXFMWUxmT1NiVGQ3ZFdTVjJkNmJnOE5SM0hBWld2b1pTcFFJSjk0ZUdWZS9aeVhITEYxM1Z3aTRiNmhPZFZYU3BsN24xbGYzTTY5R21WTnA0MkFJbkJKelF6amxLdE1NUFRlTk1ZREszaVNuZndZSTJJMHJMWDBjbGo0cllYRUtKcFBWUW5vZUNHdkxYRmJsRktDejBqV1h2UXo4c2pZVjlFbmhnRWliNjM2TWY3MVMyY0NLbk40LzZINHdBR1AxTWlSU1lVNm93dHNrZ0huRllVV2E3UTZmLy9lUm1LanZwR0RDbDU3eXdJWGhpLzlRRVBON1FCVUlIUEx6TVIwem5QZk5Wd0FCS2xoRjdWZEdiUXZHc1lHRnpYNHQvaHRobk9rZ29zWGN4Q1RxY3RHSmVFZnJXQzlyKzNPVlRCbnZTMDFiV3BkMk95YXY3amkvVVFLWEpoZDhDR0M0OFVMUFpDa01mV2NZNUdZMVowTEQzRWxWVlFCTHcwcGFxNTd5aWYrSTU5UktmTUpIOU1rT1M4M2NLa3FlRVlTQkRmdU9KNVlwM3BHUzVGVk42TlNIcG9kOXMxRWFIcVlyZE03VXJoOWVlUUpQMkdCTW5aY3pLSlJpaEZLMTdVRm1jZ0QxaGI2dXMzTXZ0THRYUDhlaFdHZVdBZTdzaElRSEtlcXVDeEQ5MmttQmsyOHYwelVrL2w5N2o1dXpISm5xOCsycUhzS3dHQmptR082SmtZenVVdzlCaDRCcEl4aHkwZ1lURk03N0R3Qnc2eXJKbnc3d3pVbk5lOE1IditlcjQ4cWRDUjdUNWg4dkxhcFRQdmZpMU9rMXAzVDh0eWRiWk1lSnI2QUdWNGZRb0lMOXlDVnhTREJyT2hRNjgxbE1weWxnTWlYaG1Kb2V6cWZmZXphVFZkRFUyTy9EVlR1enlmZVpGa1BVdEgwZTdjeDR1UDdhVEd4WkxPRXo0bWpiSUhLdnZxQ1JvQlZEUlpQdXJkaUR4KzM4WFVNZ2kvR3Y2dlVxblQzZG1rRTNpTGp6TmZ1Q3IwdjVqUjIxUFJnWlNwTUlFUlhMRmsrL1ZqZW12czZZZGM2T2p6cnVROHVyM2pqT1U3VFB6ZStEOFFWaUVWdzhEZHpoKzBONVhKSFc2WE1Vb2N2U0ladmNPL0NpSTdVeVNPdHZ2cytyQTF3SGpUS1ZKUHBSamV1UjJyRlpIMjhmZ3ZzTFhlTDRyRFJtYlVaK3l4aS8xVFQrckdQY2VtT1dCVVFFYzF1bU90b3ZackRpbzBid3B5RHJuaGg2TTA4dTZjbWRNUHB3K2RoUG0ra0FweUJsWG1BR3RDUWNLYXgwZUthY2RkRGxBYkRoaHM5MWNwMnhVSmU3SFpHZkFHeExkaWhMRkRJY1pNYUhwa0hWMXJJMnFpSXdxSHdUSnRibUtEcmp3RGRUbFZYNy9halJKM2RVNWpvbmhOazZzQnNYVS81RktHNnoyMlRSMncwSVBzMnZCSzRjR2pjUks1c3FBTkhqUzZoZFp5RzY2YUtzN1hXSHR2eGtHMDBWdno5TzVVV0hWamVzcVhqTmh6Z0JSdlNiaUc0bnNzeThOTUw4d1kvSzhJRWFLcXcvZnkyVnRUUTlQQmsvUUlTdjE2MUlnczlPdnRwYTRNYXp6RFVBYmdSbkRjVWhTSzRGRHVHM3RqcjNQWmVGWXdUZ0lrR25vN0JQR3VGTFFoRmpNVUZqM0E3bE1BcjB5ZXR5M3ZOZytOKzdjbW15bkcvK1FlREdBazNOZkpubmpnaTEzZERBektIZ1oyTjJtYWVHcjdTczdBSXEvNS9qcHVUcUVaRzZ2djUvM3FHUVVUMHdtNVVyS1hZK0hBdDdKRE5CemRBSk5SdHVpbjJzVCtRZ0c4NVp4NEJpZFVUWW0vQU83ZkliTEZ0eVBRYkRtU21McGR6WmoxVU5iL05TNkVmb3ZXNGxDZjI1dWJueUUxekFGUldxMmNpdFRGcVRrUVFqVWxLQ0tYUGxFSlAvY2dIdis3RDFrMEt5ZzArejJ5NGR4cDlGK0NMRk4zVGkvakFDWmIvam1uekN3UkNlUGlTamVpanVwOW0wZmtabk5qa2l5WlpWMGlQaFVnQUpmazROMlp4ZHArdkQ2OUV2SXJPSzlvWkZILzVhQjc3V3RTZVNzMWhpa0svb3dxcmxRektXaVNNVVdQQXhRcjFQWVlxUmd1NjErdlJtRGlqL0Vuai9EMStVSVdha3l6Rno2NGMzNEFmaXZ2cHV5TlV1VGxtbVcwSkhGczcvZ3FVWmdSYXdrNk1OcXVTUTA0TXY5NmNkUnBVOWl3dWMwZUg0MFJZY3pVbWY2N1lqWHY5R1orTGExd25SNHZWLy9VQWhLejdGU0JCSmtFd3daTGhISXZpdDZVNGlob1BEcml6eGd3czg1bWY2NWdSUC91a1daU0psazVYenNielQxZUJWZmdQK3UyUXN6UC9vb1ptTzB0WnRyMjNyb0V5c0JCaXUwMXg2SkFvV1FKSEs3MWdrVWZWUlRiS1ZoWVB3eG1hSW1oM2NsRDhwOGdQSWZDaEVFVmpWTWM0eDl1Wml1MUxXNzQrd2YwQlFOVEptOXhBN2pEQWErZHZqVDcwUWtBMDV0VWlnZTNpY3RHQ3pXTWRRVnZ0QXM4b0dmWUJ0OW1XWWx3TzdvMDlHZGFlUUV6OGxtbWdaQTBnM0pvRzg5dEFvdFVtZ1p5UElMaG1lelV0T3NraWhsWm5zTlFOanpsczI4NkdmWWdMc2h5QldsN3hyYmZVbGZ5dmUzZ3hMQ2JVeUJ3T25jUEpOdmxsbldTK3B3OGtTdE5icnFwei91c2psYktqL1o4VDBsbXJyMUN5U0gwM0FaYytoUEI2T2l3VlpRODVrNTZ3dG8xMW5JaFRWVUJpNDhMc3EzN3RsVEVsMUk2RFE5Zm5GeWxTVHV0bzJUTExCKzhVMmdBMEZOUndmK3VvSFpMbGFQVDNraExBeHFyaTVnVGNWWVdZdnNZUmxxaGl4WGI4M0lSK25IdWdianRXcFVhTWcxamxxZmxUNEJKMGFPVXBGNitnNEFvZjJTeWZVR0hZandwaUMyZVFxRFNuQTVGajllVEpNZkdXTitSblV1Q3ZidVB0UDFQZUhKaEd1NlQ1ckVqNSs5VVQ0eVlBdHp2MjhUMWlubFRnMndEZkhhTDNkTno4QWZTQlFlb0ZwTkE1UHdUeWFCb0RabDlLNVZCaFpPU2dYbXh5WmRjaGRwOVdWeGQvMkwvZjB2ZWI5dkJRSWVjQVBKOWl0RTQzdGxwY0xDbE9hSTc5UklYQVpzakZ6a2dFaTdqY2phZjZBMExVTkhKN3c2YzA1K01OTW5tMnl1VUFuZW9XWmtPdWZxZk9aK2YwZ3ZTRGNDY2pRTlJTeHBuMEJBL0VGVnVrNFNUNmJpTlF0NlROc2hFOGNYT2RRUHROTGNJQ1NHUkk1eTFLUGwvd241SWh4RzcvYXNtL1F6UXJHL0VmbVpRTGtYck5XRDNBaEFmUVNKN0wwemxmWkZrNEIwd3NWWmNsNmtaVzNlTlVtY3BGRVBxTnEzRDFBL0paSDV0SFBVRnREclA0bXBWU3U3ZWNQTVlORzB0UkwwZEk5WC92Ujh5YnB1TmlRTUpnOGU5dkF4UTBKMTFlYm50emhYeUtmMzJQNDZCbWp2Y1VSdTNJM2NsT09BMGtlY0JWWjB0SDlVL3pHNmxxYk5oQ2tkbXdrNFE2eSthcTZIL1pIa0Yxb3VhZHU3WlY5TmlrNldXYmQxRUdIdWFwdmd1S0NyWktZZ1hkMjFOenVsdUVjUDkwQ3lmR1dyRklBUGNEbXJDS1Z3QU53VXVxMWlrSmwyMTBZR0VUUDlpa3NROG8rcWNWWU9VWmtPeE5LQ0U1dS8yVFQ3K1lUWFY3WHFHek13NkVnc3JIRS9JYmU5NGc0OTdnN1UybWdEdDFsbnZNLzVEWUNtSndpcHFZYUVabEZETnYxMFBHekdBanFZSVBZR21TZFRVNmM0bzlSVm90SnFuQmUxaEtYQWJJY3hKWmcrQTExVWdBMitVOENaRExoQlR0bzM2SG5DcGw2NXRVOHc3RlVQUGhvd1R2cUlZYlltaUNlZ1JhdFdTb3VYaXpuU0I3bGRrUFFvOGFCa2o4OWNxSW9hamNrM0N0NTJ5QkwvenNJdDZ6M28ySkZTeUZIdGRtSVdJSFpoajhOZ0FRc2ppQjRnUlA4eThTK3Zwc1lleEI5RVFDNVhvRDZ6cy92V2NMaWRVRzZYZ2hOT1dpVCtOL3N3cHd5aVdoYVhFNXVJdGpBTTc2M2kwWmhGNWFuendEMFlVdmRDRmJ0NXR6WnZCVkRUMFZ0bVpicUdQRVJYQ0Z3Q1ZtV25mQ1Q5ZThENXNqWVh1L1dlRzdoRU05M3p2anUyUVNFOGk0aXg1VWxyREw3RFRzc254ZW5wTFVzbDJrWDN6NVMrRkdGT3hRWGIzSEFTeFhUdGYyWE42OW45RE9yUHZlZTcvWCs3UG8yWUJicEdYM1NXMG1TU1pkRlNsZXhXWFVidHlvdVZYWnJrMG1pTGVlOU5ZQmM3TmQ4Z2NLUGM2WEhITmRUaUNsUW40STNvK0VSa2pHN3JWTXlmcmNsQ3VPT0lmT25rUGJWVDRDQkswQU9sa0lmbzlUOFM5NXdlL0dVM21UNlhGTnFHZzE4SDBEb0RINDltaTU2aW1vOWt5MlJHRW8yQWVib2Y4NTloMnFvQWxpRW1VTE5RNDFMK2lNTnVZaE1YYnFPV2pkaG9JTElHcXNxQjRqcGxqNVFJTjhIOHVaZWV2clBnak9BY25JUzlUWEp1bU8yRTg3VTl2UFdLakVPL0QvT1hwdmltL1FaSFNyRXdscWg4Wk1wTUdrY0tRc0pyb3lXdVYvYkJmRnRoZTVrKytkcEhYMHFLZXFEanFxQnFya1ZGRXExdWdzR1ZYZzdKcUQvY1lUa2dTcFRZeVBobGFKOUxHc0tMd204TlIwVG92ekxwRzdPbUdsT2cvZHplelZqUVRZLzNvdi9LSVRCeDY2NlpwODZlYXcrZTQ4dzMxcWhqemd5b2g1bTlGRXEycHRURHkzSmlRbmdrUjlHN1l6cDg3a3BzMHl2K1hJVXRicHZERDU1ZStkZDl3Vk9ac0RZRjRPWDBsd005cXU0am9iZ0tES1k0QnByN3NmYyt2U2h2WmJiSzBjOFl1YXRIaFZMVGZTcThFQkZmZ3JWTkV1MUh6aHV4YnRTNSsvSHBQM3BEYmpxcVlsbUErUVNDT3owUjhQRVVzOTlrbkNjK0FHVFVZSGw1Q0E0QzNGT2lpL0F4bWdCUmVPRE1JRkJtejYyTHhiVjkvalpNa0lDYUQrZzBJcEpmSXhwRHRjaEF1ZlNGdDUrR1M2dmJnL29QN1kvNUJ0dmQzME1oQ0ZacVlQSk1DM3B4R09ZUFp5SHAzcXE0RXpGcmpTbndneXlYeGYyYWdOQzMrU2FwRzVvQWFzMnh1RUhPYTNvZ0hJV0g2T3VTRTMrRlY4cWtkMVpRRUxxWEZwQnZFd2ZUSVVWL0R5blAwZG5FMGxpVktsYll3d3N2dXdDNjlFQjg3aEdydzBoSnpFYXlEVm1Xbm0rSFdKbVhKUFdUTlJueG9MQlZqczBwbXpzdDRiNTZ2R0NnUXJmaGhmY1BmQlM1RlEvK0VnM3RoRklMcDBzWVZVN0ZLMUpsbnBzeGs0VU1hcmNNTjBwcXhleEt0aDEwVjVwOTlzNXB6QjNoRURCR0V0ZndoZzBrWkhzTUE4UnJLVWdSSHBOa3hCaEdRMkZFS2dXa0V4MW5tdHIyeWM5SVdOcFQ3OFk5TURtdHpYQVhTeFVyeW9CQmhpQXlEWURxRm5CaEhwdkJGTklpY1Fud1dGM2k1bkhLRi9QYXJqZU1yZWpqOXhSbGFLQ0RObGtYZGlXVmdLNU9pc0hiQlRPTyt0V29iT1FmWTl2dXIwWDhCYmhEeGlvU2djS3lWblhUMk1makFFbTlBY3ltVWtBY0xDa0JrRk5FNkE0WXZFaFh1M2M2WWlNR3BuOFJ2YyttNE5RYWNUNWxaMG4xY2pzZFpYdy9VR0toM1k5RFlSTTB4aFJqSFFLSWdkTGJ4NDJQOU5INmdEN2s2NnY1cWxSeVNuSjNoYWJPSzB0ay9vS3M4MFRWRFJsd215WTRhd294ck1lZ29KVGErOVBCMW5NNyt2aWV2eGlpRlYrT05UK1QvR3NlUHI5U2VHZnh0aUpGaW5KczBMbm5VeGI0T1k1ZWFzWlVNcmxlaGNramtxSnVmYS80QkhxRFIreWNydXZOWVlrNE5lSExrZWdaQjI4ZHhrSW5SUHErZlp4SlhSaStjdjk3dFBTTWJRcm1PWmUrL3Nka3E1YmZWYW5CWHFoZWJ6eTJBSHdENU9QN1JidjU5REJCQ2FJcUtuOGRmVHhwVUl1UHRaenppcUtSMGkwQ3NROEF6Vzk5SVFjdWFQY3hQWVAvVE9oYm52TFFvbWo1UVJkY25uWUtHdHFmejhLR25kRXhHWGQyTEExQ1loeVhySEs4TGw2VjA2cTJ2NnVCS0MyeFlVWVBqOHRsaUxZUy9SOUc5dzVENm1VWk9OK0x0cHlXdHdoN3N0UUFWOUFRSitBaG16S2RmVGkwbXFFRWNpYkZnMkxHQ3p0NDVQR1gyR2NGK3F5MFU1VzVoR0MxNFhVQVhEVjZPMWVLVThWZUMvQ1YzL3Yra3MzalNENldUMml3bGY2dnJ4NlZsOVJDcHJOZkFGQTZpb2FFaDNOVzkveWtURndMTjQ0czY0V3g0bURmR3RzZDA4ajQ4UUpBQWVwNzFEaWtWeTdjazRMT0hHZ2NsWFZreFhOaU11M002RHFSVkVEMGwxendNaUNJSTNvVjcvMjdremxlUElsQ0ZZK2ZtTlR2SnNWN2M4ZzNWOVZteHhWc3RUUFFhMzl0YyttUDhoV1ZmRFJQZHBDanpLZ0FtMzZ2M3hMUUk1OFZJTUdhZnJKcUtZbzhWaGNMWDN6Nzl4ZzNrcGdDdC9SUm1LZkxPYlducUhBUERRZTFraVV0b0xmVm5KSzBRSFkvY2RFOHlaTTkvdXRPOEZQdTFLR085eWRha2NMMnhBR29lVktmUVA1SW5OMXh1cFcyN01Yc0gycjdlMDR5TW52UmR1WkxqUzZJZDFqSmZMVUhtZHdIVHpqaHBJQ3NpWUFsOERtR09NY0R0VkZmVUM1ZEd4WWFkbEk5ait0TFNubXU0UEViYUtYM1hDZkpwTm5iVTJIWmRTL29sZkFIZEc3UkdZK3FVQ0xwaEk2MmppWEhJU3diNEluSEM4cEpvODdwMmx1Qy91dUlJSC9VdE9nNmhHS0pWdVo5UkcwMmVsOWV1WCs2YUdIamtLaktnYXNmNnZ4OGJhN01DYWRTcnVZbnhtOXFPYTNsdTQ1ejg1L2pna3pGdnE0NCthNTNLbmUwQ2hNQjhrRjhPenVCQVlRektXa3NSdmJ6U3pFSzRyWDlDV0tEejNVbHlqL2I0Wm9jdlFOMFVPMGZiQmRzQ1ZRLzFNUWZqSHZXWVZudnJQb3M4dTJvdUdCSVFkVEhWTko3Nnpyb3R6ODM4V3k0OTdJbTFxZW1tc3NtSS9XN3NDQ3JHU0ZEWCtZRjVtb3J6c3U1SWU1ekFGb2kwS2xCd05Mbzh5cFlRMTdxSzFFTkV5K29qbVc3OWRnU3RpSUlZL3NaTkFaR21hZUE1VjdPNEZDZWNWTE9Camp0a205anl6cWJJMmpUb1UveW00QWxHUHZ0b0s5T0lpbEdkUjJTUEhIQkR4RDBxSWExREw1cHI2a2RIcGg4dmxTaExYSmprblY0dTlLUngyYk9McUhINkh3NDZsTmNNcnlXYXhURFQ4Q0JHNEpsZHVxa1duRVlNZ2ZYSUJIbllHOUlhV0FkV2V2bWhxZlZlampCODlGeVNMMC9zQlJLeVJyT1RzdW53YWRXcGRneVRkRXpxSGFLdDREdVRwK3NsblYrMUtSQTFiUm5PSW5mQVpKTDloNXM5TXJienppR2dndFcrUkJtb2t3S0V0K2c1alY1NGQ3alh1ZXhZUkFINFM0WmRMZi9Vdy9HNnRCTkNPRkhXbGxjRHlXUnNEVUpXY1YvOWczd254SEg5dGF1QnpWekJhdWlXZkdoUWRKcVI4RnZzZ1pxNEhKMEd6WGU4eDlsUTJmUll4VU44cEdaV0J4bEYrbllzclJKV2xVYjFzRjFpV1VCelZnR3QrVkoyVXFnU3FaazVvaytEcWgxd0s4c2dOd1NWNVlaT3lWQmNTYTcrZDFjZ3R2aDBvaElRNFNOUlpOcFlTR2pEWFl2WTgyQTRMemE4MzhpelVTejdySHBwTU14U0RsM3pDRWRQVmh4V2RPclQvOWl5SFVxYkV5ZS9BZkk5aXB4eS9qeTNURDh6RTVEWk5lZjdpeGdTeG1TbFpqSG1hQ2tmc0gvbGxYQlBsWndaWFNRQ2VjUmFzS2w2WHMxOS9hZUc3TnRSMlVqbFFQTWVOTFBacUs1bThZY2dEbVR6ZWFhU1ZXWXBmVUQzUGMxWnQ4SmRHMG5QNVRheFdzNVdkTndNYmxFQlJ0b3oyVFB2OEF4aVUwcU4zdnJ3d2tpaVkwUStyQjVjZ0hwK3VCOGVuYi9zQlNqQW44Z3hWc0pocG5TYXRYNU9YVkxqVnl1c3dpYnJOMWd0U0ZxTEFxNGlQQkdNdDY3MWFLQ2FVSnZQYkVrNWdIcUJ4UFNzTnl5azZRek1HL1dsNjV1Q3JQWTRjM2djVHBvdGxiTm1udlZpTzMvaDdrQ0x0dk43eWE3RjZCbG5hejB6MENmWGFRa2RJMTdnQXhJTzd2aDB4RnFVZmw3bnRXeFk4VHMzYkVYY20xdVVwNHg1VHlHMGRycUE5WXFPU280R0xQMHFrK0hNbmFPQkU0dm5nZ0c2ai80UTJtMGpCMTRpaFk2N0V0dktvUHhQVTdRZGEvSG4yTUZGdERFMlFEdURZRUhTOXBYUEh6V3pmWjRtcnB0ZGtLa05CdEpYUk1YQ2lkRGFjR1YrYW5lOWkzczVKUXpDSGpEWm40cUZkUXpKZ2NPd21XMC82c3d5TVdVTng4dXViNGlLcUFXWndFR2taNHhWb0NFcUw2bjZ2NFFzaHVvWnR4SE05ZU1mWVgzV1VOV3JUN2V5RzZmZ2QwQ1p5SDdjTWZtU0lubVByTUlvTkNKU1U1R0xWQ3BEd3dzRzl5dERyVlU3WXBacFpVWW1YMUxkcm1OdERnRWZ2UGlrNWh5TkZ2d1FYS0RjdkNQODA4SE00YU5mOU5nOXdqSGhja2hUd3ErRXYySW5BdU41N2VLRU5qM1hmWEdaSXdMT0VIZllzWWtNZ2RMN2lZd2Q4Y2F3QkxGT0p1b1hkdnMxYysyVnkrVmNHWHJZYWljeko3czRweURGdEhGaVQ2U1hBaGZmQzRXN0FRU3VBSmdIMThBYnNyOExsTkI0OEV5TENGR05hYUV5aWIwYmJxV1hSeGtwa09TQVpkbUpSOUNZN1pyRXA5bGVKTnM0VmJEMFBBUkRYUVVzMlVYK2ROSXZCUFFoWHhBb3M4aVN0U1FuTXZpQXRFbDRGS1VWTTFvc2dmaHFNaE80NXR5Ly9uWlVsRVluemJHaFFZQ2RBRW1tRWswSTE5emt2SGVHU0xDZXJkanY0cjlJcFIxcWJYeXFxMUNhRnY1dHQrcU0rZUNOUVJiZWxDM1NwNGU1ZWU2VmZyaW9URG43c2lxZ0hpVVh0VmJGbS81WU9GRWxCajUrazZZS3dLR1c1cFJkS2RVa1Y2YWZpV3krRkU1dTZoaXpUdHIybEV2NFFhNSsrL0RjVVlhRTN0NXBuLy8zOTBiYzdPMC81dCtYSjZzWG1MbmR2U1R3SDJCSUwxT0FrYW1KYnZmTktRRkNROUdDN3VWbW5zenFJdi95ajFXYkhuSEVQdDZSMjhoNFEycHJYbkpmYUZPdUZOL3A2M2JUbmNvZ1lHTSsxOXdRTWt3Umo2U0llOEZlcVJNem1LVGwyR1RRajVGbGVTK0szQTVnN0o3dWN1K0Jra2d3bnBGYUtKcms2Y05FZHV4UGNJZU15TzcwSTh4blc3Mkd4QjYrRFpmOEdJSDlIcDhIQ3F3dTBRd1dQRVQ5U1orSGJWL0Vhaml5Z2piSHBxYXdPMjhudktKRnJDV2ZPd2F6RUR3V2FnendXdVhtYTJiejRsa3h2RFF3TnNEK014K1VLTnQrWklOU0xZcEFZNG15MWNzUlZ6RVpFZXc3V3M3Nk50LzNxWks4RFJkMmNTbnd2NWF0QnRRWHEwRE5FcUR0RmpidjhmeEtnWFpGZHI1M2ZCQ1dKMzZsbitnQjdwQnF4ZmhJUFpiL096dGw1T0lBMjVFVWhvZzdoSTlWZE5NYXN0RlZscXRSVzRxaytVaW0xNkRYWG9Sbm1lSlhzQmIrd1RnOUIrdkdUc1BrL3RJVnN3dXV4Nlo0cEFrRHdmTWw4MEFUTEhEVjVkajQ2aVZPb0dqRzZjQm9vbElRcUZxM1dYbVpHdVhmWTBENjlKN3ZwRVhNa3lGWnU3SkJSNWs0TFpvN1Q3NFVUN1l0b2RXbHIwQ0RacmhoTjhwWmwwU3luSXRqOVZGU0NzWEExR3hESVBGcWQ1ZUwwRWtVOWN3bnkvRWpTeHIvekZ6Y2xzZ2diSGhhcUZXTkd0L1NqeUN2UCt5S1poQ0RlVzdDVHNGL1djTE9XdlY3L1h5dWxRQTNVV09TWVZ2NS9jWnB4aUxLRTJaMHBFd2xZTmFiNmUrWjhueFg2ZVlaQXdUTkY3OG5xY0dNcU04WkJKWjd6c1U2bStJTnYrc3N0WlkwUVU0MGpoRGMrU2RBRkpSWFgzb3E0K3QrLzJ3ZitldEc1TmhicUdrZHZBN08yY3dGRkRyenZiTi9JK0NLeEk4WmoyL2hzVmVJMC8zOEJBeXcxaVM2SXdSVXN0SThXRlM0YWlPenRqQUFyZnNnVXFTMWxwZjZNODg2K1NEWGdjSE9uQUNobmw5VVNxZU1CamJwbzRwaTJjUWg1aFNWZ1hlc3RiS21JVXZRSWxuUWpmeWwva0FKb2NNNlowa292bXJvU0dPWFhLZWNoaVZpU0V6c0MyQTByVStkd3VXc0dCUGVLZld4SGoxbTVpelN1VWpQMXM3b0RtcTVDWWYrN28raVF2L1NEREJNYjhXTDF5RUszei9HWTVubWRDSVE5RW16WFJBUGpBZk55aTlmUWd6UXlseU5JYytUVnIxbURwS1owNUlka1VCbFN3Y1dQQ3R1S2J6MGMyVU9Od2tPSWJmZjh5V3l3WFlBdG55b211Ym9CSWxjUW5vUU94aGY1TEhZUFBxbGYwazIzNEk2d3Q5ZG1ROVFPMHlnL0ZUUXlWMElhOUxiZnNMV2FzY1kvRHpEaGRNR0F3WXI0NHAycVdlZ3ZubHN2WE1ZQ1haczVQclB0d2hxSXpXejRJY3cxc1NXSDdlckJiZmtGNStUMXlKU2R5UjdCWUw5YmdsdGxxRG03N05XQkNvSzZEMDFJWGNVVzRVc0c3KzNmMXl6cG5qNk5uU2J1YVllUGV6ZFh5MDFGbmNKeVdsUE9MWlBIbGpZRHNEWk50WklPSFpMVENuQytRMThtNUQrQ0tyb3BqbkJzMWduQzlKS1FyVHpsR3FGZlpzdFY0YVFNUDhXYzZKLzVnVDdaS3VDaEgvMllGbGFZUzVkNG92T3NYOEdTYnkvemh0NXhCa0M5dnFMd0xuMVQyeW9wSHdTdlpSMkpyMFREQThrSlhjaXA5Y29TVWVDbkJqRit5eU0yTlRpZmxIY2Y5SWhGS1B1ZzFObGVmelhpdlNwbzdNM2d1bHBvNGwrOW5aMWxGb3YwSUZnUEsrVDZCeVdBdDI4NjYxNGtZOGxEU3BEc2xwRWtTVXpRdVRDRGhQTWJ4anM3dzN3L3FGaWFSck9ka2RxM2J0Vi83WTVVcVh4ZXBGUkpMT0FvR2QwUW90VEh4NHF0dU5pbS9ETlZnR1RPc0luSWVFa0RzdFhwcEF2WDlTUUQzaGg3a1A5NXhtQUNXekM0Y1E2aTRkQUJSS25qY1NZeHlmMmNzTVNPWnZtVnpSc2l0ZWh2eCt2eXJUalJvUXExekMrZUZJeEtUdVk4ZldhbjZwdU9BbCtBOXowV0Q4K0llY1Rvc0puZXJWUjBaVVhoakM5SUdTV2V6Y254Y3RhNEViMHFiQXFtYlNaaUVidzhKRzZWNmtvbVhGbGxnb2YvaXZrUlRaUnAxQ2c1dHBYVldsK0FQc1E0Y2xyUitSbXFCVzJ6UHBoRTdySmY3UWN6UFlVaCtzUEZZMHVHWlRvc0hHYy9SbWFwTkNQT0J5amdvczFHa3JVOU1veVo4cDdmWTB4YVhvSWlySS92aFdJN3RLWW5ERStCM2IxUGdicDN2a3VyVFpvaTdzUXF1YnRUYWtHMW9aelBVajBxdncwTjhNYzNKUEFvZWhSajliSVRQaWwvNmhxb0FBV293cVlFWS9tay9TUnZLc25nWE14VS8vT2RZdmIzb01ab0JmTlFjUnZJNWgyeDdUQzBLZWJONGhWcGJVSVl0UkgyZUlrUmUvZ0VveWo5QkNEV0dQWUVYZGlUL1VZZ3ZFcDZGVS9ZM2VtNTFCSFNNYmFBR3ZkMUpJMVNoVk9vVDlMc0JqcnJvK3ZhMWNFTU9BTXUyZnd3VlZsN2tXU1UzdXNqZE4yY0ZPSkNadGpteFhxSDJ1KzhuWlJweUtMTEdQa0NFQ2x1elNPdmY1SjBXMzVNRGoxV3FMOWRRR0RJcTBaakJaQk9lUTdlTFJ1N0hJZnFtK0Q2ZlRLSE0xTlhzcHBjQU1nbjl1L0VqMDd2NTUzaStFUDV1THE1dGJSVmtncENhYlE3QmNMVTlYY29TbXZiajVhWElZbG1hOG1qZCtBNk1HMVRha3N0V1lkUnNLQ0pkbklWWm5TTU9lVzVNaHEyVnArNDFETXRZSGwwWEc3S2ZmSEVGZ2h2OUxLQ2p4YTE4OUorVjI4VGxSdDUyTlNYQmdYUVNYZnY5Y0JSSUV4bGw2SjRnUXdObGVSYThXTmxoRVZDTXNERjc4eTB1SHMvbUNzQWNKa0Z3WTlEd3l1amRnb3luMEhoLzNSeTIrS0NjaXpZNCtaZ1lpeGh3UTlQNnBYRG80ajV6cEp1WG41eGZCcHdRYno0YjF5U1JkaktzLy9TSlNxSjRvekRuNmthNHpVS0h1ck9TQk1SK2dvbGpnMWtKR1p5dFl6UDJvRVBTbFhxMi9xa2ZwejBrNlBDNlhaSWJPRyt5VFVzMU9LWkxTTHgrQ0dldUNjZDUxaTkrL29TMzMxa2p4aDk4MXRhK29zMGlFMExHNFFTR3l6R3FDbVNoOEVzZ1ZYbzhqYnc5eWpRWWlWOXdQZGVYWmwvcDlGNXNOR1RaS2VRYmlQWGM1RjhGVG1qaWFKeTRWMjRWSW5DME9hc2lPSENxTllZSW5lbHZKZUVBL3lQbE83SlJzYTBVS1orSUNsWGUvZVpCSUFKRE14amczTWVBK1paYWt0ckRqMWpiSVpvWDlacU9jL2JoQzVyT3RuTFZraW05RTBXRkRnZVpqeEsrZ05wRmN1b2puOVBwWmJnMGVlRGJOQ0VXakJBa1lrRno4NXNMZjRPb0ZWa29Tczc5UHdKRktjNm41NDlSbFFUZEE3YTFsemZ2bjVoTGs1OUxDYmxSRlJHd3dVbGJHdUs4YUpwbkxvd21FWjRaRTRodzVKd1hsaGJZSUIwdlNSaUxaQUNVelV4Vnd1aHdrYS9za0pqWjJFRHRCNDNqQjZNSnpoeFpLWjhTZElNTU9WYjlWQjlmVEVTUDNGbXNGeDhBTnZ5L0FYN0w3UTlIQWd6YlYyU0phakxIQnJTdXhIblZwUkpMWGxGbUJPcjV5enR5eVBjRmJBbmRSSk9QeGgvVnkraFhldWorMGVHVi8xeGplSk1CbEcwd0RTTXhBRTdMREVYNzFqYVo4cUQ1S08xdjJKUFl1S216akFUWUhsUVR1NGk5Y1h0YnRBVXlOTk5RK1ZHOGExbnlrTXUxNTFVbjh5U1g3V2dNR1VuQzVuN1lzN2NDL2NRczdkekNVRHJqNnlNd0JRWDE5bDYxdkZ5VHhmcEg3NE1VUG1FaHJRYS9QeHY4L2hsL1RxMFNicnJRVkFhdWRxRHk0VHZjeXFDK01hMTVpNCtBY3FzTTl0KzFDSWt5RG4zV21YK0lhb2x4aSszb0YrdTVUMXdJT21qRm04ZHhVa2hxdEVHekFXcUZVSk5wd0ZtZ3VMczNwOHBkTzEzMU5mSFdPdG5wQnlBMENMaFVSd2htT2JiN0loa3ZVOTRiVzFsUGRpWks0S24vbUFXanAzYWtMNktVVmdBclZlTXY4SFBocmRoU2p6SHB4Zlk4STdYZ1c2Z0N0eEVtbUxjVWoyeEw4U2xNMGNWeUJoQWZLWE4rT2ZPY3drdkp0RkJRUjYrMWVkWEtrZWtMQ0tpRHVOL053MjZvZE1XOG9hcDBYK1pZTG5iQWR4T21haWVTVTgveHFVWEpNSEZGU3hIWEkyVGVHaVN0THFwU1dBbGtNNmIzZTRDNjc5U3A0UklKZTdrWGpaZlEwOHNnWlNaNmNwYjhJQXdySkpseGZWWWNuVmpaZCtCRTNsT2pSaUI4Yk5LTXpXRnJISVd0bTN2amJuUWlvbDZpeVU1cU40WkxUY1dIUi9YamhXQjBxdVY3VUF3dmY3c2FURHhmQ3h3cDlTd21ueXhCRy9DM21yM0JYRzJjRnVEK09Ocmp4ak1BaERjaGorOTJtZnV6WVJtWHd0aUt0QUNkbGVxek1XcGpVb1ZHaTVjbkF4d056bXgzd3ZaSnJZQUo3SkpzWE1WS3BTTG12RC9KSnNkTS9QaVdoMDVUQTRESVJPRzZLck1McFJpaGZhSitXUnRZRFUxZGNwZ1ZpUURPMkFTbklVNG1FSUNTOVN5bE9kSFF5c1hZQ0hiM2taYnB6eFZHSTBnYXhTQ2tGZjI0a0NvY1BsOGV0RmtjTXNRaVpjelBDd2M1WVREcHcvemhvckRISEtmaUFGNUlMZmZZakxhSlpTbmgzQjVhQnl6Zzgrd094ZUZ6M2NFNkJWb0xjWnVSMGNIaCtObkIxYzNONVM1S0RBZmdUWkltVWdtUjFQeDYzMkVKdS9jU0U5UTVwbkJQUmhrK3drTzRQSDZrWTJ6dEtzU1lhY3ZIYkl5cEdBYXN4a3VQcE5LaGovSUtEVlVaWTcrQmlybWU2dk5IRG9nT3dvcGE3Qmh1b2NoVEFZQlRnbEpSSXZuaWpwZmFreWpmekxmeVh1aGI1eFdyZnRDaGRkU2JNdUtVcHV6K3B4N1lsaktJb1M4dzM5Q2tseDA0RTd4OXZBdldybk01a29SQXpxeTFrTU1uT2pObUR2elZTSTl0NnZLSHVUbW51L0QyS3FKRWhLRkNDUU1UK3ZTbXlPYTM3K1hiS2RRLzJXdUpHZU9KVjBodU42MllEcjcwYk5BaGtqdHJvcTVoQTZsNHdvYlNjSmREdjBFd1lQQjFuaHo2U0wrTEorZzFOVzJTemg5bjJuWlF3T1FPMUtwMStwd2dqMVRHckFWMXc0MGVKb3R3OWZNYnNmc09ra0xYR1pzZk1CMU5aZFcybUd0RHBIcEJ1UWhKQjhjTy9lakphVXBPS3VhL2pNdW1DTEVyaXVtcEJkUU5qK1B4V3phMk03dzE4cUpyK3ltQlJnbFl4RnhGeVZwQmhMWmtzdmczTTBVTnJPUzh1KzJKaDBnck1MQTZmbnJzRnlPVUFYMGVDYzBoNVdRK2tBeC82VERjcnpUYmdQY202UnF5Wm5DcmtTaVU2T1UzSFRwbXV6eEhUUndLNW1BalA3aUU0SncvQmdWV1RYZkxDRVBwQ09sZVNac3FScjVKSHBrdnc4ZkFSS1NUdktpeGJxczlBMWNndFIrZFpHdFE0YXRmQk9pM0tHREFqVS9mWG41ZkJ0ZTkyKzQzL2NUcXl1V0hhYm1tSlhPSWE4VkV1VVN3dEk3VzRhU1BTTnNZZUwzcFZkcFVYNFoxOUNCcm54N2VJWXFTTFBRV3NMV3FSS3d6ajhreWUwRWFwMVJzUy8vOFhCdnMrWXEzYmxXOW1OU2h4SDhwSkM4aGZKUDY2VGh4ZWt5OTVEaWt5aXNaY0dJZE5QUmRENVR0QVcvczQvN1lKbE9Fbzc1REg3bTh3UlVuYUFvSkxmQ250cm13YXdBbXVWTEowSTQyck9wV3Nqc1YweGtMcVBWT0ZhR2NsZUErTWxvS1I5MVZoVUpuOGxRejBaSW5Ba2tuYmxKWDBkK09yMmt3R2ZwWGdsZ1A1V0QyZEhZUHRUaHVFYnNuS0hzNVZPang1WTNHdkNiUC93WFFYVUNJbzdEK1JjR0FJSUY1YjhLd2xxVVJRZnQyY25USVB0cE9hN0dWLytBeWhUZDFPcTM3dVM1bFYwV21lSmVFRmZmRnRZM2hNMHU3RmR0eTI1bVh0K25BZDZLOG1WM1I2bll1eVpkUlVzdTFuMkVxdXJuNW1KekY4b216N2RoejFxaXNMTDJvaHorSXI3LzFYUEJkcjZoS3M4eTRCaTZBZDZiTElSL0JWVzI1dmdmSUgxQTJMcWZlRGtqY2pqanhkVjNQbnlPTXpBYlE2enZSZVg1d1RGc1JybGtHUzJDYm5IbmdmbWRvMm80K1ZiaThLbVpOOHJxUWxmR09Dak95a1U4YzVNVWZGSXdzQWVHUUUwY0l3NkZhNEtyOGNoay80SDNnTWFPQjRzNmM1TldKN0c2SnY2YmQ5WEFmR1BrelRCVStoV3ZVZnM1K3J6bkhwR2lSNzErQmtybWRBNDFFMjQ0UE1QNUxsa2U2M3hZOXFyRGZLNklwUWp6RThoSEVLVHF3cFJwdkY5V3lyNStldmRkd3NZOHFrK0ZZNGd1bUZzay96ZTV0Zm02N2tWT3l5RlNWRVhTUUhZZ1hVK0FNKzArTGgwakEwTm9Ram1HbnptYkJLNDE2akx1L0FBckI5cWV4dVluWngzT3ZpOHpEUEZ1Mnl4SXVqdldsaHRtOCtnZ0RNSG9kY2lPOGczWWxZWTFsTXJJY3J6dWljUFFXcjBDMDF3a3ptUTArZ280aWxzNWJOZ1o1YWlvS3EvOHNpbmRRVUVnTjZncFZVTkFnVmREcTJ6RmJNckVhM3ZuSFZTbWxka21mcE9yTUhBVmhtcXNoek5IeEtRVGdFTzVHTHRYL3pMYTBYRVlMSE9sbGhIVmwzU1gyZndUQ1I5ZlZUYll0QjVBM0l0NW1PMCt6WWF2cnlkbDliVUVKdjlMNE9PTVNJVGdUOE90ZFgyV1dCNytkRmtkcDIzdHJXRkZRcjdyalFuS3JkUkNoa2xYQlJwd01lcWJ0OGo3TDN3OFlSR3VxOFk0ZnRUN25Ldm5ycVExS0VQZ1BMYWVlbjRmVHhiZUV3cFRrZHh1RHlIYUY1TGtWQ3J1OUhhVytMV1lnaTZSSnpnbDd2NXJjL2FJYWlSWEFlRFRrYkw3djd3cVRWSzhremhnS0pKa0JCU1ZkRXJMck1EZ3JBY05iVVN2NVhhZ1U1bzIyWis0eFAxTWh3eWl0RUVEQ2swZkRSOXc4WjNwRDd0NWtjS0c3a1dNRFZCOXFLUG1ZVmNObmlxV2Nwd0dlZTdyV2dMZXJwcGdhU0k4VjBHVGdDc1ArLzhCcC9tLzhtT2JFbkZUcXpCMEdlNXZSM1JiWktXM1N0bWpJTmdKYzgrU3VmeDZMcGhWQXBJNEJ2dmc1dG45TmN3d3UxRzRkbmJUa3JyYzdBUjl3QzlabnZDYkxHeGxNRFo3NFRxaHFKbDBvZ0xrVDhVdURYNlNaWUYxeG9FSlcxaW5ZZjQrcWlhQmNwTlV4dnZmVEJvcitCTzZNWGI2SW1hUEllbUppRDJOem1idDljVGR0VlF5THY4UWxUbmFWYVVaNTJXaHNjMFVyUDFieEJJeTRpSmxHSlZid2tXM3NVYWFkTWtEY2pOSE8wbXcrOW9rVG9MbHFjd1FORWVUS216R0swVjRFNUNMNnZtb1FIRmxJODZSNDB2bUNxYnFBN2tUWklscDJVOVBTQmhsUEpNNXpBeHNYUktERUQ0aU50YnNtVGhCM1paZWhWbWdaQjhLc0h0T0hUcUxUbzBaVjMzcjBoVHJXSnhtN2ZOOHRMejZKdGNmcUhjS3c3YUQwN0xRcG1tT1BFR1ZRazA1UGZtcGVRaUMvdERuZ3lyWjg4TDFTNElURmdrV291dDlZaXRqditYSDNiZS9VR3ZMVmlVZkpmYnNDcUVmeDlROTRZSUwrRk9VbDlBVWRCcGV2SnYyYXI1RzhXKzlZdmxtOGJBdVRLRk9GUkJuaEpRTGo4WDJZY2J1Tk81VHJmZVZKK1J1L0VvQ2tIOUh6WXdob3IxcEE0QVJSQmtDdVhRQVBtRFRmbmVTWmVRajdQaStjcE9iTHFYNjM1ZlROZ1lnMjhaa0NlYlQ3TFRSbVVNRW5ITWRmWnFDMjIyUnliUXJIbE1VY1lpSno3N0xyTUx0MHhnNkVuNk13eEpRZkZmNWxqVU1WSkJtUHpzTDJ2MWtVNDQ4K2N6UjhTZzRvOW5nck0vZ0srM0ExM0xqNzFFUm1QZThOd2RXT3JjbnlqWWVKZEZJUEsyTGRFNWk0b3Z0SzNsbGpFY1JKaVNSVkx0N3NwSXhtUkY4YmZrT0gzanVBR1FhaURCQTM0cEVBZG96V08zWVFkTzQ2YVB2QnFSL0pqYi9naWJTd3pUbHBQVGFGWXkrSzlnTmthR1NTRHBQVmh1SUtjOG96Tk1DdmlhS1FmSEFlZzNSZUxWNVlEeVY5YnhVZmVxUThBUmZkS1lrV1I2WjVZbTZFcGRLeWhEeVMwRFpGYjJTRjV6SGtOMjRkRC94R2pPYUZJS0pidEZzNHBISjFWYXZsdzVzdUhIVXZGQWdFWlRYeVREbWpQOG9JSTJBVkxXSFpjTEpyYTRFYmN1b25BRmdkeVNOSmZleHFZK0hVNGY4K2VOUzI5UFZ2NWhIYUt5bWtnZGlDb1FiTUlZaThtMUpndWlaQlZZbTRiS0xIMjF3Sk9MV1RORExGampTRFZmbUVGMUl2U3I3NEhrRyt2UzJJTmRyNVdrU1p3SERneGsyTGRwZitLUnZkQ3VYZEZ2STB4NnNJQ2ZCOHJqcmxvNG9CTU1hNWRRRTZyNFpOM3UxUkFlczg0Y25jTEM1T3pQTU5nT1RPSzNRVWg5bS95bVo1blFRU21sV2d2bUFvRnBvNklYNGpNVXRWREhQVWlIRng0WUhWQzc0NC9DN21sQlJxTXdwYlRtbkFvcnZxRkdqYy9ETStHd0J5RFY0RjZJMnRPalROcXExZzRSZ3BzbTlWTHdtdGlGVnlMOVZVbXdYVXpGZ3ZLUVVUVi9lOUtCbHZkUlJvSWZMZ0x1czAxb2Q5MEpDOFlEb0R5SkJ2NXZJUmNndmprWERjRDJUQkZVdTBzMTVGemlGNHUwSGJJLzBmcGpUZmwwSE1PN3l3RExKVzBLTzBvZXJ4ZVJGQ0dQODZmdEExTy9MOE5ubW9Kb2VkbWppS3hjS3dCSWdLazJYU1p5SDBaYk5RQ096ajZMTWZQdGpORXRtOVhYbnJQZkpVQlArWkxtOFk0bkhtVE1WYmlScW9CMVBYVDNuQTQ4OHV0OXdoUStaUC9QcjZGdWhpVHlWSkhtMmQvdU5Vcm5RT0E0dHgvN2htS2FDVmRaMHdwYlcwYzAvVENnaCtUcUtWOWpHU2h6MzRpNG9pY0VhTStXVGJzN1MyTlp3WGZpV29MQ0QvanEwL1J1WDlPWmZFRkpuVHIvV0FQTFR6QVk4Z1JSeThIUUVxMXZ4N2NHdDB4TWMvTmRyVGdneWNVZjNpNnZGbnh0ZWNkN1N0NkpJWmhVYUlCOVZwYUtwMlo2ejRkeE0wSXhEYmlNc25JRm40YWdoRW9SQnc0RkZyTlNwa0ttWEQrUWpDWGQ3UU5Kc0NrYjRSaVh0c1VET3QxdTVCWjk2NFVxMUJOVTdMK1FJNlBpSGtlOTlOZXlGbXVPN0wwQUFXSncxTkNlVENWQlNYU0dpaUZtVGpVTzZzaGQ4V0wzQnlCS3ZXUXpNU1JSR1lkZWxCMjJydWg2dVNFcUhtek9qVit4QjdXaVF3T1AvUHJNZkdkZWhVbjJwOVdmRGp5bGw4NkkrQzExZm1uWFBzU0JjSHNpcHBBM2lwTnhaNU9mdjZESzQxNjY3bGJOZHpIRjU1c25KMlc2MVJrZzUwZVliWDJZTlN5a21WbXRSNEhncHZ1TGhPMVhuUGg4eFlmUzNCamphbGtMaUJsT2tYRW1PZkdEaTR2NzVYMXhPU29YVVZyMGJIelBTTU9sRFhMbk5MZi9aTzh2dXBDOE9MTjNyTmJWdHBRb2hmRWVwaFZOeityWUhXdG1tRTJSRVI3LzhOUTZOZ1VuK2Z0S2p0Uk95ZnBsWlBBdFV2TWNuUk1wRVlLSlFsRWF6RndRQzRJSDR6Z09HQmlhMEY1bGIybGJxdndLNW5pYUFDMmhOcytXTHFlNzlXLzRkRnhKd1Bab0F6ZnpwNUkwZk9sQndxZUZnSnBaZXpDdDdhbloyR3FaNWowbU5sOXhuWXFmcmhINXE2ODJOL3FUbnJCSktPTE0vMDlQNFZkOFd5d3p6ZTQyaXZyV2V3SWtOT0NYODlxclJ3cUlTV3Zkd1FLS1hGd3NaejJONEJNSk05OVdseUxNbGxRTmNTMHVLL2lTRnpLY2N3VmtDNkw4SlNVMHM5dVlyQWxDSHpTdjQ1bG1kcGE1MStLQUJkUzhnR29DQndTNmUybHBlR0lLN3RzVnp4K0t0WWRVejJLQWRvSmZBMWhUU3hITXpReFdVSVR0T1pzOGZYRURCUHY4aDMvM1laTXIrQzVZd2lCVHNSSzlCZXVWZ1hYdWtxeWVZdGpwcEFaRHl6M3VTNHpCRGlBdThYQk8vWVJjMXVyRUpMaVB5aTY5OTMvT2hvT1Q5NVM1WlNGRTFRSUNvN3hCdjI2ZVRldWVmNlAwVDhOSHRDQWJvQTY2R2I4aUpCY2tSMU5ma3lLenkxSmxadmEyeXc0UG05bjJ1M3pWU2kyVDVKYmRrbjc2bzhKd05hRWpwRWVZWnVaVDR0MjZaQ2hITXVNVFNEOWJ2S0xJdjM5Q0N3ZHdOS0UzTy9tdTdxMm03QVRpUU5ROW1uRmhIeitsV2RmYlp0a1puYklUQkk1aExvSTNIZHcvdnVsaHloUmxYSmNyRzhITnpBM1V3TGdtVk1RZldBZitLL0szREZHcEY2d3ZqclRkcGtZbk1IbTQxL2hzMFZud3d6Z1VJVDZ6azNRTExiUU13VkpZTzRhSjFuYXJ0MG1kWlJjN2VKMTRKQURFRytjYk5PWWNwQXdGMHpWWjB4OUc1cjB4ckZqNDNQN2VYT2ZWTkttNGpjY00rSEtscnhDeldTU3FGbTVpY2hZRWE2WWFacjhaRkVYem9kMkx1RkpkOVVialo5bUNNa21MV0k2TE52YXB4YU9uUGF6OWtaNkloOEJ1aTBsTU5QaDh1SVBKendFM1JJTU9RMHNUWFBKcWhGQ1FuUk9nTUhWem9mSnhSb2NFUm5EOWtkWmpyRGxHeVQybTJwSDlTZTY0NGtoOU5jOFVQaHo0VFU2U0ZjQzlJOWlTcVVEYzhaejhvN09yOWFJU3hadXg4STUrWXk4dXBlVStQQVFOTk1BcERQUDFBWFRjL3pTWmtGNHA1ZmRSMktOaGlWR21wMysxNkVrZld2V2dqdDJObHV1YlJpcnhIT3hxM293czNyODZlTzQ5aGgxZWFLcGNMUzBobytMUStVenZ1SFJSbmp0WXVMOFlDZFhFenJMdjR5c29QcEJDYXpvRHN4Yk40Q0UrUnA4NDg4UktvakFDb3FFemFLVzcyODhDWG9xa1QvMmN2K2RIYWFzbVF3bEE0UHJvdXVLVFlGWXg4MWNsVnFkenI5YmRTaEpTZHl6eU5kUm9RMkNvWFd5TStaZTBlNk1MV3BQSUdOcEs0dncrSEkvM0l4S3RnV2hYOHNvaWY4cDRFSXZJVnZubGp4Z3dYUENLTXhxMFZUNjFxNWUzQmJmYWxtRmJTcElITFNmV2ZXVHdzbm10TFVWTHhPTkk3MTYwcytYOXN0UUkwMmpBRllYYXhRRS9UNXc5a0JiSVNjc0RlMUV1S3JxV2VsdjZyeGlpd1pQUi9UUVFad0J1dTJoMFA1aEtzeDhVUnBsbjE1YkhSdzZvNCtSVEp6UndWSktxODIwQkJoS3JwNUJmL1dzM0llNVhsaTA1STNtR05ZcVNqbG5JVXA2M1hzRjh0ZnJQb0ZMcnROSmN2UWVNWXpTVGluYUU4VEIvLzVJSTZJRU9YRGZxMUR3NWlPdUk3Y1kzK1Y0YVo4M09zd0dDNXdoMzBvMmFGb01zZ1hxMDFOUjlSSmM0RXk0c0tLSnhheTV5UDFTb2xSWlZVeFhSMUFJTmZrKzlqMUNzRG1XZC9IZTc3V1NhZDRteFhubXFTTTlabE1QRml3elpvMDl6OStjaURaZ1pzWmhFZ2ZPRHNrSHI3Z0VpcEVjcG1ES3NaZk9uaG5QVUZzZ0tqSFdzRXZQUnh2eHdrR3FmOVpLc2FwelMyMTZFQVNtYW5ZQVJUeEpZTHZFY2V6ZHYwYzUrWldXSlkzQjJHTUVKRHZFZGJSNWt5RFFnRkV0MTIzUGJsSFhyMXduVkRFV1U5cndRVkhmdlhQS2ZHUThaQ0g1TTFONlphMUxXQXk4L09EQ0t0TEdVL2t4dFppNjYvdVQ4Q0IrejU2ekNOMkhiNURIY0s1a3hQR0dNZFhQWG5LU0VBUlJlZmhCbmxGcHZIWnRwK3dIdWpFcm1nR2FmN2FIZnF6VW1yYzM0dmF1UStxWVB3OHk5RUpTMURDNjdBWjI1R0dQTllGaytjZHRtWS91aEJLMGo1MDZZbHJxVE9MZ2pQaXQ0R0I1L2FiYkZKZFFSdHlKZ3FpVmh6QXlpWGR3OTEzREJ3SW5PT1lCeG95TWdNLzNCNzZ4L2VyamhONDNnbytieS80YmwzOVg0emd3ZXNja1E2RzhldFNYeWxPSDNPZFRqVEd3RkhrQmY4ZVIwQUsvSk85WGxJbHNjWlB0d2g3eWZhYkxnWHl3dGNFaGIwc3ZpVWk4b2Q1bDRhOGxkaEpZWk5WMkVBYm9SWE05MVZCbXRQS0lRS1hoL2g1LzB4ZkdmcW1JVDVtS3c1aGtTRDJmQXdoRTRqUitkeEVKakQ4RTMyN3E2ODBZaVdwUjFNcjdGWVJJVjdEcVdnUTJZLzRFdDQ1aHhEL3pZMjE1QUJWL1dGUUp1eHJzTmxQT0pEaGl0eHJOUUlvWUcxYy9Rc1IrY1Y5NllXaWVKb25VUUZkdCs5Z2Rzdk1oRTdNL1ExbDJvaFp6ZkZaWTRlc2FrTlVxRTVBMllHWkRudHpNN3h6YjVnOU42VDd4RGNpM25WWmQ1UnphU1oyUmhrNldpUFVWTG9MakNxS1hzQzZSZGRUUGJ2cmFIMm5CRk51b1RWbUQwcXB6cGpjNW1nem04UWpiZEJRNFNmLy9jVUFPR0MzZmJMQzg5dTlnTyt5MWtZTHFIOHZKUDRkOUdlQzdPMDNuRHR5d1VTSnIya0RlZUNTeWpTTmRLU3RPa0Erc1pqNHdVVldLcUFidll1cU0yWUdqTXZ2SHpqcWZhYktLQVk4eklYS0diM1Fib3Vyd0VuV2ZGcnRVUGYrYXE5S3VFUjQ0aEpnZFlpbDUxTGNIaGJROG1mYk5FVDJuSXV0R0k3OVljZlhYaUwyMnU0MlFReHI2ZG5qTjRHaW5ZbjlpSG5KeVZPYUpPTE9OWGUycTR0T1NkSTUrV1Z5Uk9VRWFOeHkzcVByL2lqM1NBNXZVaTFCTFZ2NXJnQzdRT1lqZFl3Zm4yNHh5WWRnelBKNUdmdGwxb0c4NFRzeUpjdFQ5YkNJdXZQazU2cld2dHhMSk4ycWt0a0UzNk5LdjlCditJbW9mamZzcWRDNjM5Z0JCR1ZvNlVhTlF1SFQvUC9jeDVJbDhzWk9zckRlaG8wcFQ5ZjdtUjhYdWhuVlhTMkllZndicHNZdTdoVEQvK0RMTmNKdlljV3gxL3pyYnJwc3dtekd6Y3N5dDVRTy9jbEFYZmhWUllNUWZMbE9yMUYwZXlyZ1U1eURhSENYTldLbTFPWk9ZSnBsOEpuNlhZbDN2V0NGMUtic3JyR0pWbjFCeWV0RzRiZTE1eVdxcjVHUGNlNEhGMk5rZnJuanRoc29saDI4d3lGU0I0MkozU2JjUjlOU0c1ZlpDT0xWTk15UW0zZy8ySmJUYmZSWEIwbmNMVHpTLy9VSitsb0NWL095MGRMVWtNaFJhU0w1WWZPalNHLys1bndjclVwMXhrT3JrSGFZa1IxZFVXWkVNZkNQNTI0c1RWakIwa0V3TjFEUXVxOHN5STgycE9ad1IvcDh4L24rNU5MZFh3ejYrTUc5UCtrcTBZaVdVUW9LMENQRWhSWlNaeVBBYm90OXhBMzkxaTVoaXF2MnhHVmpyTTNSd1hBUzFqYm5HSnNvMW5KMWh1YlVSR1l1T1Z0R00wWWJQaGEybGl1Q0wzdXNzRXFTaW16eHJTK0JQQnFwTkxUa281T2UzZDJJVkFuOTk2c29MZU1xVXEwMUZsNmpJTEtjYnplRENTODF1T0tUWHJscWJBTTJaU1JDQWNYN1JZdFhUVE83Um9RaTFHQ21pcG9uWlZ2M3ZXR0JlVzJleHYxS2dGVXl0cTN5R2g3STlvY3hKOCtJQ3N1T1FGR0NRa016WkI3dlh2dElLQTVUazBzQXB2bzJKUStWQnY3RDhaM29WMElXUkZ2NGhxRzFETXI3Uktqb3pFTlRIRURncjJuNVV1bnhvcjhMZk0rK1R5bWoybjYvN1ZXQzNzL05Dck1SMGttelZOdWU4SFJFMldNdGJrVmR2QXJld1paZm85dGs1bEpoMS9KdWs1N2ZmcFNWUXM1OW81ZDRMV0taMFR6L3hGenZKVXp0SUJxYWJQRzJEbTd1dU9CT01VZTBvQXNQamp2c1VPSnBQQmJ6Qi9NU0MxSS9OYVVhcGFtUUVDU0NRZXVLMTFrRjhobTJ3aEQ2TkY5MytZM0pmUnp1cEo0TVhBY3NpLzY3TjZ1eHdIMnBYTTNWelZFSWltSkZrbXRqNnJvd0ZlSmxOdGkxN1dheHd1L3VjcjVwYjAwWGE1UVVqaEVvVmxXbE10ckdOQmZjRmg4U1JTREVicGl2enA5M255SFdZS0VxOGdNQ1JmQm1iUUlIaGdDaDFjSERUdnZuQ0NQSHA2MWd3RXNQdUxUWkJVNFRhNm1oNTRzelNFMVBvSXhFbEtHSXpVQmpaRDJiUzJiL3ZMcW14K2FZRndGemRNWU5ZMWxGZExMT0FsTlBObW5YcExsQXFIczFrYW9HMFA1ajkzNThZcHJ0V24wNFhzOTI3cnlYY0J5a0tmb2lWb1FaMGFOeEJYR0NaVjE4bmJiL1ZJb0l0bmxQTW1rcGorNzZ3VVl6QkMyNWJ3YmgyVXNXS2RJYjZYSCtCRW4yUm5FeU9ZTjVocktoZ0hqS0tmdlVFOVlvcnZNZjBaVGdPSHFza0tvSHVqa2pleXBTc3dyS0dNUDdJTHB0eXhOTDhURC9LWmNmNkR4VHpCbmlzdDBnQnlMcUhTbWtLSE05TExZdDM1OHdqOTdxWXBHalJzZGZ6Z2MyYUtiM2ZCekFPSDd4OXU3Zms0QkxJQ2hjaGNwZXdJKzVwcEtpV0g0UmtiTWZNSHpDOWJiQXYyZEFZdkdhOExmakJ6OTBURU84TFlraVJVUmw4NklyblJScllLUnVIQTR4T2ttbUhmL0hxL0xLN2pEMlVRWnpvOGpPUy9DdmVHby9IK1V2Y3BvemRtQ2N6cU9DS1JXMGZiYzRPdm14UXJCcVZxdlNJZjUxOW4xeVRHTGZXK081TE5yNjBhT09DUU5FTkc2VWxlQXVMTnJESTZBN0F0cDIvMFpKSEx1TExSNTBzTGtmbktuSHhDYmtpSVhMd1ZnNDJGcWMxZVVkVjZvT21MVFE0Z2E1MmJDZnlhL0JTTUtrWDMreTYyYlpaQ2JDN3ZHNURYY1dxcmtBT0NFNUVIUnhrWXlwU2gzVURpNS9MSTBHakMycUZ4Y25qaEN4Y1Y4VWg1YVZDb2c2djdnODE5TVVnbm1KaWRwWDFvcDFaTXQ5UkRTcFNYN3VrMWNoc1E0OWJQdURDWHhOS0VUT0xPV0hQYlQ3dzkwanVTM241bVBmWnovUXlsNTRzTExDUE85RStFMk9YbkdGeXY2RTJaSmNFUC9hK3FCdXZVTjVUZjhrY0pOT0kwV1c0RmFuY01wM0EzaG9TN0lPeDNZZncycUxWVnlmejYzeU52ZC9FbmNxUklsM0U1eW4yQ2hnQ1p1aDBOZEs1MXh5dGM3WjBOaVYvVEJTWnRYMzNFUUFKUi9hM2ZUdVEvMjJYbzNiZ3NaOVVOaGdYM2Z3c2Jnc2RLZ08rd2ZIVnI0bmRFeXRib09sUEpNdTJHcmNwNVhKdE45RlZmVlR3UmtLVmFUL3MxckZMd0pjZTBQd0N2R2kyOHZETTEwR2VjOHBYTEJFeFNxcW8yK21vQ0pMTjdka0lKTjBLQ2hIUHFGbzRDS0NOaXJnOVFVT1dTWUNUd2s4TnBFcmwyOCtqci9zRFlNSVhaUk4vdTJyLzVpZSs0ZStsYnQ2VGVsdDVEQXV0QkpSeUFZVzVzSDVIdTdlcUxDZ2NielZNeStWdThab3lOcy9EMUZsYnBlSUtWbTduUCtvbzI3enpRSVlWSFRxSUw1bUpKYWVXeWM5ZVV1REFOQ0ZqWEc3YTdXN2FXVVcvRkdpRi9NUFhaZUE4VkpJUWhxQS84c1Q0blUreVFtTlY1UUxyTFJPbnZmVXpjUFQ1cTFOeG0rTTllS25vUjNHY00wdHc0anBKZUV0c0U4UEdGMTB2NjY5MFdMaytWSytRN2RmZmx4TFlBbnMwYVlYNmIxNkJINGN1VjFjQ0xrKzhjVHlYaFBEVzBJejVEOFRXb01rRjMwVG9tTnRtbGJIcWdMT0FITm42NUFVQ011MzVIZSttRXlRUW41VW8yZlgwWlhTS2FvQjVCTDRmNjI5YTFDaERHUGpjWjFRb2Q1aE8zb2lNNzc5dmJOdnJjK0doMXp4c0JXNml3QkNJa1VtVHFuOFBPTUFsakF4T05UVlRxamhPL3RiSTlpV053L05LeDhrNzBZOHIxQUoyUXQ4azVFTEl6djlpZERwRXhpRXBJZGNCMkZuVHB5SkxnN3hkaFg2eTVqQnhkWU5ZYWRJdS9GZElESE44TXZjNWhBNEJMS3JRbnZvMVBHaHFETDdkQTlEMTJmTW9nOVh2azVkR3hzZm1XVHY0cEdQaFYvVHBINTRrSUZDOUU3WXBNRlZRbG90WGNCY21ZdGV6OU9yM21WaDkwQXNlVXZOZWZkbjFzUFkrN2tHQU1tc3N0dTZKbk9TNWRyaStDZFFFMWl1dGpLQTdnUTllYUFBYzNseE1TeGthSFNSQWl3eFhhVk40SFFpaEhNZkpsWHpIR0c1M2JSVGhST29rSm13ZFRVcWVxV3hCMnRleG02Wm8zeEtlQmR4Uk5FVmZlRmtVQkt0aEJIMWdJVCtzR3JUckpHcU85MTlCbC9xMUE3MWRjRVhKL1EvcTBucDBWczRvZHZCREE1cUZ6dzVzOGtsblRQWkFvWlM2MXNtQW0yMWRmbWh2UzJkemJjUlUwaXNvMHNFWDVEVXhuV0pLdmhia3lvdTZsSmNhZzBOZlZBN0hFSi9WeU9NamdIanFYRVZIZlQ4TmY0ODhBdTZ3amp6TUgrL0gzSWV1YlZlejhXNGdxNHh3bUlIYkNTeGVQei9UcjUyWmVxVHZrbVBVWnpwTEdMakUySVFDY0lMMEc1WlhTWlAydFRDME1KNko1MVB2bWVOc3FqT2xJNVZFVTU4cjFBZ0lRU0ZZaVVicDZpYkxUSGFGZWVzM2V6M0JkMHkxSURpTjRYQ1RkZkoyOE1sOHBBOVB6dE8xUkZ4c3c1U3JXYmtHQkQ5bjcybklpUXFyN21BSDA4OGMzTFVsVmpiempDMXFGclZkdEs4OXJTb3BjSFhobVdvQVlTUUZaNk1PalhxZkl5Q2lpaHJWUUlHYUUwWmFYaWVGa2VaRk1udTZuM3ZUWmZreWs3TnlGMmdOMUdZZDhxS004ckJ0cUZ1STBaUEdCdEpuWk9XUjZxUS9oaHlaejZJaktXa2lDMTJXVjFlck9US3JhVy82NS9tVXZjY21ZN1QwNU1BTlY5M3dZbVZuQk1pcGdRM3hQdjQ0aUhCcDF0RW8zdnNzNkx4Z2YyQjZySTU3MzVzTVc4b3RneGFtdVptMnlOcmdlYU1rcHkvSVV6ZVh4VjhUSlZ6RTZ2N1RwUWl6VnBDS2hRSmNLQXYrZlhac2F3ZzNYU3Z0OVA4SExkL283S3E5YUtOVUg1ZnZsNFZBbUdsaVlTUXZXc3R6bTk4ZHpUMzZUNHJaQWEvQTNyaC81VmN3TS9lYTFpUjcvMkdhb3BTbzRUalhQTUtDMERURDRnSjBXRzlwdEFIQjAyLzFXb29WZjZ5Y0lkMUJRa1oyVm1BQ05jcmtOV05BZDBuNEdQVk5HcW4vUE1qblI2eEx4dzU1OUJFRjdyL3JYZlh2YXJVWktoWXo3K05aQytneFd0d2dzY3kwWmNkdU9Wa2hOd2tVSEc4LzI0ckp2NkNyaDJaSzJZcG9zc2dxdjJHbm9TZERXelVlOGlwdkdjNWFtTW4ybzU1anRMdVpSdHdEdENRbXlnTXJDTUp6dW8vVi94K1N5bElDNXZZc2JiQWR6dGRzdnJiNG9Vdi81SlB4Q0lwandUK3pNdnh1UkJoYWFKNzRtVUMyWVNPOXROVW02a2JwQzEzZE02ODYvUzdKbkFDV1NPL0Y3bEJkeUpUR2lYL0lyS2Z6R3lUU1pZV1dRMEJhN1FVVWsrajMzQit6OFN5STV5NDhjZ1I1N3JBejFkampBMXhubVpMdXA5Z2RnaU9nYVlaY2REQVRiS2lDZ0Q2ZGU2MHJtS3FLcWtLWWEyVW1oMFh0em5DYXFDU2xhTUlVQUhjcVBnTVlZck5SNnJnMHc3L2owZVc2MXJRRmlKSkFoZlFlOWhMeUM2OU1UVU9IRDBSdS8vZnhWai9zdnZEaEUrN3RwMzA0VVEvMDZSTXVxclNBWjNEZUZFK3BiUGxuWXFaejd4b3JqRFhhWjVJWTVzY2M0ZzU5VjR3c210bjU0RlluVlZ2QXFBbEo3cENqZFg2KzBlc2JoQzNMMnM4STZhbHJTdXdNT0RRZXFqbXdFSlNmQ2F6emhzbW5kNmxhMWZpRWljS3ZIUy9RYmtjRGhpVytYMmlXWnJOU1VNOGNHdXZWOHlVRldzeDZpdXd6RThuaUhobHZtVTgrQ2s0M2tqQmN2aStQeENCMjBYMW8raVZLblVEb2VaTzZneHdiS3JuY01GektIR3hSTHpHUlJOZ1AvUUxLa0lDZnlJMFk4dzVBRUU3c1ZtSE45RGdxdDlFakU0RG9hTGtMQmxQSHpzTWNpQzErNUhvb2cyNGZKSnVSWUJULzFSdjJIYUtibm5YdXJlcGVCU2VXVXJLWm5RZkE1dlJxckpPWXprbUpKWmZKUFhqZ3JIMWRNL285UTBtcGgwVDhjbXFZWHZQd1h5c3pLZTdCZ2xyMktQbkJxQnRoSE1EY1dTNndpN1lPWHhvb3Y0YVlySGtCeEJQVDFwOEYyenJJQnAyc1Zna2hEcnNacmFjMnRHS3lvVWF3ZFpyaFVILzJhVXRJL1ZsdGFUK1dCUXBLcUZOUWQ5UXFPWCs5MzNDR21hUWxWRUNSTEtXbGRZZEltTlVtaWtLalBoTEhiM1pOc3VFeUxjdmROZmhPNW9TRDYzQzRyanZ0UVdPM0U2amx5d0ZRSXhZV1pSakRpL09yQ2hwYUZnU2hHdVJxRGkwSDZZN2RRS1lwRDMrbDFGRUNxb1pydHcwWkd3SUFWa2VQaUh6dzRWWXNvM2ZKdllsWnJEUkIxemtBeVpLT0o4aUlkUWdJY3d3bXFETHdGZUprVktFWUFOMWxZZ1RCQ2U5bkpYZXJ2U3N0N2RXcUZaUVllVFpvTktXRnVjRm50cHZBbW9xemlYUXpmczBvZDJUaHVnZGtFbVNYMWozcHo0TW5ybkRjSDlkb1BwOElnZnJYYVJ2N29ZWGZ1RGkrQjl3TnJ3TWFvWkRTR2xWSEYxZTgwS2FVWVFYTkRDSHdLRU0yRDY3TnNneWJvZkFoUG5QL1UzZ05VZjFseTVjcWtDQlRpb25TY2liNUNUVEVscG5HRVFhRldMclNORUhkUDNzVlZZYUo5eGJDMVhKeXNjRm5YS3Q2RFBXa09Wb3dET1hEcEZ6UHJPRDZNOXQ3NERKOHBOMkR5bUQ0N2N4THhvZFhtOXNIMTNnZmhHNWg3N0ZrRHVjYzVSYnVKbENudU8wR2YvY05KM05xR3dTNnAzaC9VbUoralQ5U3lxNnF4WjlaMTg0RWFVQi9MTVZjZ1NZaEdBQ0RTQitzR0RkVVgrNlBkOXNFdlFZK0xqTzRLYnpMa2RwVG5NTlJyQnpxZTd3ajlPTWxCZW5Uc1NpNzlXdVA0WjZRT0JlM2dHeEdZWUZzRzU4eXROZnY4eVNPd0t0QUdVOGRsb3poaGdNNjJjWVpDVDVYdmlGQnhZR1I0TFdRcExFTlY4dzA0RTYwNDRMcVFETXpHOGJmNXhxYnJadGs3a1ZwNTFBSEMva1ludGp6VEFocXpMc0JJSU9UaEtCS3lvMytldWxLVnEvSXZHZ25pRktQVTU5aU0rNTh5UDhEeU41RmdMdi9mYS9zR1J4RVk4dGwxdnBpZmM3TmZkVURUYnp1UW5VbkhWN0tLck1NRlhBV0k2dFNqbGF5U01vYkMxbG81MHRiZVpOVDg2c3BRbm5GblhEeW1CYUpONUZQSFB3WWpBaGhwR0thNFlmT3JZOEN4bjZqeG1yT1QvNi9Ib2JINWl1MHE3eWhVRVVKV0lJSzVjckhkS0puQVdBb3EyZkw2elBMT2FHNnZ6MVBTbVhVME9DYlB1U0tZT1piQ1lTNFhMdkxIVWtmMU1pdHZyQWhObUNNWkdPMERHVldMZ0xyTDI1VHlObytTRkZZT2dobmNCNmRrZzRjRzZJM29kWUtHVTBRZXkwSzNKelRqQi85RlJFaG9YZXN0YjRFSG9iV3hsc091LzRKSll0ditJekwzRGNQNmRoYUhWUE9maDF5T0xuZXhBQ1d4T04rdGVkdzJJUERHdEczbm5wZFFENElibzBtUzJkMDM0QjBwUzVoT2lzVm11TEo2L002Y2lzWm16dy9zTWQ1eUNmVDlhMG8xb1A1NXhWYTZHUUUxdXhDUnRNVWFtdXJYN2tRR2I2TU93UGxsTXRia0EyWWdHblhDb0RKZXR6ejJCVmNIT25nSXIrY3FXZjhpREU4dmY4T3lDZlplbDQ2Smt3WlZpVkI1UGxiR3JMUzgrNEhtQnhRUzhLaGp3OFU1SDgyaWI0eVZmaFVGMXJYb1MrWkJsRkVmYTgxRkh3WUVYb3ZKdGJ3a1I0WER5SFlGZTE5S3A3Q1o4bGpQSmxiNlRGUjdJRWxxMHFUM0EybFNjZFVhWHVmSW1LZ29ZQ3FuWUFyNk1HWTVkbWRwSHl4VzZUdHRTQUVwTHdmTjk3TWMySURpU2Y2bVFId2cvajR3MVNYdEZ3S2lmUm84Rkx3YUFsZy93c3NIVUVQTk1ibEtKRjhsRmZEZWpSYnY3bUQwdnVKS2pMR3prdUs2UC9pUXZSdFJxckVZdWJoMVl0QXVhTFdBUVpyalhHZGhuTlR4RllTeEtmR09XUEVTRDdrYWVSeURsb1E5bTJ1dkpXYU1WU1orOVZUZkJHVC9TZFdONkU2ckEyeWNvVWJiS1F2YktoaVNnT1lWWWRja0JkWldLN1k5QlJIemNQYWEreWdOTXB6TE13VTFoamVPSVdKck5XK2FYTTJ0eXBoR0pVQ2p0anlncVVObEhYdDVqd0IvK1ozUWZjemFSU1ZScWNaQWx3R3NXcWtUdkJsSEdDSEthdWRPNlVNNkV3WVZkOUtuV3RzS3dFOEVuTCt2MmRxTGIvWTFVc3dGNC95T3J1K1VVVWplSGgvNzdzdTNHTzFnUGgrVHJTSWlTbURwOVYrYWp4U1R4c0JBb1FOVDc2UHdpRlplT0VHekMvWXhRYVluYzVOeWY0UVhpT1hINjJibEZaUEZYWEVwRk9RV3B3dXV0elRITEpWaFM0VUt4UDVSMFpqdUhRdWUvMk80b0hTc1FES1M2c1BiMURmd2RuWThyNFIzekZmSUZIZkhnOWExRW5UdlFwd0toaEtzV01KQ3dNZHlyMmFyTlA3V0wvSS9EYVdQcXhlZ2RFWFBQc01xY3VQVEZ2Z2FCZXFXRkZMOVFBZXA3YlBldlBuN2VjdXhKUDgyTG5uMmFJNkV2OGdVQUFLU0ZBazNBQlI3WERpd3BGSjZPUGd1MElZZ1U3UkxpOTFqcm9KUHJDYUdlLzRqWXdlOUMrYkxlUzIyeWxNL0NIVlpMYVUraER4UlNkRTRCSFFGVStWWFFKWVh0b1kxNlZwai9OTHRvOG1RWTQ4ZWVnTXZ4MEM1cXQ5SE4zQXBqT05HRVByNURwZGZCTnc5NlVQL3k2RTBFenJtdklISVV6aWkwdE5kMFJDZGdFYzRieSthRGtIZ2Uxb1p5cnZTeTU2UERSNHAvMGRIYm1oVXhrZEZxOTJ6dGtuUVgxaEgwTDMxb2t4Q2JCbXlKa05uT2JBZUFLMTlGa2dIcUxCTE9qWlA5dHk0VXpoajRqb211TUxUVmJHdEMxZENNWTVOb0RDYXVOSG1ld1VRQks3YjRlL3JKUS8wUDUvcGFKZTVDcTRkTW13UXY4TFhFd0g1UTJyUlEvSWJKdUVFZTFZU1VaZ0NrWFQwTmJJVk9yS2J2S0J3eDRXZzhMOTlPRTd0VTZuakgzc3hqMTdPQTVCb2xFUEFmamx0ekk3cGZsMnhTbDJCR0NyYmVhVEtNV2J3ZHUyWUs3a3Z6SXBCZEg0dU9GNnJ1L0x4VmZmWnp5WU9SUEtwK1FQcGJCb1NpMThOR1IxZ0RDTFJEZTZ4cmZWRVNlMXI0amJFWi9aQllDa3YwQ0YwMjRnRWRVNkdCNEowQXFvL3V0RzJLb2QyMHpXWDV5MDc5dzJTZFV4ajhKTDV0WEVad0V2ZkdnKytSNEtNdTNMR0hzME8ydHJ6czJ4eEFLOXIzSmZCWElPWnRQQXhzSG8yb0YwODJRbkFBa1ZLSFFjS2R5bkd2eExoNnF0SnR2VzhyM3BRWERORlVrMzVoUVg4bDRQdjlyeUw5NXdra1FCSEQvVXBLcXQzeFFvMUhlaWh4ZkZUOXZhV0xGd3duNkVJU2pQcEFwc1VKY1diRHE2UDJ3RWYyckRxWG1JZzZwMlFSMmVpa3k4djljRVFjcE5RN3hCanQ3UmFiYm41L2JKYlB3QmJDak52c2grcUtPekNNSFhaSVJzRVlTOWljaUhiT0Q4OE1vdG4vTWU1VUozL1ZtdE5lZXphaXhZSklEVkwrc2R5U2hoWWNRaUhWczZScnVVMEIxakVrU1hEbW5IU0xKUEpxcWVMYU8rUlJUOW1EdW41Y25HRHowdzN2bkt2NGt6VDlaSVJIRGhHTTIyWVppdjZXN2xZaEcyR3dKVlV4T0xsNmE5aDdIaU11KzNYaDc1Ylp2ZFZCempyWEJkOWxOMTZKNU1VTVRSbVFjRktkRFNTQ2YxWlU2WnFISGJ5UXh1bFhwVVJyRnpsWkJ0MXp1QzBUY2xGWitrb2ZxbE0zOEM5V3UwTmFNQ2I1bDhBOWUyUjJZTnlkNnNVWnlSRzY5UkpSSGp5Z1lTeVhZbUpRSTNMY20rVTlXY1VraStYMVJyak5pbnlEMkxqdUp0M1lWMFdtQUl0UjlJUXN6blpqblVIUEc5ZkhpZHNMZHdaQ3lhcHBaZnR1MWtvVmkrcVdwTDlLUWJHeExZSGVWeFE3VEhEa2NRa1hQNWEyaDNNdmgwQ2ZQWUQ1NjUvV2swRGVOQUZpZTI5UkJJZ0xsUkdrVjRkOTdFSWJnY2pYZnUyWUQ3RUttNytVZTA2eUdUc1Y4dmVmSHNSOGZ6djZxVldjbWl2dUd0VE56LzAreGJHZUtJam9GQWFUY0Rxei9FbWc4NDhjT0tCUi93QlBxekdlNllzTU8wQ3RNaWgxTWZhcUNSVGFpNy9DbHdWdWZiYUo2ZjhvWDdnVUJpNWtXbnJFdkR0Mk01andGN0hBL0lodk1qL0VmZlhmM0ZGbmhuMDBjQ0tvRE4xbFFSNmhLMWQ4eGV1cXdVUjRTVVRVcnlOR3JHNEpZV2MzZzMxL2dIYnhUYXVNVnAvMm5XVFZGRW5xbUpaazhDRnVNSXpNZE5UWTJRekUzK1U0Mld2NWdyK0l0Ylh2RTExZnF6OGpwdW1NSE1SWlJER0tBMVVVWHA5aHFqakZmcXJWcHNxZU9kZnVzbjNzazA0NDVxdE5pd0lmbFUxbEhLTWNUTzZzSUpBcFlBQ2FBTnBsNGVhMjJzR3d5V3VOTnlmZTEzWEJ5TU9VNzd2TzlkODVvejJhUHlpOWJTYmpKOVhKZ2UrWmZtczIvT2FzenBxcHpEUGN1N3NQQmlDc29JUU1zT2NyenNHbzNlUmYrTEZVcG8vV3V1OEJySTJNWDNnQUZjWWVQaFE0WHF2Mks4Y1BPcDBINThxekxiM2oxL0V4WEtwUEZ5dU5sUWxjSGdsbGdKS3N0K21Ga1U3VWhyQzFoM20yZHYwRStmNFVYWE5jUHMvbVAzSXB3SWMyb29xWWNOUENiQVFIVDFmWFlmVDRwQ0krWVJmWE12M0VXYW8zenVneFpFNURHU0JYK2Q5aXV1cVVwUGpNSTNZU1VvVHhsQWNudzVhZXMvSTFod3E2cXpNaGwxNE0yYXRtVzh0K1Y1aTd1WVBIc2RoUzZEMkxUT3YyZnNDYXg1Vk90Ri9zVnVWVDd0b0oxdXZBZjN0R2loQlZIWG1EalQ1YmlXZlk0UVZFVWZQVklJUzZicmtmVWJRR2Z5ZHA3QmQ2eWkzMUp2QllWNmF0YXVLQ1QyK2g2dVJXMEtBWk9MTkFlYzIwcHNoVkFtZXlTNlpiUk55OU9XZEtvYVJkSDAwWjdHODhPNHgyOFhxTnltbW5Xcm9pVjdMSkNUMEdMYm9JU0Q0OG9PMU9MRWk3MXRLcTl6ZjhHT2oyaG15bGVSMTBFeUJxS1o1VUFFWVZ4WklqaU5UMW9TU1JNZk9KMVl3azhJWWdWakh2MmJ6U0ZMUnF1RFIyVWs2dXBFQm1tb3dkSGpWVXBqSHdxeGNBL2xobnRveWNVbjJzQVR6YU5FU1BuQ2J1cHBybmxmbUhaeVIvc1pKVjZLeW85Umh6cERDQmNJWm9qRVhLbmdjNjdLVWwwWFh3MFZzTmx0eklUZmg0Mjd5b1hYYlZmSnUxWjVZTVpaT25zVmt3bXJreVU5V1FoRkNxR3pmTjVRdHk2c2NkS1VaUm9QWXNQSm9ycllSQkFoa1VzSFZDZklORkMxWVJQNW92VGZ5NzJQVHQyTTdzbUdBR1oxQ0Y4dTJ5RGY0Q1VvZk5GeHJJQzc4MDdienhzQ2t3TVBxWllkWUNwd1VHSDdCWlZZVXZzd1RwU2oyYUwzUytNeHRrNHZmYUVrZDZ5TVRCUU1IKzNiV2w3dFgxTytUV1g5TUw5UDVvbERXbGJNaHdWNFZ0L0V2UExJeEs3eUFSZTcyaG90MjlsME5aSUhVWmRjWEYzRE93dGUwNTJ0dDdhZEQveU5LRzY2OEY2b3BoUHhDdVBHYUVlRzI2ZnNOaVBmMDlaUjFrR2RnNmhURUk3Y2JyTUZLajhtOWVzRHdyZmhKSDlmL1ZMSFp5THVtS2V5cGhxNkxzME1maUVpR1BxT3FzVllNYlpkcXpQN0hjcyt1Y1lUNlNsMVgwOEl1QU9QNjVLTjFJMGFBUUZFU2F4THdCNXk1OUhveGcwL3d1ekxtNXAwbzJWamZ4WE4vR3RScGVYZCt5YXdKYlNFNHc0U0RCV1NnZXJNNGR6ZWV4d3IxTE9lS0RQalR0anAwTG02RlN4eEwwc3ZOd1phL3QrdUNiSC9RU0MwVVZjMDhQTGhMZkwvK1NzdG4xYkM2UEtnS0VXbjN1aVVNeUZScXZ0WC9MYlRsbU9QRzdnYVZkeWZNN2Y0OUdjS3ErNmdBeG16RkYyYlZxbUhOU1JIV1NIWFJOV05JSHkrMDBhMXBDcG5sbW5PZUN5SHVwbEMzV0NKdStNKytDVmIxWWdFbDdZL2RVMkZCeXBGTm1GTFIyNnpOMnhkRXcycnFiQ3V2VXd3Y25ORmlOSEZrZ0ZOS3UwY09CSUJmbHFGRVRGUk1acEhuWHNrY3FIcXB0VjFOTmF4dTJ4Zk5TZXd4QS9kbEVQZ25XaDhuTlF6MHB4YXRONjh1U1NjM00ycUNRMUREMG9OYndMSktsTTFsNW9oaFh5NjA4WEdIWEZHWDJvT3JtNVdaT3F2WVhjbE01MjN4TEcwT3JwYW9QMUVFa1A2akZlckJJWlp6UGpCUVBTdWhXNFlzMGNHUHVFeVBvMU5oaExKMEx1Rjd2OVFIYUc3NzRzaWFXRU5WMXlaeXNVUmhTcjlIcWlnV2t3b0ZvN05iaHlRdkZRdGxJUUxKSTQydFBrcWtHRUdKc25LNlNEcmdIejFKSy9vRUZOWGFNL2hrTDJ6ZW1EVWdvR1R6VWhYb3JJMGhUQXRMUVA3T0c1SFBTc0xmNmVRbGhqdDNza1FuRG93L05tSGxadG91NHBpeTdwaDFFNU5saFhiUFhEQ1BqTFVHNWJlam5jSVNzdGtpVEVYT0pJdmhxZ3YxdVB3aVMzNU5FeWd5bzIrcnduL2NndW1TS09NTERQYVZnVUZJWmZPbDc2THRvZHFzREQ0MDhJTC90M2krbnN6eWRrMENSWmZuMjltWFRGUzAwVUZ0bm5BWUNvcHpBNzJ0MzI3cmhXQzJYTFk1ZHczRXk3bm1rdUZidmUxVzlxVno0TnJBL2tYaGFDSFltemQvTFRxY1VXVVBZR3NhQXc5Vi9EZElpZjlQYU1ka0xPcXdLLzZjR0R3Z3BNYkxlRVNsMWZUeG5vSHdsNzRsM2ljSGFGUzByZjljZjlNYm5BYmc3emx3aWt0eVgrSWtZb3IzdTZaeFNLdDU1TlNBRlNtOHVKZFQ1bWorZ3pNTThpR1ZrWG9HNUZxMmdFd1dxRlh4WVNDMUhydHVDWDlIZklRcGhtdUxOOXAvcE1pWWNYb3M5bnpVRHhocXhmM2E0UlF4QkJvSVNqZ3E3KzE2eEo1TVFOaHQrN254SjZpdkNzR1JkNWdxQll1NU5FTktJeHNvckcyQ2FoVlNPOWtRZ1hnRXozZWJMTXZpSGRVdW5nKzZLUGxMRHcwQWFzQjRsSVVsRGdRYVhpNFFxM3Y4TURUbEpDeUk0SGdDdStybTNFR2krNDZ1TnMwaXFqbUE4WE5KNUNkZm40M3cyOHYrU0VxSDNnY2xTWDZsWUYxcnJISzB2eVpUc055NFVVTWdTRFc5eERUb09BcUFNdkpTUWd2blhOdVFQS3piZ0t0akxibWR3cDk1cGp0dDc5c3JiR0s0cDFOU3hPWURCclRyOHh4YXhWSm1RbUtVV3diald3cnA4a0ZHZHdtS2gzWWNtbTRoMGJlTlZMdG1XNTBzc0RWY2pzMWIzaFpYbEJZbmkwR1ZXU0tHWTNvWDN3Nk5FRmNkWnpINXN5OS9LazdvTEQ4VlhFdzFrYlhxUnZKSVNselJNNm5MQzBHWEsxMTU4RFErRU1tNmFIQTBmZFlUbnpEYTcrNFFzN2tpc1BSMGkvcU5mMkdhRFBZSnpwTk8ydENZZVN0ZVVFdEJ1dXFnSHpxbzFvVWxoQ2Fya2E3ZnlxWFpkSzZ3VEdQeENqVmVsVC92dWk0OUU2SFVqTTY3eFFHeUJFeUlkWWxTL2hFMGVxeW51S0loU2FwWGRRNVZMK2xyTU9WUUlnVXVqZGZlZzBtRUZqV1FXbEkrVWJ2T3NZUE9kd2JmZTFHdndwd1JuV1ZsY0trYngyQy9EbkQxcUtLVDVLVFM2c3VXS253bDF3NGNNa1ZTRjdSZktoeHBLazVuSnhWT0IwM2NMTGtCK1o3cjYweGRyWFlyRFVoNk1SdFhXbVNPTWZRZHVsQk9ZYVBVR1J3bHJaM2RKQnZ6RFo0SjhlZW81dTJndEhJK2J1Wk15aFQrbW1ZUmZNRU5MUitJS0J0TE9aQlJRSm12enN6SWpGYkN5dDFWZVBrbjMrcFdsQkVaSkdDNitaUnBwSlIvYU00RWFvR2hNMXRaOWZOaEVUQTZOMElPVFR6cUlVbFd2T05tK29mbTFEb1B2ZXFsQ2pVZm9sZDM4MlZMSjYzUHV4eDVNMUR2cGRFKzlNbmRuVmVMYUdqQU84N2hNT3pmckNETmdPTG1QYzVMRWVEaVBnc1l6MWwvck9YZS93ak85OVZkMzJMTkxQbS9hRjkxU2NLZXhsa2hOblZOZ1hyZnRYRER2aWtsSWFDT0JKcUNYd1lMQ1JoWmtpaVFwbmJ1d2pCZzdyK1J1bno2d0pIL3RudDNndVNZazdMdloxZXNIb1RKT05JTXJUZU9ocFJseTdUa2djSENiOEV3VzZCa1hjd0NsaWo3RCtvMXNuT3lGYWpOZ1k1M2s4UGY2MEd3a2hNcVdCelhucDRPdm84MEFNdVlWRkdGWmw3b3E0VENxNkpyNElYeWo4Mkk4L3lZdEExWlREN0lQMnBrdHo3MXFWWDZ6a1lYM0JUV04yVDE3THRTdWtFWkM0bFFRRE9JSWVZeFZLQnd3NlluWitzSGk1R2x4em9IVHpWRkZlb2lNRTlsREVQbm5SQ3l4NDhpSlJiZ2Zib0pNbnMyRS8rUDZIT0hmQUZ2U0VrajFFZ0tCbjBWV2NwVzVZaGUrVGE5SDlWY2NUQ0orcURZRGw2RzdZUjV4U1ByVjdzekR2bHVHZjRLZFJUQzJIM1V2UU56a2tjSHpQREFadnRxSFZtNlFrczdmcWkzTEVjYU9tbkI2QTN2Zk8vajhjR3hCQUhCRk4zSnczRmhOUGxObEF6cEtRRkF6SnpReGpGeUpyRzlkOHVaNUY2WXZmMG8zWTlGQWRoMmtmMFU2djYzY1M0NXZwWGxlRHpkT0ZtM085KzdaNEhjY2VLdmd1ZHRlajI3bkRGUTRubGx1ODZtUjd5dVlGOE9reUUyemQ3MnZUdktybWltRFFkTVBTaFA5WThDSHpXcUtiejhEUjRYa0YvVXV3ckdEd3dSSnJONGUzOU5CdSsxN2k4ajNyMWdDelFlQk5RNG1pYnlqRlh4K2FZMFB6ZzJrTWVIRG5FS2Y1UzFsL0pScm9lemsvYlp4cDlSWDZvbTR5WXFJcUxQNUNpNUJpMHdOMTdLQUxoSjBrSUdtME1lbWJDbWxTZEtBL2h6VDIyK1ExT0QxTXU4U0dlRlcvQlh2SUhuSWM0Q3lYTWdmTmhneHREUXhDdHl3SEszSXFXVUQ0MlJzK0NhckplT3g0Y0dJSTliU0xJV3JwVUFkamowcmczb2FOeGRLVG1yRDBzbTRoU0dCNmdPR0xSeGErNGFYMnFKTXlMZGdORmJ1ZTA3TjhLcS9Xa1FEUTQvWGlzbmIveTg2ZlJXN3htd1BUNUttak9DbnRzbG5IQlh3MVV3dlVpTFVmMlpFRXJJdVlObHVwZDZydk5CbGdNcFRQS2F1T1AvWEtJTmFBeU02RDBiTndrN2IvUHpodzVPZzVBSzFMQUJCaHhpb21lWWJIdEh5WjlndCtKWlZWNzY2NnRYK3VkV2J2Y3p0SW5YaSthOEhCOGZCNzFjMEZLc1AxaDltYnZHeDE5eFdPcHo5MnNiVU8zWUFsQTRLVFVHb1NzalRJS2twZUh4dlZMOURUalJ0STM1NFd3cGFtRStBTjFlSUMycjg3TDEySUkrRk05OTQwTERONDNtQU83cTBBKzhvcC9NNUc3bGdqMzdHdVVkQnQ3YitLWWUvRFp3T2tZdS9Ha0RqejRZb3AyajduWVVIVU81YnFwSDNtV3V3MXhLRktZVldwZTZtdGRiWm5IMSs4VEpXVTdrTzVjMGtRZ2hwRGg1d0FiR0U5dnZkWGExS3hlOE56ajZqWkZWR0h2RGt3emI2dElxVEdYMEhObnc1WUxYaVNhcWZ5QTFUM1Yxc3hDKytPcm5TSy9BTUtqdWYrVE03ZGhvNnBWbUNKVlhmTDhMd0FvZHdyOHZMRzZMQ2tNa2R6Zms1M3oxOC8rQkJmSWJ4ZUFURk9Dbk5EU1lyYk1oc1hhZDNjYis5U1JkSHF2Sm0vcDlKSHNjMThuRW5TUVg1RUtrR20zNXE3N0NoL095aXlNUzV5SWZyQzgzYzFaQlZEbU15UTJhWVJTRmFFUVJNbGRjUGdBSDRMMTRKZkUvRHUvZnNzUnU2bTR5cmtyOWxUbzYwTjRnOG9KU0xjWFZqVURxbHdXWWdIM29LaUFVS2haZGVOTkZaQTArRGowUnZ3Q3l6M0p0Z1FucllIdVV6Nm8rVDZxRU9uRDRvNFR4T0FDWVU3elhVREVCZGp6OEx1ZlZRVkg5UERPZ0JRRzZrb0J2bFRtR3BNWFpNM2JpR2toQThDQ1UxZFNLdllqVUdZTy84TjJsMWdSYjc1YUhOM1YxRW82aU14UXFsajhFeE5aN1kzTndWMzh2eXp4aCtybEZOYUpEQXpEMWRFV3EwVWYyYVp5REEvbEY0U2twOHBvc2tUWlJ2RGloOGw1RzVIY0phazRRcWZKdXBQdG5ObDFGd25Wdit0QUkweC9YZzVodXF2V21TMHRpQlVxZ2lpSGVTOExkYkM5Ykp2ZHNZc2thbVJ3a1Y2VThnQzJ4eHFZU1NmL3oyWVJCQUp2UTBFMDJaMmxYbEFVRDBDQXFHOURHVGlNVDhualRSZ3RzQ0NoQXViM2JDK0xNUlVON0ZHR0FBL3ZBRFU3WW5lVG9TRjVBZjNNL2dpZVVLdWpnSy9pSkU5QjlTVVZRT296TWd0anVjR0t3NHN0QzkrUEhsR05IbDZ4T08yTXo2M3RkcU1YMGtDZnVWaGQwNGF0MDdjeVo0ODNlMzQ4SEd3MEpweUNCUzRBRWVETnZKUU1JaDRqL0lvd2htUDdoOUEweEtoK05CZFVLSG5SaVlSNEE0bFhYL2tJSGp6L2FuRWpTT2Z1RWNaSTNQKzB2THZ3R3QybWhLZkJGTUovYUNTeFVkTjlLdDFSZGR5a0I1ZTBvRzJxRExPcjFxQ2JhcmEyelVrZW4rczRybnNmaE5HdnVUSE5RUHdwbmJCTVVWeEQ2cWUwZUd3RmZpWkkwMXV3YmNVMm1FMFhLTFhIdlBDNnN4NHZwczJHcjNiNzZFczBRaWMwRmVVT3JuZm1BeXlEVnF5S2ZGTHhmcm5nNGlWTHh3ZjdtbkcyRXlLRU12NjhjRmhtRjNMaVlRN01HbGxwZTFuK3V4ZFh0Sk1aNlhOaTZSV3Ava3NzYUltZlRpczJOTTBUbzJWdlQrWThZa2s0aENrU1QvNkFkaGlHSFhvOXpMNVduMndKeGFTNDlaTmlUV0tTb21WOEdaUDBxZ2l4TUVROCtjVFZVMENwWWpyelkyK1JGamt6YnAwYjdtKytHL2lWK3FtQzVaeHpvU09USU5GOXk3QVVuQWM0SDR3SnZCSlI3WUN6YkZkQW9nbFkrOVlwR1JZVE02TVdWSGxxSFRpTzJwNG00MkFrWjVCYU53ZDdGSFdWa3RLNnMrWmhsajQxeDBQOGlVbm1QR3pxK2dZQ1hPWDU5OTdUSFU5YzB2QVE5am51MEJ3Qm9FWVJac1lUcU5KSzFQcWcyYngwc1E0aEcvMnRTZnFXc2VjcmNMV2c1QUh4M1FKdXhUSXNoT0kxbUY2OEh5cFgyVCtXQWUxQWNSTU1ldGd4RVJFazQrTHBTL3BaSjJ0eUUvb2VjMkZiNGNQZzBOU3hhSE9oS1ljV2hONGt2TjFYTk16dVU3blRnZ0RiYzFsb2xoS2JtOUxqMlVmK0RHODIwR0I2SURqOUhqRTRXc0JpdDBTazRrSUk0R2UwZ29GVjlTeUJxKzhpS1RLYkhnR3U1R056M3JmYjc5ZllEeEIzODlNazhTd1ZGZGRYQTlGV0ZVemR1NUNnK1FkZ2xFTjcxb2M3cUswM2NaeDZWQksyM0o3cVNPcXJRcnVsY3NsYkJrUHJVVXlwcTJmZUJQdDdSMlIyVTJxdk1zWGRJR2RkdzBaY09DakJuZ3BIamJQVnlhL2tZRWlhNlN1NlhXZjg4dWllNGRnOGtqQVl5UVY4aUE3L2oxd01maW5wOHMyZFV5aTA0UHBKTjFKWi90Z0RZS0MySy94NXBzTmRMclVqbVZSQTcvWS9vQ1dyNE81TjEwNmUvTDRyT0s3SEIvRm1UQkFiZlRMOHVnOXBrcXNkVml4VWRVSzFHbXpZMXRONWo5WjlVWXBFdk5xL1NrMTRrL3dub0pvVUpvczNRNWJCNXRDY0Q0OWxaMlpDWTEwV3JmajluZFBUSzIrOXZUTThlUk5kdHFHTm1NVWE0N2toUVN4aGRPc1BEM0pWcXlJSHNBZlZ2d1dZelR5bk5iaGhHR2NTU1JnWXg1anJOSTFKaTBwSGtSQ0NPYlgrTnRkbGZ5MTd0R00rSjJGTWdLK09XZVBISWNxbmVBYjlJQzZpSVJucVhNbUJoSHRqQkNZd2h6YXd3L0tUTklLNzlUMnpFaVNnQ1dnSUdBMVEvZW14aFhsSzJ1dGN6MWNoMVJwOXJ6WGM5WlIrSlZnRUlqLzZhcE9GTG00UzV5KzZUcnRHOWlmVDB6YUdpbUtma1ZzMXBJOHhnVDVCcUdNUS9VYVFYZVJ1Y2Jza2xhRDlZUU1EVVZIcThHVXRiS0k1RTRtb3F4VW9PQmlVbngvNjd5b0xhZW5qSUlSM3o0MFFDakJ6ci9jc3JNM1BCZDd5em9OdTlLUVJzZXJEU3NnQ3J1em1nSkwwUERraXMzcEVEcFhjOFYxVjYrY1VybmpKTWk1MENPbnRCSVFPTkZEUEdmMElXV1RDR1kzZVRpQXVLYUluNWdDYU9qQ0VWV3U2OVg2M3RrS2YrT0JFYWllRnh2ejF2bCtJQ0hTSXM1c0ZIUmdLbGY4WWNKN2N4YWtFdGlWcVczQVd4NDIrOGFDclI2SUlaYkpKRzB2N3FNQVM5WTJBa0NUQm9tYVdxNG1MU0U3T2hObW0rbjJtaTJHdDc1WUNOaDdObGliTGJDWTlyeTRDamlmMlFiTVV3bVRKMjZYVUhObDQ5ay9kM1FZbGpRdFk3bWNEN3BjQmFqN0UrOEhkRngyUUxjcnVrdmF6b0hmZmc3ZkNjWWlSOXlwMjJMQUROeExtVXBWZlVSdGVmNTFpTW9iaWo5bW1sWHRJRmltUDdneDRkQ0FiMjUrWVpvS2t5R0pEZzNNY09ucDIzeVZoV2htcnliaTJ4eEJBMG5MOU8zcE5Tc29YNlVFd2d0L3lsMnVPcGJycUxQYUZETnpmS3hiM2lnMjFSdGpBL1gyWW55aVZyUllFYjdOT2hVRWtPK2I3Z0YrUkRMQWhHTkk0dFAzUDA1NkJQTHRnNXo2Nk9DSmg4V0ZOZzJyUlJLbkFqUlVMYzdrN1RJN1U5NTlWYnlObU42VWJZZzBXYkJLYm9NbFBncFVSTzVXN2NrRG5sZmU5R3krRHdnU3hwREtnMmFtS1FOQnhhdFZjM0U2ai9EeTRnVjZ1OUpndUQzckEyZkFqL29IQUZlMFRIY0UyY1RNWHFQUmRzMlM5eC9HZGZQcnRTK2tQekpuN3AzTFdvMlZDSUxZbEZMQWNYb0pubUJvUHNtYXI4aXo0dWkxekNlMkU1S3p3QTd0blZyTWpSUDJ5NWc1QWJMeWx2THF0ZENNVHhtYzN4OU1TRTB4QWlpWEx2eEIrSUwwK3Q3cVl1emlGOVgvaE5aWm4vT3paMDdIS2pyVXo0UUlGMkZHQUpnYTdqdGFZTEoralczNFhRaGZXeWpMaldaZGZUYUVZa1RScGgxZFlPY3lYMlJrTytSc01vcE1vL285RFlxc0RFSFJlcjhlQ2dEZ0VjVzNsRE1KZWxOSCt6MjJ0SmZMNE45RGVUekpnMWxmY2o0N3dLdXhGVXlCLzVsTW0zMUtRcWY3d0M0ZGVJY2RkcFZxOUVqQ25WL3JhT0xlYzFocE1EWTRtZTlrVWFKY3ZacjVSYTExOFZweGt1WGYydlVFMkFwejZNMHpkUVNJencvd2RtT2RPVGg4NTBJajFKcElmNzVmclZaTjh2MzU2Qm1CaE5NK0paeUdaMCs1dExqNXRyMjVEZlRGRGhGNDFIWXdMNlJWVEFZWUxqYzNseGN1dk5uM0ZKSXhKYS9DTkFaNnN3Uk9jU0N3eXlJZHhVWWk4d0ZNSVdLR3FGbWNJSmRmNjBzc201UXdiM2Q1eDB2RkRmNVZzMFpRZU5xT3ZKKzYrN1NpcDk5dmJUeTBsdTNQMml1TEczVEc3NUN5UHF6dWpCanVQMWsyN09QT2NZdVAyZ2drUmkxV1lUQUlZOU5PRUpRdHI0STlKTHpwVnVtQzcrM1l5WW41RTU2a3ZsM1ZxZWpqeWREbVRiZUhPK3Irb0lFNS9xM2EzRUo3ZnkxMUZhWUpDWmRveGFSY0szbmxadlROUU8xelk3VzBlVWpqSkJHbWI3OGxraXZHUFBEWDQ5S0FBZzNQbUJ5V3A4R00yZ2ZqQ3VVdWkvMzRuTmJzdXUvckd5TXVoOUMzOWFmNUE5WFF1azVJajV6RS8zZHViaU5udFo3TEJncGtjS3Y4NVpCRm9wWFEvc3NvRkZjNTY3WERqenYzQ1daTkljZ3dLZHJCNmR5Z1kxWm5jTlJJeVQ0clZHM0hvdTBITlFyeW5xSnJtZEE2ZHVjWE45SjF5b0lHc05ONDhyN0dnZTJjR0w2QnUwcWFSVGVrMmQxZmhRSkxjbjNyYVByMWFjeERSdmVzRGR0bTlDWmNvbTc2WjZGSnAzRjQ3VHozTDB6Skw3blgyZGV0UWprdUZic2NqeVh2R01hRkZ6RHRxekZueGdBR0tzSFdraXpPS0pVRUd5bmV4OEExUHBXVlFoNFYzZXNiWnVuRERBQkU2MFJtdDk3WWpuVk5Nc2tyc2JjaDR4NXN6blRHZFROMWVpVzVCbEhRODJmK3ZXczdDQ3ZPa2tNWEZHYzkvNzJ1N2hESldWOWpGWUZ6WExrZ2RrdTAxT1lzNmNjYXp1T1VHbm9jc3Y5S1A2UHZ6UkRrcmpxcVFydWZxRW4rYjNjYWZZNFhpWlN6dWQwWVE4bi95MGlpMTZRendCaWZPWnlROHlGUy9pclN2Z2xlalY3dkNTK2VlYVJ4bGhSWW5TR2xKNUs3MDhuUFgyWURGM0I4aVpaSWIwR3E2SldWZ29pYnR3UnlRcmIyTWMzbmNmOWxucUp3NE10YjJjNmozQUJBTzFUeHEwT2sxS1FPbm01S01NT2o2eDc2R1g0Y2hZSWFxNUlUUkUyVVFYWFFQSU40ZjZzM2FaWkhNeWdKN09WcDZYWmh1ZG9ndFg0Znd5a2tzSXR4Szg4WlNkZWt0eHVBSnI1SDA4K3FKeFdTRk9oNkRiTDVFUnRUV2FWUmw2LzI5N3BmaHl6VlZBZjV4TysxNFM2MittREM4UFM4ekN4d0ZnODZYalJYckJhYXhQckZTR2NFUW1lazVkNUZFcjMyQWRxdFF1cEdFR01qaXpHRG5IbVdyYVE2RUZNcENDNjkyNDdvekFkOC8ydUpKdWhOcXhmbndPTmlMbC80YkJJR0tLNHVHMWljODVoeXVEdjRCU1NlWXhkWTZsM21HQjhyZGpXMlA0TENUK1dBeUx3Q1RpRUJYaGdKZ0JJajF3VGkrTy9vb2hUb1Exdk1BcExrb1ZjRWlDekgwOS9ENFJJMERjZ1ZjL2pabUgyRytUVVFsV2pPRTRmS2gydHhNcUdCVGo4N2dQOUVOV0RJT1lGL2M2S2ZzZW5Eb0d1VFZ3QmpyQVFieG80Q0hpOHR1ckZkTG4rOExuQ2YvaUxEL2trdkl4V0tTUDczd3AzY2JKL0V5KzRqbVU2azhVRVh1MUxTRkhiM2UxaXkvQzdxQzVYMHQvcDh2dndyUlIvdDl2L3RjN055QnNjSEJ2SmtRUy9VdURlQUZaM3ZwZWJPWERVcW8raVNMUmZTckVsNDV1enVFa0hNR3RvQzlZK3Q3bzdWNjRVNkNBMnJicE5ON2JwcmJmQld3NzEvWVFCTFkrTWpZVXFpWTZFZjVUMmpWWXlLSXJQUUJTZm9WcTAwNlhsend5Y1dxNkorWUQ2cEZKdVR0VTlvNVFrY3lFRFMxTDRubFZzMHZKVi9TZGgyblNybVNkRzRhNWQ5blhGR0l2ZkQyVlIxdDVzN1dteDFSVm1IWTVHaVBQS2gybDYvQ0tDeVprcHdlRzBKYVpDVDlKZVZydXRiOUYvN3VybjFoNHBzRE5NdnlDOCtJL0pna2JKZUVHRHN5MytOalVzd3VaUllaRW5mNi9HL1ZjeDdkVU9QaHJIL2FFR1YzcmNkejdNYmdtbDZrU2dWUzF6bkhDeUE2ZEdYUUI5M2JwYjljV25tcWtFM0ZDY0srMHV4T1Z5ZEhOenhjblg0Ym05OWFra1R5Q1RLSzdKL2dEbDFhc0pDdkExQkVUazdFYWlvRW4wbjVPaktHck93dGtvamdIbFFCaWxDQUFOa2czTU5wOWpjWGNWcURCRWMxdHErVTVzMC9KSEZYZDI3RHpRNi9tU1VabjNvZDVzbzlpeHFHdldxaG9hRW0vSEZXOGFTVEE2WnNwaUQwbXJDNnJPMHVJdlZXZ1FuRUhIY1dUVTFqVnRTenVOdUhkWXM1QXNNeklYL0xrOXBlZzlVbHRTSEhHOTdzQXRMN0J6NGU0c0doL0srWEY0Y2p2NkZmU0R4ZVhQam1xVVdqdlVITFBjTS91OXhkMTNxdFNEWC8xMnpWWisya3Y1RFBLN2hZMVZkempLclNmbVlGWERENE5WMFlCL0JjT1hpQ1hLbHg2b3ZobWtqNXYvcWxzNFVsd2NoN2NmcFN6cUNHZ3dwOWFBM3o4QzkxOVRSSlNRYm4xdnQ3WGRzZXdma0M0Y1pOYkJGV0k5QXBtU3h4MXc3cHRvYzY2ODk2RTFMc3lUazA2TGtnc0M3R3g5Vi82K0lEczJFQlAwc0xuTkpXZjc0U3d1QnIxQklmRkpzZW9jMGl2U3N4bGUxOEdjR1hiK3ZEWGcrR3VaK1RpNnlESXo3cUtxanJXSXNyQzZjVHFlRVNhdmJTVU1kTExDZW9nZVZIMHhYNitkOWQrbGFVZmNCdjdLNGdlL05qcHBBcGhFM1N6ay90TjZjejFLOEhpREpOeVJCeXF2YWNxaTErUmFKUzgySEFhZlgyN090SWhGUFF6dkxVYXUwTzliQ1RhcU5WU2FzVmNJeURVMzRhVnpGV3hnaDVpQ1pyc2hGZjRybDNPcjJJVHVzVTBLK1BpUGNxRFdSTkxUYlJ2L1JLUXE4RXFyb2xRcU00QUl2RHZqMmlSM3ZhWERYRlNVR3FaOENBTklRREV3aEwvTFVCWUJmUHBUN093eFpzYlVKdW10RTZCaGxiZlViSVJrczFrVyt3TlJOaURJRENaSW03azcvQzdRNWF2YXl2NWwxb1BkQUdtbFAyeWo5ZlN0Z1FxbDBPZW9DWERtcjhRSHRoWCtiZmRNYUtnNDNXaFVhVC9Ob1psN1N2YVpoQ09ZVStiVzdibEtWUFZWVm5HbGh0RTh5TXA4Zm9MSmdmL0d2T2lqYnViSEVTTkNtTktxUFJQVWlOV1RCemZjdUYyVzNjSzNSbTJoRkdpdE1uUmRjOXMva2JtWTZVOXQ2dVFneDExai9xMHNlZTFTVFZZdXdMTWtWMWRNOGFEVWtIeDZ0M041UHVnbm5kN3ZCODhSK1NJeldvYjNUdXdaUm1vZWZ1clhFR0V3Q0NUU0ExSklwazM1U0M3MzFMSDBOVVlpdGY0NCtKYzNQL0NwdXZBazEzeEtiQUt2d3V6Wlc0VlJNM1VQSExROFRHOTFLZjkzQWM1RGJhLy9wSW9paEZTcVIxVVBBTSszWTFnZUpiaWNMTXk4RjZjNVdDcFZaN1BRNFRxSUdOejg0TWhaSGlFUXNaNDczK09NZ1ZVVDJJcDlEY3JESlFUaUNVVmRtdVdpVDVXbzRGS3VHVmQxK3RUOFFqRzZQWVdpbXhSMktlVDZjTi9HNkVBS1FZTnJSak1oWTk2ay9qSzQ3ZWRaS2FPK1pPdGJ4MWlpM3hPTHNTd1k3aWs1U0JaWVpMOXNvTFBoRzNOMDNxaEVvbW1kOTlWNkJ4RjIvY0FQU1AzREtxUDdaZjVScHlNbUk5S1JpL1dveHJsY0piUXcyQ01WSXFWem4wKytLbEE4a2tmSWR0eVBPeVFOeFkwRTV0YkpZMzdYQkpNaTh0Q1lrVnMwTzk5d0E2d3JwV2ZEM3dQL1dWU0RJQ0ozTGRtN0hJN2VHaHAvU085dEpWWmordkRLS0krL0pEbnlDVktKV1lOQ2lhQ0Nwd1ZNMVNNVUxZREJQaW5rOTRqT1ZHNHAzem1qME9qbEdoNGVMMDAzT29UTmlsU2RJbVQ3UG1LUVQ0Vyt3WENRejkyNVBoTGZjZlBQcjhja0N6WjlkMEZQRzRHcDlRZ1V0VmhXck5KZU1zOFl0TS9wenY0OGdZQ0FZS2ZtMGtWMnJoZnQveDJjRmxUVFNxemF6NlhFellkNmJJelk1U0U3K2tqR3RPT3ZkdjdmcmhsVVdYN3pubVh2QWliaHZtZUN0U0JMZWRMTy96MnNqUVlFN2NGeTljcHlMOXNjeGJ1UlROckwyOTlHZnhxazdSSEJabFBoWDBGdjFHYjVYT2Rvam01VFlsb0VHUWZlNldhcWhpYTA3THpvSFdKc0U1bFlJci8wRzRwc2NPbk9VMUlHNjJJbXZPWjdSMFlBZVNaeXRhWDQyQmZycUJRcURqZTU4SnVmb3BMRGZzSVNOVW5zZzRueUJ2M3J4blhuM3gzcmtOb1dERFRTcForWUpINVFsb253eVdFVllyZll1SS9HSStxak5EeDBjdnBzRnF1TkRWR2U5SnI5czlYWGJEbllsMHRZYlpPbSsvaGZ4R21qREIwMUtNZGVZdGpEWGV0Z3l4MTNhVzI2d3hHeGhGSWZyaHllWUg3KzkwWFBJNVFpTXVmZ2tPRkpibE83NE93YnVLR2h6bi9RQUNuc2tlc0p2ZWZGM2NHcFJmNWhSMnFINGQ2UGJYTzB3R3pRT3BMejlLZm1wcWZ1S2N5emtBMkVDcVVMODdjb3FwOEVkNy9xYkl4dys5a2dnandnTHFRaklBRmlmdE41QXpaWUo2R3Y3eWF2TEQ0Y1plOXBjTGsxdGVKVTV6c01WNmNwMzlpWGhva1oxK241UlhlSmZXUFFqbUxiUHpCc2YzRUFKWDRvVWFTMHRYeGltSDd5ellLTG9JbThORGFDNjhzaitYbW1qQXBBZklLSW10cVJMckpISG5DdElSSFZ2Ujc5aFFtZm11bVM5cCtGSHExUi8rdHZqblN0MXA3V3ExWFM1Y2JIR2R3ZlJzODduR2k0cFdGeE9kZzZsTGlSbE5ZY0Naa0ZnZmFzR0VUUWYwZ2M4emtIMHFqS3h1enU2R3BscXNldXdPSGZZYkZqZ3FJQlJ2RGdQU2RGcGp6bjhnZVRLZGRDamNMNnBVYmI4UEtJRVhBSnY2OXhkc1lENmxjVVB6V0hZbExWQWdmWXVaa2VqRlRSU2JVcVpyVTBMN2E3a0ttVDNXNlU3SHVCelJFcUorSGwrQXBBcUQ4aDkwWVBtZFpnMnJRbFdSUmVmVmRsalhkOEh6LzZkV1Bwa0luazNoekFEMDFoeWRjTXoycDUrenVHLy9FbXBWNmdMa3JhRjlucVVvS3Z4anAwUitCYnhLZi9wOGNCd2gzYWh4b1E3NThiaW5XYXhxeExrcEI0L3d3eG9QTThvR3BjSDR5VHRNMXpjT29KY3pDcmVJL1prbnI0T0pvZVlsRE1iOUc0Yi94N29ueTJReXBWd2VWM3Y3d1JSY0xkNmVpNFVmc21hSHVrQ1VrRkdLbW45bnA5Mm81aUQwR0h2Z3Z1cEJhNGdMQ0RkNThabGlKclN0eDFhZjYxWTNHYURmTDgwZkpHSTVyY3JrSGs3WDFPVW83ZzRROFFqdFdPV3NoSEF3WDNmSWNDMEIrT2VBbG11QktaLzMxWlUxS2pyR1VEa0djdjVpY2g4aWkxZFBrYXZBK3RtUnYyeTN5VkhxTGYvNnNxcUJUcmxIRW9XWWFibW9rNEJoeUEranJaUkNwaTRkN1c4WmU5d2VJVStTTlh0QU14SDBqUHNXMlJ2N0l0NXoybUd6M1BmODVGZGJTNDN4RWQ3ODNvOW9CN3NldWE0Y0dodXZUYnlZdHd1VlJpQVAzTy8wOFFqRjZzSXdHalg3RnhpRjMzeHBaM1p4R2tEbE9uNU1LRUFFNm8ycnhYS0Rsc3BrWWovYzdpbzJGVlZ4bjNiRzUzWmQ2ZzdHU3VzYzFGaklCNHpCNGoyMXkrUXpuMlZsMGxRSkFPTTFSTHFaZGY1ckNUWDlrSzdvUW95aWZoWnU3UFcxemZWOVhLMVdsNHVLejdjcW5meTBZRlJVZlJCaXlHKzM3UVBEM0NFZmRqV2tEOWxrVmNMZlUzeml3T0pIQlBNRzd4TVNKY0xnMXNmYWR1MTBnVldYK3JadTdlOG5XVy9leFV5Nmo1ejk2WGN2WHVwZGVHbktwMmdHUHZzeU8rZDU4ckc0ZDdIMkxicUIyL09vR3IralViYmNyQ0JmaEExRzNqYU9ZbW8zN1p4a1huc0FIZHUzU1lPdmF0Z2tvcEkvd1ZwcEl3Vml2M2RoTEZRdUd2bnJnOFB0NGJicGo2aHRhWTFDVmhVbld0cklIN0tveCtkMlBvK0VVNVhocFJoVFJxVEk5aWtoNkFVS0k0L2oxb3BQUmk0WkhnK3BVNXIxZDZLcGJSVEdMVjBJUXVpTTdJRDNBQS9IaTFsZ0p0ci9NU0QrcklxRVBkOWpORGpiQ0VvaDd3WDB2b0JKMDZVeDNtYVZMOXFESTVDQzBZdFAzbEl0cE1yWkN0UWdqVy9hY2J4OUlVRFFOWlBjemVydm1FUXhzeHhVK2x4R1RlN1d4NHROUU5JS2xnSzRGcDF0c2JlNTVoc2NhVlZzT0FWL3VVVlJLcUdDYldMN0Z1YVIwd2dUenBldGtuRVFiQTYzaVdpNzNsNlc1Qm9VaW5Sd2Z4SkJPbkpTZytteisvR1BaSVNMMDNndUdUdU1raXdtdUY3d0JDUW50SmwrY1R6T3dJRnpaNjlPcHNLOENxVWZVSGcrSG50QjJDUVlHdmpRVktQMi9BQ2pNUXJOQ3Z1VnM1T2VCcytTbStXZE45dzZoTXc1U0NrM01vYXZLQ1ZxK1BBdnUyMEMwbmxkV0tUUHdFN2dNaWIyZ2JLWFZVZnoxWUc5ZDZROURzRmdOMG0rdjFmZ3gzNUpGbUFYRmZrZnNaMDhYNVh2OGtBeHhMRGM3dVlqalljOURpT3JKcTR4eHNYU3FNZDViMVBSYTNEWTIvbkRkdjR6RnpKMGhyQmJUNDY3bzdEc2N5cGJwM1B6TnovMUlCT2FsV0RzRGF1K3A3TDZmVU5yL2lYelMzb3BrL3JYNjlqNUJiWVhNR2ZwUVV5RHJ3MXpjRHI3ZkJQMGo1Zk1NeHlJRjk3UzJjOXNyc1UzZzVCQUtGZWYvSXVzRGJ6M2lyMk9FZk5Nc0RENmordjJOSXNpN3hESkJ4M05uSFdSa0ZLZ3dDNGhZL2d1VGF4OXFCNU5RQ0RtSWlVREZOMzBpbVJMOHhHRTBrLzYxWFRhVUlDOXhZM1FBb3EvSTlTbmIwUFlmTll0Tmsyc2dZNjRVYkpqMkl0WloxaGxQWis5aW5PNWdwMUlIblFHY3VkalliZ0hxY2ZFM2FFeWZwVjRQbXg3S1JsblRkQi95UzhybXdTbS9OQUQ1ajJ3eGs1V3ZTRjZCSS9JZWc0ajZCTG5TRzc0cWNsZnVlOGZQaHJxQ3FaRHI1Z1huaE40dGJKR3c0OTg0RjgyNG8xRzRNcGt1b1RPbUN0YlE5cllCRFFteG9jNjkrTnhmSDVXM1pNWTZyWGREN2x3b1JoVEMreVZaNDQ3aGcveFNwU29NamY0ZUhOWDFrcnF4UVpxRmlCTjNuTlVnUDBOZ2dWbkZlUWVlbnFPTi81TmxFbFZuWUsyanpsRnBHVUJiQXB1aW5pYno5UTJ0K1I0Wk4yc2FUSW5kaThGVUZ3VkV1NDBvdXFxRldjUUVDNldJT1gvQ3lDUGdYNzVPMnNOSGNKa2RMcHNmYVRoY0tHeXcyblhkK1pSdDdXZG8rR29sS0xwbnRidzlKWXE1dEl3YXpncTlWdnBSSDN4YkU4aHJBQkxwYWNocTcvMUhpbzZrTCtDVGVYZVJiSjVtdmFiREE5b0xIVUxpRno0eXFGbWZ0elJsRFdLbmQ3aXlGMk1RYVFkUWNhMnM4YUhrNjNhQTN1QVdhRDRNaExtWHh4NU9mZFVKUlhFYld4TDZma2tIY0dYK0dWcUNMNkxKNXRNdTFJZHcxTEk2RmVQZVA4cFhaVjlvd3NIT01hcjlzL2l3VmFSdzg3elJDenlZNy8wOHdMcmUxblVWTWZESHRVR1dUZ0IrN2Z4WWNGZERPZ2JsTFlnaVVzWW9WOFFQcDF0WnN0bTNnMzB3eE9KdXYxa0N2SXNkanJaOTI0akF1RFZsdlBHS2Z0YXhBVkExTlhzSUJNYmFxT3pGM1lvRi9aeGVEdkxtRnB1ZVk4MStPQXRSbFN5SHdYa2NzckhiVmpXemdpdHFVekdlV2hZUTkzS0JybDBFVHFEWjRsKzJJSkNIS0kwODdyQ1Roa0NjR1VRUll2WHdJNnl5aDRCejI5K0pFMkNOK05LK3djWld2SElkUUFjK09CaWZOcmo2M0U0RUpnM09hNkU2Vko5SEZ1eGNVRjN2Tm9WbEl6c0R3Q0thUmVqcVVKZjdRUytqaHRwenBCc2ZLTTdMZktTNndmVnNEcHpjNHNWaXpER0VnaDJ4VHBJTm82ejY4WVUySDdyUUROdnBURlN4STRnSTlYNzE3Ri9uL2d2Nkt6OExiVHZEemNHei9WSnk1RmtUa2xkb2F1ckF6U25QQWh1NXVzRUZUbWRTbUlpMEt0ejdVR3N1Ui95cTRBb2FJOThDdHhWN2QvdFZqWnJCQmxVdi84Y1dIQWJtMWhZbG9iUTNzSDF5b25OMWJuMGxVS2taZGtLa2FrN0lMMmxsT1hGTzFZQ1ZaYXdHSFU0QnBXcDdCMlNpS0Y2SDlsYXJxSEdNWjZ1b2pVcmcxQ3VINVNnc3c3U2R6Ylk0eklDWFhLUTN1bDh6eWpyMWdFZkF1NWZBU2dkaUNSTWpCUkMyMmR3ejR2dDVjblJSViszbTZQK2lhb0Z1bDd3Qnk2V1BJdXhvSnI1UnptSUw3MlZGb2h1Ymkzc0Y2UjN3MUdZWDVxY2xlZkRHUjNCL3kwdml4NmRGSnQ0dzNEc1kzaXZqR3EzT2lCR1RUWG4xdkNRUU5BWmdwdVlJd1JieXI0M3lRanIySzF1N2VFR2xVK3oyYzd0cVlXZndFa2YvU05nUnRIT1lXeG85eERVdENCbVFyb3RmY3N5cTJndVMrUWJubHBhR0JSZ1g3M2w3OUl1WTk3S1gwelJTOUt5bEprZURPYnNIbjFLSkN4RDFwZDdiM2lGVThVazVHalhZZTlBbDB5ekJabE5tdUJZeXM2akNCSlJLREpjMlVMZXAxZTFlbHQ5SlAxYWwwUEJxeUk2WFh3aGZIVTJ1WHRlTmp2QWZOQzlBMlBVY3NVTm9TODNFNk9adTdpd1d4ZVFoR1RRL0JpalAwRzR6ZmFCVk90OG1TMWdTTDVKYWVuYzd2WW1IYmI3YklYY0N5aC93UnZoWHpON1hvNWV0bjBsT2dzTGM3czBUQjhQczFvRWJDd0pXOEFXUkxPcFc2VVJEQXY4MWw5SDg0Vy9JM1dNKzZkQ0IzWVY4SGlxMCtLdlZJWGZxQkJuQXJxTjY5a2w4YTlBbzR4aGJQQkdSMnFaMlE4Yi9Fd3g3STFOTkRVVk9tVzRqZGIxMG1SQ0xKTklCc1ozeEl4QzNXWGRURVZJL3hCUFNmcHhQRDdRZEZmTGNHYTdWOGFvNU0xc1BhdS96eHpKbU95ZVN6V1lNUjg5TDhkZzZ6L09xQ0xObWpLZmU2clBPVDFuU2ZyR3lsMm1vbjFVQ0pDVW9VQVplSXJTVm9ZbnlFVmZLUGNhWnJ1YnR5K1dYK0Z4SE0yNU9mbkVmdnEzT1B5enByQmtGTGJZREExRm9kRWZDTmJlWVlJdVNobE5xZ3kwRUxMeFBKYTJmeDRxYzIwVkY4ZHlMMnZQeUFuWlNXSURISlEzREpGVmRndHZiNFlMemNESFc2V0NPV1ZoUUYwNEpSbG5VTjFDbUg4cGNodjZQU3c2dFllUWRzZXJTbGJIeWJiVXUwNnBVMWNkU1RnMGhaYWxRaUo4UFg5VnVNUkUyazlGYzBBV2dCek1yS0tGWkVpblZYU01zUXdWOU9FRlZVamFiSVZLOHJlakxySG9TWWVnSkV4TlFJRjZZdGYzNy9yVTRNSXV4aEoxNkdxT081UWdCbmJjWUNHZkFZYkl0TTVGc2kwOU1tTEZSYVVETS8vRjk4eU40Yk0xVTJVYXNWdkNRSjFSd2lFb29kSjVuenYwcmhiK3RpVnpTS29TTXRtRk81ZThmMzFxTXlYWGFFVFNIUDQvbkRMUXZWNkNjNkFwb2V3WE5BUi8zUnh4bzB1MWdNNkVpdjZncTRGWWpCbE5mdXo2UGhNeXEzM2dLYUppMnRHS2sxbHJLRXVDV2N5ZmNOblpYYUdVL09rZGI5L0MwTzdrNUVFSzcxNUZCVVJRYW5BT3ZIYWN4T0oxUVNuMlpKYytpYnBnZWZNSG10dTBseTluY28xTm1Qb2NrQ09PUndwTXUrWUdEK3ptZFVHSTYxS3Zqa3pIRkFoLzIrWVhRZUVmZjREbitUN2N1dWtPMjBmK21TNE5TT3YzSWpnSkhrY1RVRnExTTVFam9ud21iazVOWFI2MjRLem1mRHNoeTVGeXVyRUQwc3dOUGozcWlPZ1R4SStWbkhwWlMvVFVMM3pJcHdjZVdCM1drN0lOSUdJNXBBWFNFRjFCaHg4Rkd0cXJxYUZ3NXN0cUtZOEd5TElvUENWNjFSMjRKNFVxNUU0Y1IxRlJ6WW9laU15cVlzQTF3SlczTTFJbnRUYzFFL1diQzYxSkovU3NrVkRoRTdqdDQ1UFdKYzh4aFpiUkN5YmZ1bWRBeUVCOUtxd0VHQ0l2SytOUC8yV1E3dXcvS2VtSk1aWXhEMHJaOGE1Sm8vZlJ5cjBwUWhKdDZXbEFvRlovWS8rZnE0Z2U5V2J0c3pKLzN5SmtFZnBRd2tTMm1McG1zTHArZyszaUhGbGhDaHVXYjI1dmQ4MDh2akRBNUNiZldGd2FUY1VHMjA0dW1EN2s1T2IwR1lTVHZlcktPTllUK3lZTEN4N2NiVGFLVDQ1Z29wK0I2WG5lcXI1bHJ1V1dsaXZGejV2NEFVY2lVT3dFdldiMnV0ODhuTkxSRVgvcjdxN3B4TG0xS0Y3dGZDWXF6VlZJTHNnQjRncUlqMWR0WlBuZUxWR1VOQmFXWWZqc2ZGOFkyTisycGlvUEQza0dMTzJsQ04rTjNKWEMzQXJocXF3bHI3QWt5Mmx1ZXVsZ3hVYmtlSWRWSUlDTDJSTUNsRGYyelFEMi9UN21yT1FEOXpnbHlQM3hsSlhqM2svR0F2Mk9KTDZQV2FpOTJZT1hPZy9NSFhKMmpmL29GMjFBaHJUbHN2OXVYWmlXTHZSZ3JBVUJDbC9la1BYc3JMb2g4Rzc5clZsb243SEJjOWhETlprbW04ZVlhQ3N4bVBieFZCVTlHakJFOExhaVdyMThQTCtBNVE3WTQzK3paQ2Zpd09RSG5POWdGclltYjhnTkJnbHpiM2lWSDVtbVdYY1h5VzgrWlJqRGJzSXNGYXRBNlZPajQzSDBtTzU5a3BJTTVHR3RGa2tFMWptZ2Q2ZGhRQ2IrVVpsRnJTUFFOWkFmZWhMTVg1anIyQ2gvNE1QS3NaTVNoUTRrdmxaRGlTNi9CUGpCVEZIb0t1dGZlSTNQd3dvYXJ6MGtVcUE5R2pDcEt4bWExR1I4alNmQTJ3RUUzOTBkNzJqcXlBcWFhRHR1eEN1QmVyaUd0NjFUK2h3OUZFampYaktjZFRTTGJBWHNxMURmVEtZOWRndmJDaCtzYXBVNzYrR0ZNakRmVDFESFFHWlF0Y3JwV1E2NEMrd2FCcXAwWUt6dmsrbkQ5d05abUlCcVV3YjVzYkFReEc0R256WUhxMUFoQTZCc3B1N0ptbTV1dDFaaWxKM1RqUjAvaE9YOVhsT0Mzc2Zvc2hsMEw1TVZPaFRGWVJKaC9VQWR5akN5UjNzcVdweTJuUmxxc09RZ05Vc2E4a1pHTXRRRTVnb0RzY214ZWd0V0JhUHJzZmRLREx1R3Y1anQ1SDF4bGhQQWtRcldWK0VzMmFCRG41dTlZYnp2MCs2cVF4ZnZKUWR3UENEd2dzc0dSRythUnA1L0hEV0NmcnAwNStVM3lKR29VZ0wrbUR0WHJkZnFXclNUQ3V6anFPb1l6aFJ4K1Q5WGNYUGp3Z3Y2UzlMRnJpbkwrSGRmNFdTd003YUVnMzFNS0Z3dlZ4OWlsVkZNWm1aU1VtV3dpSjREYmJIbW54MGc5N2RGakVsRjFhQkQ2THdlVm5tdHViWkhiOTVSbE52ZE5xQjREaEJGL3dybkpiUW42WFZHRGp0NFlWNzQrbWtjQmI1K29RVHp0R0VjdG00cllPTjFMMGdDcnE3ODJYNUs1dDhqR21kOGpqNGMwd3pDczlTc3RXbldnUWxHeElFdURrTWFiYUlPS3lQeURKakF4WGIzMzRqaGNmbXVmak9pYTI3a2NTZnczNXpjaGpoQ3hjdzNmMzNrRTYxNnh4RkJoNEFSMEVvNVdvRm5jSzR2cThkK1BKanh6emt4MjI5elphMEd2VmhlTWsxOHI5dUpSd1dUcWUxT1E5djY1MEsvK0JMTm1hTEVGQWZ3dSs5N3ZxTGNpZGtHeXY5OWdmenVYaGN3RUpTN2xUZVpacjEyWS9scW9nMDUwYXo1NFZBSVZueVFRUEJReDIrNG9tckhSak5KTE1uZ1FSTXU2c1N2amZzQWxFWnptRTRLT1RaU3RFdnBKU2NHNmJ0TTBmb3FOcTZpRjVpTEZTSEJuNDZKL281OFc5VDQyUzRGTGlJZnphQVdoK2RhWWZMVk10L1EvTHdLamNtTTlvSWdpRzd6MkptaGpUMCtUZ3l6Y2NkNm9wN2ZLVkMydy9BM1ppNGJId21ZTzhKMFo1UnRld3UwUzZmZktvT2Fxd3lqWVVtQ1JWWExNR3JYL3VtcWxLTmduejJmU2pqMmkvZEdSaEhQRW1MS0RaZ2ZCeDZjWGF4UGsweEdTaFpVSlVGdHIwQzNMeU91M1JSZVFXRThNcU45aFpMOW0yalhPaHZGT0JQcGcxRE55cGVZMmh1aFlkVmZkWDFYaVFxcW5oUnBQN216TGhhSWExYTZwUCtaZ3N1YkZid0xlV1FwZEEraUkyMEdXSnVLZ0VNU0dzZXVsYmpYVy9Pa0Z5YjRUZVN3bm5SWXJOYnJTK3VtMlZHaHV1UnhjQTA2UWExUjdMbDFJV2VEYWtpZFRxRnptK3REZzJNUTlIdWhmdCswZ3VyU09ZL1ZwRktFVmk3M2VPZ2tYbGlGTGowU3JGdXpvVGVGcUVFWWU2UzhLSmxKVm5wSE9BRTlGVGx3dlVGbmN0VGhKWTZaV09Pbk9RbGNhSUZlam1xdTBKZXJZRXMzZTRDV3o3b2dlR3lWNUNjVnFydWtNTXhqSldCOEd4bHBKRHpJWjJ4ZUNiempERnIwLzY0dTJTL3JMcjB1QllTbVBJQWZJUkFGczViR3lITzkvaVRiYVRBWC9wKzNaSUF1TzRYbTJPWXA1b3duYU9uSkRzYWRFRjF4U3NmYVBkOVZzbFhXZ3lHaC9uVEZKZzdCVnhIZG42VmdvK1ZTUmpkcTR0TTIyTHJaYWQ2MEtBRmZZYm1kcmpRNkE3UWlmd1dJMDIza3daV0dXZjJ3akVyeHFtMmF4NCtrRXU2V05pZ00zenU0UjVVdDdBZGJpeDRjRENuMVFTdEhaOXBMemVYQnA0WFRrd2U2cEUzRjY1RnpJeU5IM202bHZ2b3pDRjZRUCsvYXJTb01VeWovSWxPd2RvcFZYd1dFOTdPOEhNUDB4OXZaZnExOGpHMHdkUElhVml1V3EzdG5MZG1ocXY5eUN6a1h0VDdFSWNRcFowdWtWZW9rNGtMNWs0M3QzUmpkKzVBRW4rRE45V01ta24zaGNBV05wRngvL2RNTU95WjV5dWdOR2x2YVZtVFVQMXVHQ2FVVUt2aXJYNlUzc2lCMEt3S04wOG9mcFY4Kzg4T1M2Um55N0RZUHI4eU8xM09GaXFMbTRDRXNwQUYzUkhHRU5jOGpSUTBnZjNiTzVDZWJ5c1NWVEh3aU9NOW5BMXFLdVRxOEFrSVpmWXROTEwraVZaZlN6WkZKT0pQc0tUMXMvY1ZxNXN6ZEJCVHMyTVN6dGN2NGdjNU9zK3VJY0VuVWlSUExpV25ldzFIVElzT1JVWG9xS2J3NVREZjRLa29qUGdyc1h4SUpkTHdpL0J6aGFSVU5rVDc1aG5RdmNxNzhIM2ozSERMQWN5RFZ5b2hqSDg1cmc5RVZtRzJ1SFlYRUFjVTJlb1loanZ5LzFHZWZQTmZnWXAvUVRjSyt6WUFqVWNtN24xa0N1dzZ4Q1VKS054d3VvWHRpa1dkVWEwcEJqZ0toLzA2eVduWHhwblZWbGF2K2xXcVF1R0QvRWRRUjhnNUUycDdsUUFiUjRVRE1WK254NkV5bW03eVN4eUpNZzRMQ3I1UDY3QVFpMjFlY2xBN3hMaDh2ODZtQXUyU1RzdTRYZHo0azNOd1lmeHBGSmhLSmFwejFaQ3ppSGNlbnpYTUg3M2NlNktzRlJRY0ZiUERkVmN6VWhvTERuYkZpUFVucmp6MGpiVGVkOVFxZTFIZnBsY1JWazNzczVCaVZFMG9oNElqRWhYNEdsTlRsNHNsWFYxNklmS2pmb0tPY0dsNjQyT0JIT1QvNnNEK2swMFlJOG9BV0pYYTZqQ0JCajJXZ3ZEaVNTdXk3em5FSzNIaWVweWJKd0ZsQkRHbkdZV2VRVGpzN3cxeGpvVzcrTVd4WE1tSnltbERUWTYvS1N1VWNmU1FNblkzL3lsblhsbC9EdWdOaXJJaUQxTHo1dkJ1VDQ2TlVycGRTb05MRmo2YnlieDZDTnloa0tMMUJhTDR1bllkUlBVdFRtZzVEeWtMc2phdG1BdS9adjFXZVhlcml2SHI4aEQ5RklOTG5pR1pIaWk4eitneVpFa3lOMFVmclJ6ZURHR1BHL1R0b095dkpSdDl1d21wV3M0dXZGNFQybFhRWXVHRzBzTTdQa3dxaldnbmJjbk4yeE8wb2FhSnFvWTMzUzk5MjRZT2tGRkViRE5nckM2MWNzNVF5RXV1REpOUXJBejh1VzkwZUdEMXlJZWx0OGw0STcwT0kxTjRlb0dRY0ZZR25hOTJHRE9wM2ZRU1J6SVNhdWVyUE15MlNsQnFpSS9keVN5VzExMHRVMit1NzlHSFNFSnJwYlpiT2FCUXZpRnVoMllWYUdNeFlyNWxsaFF6VjVadFhmT3RBdkQ2Y1lwcENjZ2d1bitTbGk1Z1dFUWwwRnhyaDJ1NThha0dJOVNMVFI0bUNaMEJnbE53SjZaWXRlM0dmNTlBUi9ISWVsNXQwK1M5WGt0dkxtc1JJcEJZdWo0MG9oVVZLZEdTVHVESXJVOXdUNkh1eHU4SXNQM0tmR29udGpjblR1LzVxNHFFbnVkMVFLYm9RTlpIR0I5YXArTGFWUno0QkdPaUNrS2cwRUtGcWtzU2tiQlNHcGdQZWtjV3dKblQ5Q2dmTm5GQ3R4a2J1NFI1QlBZdlgwVk10K2lLMVNodVJmNU5ub2hPeHcyUFU3NHlCdkZPUTZuSjB4Zm1NSjgxTkdENUNFNTkrNVVHMnZhU3RNLzlQQjdRcW5peHR3ZnBBUGJyb25OTUV4YjBxWk5kRVZLQUdwK25BajM2ZlpYTFg1L1JBaW1pNnR3L3Y4UWp1Mjd6NXZ6MG0xWXB2RnIwTGpxTUxJanh5ME1RdE9qZmo5OWZTQzJURzdZR2ltZmdRU09XbXNIaHNkQm9hc2ovL2ZCUVMyVVRjOUY3VlRjSlpiSHViY2p0NFhKdy9FQTJjWGYwNTdkZmxBVmREa2paajRCTjQ1R3NRdmRQVlJQQnV0cURuaEtkcURmZ2ptRmdFZ3ZleExsTmdvM3dOanRjdnBZZm9tZDk2c2Q2VGJUaTlLbXFpcjE1YnJHRm5NVm1qclA3aldtZHRCRThsQUIxTjZobHZWUzdGajhpTDIyN1A2bi8yVS9vcUdVVTh5KzhOSVgvTGZQMXpYQ1d2d01LT3hzY2E3VXFWbHVqMDF2cUF1Z0lxbHZPMFdYYXRSYjF2N01Eck9DajN6ZGxUbHVsdnU1NkQ5OFcxMmVBc2UvWHpQRHpsbVBubFltQUNDd0hKdnJ3ZWVwRVhIM0tEZmtzK1NQOHhOS083S3AvNXRnTGo4SUVQR1IwZVNkSGJJYXZKMHhZaWZwTHJsWWtseW9OR01GUGNTbzV4TjlXQXJGY29jcm43SGphV2txMWE3L2FxNmdFZVF6UFNqV2E0TS9ZMFR4eW83MEdFUUNUbVFJUXUyR2E2TVBSWkJ0SThVZWp6dVRGWjhPQ00vMWVGYU93VEdHTllSTTFjM3g5M1ZoZkE4QUdHT0xWWU4xZXRVN0JhdGkyUTJ0bW5JWGdpZXRyaktNd1Q1aXI3b2NjWkdwUGlUc21xRGpGU3FWT2hPalQ3a01SR2xWVGNBci9uSmFPV05jOUJmaTEwa2VxcUU1VkJhaENHRkltNFVUOVNnVk9tU2xUY1p5Y1E5OE9aWGUxektKdUQvNmtTR0Vwa3JUVk9kSTJqMEx6a1lWZEdRbmlrVmxrVEc0K0ZxcCtqbjRyd3F0UzJ2cXBOckd3ckZvNlVpZkIyRitGbDFXRE8wWHluSUxsZ3pBVHVsRFArZG9nZTJzajdwUW1wQzdaanp5RTJOV252akJjVzFkTEMxalM4L1laL1ZuWVBmQW9yTGthNUVxTEdDWmdIMlk1V3NaSlNVU0ZVell2NHp4eWdpZExUTGZlOHY4YXRtN1ZBZHV1VjlZZW5HZFd1bHdCWnpqQmJiSGxsbmJvUUMwTUFHYkVvczlsVWRkYTEzZ1MzKytmbmdyMlNvT3dWSDRDbVM2TXNVWHluL2wzTUdlYmtvclhwYzNKRmRHaG16RTV6alhrUVJpN0ZQZkhSRkJVRFdLcDRiQWNmWXpQOXBmUzJ0bTYvbStQRkQzTEtZemp0VFBBRTVTeFJTWENJUytTZXI1WTJjWEtLMU1sNk9MMis3ZERiRFVMbExKWmdCcEh6bllya1E4L0JKL0NURmNKVCswSXVML3F6VDFQODE4aGpraEhic3d4Ykx6MzIrWkdmbm9ORnA2MmpoZXk0ZjZ2S3R3QkFNYTJWYllwUGNqWjRzSzdYbEdCdER2bE13dnBkRDRwUVZBam5lRDhjMDhVZXd3YTZtODZLbmx0NjVEb0NHQlJRNFp1K3dBY3lNcE02Q2ZpZ3pSTS84QVplTmNuMnU0VHNnL3ZTeld1OUh1akFGaHN4bkVtd2V5OHB6WlI2TTRVMHBXbE5abXNMWEhqaS9BUkRaR0IwdmJSZnlVUys3c2wwUzB4VHNjaEpuWk4yeVZNZ3M3R3J1bXUrMVhXOWxPOUYwSVowZHBuc1owN001bEtLejU4T2YwQTE2RjZYRGN6UTJUZThEZXlySUl2NFF3TUoyWm4zbXJzUFRSYWE1SEs4dXRGbDRVQzhmTGhsTWJlVnM1TWFQak40N1ZCQ2E3eUlBWjl0V0VLZkwvbld4dmU1UWZqeVpUM0RGQUV2TEg4NmVScDNZZ0xRQ3lLTHFwUWpsaDB6QjdvdHBvb1FSbVNvd2YvOEdGQjY5T0NuSHhVVVhtYVV5Y3IweWt5T3FXMUhwN1p4L3BGcmtoc1h5YzVSbVJabXM4Sk5MTVFxMkd4bWI3aXdCRTd0dmlFR3AyYk9vSnB3aE5NbFBjNXhLU3dXN2ZxM1lEK2FsVGxVNjBsWW1CbjFCYXZQellxM29jYUVhTVZ6SHRNMHN2c0xNSFFWbU1iMUNtT3hQQWkwWHd4ckVrcjF5TEtvN1I4VXFIbmNVUmpyTzBXdDM3Wi94OWlGMDhGZzZVWmpWRzZOdHAzcld0VkZWMHhGN2FtTGVxN0gyckE0aEV4WDE3MnJWNWdmSVpLUzhYdWJ4M21WbXArNlJzNmZSeWI4cnRWdEIrSnl3UzVMbkErdHVzNlZsOW15QVF5MlhETzlqdTF6N1RGblZ3TmhxMkdwNVRoWHRFZCs4bUZXbXlIMld1cTc2OGt2MTJxQ2lsTEFBZlIyclRhblYrOVR6UDdvNG1XOEhsZDZ4TEZkcFI3a2lUOW5idWNXOHpMaE5yeFl3RHM0NkJrSkR5Q2lFVzFldStPY2FoUVo5YkgvdVJEcmZmdHZ2M2NidG82SlNRY3Z0U0lreFJtbkdZRHNTVFhSUEsvSXVyWXhyV3BRK2ZWaEdKWExLWGlsN0JRSTFOZUZSTlFMajRYVDgzcnozZVluOVo5eExSMDBrOUFYbFhqeFRUYndvcFZ1TVlHTHNSaGNMU21uRlFRWkk4ajQzUExYQnplaGI1M01kckVpMG56ZW9IZGgrdDJHOTM3b0l5YUxYcENQMUlmRVhFbk00YXdvVnMxdFY2dnJoZUw5VUtwUHZER1l3WkN1OHkzQUVwS2FsUm1ZQ21oaUtkZTFpRVoyM2U2SUlneDJ4YVFaMThRTkd0dTl3d0l2UkFZTlVJcU8yQ1VnTndreDRPSjBWUjFaemVwQzFXSFAwTUszaUpOWVpVenRFbHI4dWhWNDFqWFFmeXJlMzd6djVITHJKV3VUb3QyMllVK25aUUE1UVVKaUhRNy9maVlobTdJUHhFNTBSWUxLak4vNHFyOUVsQUNoc2lsZWdEKzBUVndpVXRDZDFhek9FbjFQOG95a3NtZnIvdWtadU5sQzdHOHZJUzF0bEFQTllVazJPUzNYMUJKb0owSXFYWHgzNHJwcnBrbGxhT2ZHUWFNMytJcldUMndLb0dqWFZoNEZsWUZXbHl4WjdvMmdBMEoxbmFiZVh2NldJcTBSMmoyb3M0eE1ndGhFL25BdGQrMVdqWDNWVENKQktORmNvTnFwa0RTNzVGTm9JSWNYaGwydUNFSmEvamxhOVJSY3JFK1VYRDBZanpyVTZSODJudHpiclM4ckhlRnpLa0NyaXNERk9TWVIraDEybmd3SlRlYnlNSGxCWFBrazQ0L3pENmFrU3JSUDcxMUlPeWJjNCt0K1NYTjJFUlRkWXA3aVFoSDFBQy9mV0ZadEFMN052dloxQVo0am9WNTZxbDBLdSs0RVRSRnFacHBHeFVGemFCK2I1QWFHcHArckVIOERYemxGQWladW5EaG8vdzJCM1hISUUwN2hYMmtCL3M5YWNiZ2pUTURpT21sZmV3ZGJhSFllVHB5SGxGS2c4MWNvWnRncVlPVUw1VnN3STVRUjk2MDdSRkdqR21vMXkyVU9kK3AwelBtTC80ZDhtYTdlbXpsMnp3a1NKVUpTYjRiblV2WkJ0UlFQZEhxMUIrNTZLdWM3UU8wYmhaaVNKQ3g5eUtpRWpGdHovZjFpYTJJZmJRdCs3MEYrbVUwWkE2a2xFM2FsQ2VZVDNBV1hYZjNtK3VUNEFUWVY0Y0RHL0FGRnhoU2lvRWMrSU91N3A0TWovUE1tVThYYWI3d3RDSkNxaURIVjdEaXl5Zm1ZUndBem0wVGlBNkQrWGtBOWZrS0JyZzFNeWtWVEhrYlYwUkZONFdIUGVSWTF2RUVtWXZma2tCUjhXVUdieVlQVkZmWHhCVDc3YmFlSG9La0R2RHdNWDc3cGF3WGIxeWFsQXBzTjVvVkN4dnlvY0xRY2U5QkFWQUg3S09pTEtsRXU1NUhMRFUrVDkwY1JzYisvYVlpRVBCV21RSHNwREJPeEl3TW8xTEQyZTRKVmZhN0lGL2NPcFI0YWhiakVQa0hSdk42YjBHZ2NkZnJKRmI4WU9KSHdaWEJJeWtNZzA4TDJvRlhVRUxTYlNwNUpSZGxKNzdXL1VuQnltSHllb0JhNkJDbHdMR01FcWNOcXVlRy84aEZsc1V6cmFpSTBwdTlXdWszTlRHZUppemJaV1VyVk1sbEpnZE5iTjBiU3IvR3lGTjNPRGFaTjVOOGRDcERjdHE5ZVJvM3lJU3VTcklkQTdDQlBSNUV1YS9FTCtCbm92ZEEzbFk3bktvdDRoQlBEOERmTEw2SWJXNGx1RjNFK2ZYbkh4d0ZZMUIyRU9JTUlwYkc4d3I0YW9BeGpsc3I5UVJYZVFReFJoNjBMbU56SVp3ek9pMTNwc1VUQ2EyWDVUYTlTcFNpeHJhYW53c3l2eDZNMitPVkJKRGQ5Y0NSNHRKYndSQWt3dU12T1dqUnU2Zm9Qd1VtZVVkQjVIcTFLK0Ryc1AxWVg1ZVU1RW1GQ250VTdZRU1ZQWNiamRvVTkyMWxQd3VlZ2xSclMvbnVvcHVQdVUyWWhKYTUwaTV1Slo3UTVFcEUyQTVNTWtkVlR0OG52cW5USFplcysyUHI5MHRNQWZBSE1Ga2o0S1VUYkIxYkh1T1JGNTJRZDBnMDgvTnlscytGbUdwa1VnNHZudm43T2xaN1NDQklic1BXVnJ0eFViT3lVRXNHM3pXcnlnT2h4QmtXdHA3U0oyZkxvbUFJM0FGWXc2ODk3eUhPL1lSY1d1OHhwL3pFUTlQbWp2a3pXbHh5SGVHZ3hhakx3ckx2bk1nKzhEK2hsTFRrNGQvV0YveG1OTWltdEJ4bXhNSUZyaGo4bGZxSGdSNmJZZ2tQOHBpQUtzTXZMRkpjeWZCS0thWmo4eFNSNHdLYTdNa2JRb2dJQ2xVTHJiT1k3TWZpVE1pTWZHa2tXbW1HZHE5dk44US96M2llS2czbjgySVBYZEdvM1dSRGNQMTIzNVg2R3FDYWZHSk5GNHVlazd6dlhybmFWVWJYUVdnaGswTnhrNFhlKzBVUUNDUlRld3pna3ZpRE03SVAyRDR3cDAvYmZRd1FDaisxUitHazNsMFZOL1RkQ1dWMlhzNWZBekp5d3RMWS9FUnRFVjRDdm1INTA3aElsVDZBQ0Q2ZkVzU3JwNDZ0SStCTDZmRlA0RWt3UUtpR0pkZDlOS2MvR3VsQTlaMkpSaVhnM21XZUhmdWhyNnVBMTVQd2h0UEl1dWRaVFUraEdTYkQ5Y1owUzFEbzFZUFBRNGxidTMrbVlTMkhOb0ZCd1VNRitnUVJtTFJSb3pSdWgyVWxsSUYzS29FUklnTHlBaGJDTHJxaXEwTUpDTGtKQmFibFVVN1RlNWhqcnorcXlDZXNoTFhvSDA5T205emZMdkZPd080bmIyMFB3U1NibW43bEVUcmwva3kvcXV2MUFhcHJkRHMxNlZWYzQxcldUM01uUzBBOVcxWXE2cCtiVkk2VmJrVUJrZWM4UEJ2RjdBQmJBeFdmUldvV3B6REkxQmhPZnV6N2dJd0dUZ1Ztc3FMSFJDVnFmWUpJeklQem9YWjljcmZ2eG1DU3lmRjVrY3dxLzJOR3pUa0Y5MXh1dzN0cktZWFFHcHNOeFJ3Y1Q0SjZ1bmJ3L3V5d2taNk54S1c4S2hwcmNrTmpTOFdQRXZVNDNYS1BaTmk5L1c3QjBsZG0zOFFIWTMwdVF2OFFhSkxFUk9EYjJubGlxcGs4Q2s4SjNqanFVUzFKcU4rbjJOVzY0bWNRcFBHZVRPQ0g1RDBJUXFYS09MM0FPSng2ZmM0aGpZUTkydisvVUtFMUI0SmRQZjlSdVcyNlEyeml1S2c4c21oRDBBdG11cE85YkJ3eVpNM3ZzRlZPQmIxWFVEQkRpcy9MMnI3QjRlc1JzRzNsL1QyN3RzRExPL2hmOWRWUzJLV3BsR2VZdkIxUHA4R2trRTlrTHdJNWxOMWN3NFc2TFFFVGYvVEZSZHhZMHNkU241SnNBL3hyM1FwNmh5Uk1uSWJKbEZ5R2dGOHNnRHRqaUQ0a2dNSStEU3MrU2tuN0crSnlBeXRCSEtmWTJ6aUxGckhYV2g0dU1maGthM2JEZUpYSzhsa1BLdFJnUDljcjJGNWJOLy9ibUY3cjVhYXlySzMvRWJ3V2N2SVY0SzJVMDR2MG9MQWhvTHRzWlFRYUhFbGxGMWY3VDJ4M3U3UnhXNzI5T0ovQU9UN2ErS0hWcEtQQmdPWHRvdEM5RWZrNTc1ODdLZlI2dGRpYzdDZ2cvVUc3TzI0V055SUZnNW9NaFI4cE11T0ZvNGhYbnlFc2hxRlNkSEJ5bDNPYXFRV3VxRHJLYWlydWRjV042Nzd1OGxIUFFZVWZaM1ZoK0FHZUlvY2diaVU0eUpTTHUraGliZWlSMDRZZUJYQ2Ewb09ma0ZmaHV2RXFPWnZzNDVOZkl0M2habm9GcTRCUFovQjUwOEp3LzRFdXl1UW96VFA1VzU3MENxYjJzZ0dLUHh2V20vcTNPUXorQU5iQUhpa3l5L0QwWXQzTDRML2FYdWkwM2U2RDB3R1NRSndMKzJ6MFJ4L1lOY25aZEdUNFpPa2dpbzdIYTRaYkxkV2FIUm05dm9GWUNkYmZob2ZSc2YvMFZyMXB0d1QxTStxcmJPR0tYOGVKSGJZS1l5TTU5SGJLcTFleXF4dHZhOW0xRFRqREhHVy9RY0I3ZDdkV0tDT3VuUGh1dnRxVERXYXBxQXltcTJaL2JTcUQzMTZuZlUrUGx1MktwSmlkSlE4V3I1cEt5dHRPYUxSa1IvMW1DNTRKWkhybXZyMGNEOCt2RVBIcEJnbmhCeXZIMENMUzJ2NTFYL3RzcnVYRGdhM3pVNFFXOXJrMEJCRUhlbENhWi8yK2tBS2dFbjAyeDZzTjhLVmxRNTQ5NTJZajFYdk9FVGR2RVR0NkNTTHdYSFUwVEVIejNkZ083OC9nZkE1OVhFUWdZeEJRaEE3Mk13czZYdytiZWFlY1RQS1hiOFB1S2V3NDlDMkpvaDZnQnZWZWE5M1JBSVhpYWJMZUIwRWdFZ040L2pJNHJ3aFZUYU15MllhLzh0STh4MzZHcFdFTjJaM2h1dW9MY3Z2TnVhTzY0U2lZOHFtcUFpOVF4T25FWHNGNG9LQjkxdkpEcXRFUFJCVi9OcnlZbjZPSHVFVEJ0TjNCR2s0dUdwVXJXQ1hqUndFSzZhWjBFQ09wR2lSMGtROFhqbmpuSS9JdWJiTEUxSEIrSmVicm8wZzRIeUhReG5rVUFRUUNHOXdjc0RxcjFOellNMytOMWptRHQ5YVNSTnlDZm9OWlZObGRrVkdaWCtXNUtYbWhzTERWNXA1Y1NlaXdTMHFZOWJKS2laRGp1TkRvOXVDV29vM3o3QytjYUU5THVPRHhVcWVVRlZwck5WZVBTM25qbE5zVm1BbWpjNFpiNks4cmdtZm4rVWxtcHB5cDZyYWFVKzNhbXE0SXo0eUcrWVBoWTgzNm9xc1pFRW1LMjBXaDVoTVhNajkxNlY0aWVFS3hwdGlSSnZiaGwxaDZlOFJtQkZiS0NWMDBmNFZ2UjRjdGM0YUZ1eHdoZ1B6Ui9lanlwa0kyZFZEcm44Nm1JK0gyNjhjeUFqbUoxY2o3Q2YzK1VpTlJneWtUZGhPdldvLzZjcGorNWtIRldZVVE3QVhTbGRRVnNEZTNsYWJsYlc0K1ZOcUhEZXFhM0xXTUc0UzRGYXJFWkQ4ODdXbGQ5SGp4UTl6cFJaUStBTTVidzhnclBZMEZHU2F1RFU4SnBNQU55SVY2N2lHN0xRT3dpMmlucE1ReUZ3QWk4QXhGaEdwQU4vb2pRajRCY1lkR3dIOExnNmtwYTU5VmVUN1V5R0k5KytKV01qdW9lL21UT2duZDBia2QySURBMFh2OW5rRkU1UVRJWDFGellJbDdQdk1ycFJzbmViZVBpRnM4bFpWOUFVcDdaQS9aZnRkNlRIRG1NbXR4RnFjc3pyTEM0RmxhdTJNOVBUemcrbDNQalJWdFpDZm0rWmpMVHZ5amU4Rjl6WW5YMmR1UHFzYnA1NDNPZUJFbUhJUVRRVCtvVnJOY2xuM1c0SGp0UnYyZVlBVHM5RXRLeWNMV25kekRWaWxFUFdRWVBiblVyazZobEZ3OW9wcTJOWnJMREpCNkZJWDUzME9ZTGF0RXFSc0ZDM2l5OHU1SnRXU1hER1Vpd01JcncrbHpyRzhZRDg5Z0VvZUtQNW1OMFRVcFQyQUU2SkJaUk5Vb3ZEaVFNN0pvemo2d0V3ZjRaMkxMSFY2MXdpMnRYQThKaHRjcXNVdWZKZUE3VFdSYzNQRnNWYkQrbW82N0xrdE9NTXcwT2Z5VUVsVnk1SGNxaXU3eDd0eU9RVWwycDN0SUNFMWM4bDMzVmhuTlM1NWZyaGg5MGZhY3Zia0VycnVQekliMGwrZFFzOGpyQWM3OEdDdVU5NzBHYmNvRTkxSzRMcFpXanFtOVR1RmJmUjNhRVRGNUk4OXZzSURNbGRoUXcvMVRGV3pIbFlPTVN2aC96VmIxWERRNkxkMjVlQUlwdnljVTBSSUtMazF2TGVhSVVaTjFCZkxGK3JHYTZkY0I5YzFqcEZ1YzYrM2dqVGVvYllJNXdvbS9WR2NVVkJPVmpKZ0d1T21od3ZWYUFRSEREOC8vakkyMEJvT2sySitXa2lNcEhESGxKOElXRm1qb1NFQTJQTE9pc0FrMkpFVFBmdzZjZWtsamtTa0hjZ1BrWU5acEF2MkNZMnZEZWdwNm93eVR4V3Y0cG5zaGZlVnZmSzEyL0lOaDgyWWp2Z3FpOE1ENy9GdDdFQ1RyYWg5eEJ3c1dsRjJhNjRyYVo4Q2ZHNE5mZXdPYjJlTU9wQ00zR282M2hDVVhJa1QvSlQxY0RNdVZkUWZsQTJzYjRTZzN2RHgxWGpKWnpxOEpJWjRmOWxVanZkZk1LZmJhbkJoRk5kcVUweTZQTVBBZDFkL1R2ZVQ0bkhYSkhVYkdBNitEQzNmQ2xRRS9VOFcrMlRRL1hCTVBnREN0d09vQ1laeUFYS2JGZXZUQjFUa0RreW82UWV6MlluZVd4S2lzQkZ1RkRqKzN4T3NVR1o2bVBxdnZtbEJkOHZTdCtxL3NLT0EvK3VHcm9oWEsxdFY1OVMxOExnWXJYR2FLRVJ2NjZqaEhsRGRVd3BmNU1Wb1RmVGhQdkpod1dLcE9oRXBaS1MvSFp3d3pyNWRvaXBWTThiZXBiNVNSK0paTUxWSVhTQTlDME9Oa0dmT0ZOQkViUDNaTWNWWitDSTFRU1djUmIwZWZtUC96bnlUT2xQZG5YMDBJS2dyZDZQV1hKeXEySjlkbzVBcU15Wm80UVZOVTF0UGFRWEJMcVFKQ1dKV3k2eWlVbUlNeUtZNWh6NitvNDRteG5PaEF0akhzSy9EeEw4WUlwd1dXTkVtZ01ZL3l1dFBtRytlaWJtcksyL1kyRGk5c0JLTXpJUlVhS2VYV0ZwSzdTSkdnRVpzNjRUemNjUTYyYjRPbHVGMkU4VWNiei9nMmJTc3lQTzk0S0FVMW1td1RKVnFYOHlLVmdsQ0ZHdVhRb1B6SFFaRURTaWF4ZldmdHRXL2V0UDVSVWE3VytSdjdUVXZkbHVNNmJhSVdFdFhMNG5HVmxKSm51c0xBb1Y3R203OHhtcmE2cS9udHJUQi9aQjNEdUdxOHc1OXZUajFRUVpraU5GZThnK29aSUxrSnNUSWRyQ1FnY2J3cmZFS3dMTmE2UC96TVBCa0pKc1pFaVhGaThCQkhFMDMybW5JcDRwVUJER21GSUt2cGRJaE53aWNSMUJTYzhIY2RkQ09tRXFSVTU5d0tlaVRCQTlQcTliVWVoMDk0SitDQWpNSnlXelFIQ1NEQVZZWHZpYUpsZTRQUiszYWhkMkdvSlZOaWtuSHBoNE5jRXN2OC9tcGZXRG55eTVEdjFrNHMrVHhzeVdMSXluc01Vb3NsWVdDaGp3YVhYTStaTmFkb0ZKaEF4bWxVMDBKd3VVZVdxV1FBS0pjSzF0d09GOGcrc3VUK0ZReUZUN250TS9ha0pmRWNsbm5yV2Z2eXRFVWJyT1dvOVFyRWdwWlhVVXJRUktmOVZLUnBXUUttTlFMRytpd3ZNd3RPekxveTRVb0hTMURJQlFsd09YaHV3V2o0elBLQjVGZG9ud012NFhEMWoxcWtYZTA3aDRjRG1tamlnS1pJMjFSYVBLOGNIRTltd3lrejFBVWorSFNGcGtXWnRhVEVOQnpPTm1reHVZRTk1RjJGUEVjeWx1NDRjZDhZcVdhd3RTblpHVWV6WVZ1VHpRWlpoeW9ua2FPa2dUbjkvY2NZbHBYYnRWbVZPQWp6WjlpSkxvWVBmNU1acjRmN2xQdlhMeUVPTWtSNm5IOVZTMW1YemxGbWx2dy9UTUxIcG5UTnlybjcyY0tXMTZhVlpCYlhYdEQ4ODdYUnpQb1JEZWxHNitOV0Jycmh3VkdKcFJnUTZXaGlsMSt6SGh3T2dhWklvNnBkdGdCOEpicElxVTZjeGNjb09TOWtPZW9HQnNJeHVCNDRxR1FQRDM1TVdiSm1xU29vcGVzWnFwVm5WR2tEU252R1l4NDJWcDJFRE56ekRqVThOeUhBRWZ6M2VQWC9WZHRSS3g0R0I2VldSbzg0WTVoM2JLUllHY1QzYUR3Wk8wN2RGQzl1RnE2aW55d0F6blIyaWNHZkV5WXpWM1hKbTNPdmtXRTBnKzd4V2ZUSDhhbUI1K0pDZkYrLzRUdVRTcjZ1Y1pUUTM3Y0JSeThGS3prUGZYU2lRL3BBQkd0OU1jc085enJiaTlUY2ZQemtHSlRkZ05NOHFFeGdKVENybkVxUTBFekpaS2xIY1N6U0hsaXdFQ2gxcWMxd3h0MktwSWpZbDI1SjhYejR4ZlUvNUJlSCtRZkFhNksvdHZLMHNlT0R6K3htL3l4NzZjSkRLaW9DTlNiMGs2c09rNUs0Q3JMOExtdWNNWExVWlhnV0hOWVJ0UTRyUHV1NzlUaUlqTk5md1ZneWJZOWoyK1JOa0JSb2xGM1cyUGRzcVNpMVNPVS9DTDRoWC9OUlVoSlA2ZzdWUlRqR1p6MmRQNG0rMGZXNXZZckh3b2xIUW5hRnJWemNzd3hBRW9raGNjLzNyTFJSSFVrb1Ywc0J1aGJRb3lpcjhMaHRTQkk2RVc4dWwzczVXOFZEZGUvUk1iL2JEY3Y0SlF6VTJYNmFvM0MwM2crVnFQclVIS1l4RHdrYjNrSXFocU5rOWFQVkg5UWNRM0Joa3Nub3RNQVA2aGFpU2ZSUy9JZnREWVpwanVjV1lWM3F3dDJJZXFEZkFvNjlJeW53bDY3YkpkaDRzemlyN2RZZXdKVUkwU0lrTVVVRTFQRTE1MkRYR2N1cW9ncHhQMGgzbVRJclQ0eW82NGRqcVdCS05VKzN6aC9EcDNYSWVmWjRXTHpacXhJUFBzS2w1Qko5d21OREo5VjNHc0Fra0R5S3RQeUNvL1lrYTVCVC84WkFJYzI4VXlnWDJIc1U4WCtNU1hZN1BVWHplaFN3SW9oSTVMeWNKSzFHWDBCd0xmU2VuNytEa1RLL3dvVThzQlVFVnVuUHZXY3N2NzlxaWVXSWR0dGJCa2NSbTYxK3ZXZVNPbjNWOGhyZkhyNmp1aGYyTk92QmdDVTZOS2VSblRoT2xHNzhrSGE3OFFVeEhPdjVHdnMzMGpxd2piQlZ1YldnK2dIb2E3TG9nbGpXYStxVVNabUtrOTV3bmUzR3oxUG5WaTFRbUtxRDk2eUdkRXVZakZnRTdnUmt6NTN3aklsWlB2Yk9DMkYvVUt2Ump0b3ZQKzZ6eTNQVE9PZllyUVRIV2s5aU5xN1BQb3Y2OEk3TTFMYzBoSnBuYzRsaDN2RzQ3WmZKVGJ2dDdmaVk4dGVDakcyQk9QYVRLeDhuODlUZUxya0FDck9ObjVmSWI0QzNoMzBqNHBSVWg3QTkwRkZFQkFnSnV6L2UyMDBGdU5ZZE1yRlVGRzlKbEZNcnJCWmZub3lpRDRmeGtJVVR4TXBscTFDL0xnbFVENDRiY1ozcEtmaWFjZzRIalVYY01LN0tIS2NsVFN0akFHZEdWRXVDNjdQMmp4QWs0THYxUmh0ZFRoNzUyN0FpVUFxYlMvTkhjUjRtWlFiQTR0b29aL1pJaUdaNTB0RWZFOEZHTDN6cXViZ0ZPUlROcDZIQXlmN2Z0OE1YY1FJTVYzczJ2ZVZ1akROZnNETi9uZnlvdGdKeU9YMS9oZmFaVURHWHBaV3dZa0VMR0RTbVVUcHhISmt1anlmVE14L3dBSU12Z2xSTXozZWZLV1JaakphS1ROOG4rcjg3WHZEb1Q2VVNtSWdSdXozZHdPb0tCZ1ZGVkF5QmhESW1wQkYrTGwzdS9VVG1LTCsyQnpKQVlRUThoc3Q1cFN6SFpqOGQ1UnF1WWM3dkdxNGNqdFJ1VUdBOUZBdFdGQWZOQkFqTHZJMGZFUUNWR3lYZkNQKzk5aWlEMzk2Mnc3OU1rRG1GUVJvMVlXVDArOHp5elpqTGRsaDFtc3lmOHNXc3A1MDVFVDNIZ09yWkJsTHp2UlVmbDhVTVJrejVNRzRrcDF2cGNQSytQUmFCcVZxMTI4dWM4Z0ZIRzZET0VXcnBtdzJVNU1QOGZqd0g4MDBZcXZYNlVOSDBVMm1LenVka0M1M1pIUlVkSTJJUXBybUZHUVAzWHY0NTJ2cTE3RFVXV1huSEhGY1FLWDByalZwR0ZoSHZ6ZHlsblFEQXpSeXFrbEhlVy85RjdjaVF5eHZFMTJyVTJqRStuY1RSaDFYZmExbGhkL2NBMjY2bzdBbmRscTVtWmh0YXk2b2FUMTdqcHY2T2JxT0N1VUd4SHU1UStxMFFKWGxRaXRRZ3JLLy9Pb1dJZURtdGhrWFkrRmwwb3pKUVBpczRLNTdnYXZsMTA3c1ArbENGYTBuOHk4UmpaMUswYmFhU0NIc0doVEREYlZ3bkhDNkZTQms3dnV0YVVJODd6RmZnZlhkZkxOU1JZczA1djd4QXZDRTl2Z2ZPVkpuUElNWUJsekNCWWtEemNlUTlHdUlibU5XK1g5K0V3ZlNBOG9WNFJtKzNuaTFWcUQ5QTBVUk82YXh0aXQrdlN2aWVpSCtnTTZMSEpKcGRhWThWTWoxc2tHZytvUmpZeEJLVElvRlBHdUVWNzFTeUV3dkhTOGdjUDVNaHB6c1BpTWJERGpjMno3V29wL3U0K0RqYW1RK0JKTnh0eVF1UUdiaFkxM1pYNW50K3lWUHg1ZTE3OGlCUEYzUUw3OVhqb0UxZWdmTW8wVGRDQ2VYK2xtRndNaVNWZjg1Tmk0ZFc0NGtOQlZ3emR5eU5wbi85aGd6ank3OGMzbU5lYVRPM2J5djdZakxtdUMwSFFDVFRtcW00S1RJV1pNRXlLSHRkVFZEWmJuRFFrT2tDaEw5NE1Qd0szWVRsUFhoeHhzWGl4SUU2cmpGdmhnd0Mxc3BNSmpIRzBLenVxOVUvTDQ1U2F0andtaDFoaThWSHNoQXlodGdhZk53UmdDWm9sT1A4TVBmdmsrckYvNFV3VWJDbk9VYWVVL1FDeVNBcHZ6QzdqQW94bWR2S2FxanZicHA0U0NqenZLWjYwaVVPdmd2Z0FadExyNzJYWDkvOUtPR1Q1R0dwYnEzSDd5Z0MyQm1ZaEZZcENSTVJPZlVUQ3NFTStXcVRYUEJhY285Z2VVQ3IxUWU0dFY3b25IVnNGL0dPNVNjK2JXdVJsdzVTTk83MzFuVzhvWFBMZFIzN2txdHhNM29ObnpOeEVaWFV0ZkQ3N3d0c01VaDU0ZEFoNmFIR1k0V3A1MEgxZFVqdGZ4elpKZHpvWlByY3BjUy9vODloRmV2azd6UEZMQzAvelNjRkJLV21McGxMdTZyMkJqb2t1aFg5MDNPN2dUU1lXZnlNVWZMWGpPTHNKOGtrcnZDSUcycGkwL0s0RWhMcTFtL1BKSDVWK05MMVpYcUdjSEV0dUwyMkZrTkRtNjJVQUlpa2gzUDduZ1NPSS9iVW9tUmlPVThPOXNUcTdRcEdHYWNUOWtBS0cydVFML1pzdnhEVUVBV0FUWituVU9zYnlhbU5nK2FmalJuSnVMWTQzMXYzYWczUEw2SlM4NGE4c1F5cGpSaFFKVTQ0SEYzVjhKczc2NmtHb25LT1RWbXZ4Tys3UnNLY1FVTk5NK2NsL0NjT0hlSjRVOEZqUjJTdXNyS3h3QlBwSEc5V0EyVUd3cFZ1VnlsZHNZalhkcnJBZFExaUN0aUUxcWthVlZwczBmN3kxTTRWMlVCSU5aQjJxRkJQMitxeVEyTUJtMjNDV2tRM2FwL09lYlpRdkVDQTFtamtwb1ZrcmEzcS9rQ2FSQWQ2bmRsWVFzdTBkcndvcytaWkEvTkl5cFlqWjBnRUtNRmxuazJQa0Q5V2ZIaHF0RDIyWnJOaWloU3ljaitIVEhEam1IK0xoZUYwZkVtdXJvSmVxd1hQR1J5WlFYb1hKYUJPVTRkSXhRMzhyeFdDMkdHYlFDejFCSUpiU1ZTZzIzVmFyb3pGZUFxS3dkUklxYWxxMnJzYWxVcjRSUjBMTFJISmtBNE44dUsvRXQ0RExMMU1pOXZlTjcxblR2UTdkL0NGNTRQRDZNbmx0RnVTNFlsbGpYNDA1bm9vZkdWRWl3cjBPdlM3cHdkTW5hTDd2M29XQXk4U0tKa3I4bHcza3VQZG9DZm50THBSalRkVDZJdWthMWpoR2YydW1CRTJKd3JWMTdlVVBLRjE2MnlUdml0S2hqNmQ3eW5jMEZKK3pybXVOajlPUlZDaFR4Q01lUkFRRWtsT3hKVEZTZncydXF4d2tMOEpIZEJvWWhQTXlZM3lmbEtvekhOK252Y1Q2a29mdDNRUFFaZHZYS2djdUYzTlZDeUNQbVF0ZmtnU0RpZEU0SmpsRHMwNnZCT3BQUHVreUQzdmd6UVhkMWUrdnNHTno5MUprNndzS0hjV3djazM4NXZmNkM5b3FGVzJuNGVOak8yK2IxSmI0WW5oZHF5T3MwaHZBUm9IbmhyMFJmUGxwSm1UME1uRDVXVVZLOWdhY05LbVQyQTJObHFGcG5xOWN0L1NZV0M4eVFDTU9UZFVTVC9FRUNnTzY0aTJLSGljNWRqR3N6N3kxMWkrcWQrOFEvbk9NSXlFVEhFMzNKbUFtWHdSM2VmODBOVTVzOERCZnFZSy9XMFVOUTBzM042RDJHSGNNYjl3TEh2Mi8ybThESStWTnVrS0Z2Zm13UjBEL1hkcCt6V3hTS2ZtS2wxZ3plZXljTkhGWjBESHpIY3hpZnhPdEtmZ04wb0p0MGtieTBSbVE1bnFOaWNqWFZCd3ZiMC8wbHFSSm96U0hMMERBUHVucHkwZzRDQ1Naa29ZUFZNeEoyMjFITTVDTm1ZZ3kwRGVRRitvajdIazdLQmpDL045OFl2ZXQ1SGZadXlJU1JJUWR2cmpTaWZYOHVKLzNWczhHVkw3dTdSQmk2VFFMVGMyUFBFcFVLc3JNL1lPN1N1MGx1NHZ0eHR1eUZQQXA5cFA0VklzeWJxZWdvT05OZWM4YWJUd0xTSk14UmU3Q0ZwM0paU3VCTlNVYTU3aFRKREtHcng0SFByTG1YNWpnRS9razhNNU8rN01GM1lwSjZjcDA1NG1UYTN6SjRaOU51andORFhSY3FoQ3MwTlljb05jenU4TTBrOXRnak1MZk1FUGlmSldEUWYrR0NKVE1MT3g3Q3U0UUJMVUpzWHBrOVB6RXFQK3IyVmtFV1pSVEtBTXFoeUhOVVZmTnkxUkt6VXl5citDUllEUFdhZGJUeDFIWEdwbG0wck1TQmJiQzA3NmVtaWR6dkM4Q3ZBVVpCcWllRzgwV0pNTXRjVkdlbVJ2Z0NSNFA3TW1lR0RRZW1rd2tYdHBHRVhEVUVaMDBWcTBxUDNUaEpzZThlclZDL2FvT0tYWlg3QWlTcXdDQlQrWm03MkFmL3FqelZBU2ZYL2FJWjVQb0g4b05yNXZGcUhwdU1DMW5MUGx5eFp0dEdkZ2pXVG41dGJrQmJmRE9VdWhuaTUrOE9xZFRsUVozYWVNRjVEb2FjcVh3L3FYZEpVbFRKWk1UaWlhU2tmZmRMdW12WnNHWG5xODVHdjZNcWNpS2F3WFF6MlMwWW15emhVUGJUWnF2VnJqdGNERG8vUndXOXFwTVRFRkhISUlGeTB2QkR2Q0dLQzMvZ2o0dGJHU2t2a3pPQk5sRlFScnVFaWFoWlArUSsxMVdqREp3NjJITVZ4dWRqRkw4dVVuTGRuL3c3Z0FrMUNMTk9XenFMM1NadVVFc25MSVVVaEFUZ3dzL0pwSExncnhndG43akdBSlBSYzBFUUk5NGdFdXZ0S0dvcUF0R0xsZDlJTWxjUXZLb0JCTnhkRjFxMlBHN3BEU2ZwR0tIWjNiS2VQRzlWRzl0SFErRVRQYTNYUXV5ZE5tUHoxS0hrVk9xNjZkM2ZQZ2lSWTNkbjdvVElrNEo4cXRrV2oxOUd6RElkWGE5czBJQjRLMjFPWUpQd2c3RUlHOFB1L2dWQWx0QWJWem1ZNnhNK09rT2lvcEYwdTRBbFhZRTROUWN3cmlZcEVwRzhPZWEvNmhDd0QrUzM0ODllV0hDR04vemJ3M0YyTHE1U2pLUFRZMk5TRHp4TERVZG1lb0k5SXp5cHlFVnhCcFFPeFRrWklXUCtac2dqbXJldWtvY1A2YndCdFJOaWZiSHdvazIyQVErOWFEY0g5RmszNDdpS1RZRmtGQnBBcGwvYnBUNmI3L0tBN2pLMXFIMDR4UlRwRllwSDJURTl3QzRvRU9QeGZhT0hmSzJBSkYxS1FBQ0RWUjduY09HL3JwWmNBSy9KS1p3RWRuMjBjWHVrVDVsbG9hc2E4YkxiN290Qi9DaWk3dEdxNjZzcUVpbnd2aXVsS2c1YlhyZkNON3VuK3NHeGVZZnF0RE1zS3lwd0FZY2NybExKako0clU2WjRiclExWnVvOGFtMzZDdDhtL2RuOFNENXpTdHNlcUN1allwNGxJbGFSbytVYVBzQjJURER3RDFma3NGazBMUEJEUDVsQWJJTzhidWg0ZVdLVy9BbUVxTk13NWVlWmRnWFo4R3o5b0JoSjhGVi9mdUdUMVFYaGFlOTJlcW9mYTBMeGIxejdIM2RURjErTWZYNVk3OTNZRHhEYkpURkl3OFh3aGpUTkp3SGY1VEl1T3RlenRSVE5RakErZXoxcmFxRzFwck9DWi95aUFjSWFOOTlCL0NDOFYya3BRRmI4bG5ZRTFQRHoyS1dzUlZGaUpSMVlnY1FHOUpsQTU5Skp2YkxORCtvR1RJdTFDdWQ4R21EekF3SllhWTFpL3U1TlNERlYzOS9FVUh6L3FMRG9QdFJ3TDNCQXk5aCtZSGVoVnd2Z0dCUGtpWGlQSFAvV3hraURKeTRkVm1EU2p6VHBoZUxkK0xLZ09sd2E3Q0JhVjdXenowYmordzJma2hQV0IvR1BiSXM1VisvdTBrUzFWeWJNNFhQNm1Ydm43aFhZdk14WktBZ2V2Um91T0JuMU1XVENjdjJ1NjBaaGZpekg3Y3c2TERqalVzTkNtdW1ieFVmbnd4MGlUWU9wTzNNK2UwKzNvK2RQd0h6ZktvdUNZNGNINGphdU1PQkFBdGI0d2FJbVYrdUJEcmNnNzJwVzA3bDhNZ2dmVjJjRkFQZE1kYWgrbUZpaExZUWdtUnlYZExHRHljSFhUVGR5VFZrQW00RktkOU8zaG9QOUNqTE5oSDZiRkZ4WmdHa3YwcUNMdHI4Rk9jQmpxTW9QN2J1TllPMnpXbEpmU01Ca242dEQva28xN0FrQUNoVWdtWHpkVFN4V1c4VWtON0t3cytRK2NtY3pMdHh1TlBQOUtzUXczeFY5ckFtWFA1ZlBrVlRRdVNxQUJwY2JwTmo4Und0aTFuRFdKb2huMk5oZ1FIeVlZZHlHOG81M3hXWmFzKzlMM1FrYWRzaXJyVEN2UjBIenJFdFdrNFJTVU9rcUhoVFN1SmJwMkZMcThKVzhrNDRVYzRvR3pqQTV1U3JJcCt5YVk3ZVljaFZrcGpqalFKeW5wS0pQQ3hSaEUySnJodGEwRis2bDQwb0h6UVNTdHBqUXNsclB2YzlmQmlqRU1YeWRLeXY3UkVkYS9FeVFyazZxWnljTlIyWTZGNVJNV2c3MGswc3hBUjB5TmkwOVg1UG5Uemg0MENWTmxlRWxNSkcvdWtGaVgvZm81a2o1aUpuVCs0QUhOMWthRityajBySFFOZHliaEVmR1MzNUExNXFvWTZsYldlZ09Mb1pJcE9CcHJiTkRhM2xmbVRJcG1wNjRrOHlVZ1JyYXpKVW9GZkNGSkpFUE5TUnpFYWZTSDhjanB1TWo0Y09KdWJ3ODRxL3p6Um9GNlRpUWVSU1hmVTZKVDk0dWtKTXUvRFFpa21obzh3dExQWFNxdE44eUdxN3BXNzd3SlJvbmU3LzBlK010ZXBmbCsrVllHbTB2eDE4eEtJbGtCV0F3TzVKTUFSd3UvQkZTOHgrWjdkY3J6T1VVV29LRTFmeDc0Z2R1SHlKKzFPZXRsYUlneEZVemplQmc4LzJ4TmY1SWEzR1IzZTRla3h3Q0pCQVFmQkR4OXlKeGVMUGg2SjhLbi9kZUFuMitBVW1KVTJzN0Yxck1yMTVlWnh6M2txMHdDY2JuWUluY0VUY29VdTUyTmx6NE5xVlc3MG9IT0NMYTBvTysyOG55bU9PdHFtY3hTSTB4clBsL2ZyVUdLcDU1dXFNZ3Q0MUdKR2lydTRLOHZ0NEp2WW5sZWNHMUtFdDBTZEZ5Q2xQYUVvVTZoRjBXdVNYaU9TYkgvOUFmcnlXQlBWbzUzNUhwZjZ1SkZNbldmQnl4TkRSWk1UWWUrTURkNEFicnlDOTlvaHZUS3NEK2piMVFzZDZDT0wxcjVIRUFMQU56VEJ3Nmh1U2lOWVIzY3hKTFJRQmtkSjRZSXlxTG1Rb2ViNjEreE81UWpFUnhxRmRTVHcrNTJPWnNRdmVpNmpWVEpXcHJ6YVAyendLSU1TWkp4S0JhcnpVbUZKT3VHa3hHU050NE94UStKMHp3RlE1NXZ4Vy9VazluTDQ1QTh1M2FHL2QvMkQ0TExUOWpaanpFYXRZK3ZMZW1NTGFqMUtqVGIrUG82czlETjhKdWl5ZXloemFuRzNvQ1VvU3h6ZmhUWDh0VndvclZ2UnZOQ3BBV1l2VzZaYjBkbUhkVEhsYlMzNkZGSXQ0OFhCZFhodWhuK1N1VDZka0hFb0IvVG9VdFhDVTBlSm5jM0JGVkZMaVBOcE11U2YyckZicE1wdEVDdmpXL0puY2FoSDZucGYxck5ZeTFGeDY0UTNFVHZnS1BhVUQyUUQ3Rk8vVDZ3VGE1ZnhtcXF3S2ZNUXlKYnF3NEl3TGdRRlhGZGRSYmJHSDVmM216OGNNWXJ4OVg4dGp5MEF2eEc2NkdKNm1BZWsrZjdVYWFMRmYzNUUyUngrMVpQQUNHeHY1U2lTUVBZcEQreCtjVDBnWFNzaWtDUXRtYThjTnNlaWRFV25MY3ZaalFLbW9PWXllQnBId3RDVkhlNnVXRVV3azZqLzdpVys4dFovRTRTVUtkb1JyNWdldzAwcUdkZld0cDA5Vy83UHM5U3JXcHFza1dTNWNTbHBPemJxYUNTdVY3YXphN2ZJbllpdDJrQnZVOFpERDU5NXZIb2QrcnA3cGdZVWZtd1dzU0s4dDg0ZFpIS1ZaTDh2aCtGb3Z3aHFPSmw2RlgwRzdSMmVoTVpIdGhsNnNtWjNBUFNSUGJDRWloTFlJNHVlcFUyd0hTWlBFdFhzWTJYcXhTVkpDSEIvYlozYVFLUVBQSjRmUnRzR2JTWDEzMk9qblovbzY3SjV1ajRnUWsvQWpmYXdQcWV0aEVXd0xpKy9qTk4ySTBlbitGcXB4WURqZXlrL3JlcU1qOW9ySFRnMitRNCtwZXNXa1FHcGFyMzlzWGs1SSs3c0F2QTFnL1JWaCttTGJpZjdXMTFjMXdoSDlxVVMzY21tS3duUUtjQTExbWFmWnlKZmt1UEt4TXFIanEyL3BJWVgwYjA3TDFhcFUyOGwyenpJVXUweWVyN3IxZHk1ODlNMGxqYWttaXpaZXNDY0QvdGFCWkdzR09UQlJqUngxUUFoQ3VLZTFrcXF2ZEVhR0IxUmZoSVZ1S0dUSitqTGVrOUQya0dzYnZMMFAzSFVxRjVkZVk5MXlPbkpZNFdhdVRjS3Z2dTgvbHdtZXBBVlpBQzJDanNaVDRFUC8yaTB0a1l2UDVBazNaUDVCcGtxdmFsWi9FdnpvTWNSd0Z0SFJuTTFBaFZIdGhjUm1yR2srUnpTMHNDcXgweGVZQlZZcUJaUS91K0VWZm56dktXRGN6RVV0Wnl3aWFhVDhSclFCSEJxeHlnZVpYdkhOcmRWOTRUTkdkQ0pZOUxIempYdHhGR3hiMlJvSmNyRitORGZ4My9TUTA5VFVqYTViWUZqSmVzUGQ5V3dra3BYbFlpSEx3UXRIMVhTOXNWd1JqK0dSWGI5WGZ4ZVNRQk9uMzVxckdFZUdmMkEwZWkwdmtzN1FlcHB0UklwWkx0RG90Z1czZ0FNZ1granJ6cmZGMHhIblB2RWdGYUlyUy9EeE9qM0h0YmFKZUk3cUc1Y1NkWkJXbVdJWGZ2dkh2UjF0cS9UeW91VkxlbzlwWGJQTXoyMXpuaXRYYVRQMFo5N210L1hoaWNHWGg1VUtJb09mK3JjU3BJU2E2ekdub0dxOWl5MHNHeG8wYnN0dVAxOC9MM0VVSW9kdDhwaDllWFF2K0RLWmczYXhMaFhic0VhdGhTNUpkaldtZ3V5ajFKK3JQNWNFa1FDZHZzZjcwNGJHVW1Xc0N6d2I2YVFMUnBGUWJxN0dxQSsvSjNtUTQ4QUF1SWw2Nlc0QWd1ZVJXaEtUM0lXSmtNL2s5bjVnRGNqOEk2M3VQRDV4MWxsR0hpRmtzNmMyQkxXbkNCd0ZjUSszK2hSTld5WXVmYUIzekt6cnduTWJSeWwxcUlhVEgzZ0FLOTdUczBxWGxXNGhlTmZ4WTNydnRDb1U0YkxERXljU3F4LzFodUwwRk9EYU40UkVBNWVFb2UxNk1KU0MwNDE4aXo1dDhwZi9hZFJrOFdiUnRaZFVFbnYvTGo1MXB3eWgvT085MU1nWU5FMkdhaGFVNTBwYVNFNTR4engxSzZXNkpqcTNtSXJEeVpHbzJhNnFHdXJhaEtpZkI1ZU9LcUFyTWhjeGMrVjJaWXJRSmY2OVVaeTNFZzd4RHNxODJrUUcwaDJMQU9ZMGZVV2c1VWp2ZVVOK25qYW1YSS9QeWRrOVpPWk1mTlQxYkJCbVFTSGt6bmsvZDlQcGlKV2pIOWdrMXpveUxrb2ZqeG1hS3I0WXI3V3NIeWkzYXpabmdVRXVFTjM3ZDRRcytJamxqSmZPek1SYWEvZ2ppTUV5b0ovUjhndTEzL2NVeWkyYVFtSFZ6ZVErNzRIeVE0ajNrUktSeUFCamdnbndJWTBjVFh4M2FvOXo0QW5Mc2ZRUmRUVGpGbmg0QkFwanFIRWw0RlFqMllMbTFhZGJvdXdWMFhuY0hHdTVscnFOMENFQTJrNTZDc2NtQlY3Q2dWWGM1VFZoNkhVeE1TUnJrZUVlMjdOc29SQW91ZURsaUNxVThGTEplN1V3Nzd6ano5Yk8xYWwxWnhHZVZLdFV0cGFBQXlOYVl4eGR2N1RiRFVXK1BDVmNoV3BMZG1Tam5yVzYzb3RSd2I3RWNrT00wODZuYjhMSU9tVm4vRjllellTeW15Q3hPWWZnY1VObml6L2NySSttMGpoMmM3U1hFZURwSG1JSjN5SC9iL2F0VFlpWWhTbzBoVkZrREVEcW1BRHZNTGh5Rm83YVB6Q29lSFFUYmxyampYb2xrNXFCeVZsSzUvSlZmbkVGN3dqN3drUmtHODM3WFBUbkJUaVRoNUNxSnlzM3pSR2N3U3NlTUtNMEk1dnA1UzFXRmJsb05IR1JGYVVOQzdCWFBUd1VNRFM5Rlg3aGR6Q3dmOXlMZFdrMVlwUjhaa3NacEw4d2JMRC92NzFxVFhTM0pRSHJzdVdXZm1HQitCdTVaQ0Z1cnNEaGFmQi91VVh2MVJWVU9hMWtnV3dTbkQxQ1hkLzhnNkp1SWJFZGp6YTVjUy82R3FIOVRvdnF0dkN5bXIyRGtKYkRXVDVraFhJYzI5NTZXUGcwcWVSdlRYbXI4T25WbkZWYmtZeHBLTVlxejNOeHhIdTZPSExvSXFrNWhlQnkyTVdJMElYazNZbUt3dWhCL1pVc0g4dlBQaVZ5L1BUVUFVQW0zM1k5U1pXWTd3eW1rUnJMYjhXc2doZjRUa1plTDdFdmswWUY5dEpDM2lyajcrb1JxUEFLNUd5Rk9jSUtSd0xYU1BHNDM3Z3VWSDNSMTd6blZBUDNWZVBWamJOSXdKUVNMT2h4NldKRUhYTFp2N1RVeGt5S1lwM2creTFvaDRkK2w5bitWbThpaThES2JiUVB0VGxEaHkxVldIY01qYnhrQURBbHlXRFE2T3hiVUFyTXkvQS9Fc2U2RmVSWjNZUTRYZDZpYmFFL1pJMHh0eFVIK2puUHVQQ0ozbXVqNVV6Zm5HdlNpSjFPN3hIL3dYaVZMZ0xoRlN4TUlxOEU3a2ZwQi9RZTRQTnRGTmlWSjlBTDQvcVVjR3d4RFk3VUsvcnZ1MERRQlVJN2NxdlZ2WThFZkMrV1ZRNU5qTktETmxmc0hrTCtSNjZlTXZjdUJlM3B0dUo3VmNyRENUQ25HZ29lVHU5YWo3Wkl2VEJmNGNvTTZjTjZHL004TDkyYjVhejQ3SmRxUW41NEVaZHhyTzlPeWVBNUVJaUk4bVlydG9qVm1KK3lJNzllcHBWTFZ1RzRMc292eVRabVJjcXIvNHY5RWVCMDVPRXV4cE9QTG5Oc0xuMWkvVkNma095MjZmNlpNR2Z5Z2orbGRqVkFucm1LbW51NzFzdG1qTXB5ZWlCTkRCZmFNR2ZiQWZVdytxaHd1eHhXYWdlYmlkejRZZGJFSHVXQ3NTVVZ5RndHOG14SWxRTjg3Ukp3QjFxWWFNWUlMSnlIUytqN1RRcEEvR28xUGNmZUN4VFdPUXZFRDJmMzlTM1RhK3NCaytET2ZSYmNLSy9CWDdNWm1sb0xQUU9oSGMxNzNyOW9QV1FEUXFkb1JVdm15RmxSak80eEJJMXRuQUtUN25FS1A3RWs0OUhOdUhVdXFwZmlDOUpZSWFxcUFNL1lOekN1WTFHcFN0dnI1SDhPZk4wUkhheXM1NFI1cTNwOW1ubEp5WXJTQmI0UWgzTWlnV1JUR09uZVBDOU00REl4Ung1eDhqejd1dFh3WG1oUXo0TGZyY245Y3JucW1UeXhRVkt5T0swS3lIZkxTdWs3UDl1L2tvQUxkMDBxWGtHMkh1K0dYNVFjbjB1M2tvMVgzeVl5UFAzSS9wZVFKTWVzNWE3TDdvbTZZYkVoNXVYR1JVQXVrcWMyTGIvdkswN3IwVzRlRGZHSjdRNmJMNy9kT1B4SXlEcnhTd3FudUhsekRMdEVuWWdjcXZQdmptREhFdmVYbWgzQy9pbmlnekQ1ellXM1RBU2tOVFZ1UWpNRlEzR0xPVDFuWnZJKzZSajFLWVhncCtLcU9kSFNoZ0lOd1hlVnNnR0VBc2dkWEczTG5aSjFpNkIzRzZsYWJlb29Nb2hwblNESDhsSk5pMUsvdERDQ25Lb0UxN3phenZwR1p1M01tMXBCMzEzeFlCSmhUN2YwUVMvV3FVYTFFV0xkb05Cc09QbEQrNHNnY0tWWStOVEdvREg1cVFnaExaOGVpY2YzN3FucFlIWkxpSkpwblkyd1hjeVlTUkhqSWVWSTRid3U0UWJObFdBbjBmMC9mOWdTcGc2emN4N290YmtJekU0SzZVbkZDeWFhazlhRnEvcnBWL1NBS0hVZDNvRm5HMUhNUlBRTm5OZHg0Q3FZbHA1M04yTU9YVzFGM290eVVzeGZyWjg4K054eW9SUGdMb29Uc3BBNlZTdy9nSG5pdWhjcjdvdVlpb3FnM1V2ckZ5aEZqZXRtZUtCcWh1UzJhZXBlMW44aC9wMzVRdVczSmpxeWV3M21hTld5YTFQYVhmWkVNQjI1eXdnVjEwQU45MDFFT3drek00VWtNemlXUDRTR2VxeGxhc255WFVia1JmU3lhZXFsbHY3S2YxcjNZSzNzVzNvR3RPb3NYRlhMTTRQWnpGT3NpZW9SRXpZS2ZQY2ozcGhSbkFKa084U2VrYks0RHlEVlhhcHVZbzl0MDcrK1JhRVlxcmRlbmx6UGhRdFhHWTIwWGZkR2xqc3owbENlZk1DWjB2Tm1ydGRNNEx3R3h3R3NFRUdVY2VBdGRDVDV2S0l6SWhWVXZzL1pSYzdCNWxuZWszSm8vS2htd0VLYVE2WFY3OTY1d3l4Z0V5M0dnanNlM1BjcVIvNVB3alA4bkR0OWo5dFVWNW9uNEY1eUlGaHUzR0VPdVZnTkxKUnRqdTZZdWJpNVVuYkM3bTArUk9BOUs3aFE2N05ZYmMyOG5PTmlBRTJ4a2dqM3FYNWVkKzFFZ2Rzem1MeUdwQmlVZHRWaEhtdnMxNFRNcUxyakRUTCtYOXdSdkhSVFFrSFcrN1BtdDVvUjIrQkNkZmJ4b1pBellnWVJ1MUp1VHNTRkQ3WDEzOWliVktzUExxSy9JZzdpVkMrc1ZiY2VCTDg4VGxRbHVEN05mNEtnWlYrUkQxMlRjRzBnZ2V5OFVtQmdUZUxiSWQ2aE1iSTZnQzNGN3RzRjMzQW8wa2FQTC9wU0EyblZNZVpCcWR4Q2NSR2plTk5BR0Zmd013RlhSaHJYT3lEUmhSeW16dlpXQlBXZGZFUXVkT1Z0eTlNR2c3dnJ3OFEraXBWVEVPY2gyeDJRaVp3K29QWUxrcUpCd1hRUFNybVBnaksyWWFqRnVTd2V2eHE2QUt5K00rQWdJczc4RWhyKzNpbEFFMnV0ZEswMmRvODB4V2wvcXlySGxKOUhnVVR5U1RUZ2JIM2ZHdkxjbG5KcndjcG9SbUt5QzcrU2ZUeFBRaWpVRDlQL0V0bHNmeWVwNVI1a2hsU1JneXZsMkMxbFBSWi82UnRzeXNWTGlIaFhmY1U5dmVlaDFNZ0R3WWlpL28xSThHQ0FzdDNDNlJocFlnYWZ3RnUzY1pmZFkzMDNyMjdzNm1vb0F0NTFqQUwyQXE1dmdGUHBOODl1d2gxQ1krWldQNnpJbWdSVHQ4RmlRQ1ROSG55NHJFdmlKYld4Y2h0dkovajVyQ0FKRkloajVHUGk2bytiOHhNbHJONHhoVEJSUzdTOHVYOUZHeVhrNC9lUnhwOGVVZHBGMGVpQzVwVTBCblY1K3hzT2s4L2R3SjlFU0t3SEpCRWVPdXNkSmlCL2tTREo4TnlqWjJmYkJqbnBIeE04ajRIU0Zma0JSYUZ0MTF1V3dkVWV1MHkzbGFzY1o3bXpYT2sxdVdBcG14REtLd0RSbGFOcjFvZnJESGREcXdXM1hwQjBlc01XTGdoRlBGZnZWK2NKWFRRMDRSRXhnU09vMFhRTVRiOVk4eW9rNmlOOWsrdVNEc1luTFNpeHZpWmtpQkNxeTNCQmo4ZE90T1JsaG9CMWxVNzlxSnlEVmRhQStPZXF0b1pBeVFIVjVUZkZtT1NqSkp5RnJ1WHVRMjVOOFlEUDVhcXNBODFaZVRwK3VIZWVUSVl4WHZ2QlE1RCtZZ0czTnZtYkpYWWNZSFZZRzhpUzJxVUhsNTNQNTdNT24zS1hBaDh5WGNPK1F0OU54Z0hCV3JUS0F0azNyRVFoSmM4dmtMWFRHM1BSbFpYUGQ5VzNSM3JvenplMHlZZE9OQzJydTVqVmJmekRXNVdjandoajg3Nm80cVA3aGtYSEN0Zk1BbHh5d2tGZjhJNnBZYk5lcHNqZXVicHVvTnk0K2hOcTR5akRvVHQzMlhPVGFyOW9qOGt4TnBHU3lBTW5veU1oc1hmYnI3LzFXbFdFYlprVU5ma2E2UEkzRmJDamozdGlRdmE3TkwrdFpadkJNRUMzZGRTdFNWNjM0b3RLVlQ4WGlLSHJ3WkdmSUJBNlhnVWdpNjFwNTFhNUs3dm55MXVEdmJTUEJURlF1TjFvNGxUbVdJMFM0cUQ4dXlOZHJycXdlL3FiYlFoMXZMMUNxV1RLTUxFNzJxZ1ErOW9rbWx3MkNDUHNacTljOEVtQjZjTU9RcDQvTEtTTXFZMmtYNG5EZDlJVXNOWWtrZ0Z3MGgvZUR3MFNXTXFTTGFHV1dqdWp4L1NlUVVaTkFQWEFjZzUwQWFpbWJwUE9TUzBYS1VFT1F0L0J5RDRnYmF6Z1E3cnBpNE1yR1NvbGxLV05kMWJ2WE12WEVrTG83bXlsNzB5RUVUMlM0WjlSZkR2ZVhtMERKZmFzRW0vS3A0ck9zMDNTdVFzS1g0TWdveHhIRGQ3WTRYS0JGanFQUHlzKzdISzVpdXdZY29paExOWkhHanlOOWp2dWN3M2F3VHM0Rm5XbmFDbG1SNHhKd2JzeG03aTgzOUlMMGNZcVFZbDJsdE1pN3U2WWdEc2ZkdHgrRnFEMmptWVI1YVBxZjRwMW1EeElhdlBtbk15SjRFeGF5cmN6MURiOEYyZkNGOTF5cHdLbFNaZjRjYXd1YTRyTjNNZHhKbEFvdkxabC9MSEl2NVYwUTRvS3k3cFErNGo0UU9DeTV4RHFwcmRBNndlSDJsd1FBOGJQWGMwdWxQNjF0cTVldzJsNFNWMjh6NkZUYmlMMVZQTDdkald3YjdQN0xJM1NXcFhoczg3OTN6YVJDbitVc0VnMzBkL05YNDJCSXdwZDNhVjdKM0I3VmZaR0FXaGpoYTUzaUIvZ29Dd253SURWNDdOMStPL0VINmdwejBUUzJEYktlVVhSbGtVNG4wemlWMGhVcHViMnd1V3EwcWNQYTQzVGZ2UnVYS0RUZUxPTENYNnFITVl2MDdzMjYxSCtuOS9BaGFPemw1RFRNM0gvRi9Za3k2K2o2R0tEQUI1WVZtUENxSk1qTlFOMDV0b1NiM2JMUUxjVU5Fb0FxdkIxdlR1OHdOZWdKdTFiNm5IOThPZlYxNmJlMWdDUGw5bHZpRHFPOWZMaU9CLzBoelUxR3NxeE1SODdnRkVWVXZWRlZERnV5ZVFWMXd2UjYycTNmY3VrNk5GeHFXbzdzcWNqWXBYdzBZYlh6Rkl3MEZCUHREd3R1bklmQTV4UnJLZ0E3ZEpTTkU0N2ZrZWgwWkhHcHMzYU9PckRLKzdTUWFXcWY0QWlFNXpEYUhMNlUvU1RWdEhyRDh4SjRKT3I5ZklBSjd6QnRDOXBWbm9HRmsyU3Z6cDFJUExYQlRHYUlTNkxoZ0lWQWR2dEhzRmVWTmJtWmhYSDl5UHdCQ2xRL2RhZGV2TWQ1QTRrcG5qVTE1MEZVN0JQNXRBT1d4bnhYT1o0MTFJYXhUUDgvMjNzdCtYV20yZ0kzSENSVnZkVnlhWnczNCtQaEVVQTNSdjNJUk1OVk9zTkVadUlLRWZzVDh1N05xejZYNVdhOVU1dG45cmE2L2JZWndKLzA1NFFyNkdwSm9GNnZXL0VvdGZFTXcvU0FzaXQxUWRPNUlhZEZobEdRMkpjUkdqeXZmdUhOd1QyR2EraUEzOE92c3pIdFUwZGQyeUNIVVlLRGdTOWFVakNVMmVHNVdMQ2xCSDcwZk1oUDg4UU1xZ0g4Vmw3bysvdjExcGIzK1JPK2VUZFpxWnZWN0JVYm5yRGNvaEpuV1ZOYUtmMm8vRm4vL29hWE8xYmtENzBucWJNdXBZR0V0ZlJEOE53QTYxK00zOGZCL3B0TjF6L29FSlZLR01QTWVzeDNBbjFSMExmdC9yM2NFWTN3S2lqU0Z4OWdqSmQzK09LalFaZjJRWHZHcVI2VVJoMXJwUXk5Zkp1eHI5RnVDb0ZiN01IV0piUk80T2dGTEo3anZleHRWYXFMNVAxOUgvQmhEb1JXR0duV2F3czBSUlZYNGFFRlpOTnNrQ3ZISFJHaWlkUTdnUWpnQVpDLzBGd1dabWdTVGY5MERpcW4zNVdLMTEraGx6TkxOVDlzMlRYZnJNenhIUnRxSmhHckJ5U2lTc0ozWTBDYVdvT0hBeTRnZEZzM0MwVW8rOFhXWnlwaXd6ZE1vWVdTcjRpa2hiUkYrMnI2eXhoRm45amxXVFVxRXVUaldWZUl5Y3hOenViYi9aZ3R4VElwcldEeDU0MlhpaXZiTWpQNFR4aTV3aGRyZ1pEdTFRckIrT2NWTlpHQTByRWthYkd5dUFaczNOS1RvdnUyNjNhMERCbnIrU0w5STY4ODJVaThmbDltRHhsTmdlZFVwaDh5NkRPdkZSUXppcWpMRUsxNEJIOXF6WHd2S1h3RC9wNmtnNTR5R2luMklTMDVTemdMV3BBSUQza2FSaHl2d2NsL0JrK2REajFxWkJSUlFPZEFYdU5FQXA5amRiMTJYQTB0TU9UWGVNQjJ4aVRISWVlbHg0bmJNOW53dzIwOW9uUXBKQzg3azNiQ1NYNDBlQ0FGRThZQlZTNWFSMmZ6SFdQWjM4NUFWSmhCazdleU5hSFBQV3dwV0QyYmxwTG55MWRoR2xFWnJzVlJoVFFENFZYbnJvSWo2eWJDOFlxSG80ZGF1U0lsUGdySE5pYTJicXhRaGg2c2tpaWl0akVGRE96bzJpSHp6WFdYdUtFczBiSWVTbmFGZFQrN0lFdncveXZadmMxdllJNi95Tk9LdmlMUCtlcWNyMW1QRE9IRFJYSkI2SkMzTW9LemlvTmZSSmR0V3lGaEhCemRNVjkwQzZBVjBUa1VWbTRZSmRYTHdNWTl2dFpNa3VWK2lQSytzOWxEMi9NckZJTEthTlVEYkxJeiswRkdtZUN0azdXcG0zbWtkT2lPSmNqNFZOR2h6TWFqbkxiME5sU2oyQVBjTFhqQUJwaFRwWFdBNG0za0JIaXhaWnA3SXNJWkxRM1A3ZWZLL3l1UGVMcEIxZnpvTWlKMy8vZ05JMzl5UytrZzR6RExJLzRZQ1BnZS95UVNRa29lLzN1Ukx1YnRZQi8xdFlnMDdQeGxYWjhmSytlcHRPcFdwTVBJcE9lWm96cVVia2VMM2Y4VVh2eWFsc1dsR1c4cW9OL1dmaExYOGNDQkJpSFRaYnpVenk5M0hOd3VBVkt5dnViZWgxV3o3b0dpUC9qMDdjczRTa3lDQTQ2dXg2bHZNZDB6bEQ4VmJkVG9RYTYyZGdzcWJreDlMM3FBc09mRUNCQzB1alJ2NCtrQ0UrU2xXK0pDNDBmdFpGMmlUOXhsRFFsRWYwcENreTlZdGEyYm5jUTlJc0QxZ3k5Q3RraExPT1B5NG9xTVcrd2lmVnA3bWNWVUR2YTErZ0RLbzFtQXorNUxuaFQzZFRaVWJKdlY4WnhmVXY3YyszQUpNb2NUMmlQcW5IM0Z6ZUg3OWlsMmV3OTJHOHk1TkJlc3hrQXltWTF2SlRob0hNdVdac3ZsdU5oT0RiR1Z1ZFNQNGo2N0d5aVIyWm5EZFJRMHlPdWljaFY0QVN2OW9JNXNhd1hNYkk1aklxbDRwZkp4aGNKNzdpQlNnU1MwWWJTZ1p4T00waEpPQldUeFFuMEVaenVxZEluODh0NHB6V3A0czkyVHZpTWY5NVpxd3pTWmJZWXJJNjMxbUtDNHppNVJRd3BabGswKzdoU2lQS05PcEtOOTlPUTJ5U1Ixdkc4YVVDOGJ2cExLT1NEY2lGM3hoUXBsYXZGdG5OdVI0eHJtdSsvVVd3RTdyL2Rvc0czZGx5MGdQVzRHZlN5aE5vVFRwZzNKTFN2RmpvTWJpb2toSEkvanY4KzF1TzM2YzVndjA5bWxQMVV1M1ZsTnUxcURhajZxSm1tM3ZIZy9DVC9MY08xYkFoRk4wZERja1RKNk1CTHlhVWIvUFpyVUU4M1poczRkK2FCVEhtOUZ5QVNUYVRjcDlMOTFFSjlZZnpsdGJlWXc1Yk5aUkc1b2FyT3RhQ0R2eGxpUWszaHR3bWhCUkpjRTd0S1lzYzNQT3hZeWhBL3ZJZXFmUEJNLzQ3bTJhVkROVXFQb214N3lVUkxkcW9haDVLdHdUMGNtN3RldTVBdzVxWjdpUTUyaldKRzRMQ1kvYU5oSXVqc1JnNVpsSjFabi9WQjR0bU5TUUtiSU5TY1k4SGozbmNHdUFtdXVIb3lhdTFFcUxhV3grYkV6VWxIUzQ1cytFT3lxMVZIZ0h6VGdBOGFFdHZ6TlBsYmh6NWxyTkQxdkE0elhPSkFMY3g4MVQrWUlaTDZTQitLam5zQmRrWW9hcnB0NXhzSnlRVmxaN3laWHhGdGhrd1phSmRaN2ZPcGxSQ1BMdDJqalhValBOYnlOcEpBVnZsL1dScUhodmdoUm1vWFZnUzBBRUM0dXUwaGNFS01DVGYxSGw3eW9MUWU1c3RIQWJ4NTV1cXYvVmhwOWNLL3U2L2dUUHNRSzZvSTNScjhnVTd1eER4dUREc21rY1VNSXBRSFpaWFBhYW12cG1PQklVTkI5RFVEZTQ3NjhYMzJhZ3pwalpzamdKWklEaU1meUI3T29IQ0JaSFVITnZOeU8ySUpPTncyY2VEMjlvdkJaWE9PaVphdGM4OFNVTnRTckVQTGxxckZmWjYrcEZ6cXoxOXVqeVFoZ2ZoeTMxOG9hOHFRMjF1NlY3aU55UjdoNkhZRG5NNzVtaExHNHR3cnllNDh6cDZKWXA0MzQxTVFlVmI2bVZFTnp2V0dYQlN2YjRYL3h6ei9qZWx2UENnS09vTVJBOTZpMTF4ellrQlNUZFNOMHVXRkY3QzEyTkg4SklGWUluLytTNXAvdUxrQ2JzVzhlLzNROElsRldVMStZQzRxYlpnSlE5VTFJNHgxRHB0dHNBbi9TNTRlV1JWYWdEQmJ1d09mZlVYTEhkQnFiVTc3UHVSSDMxUm1wV3pxbHRHdkZDdkpvWktMVXRWTGJISVdsYzNRQWl5amxwNU16RUlRTWJCMnlQdVNkcFg3SzNORU15WHgzV1E1YS8wV1luTzZjVW1MRWlValliV0ZMQ0pSUDhxL2tIM0cwV0F2aXd4KzN4Wmg1anliWnd3dG5nQWNuRTg2dTlGMDlhU2Zkd0ZiQXM0OGhXdDdqdThJWDRYSjRVcms0YUJCUjRFbW96OUQ1a3hxcytybHpJRUhKRTgramxScWdrd2JLeFduTmFVNUJaWmJMVCtzVmM1UU51dmZVUUp4SlRtM0E2MjBmM2FEeUJaTWQ2emhsV3lrYlZLZGNoWGpwZnR1RnVWWWF4VE83V3BhVDZiQ1dJeDI4SkxGY2tTN0prczViWUJRVE5RTjhhaXlGS0NFQ282VXJTMmxZbnRBSTRhVUVXZFN0VnEyTHg5eUFBbGZvRkFnelJ1cm5BK0pjZXppczFRRXFyWGNMaVl4c1B3ckIwVlhsaUc2RHRSaE0wYjBLcFBLOFRkWUpqcVo5UEwva2RTWC9POWY4cGdJUWR6UHE4aERwYlhXenc0VERxeTY1YjJvamRlQlh0dHlabTZJZFpqRW4raUZ1S243ek5SMnQvOXBIOU1wZmt1a1JWMDVOV2Q0RWs1aUpEV3F4L3M2RW51dnZwU0N1alBjbk9zQ2FTeFRlNDA1OHNQVDNHS2ZHN1FRQ3FlOWdNQko1aGdGV0dCZ0hBOE5zMVZ3anAreTl3cHBBOEFxdzZuVzJmd2FWQWxZZHQ3bFprSjIzWGpPZEZncCt0Q3hhZVBaT0ZtcENiQ08vUXBHR0VjQitLR1RzaUc1bVVCa1RnWXA2dC8wU2F4MER6eFFFMGFhL2Uyd3JhWnQ4TzYvN1NiTWZpOUxuK2lJWS9tWVZ1SWVPTXIzYmtXNENvOTluZU1NcTM4K1hVZTAwQU1tUzllb3N6YVFFeWx0cEtiQkJ5em56aUNWdkQ5anNOQnZFRWpxRkZXc2FtMlBoVG81VWNPK1l4N09CYWRYYVE3MXVkczkyUG5GbE93bVBmVnFsZTUyUjJBT1NVQWZVcEtnbGswSTFKUXdEcmE1T1djYkptM0xERHVVNGdyZ29GaHFrZ1E0Z0JhZVBmeXZKNVRrcUVCanhGbzlmNzhLZzNkTkN3WERIY3hCYkIrMFlPSUxOZTRYYmJWQjl1ZHY0WlJNUk4wUUZsVlRFalkwZVFyZTduYWxaWmZ5bk0yVUVBSGZLRVEvNys3d0FxTlRMeDdTckZYVStRQ0U3OFdqNnRQZ3hpZ3ZDdUpOeE9KSTJ0L3VLektaRnJPWXVjemlMNWdTRFFSYU9ZVnZRWENNQVU1L2k0NUh6UTVaY1hGM1RYNVEzdDh0U1h2N1dIWDZ0MS9qcjFKbGNrVVNBMDFNOW42T2NnT3IxR2w1V0R2UGkwa3A5SFRrMndCd0V6Wm9yVTlHMFJpV24yZ05NUTJjNjZXVS9RcHVwYjJsczFTYnNGZ1Avc0t6UnBRamRtZVY5YnNMdHp2bDBwSkNqbElweUQ1dWJqWlA0d1dlV21YWUZJR0JFNnR0S2tndVp0TWdrRlVZenpGWlE4QUxBNEllSnhUWkZDaHlaNThmV2RhSHZXY05HSzFUNXpBZ3dRVVFHdjBjWmIyaVBXOUVjUUNZeUxLUTFkMUdlSVFScUNDL3JoeE5Ha3NwSVdYT1lvS2hFeWNHckZoUnd5RlhpT1luTFBNbHQ3U0ttYTN6Zk5pamcrYnkzSGlBZDFRWlViaGF5THJIUFZCWFNtK09sS28xSk9udisyOXRPRTFFMThwakZodURpeHNjeHlpdGZ5eWlNaWFvejB0UUpLVU9YYXVwTDA4VEhodW4zZEtiNlpiQ2FYNjJmclVycHdQUkRqWFcyeXZlWHNtQzN4SWxkaTh3aTlNeTUyRzROa2xOZXdIN0NlOEc4SVAvQ243UWRYNTN4aWsxaVVLVGlDanYrbkRuUkhFWGg4ak8vSWUxR0l2bkNQdnlKdlBwRFVzcHc0d1pHZ2hXS3dEVTJidGk4U0ovU3BINGN1T2NxRDRIZWtsYlpOZTZXR1p3M05NWCtrUDF1a1Vzamc4VlhJdEpYTm5pVVMzdkVKcmw1alovVm52d0RENEtkTkZjKzVGc1dDQWF5YkY5NU90VVpxdVJ5WGpKdVFmclErUWkzUmhUd015SHo4RmhaWXlHTDByTFRMYUN3cmpzNUJYUVRZaEJJZUt2NGJKT1dGUFlSdW80U2NObVczTWhNbUIvWFVjcWkwTUN5L1JKUnA2VUV5NjJHdkNPZnRwNUFlS1ZYazdYeTBFZmQ4bEtmbkFaMmk4Ky81aWhqak14TG1yc3pXWlZwQy9nQzFHRUF5QmpvU0c5Vk1aRVBzbWEyWGVjS05mSHNnZzVGUW83NnQxdW9mRGRSdGVGTTZYRm50SjBCM1lkWGlNbzJycWo3dVhsWjBwbExUNTdrdjVhMXpsck05U294czlrZ05YdWhmekZlYklUSk12blV1OGFiRlhrN1RSUzYwbUtjQUdDbDhuNmVDR0syQ1NrS0oycFFpc0lCb0hGdlA2bXpiankvV28ycUpjUDJ2OWNnUlZaRURKTy9ndEVqQWhoYklERnhudGNuNlZmbStwVVAwTUNIT25icFl4RlEwb25wR1Bkd2tGYU9kWDFZTzU3R0ZlNXY1elBhOE5yeGxwb0crS3RkOHdxYUxnWDlvNUVVMHhmUkVIU09KUG9LYTdaV0UxdWRtdjVsVkFMOStVbHlHdWtWU0NMRWJSMmFmb3gzUFJTTHVqVFBFYzluMHA4anhPc1RQUnlPQ0dHcUFNVVZhTFdCTGVCZ1k1QjZsZGFLdlN4NDc1ZkNMYUo5NlB2Z3hiVjJjdktFeERDSUFnUTJkMkd6MUlnYnhmRGxpWGFTVWhrdnhzM0QxMjhXQnBpMDlEY1g2eU12d0tDenQra0RzV3NHZjBrd1pVOWlaRHY0TEJ3VklJYzRzd0IrVlhRWG5UcmRvWHYrZkFOcnJvMzgyMlU5VzNMU3FuTmJ2cldpbDg3aDJ3emVHQS9OVXEvUnBvSUE2aGQ3bldybHpET0FOUzJ3VEc2azBCaVRzaU5jTHJlOWZZRjZxV1Y1cmVhRjRTdHd4VFE3KzJXcUhHSUc4VVhpUk5TWi9XK2IvWXQzTDJtZkhaWU9pUkFIejIwTlRhUW85RFQ4d20rSUgvcnBkNVQ5MUFDS2p1SXpzNjdVRUZ6TDBYQ1BrR2s1KzRKNTdMaUEwWlJTeTMzMTFRbmRxdmZvUW5Fckc1OEgzeTMxVXVaL1ZRL0ZFU3JOZkRwOVRKRFowa2hVcTRybjk4ZVpBRTlWNlB5bG5kR3VNb3U0YnFheVhLY2huWEFoNmxTaEQxSFVydmRpVDJwYjNsdWVlcmxUS2RIWDdOa042aldodmF3aFdXVDJBbkltQUJpYWVFRloveFVMUHRveVNoalJkRksyZHRHeEtXaG5xL1Y5Ylg4clNUTElDWHRZdGIvYnlvdXQybEYyODFKR0RKZk0zOGFkMG0rMThsQ0NHSW81dTlaTjFJUDl2Qk43LzM1bEpaZEgrNjNjd2NrQWZEWnp0RWthWVF4M2kzaFdZQWkwdVhqWE9KODRreE96bVdyT3gwbHNxdlUzNnFXS3JZK3UzT25WZ0RNbE85OWY1UmVMZ3BINzh1c3NXVXZVeXRVaFB0TVVmckpidnNXSmRsVGpWR3hKQllFWUNDR2lmOWlqeFpwdER2OHJVaVBmUitPL3k4VFROUlNBQlNUM0x1SUc3dE1BalJRUWlWOENmbE9PM3FjTG9LQkNYMEFoS0xmOTl5ZTNuSHdzZVFkb0FmMEo2cmYxMGliMDI1Rkh1dXpyeWQzSmpVVGt5SjBhZWpuVFlONzUxME94djhHTTBaT1BGYTk4aXhKTXBIMW9DT2JLU0FDRExhamJDSm9Na01TZ0lobDFQODluMmRhUGptZ1BTYTFZbk1tYmRHZ09Qem53V052Uit6bmU0Z1lveTlVdlZJRkM3TFQ3c29RTUNiSWdyaytmcld6ZlIvWFRGUmdmUmdyWjRRcEZCZVg2OTEwRUhBbVA1T3ZpUWhjQWRLWlRhekdoSlpoNjNqa2o4MXJLWkc1OC95RlNEMFQ0eHNqYUFyMnhKMUNlSE4wT3ByTkErUHVkYjc3S1ZYaUFRRm05TmhicG1GWEhta3JMMXp3ZDFmeU1BRDIvMzFvamZ3WG42UmJNemVrNU1kN202RmhuZlhMak41TEtYMi9xVXB4SXNhNncrdXNEYlBIeFJqRG9WejVxbkk2c2VmUDRkZmtFc3ZTMUJVSzRGeXpDcjkwVGdHR0FLcGluZkRxbE9aYlJOb3Jkc1Q3NEU5c2xHVExsdWpsVmV1RURzSWE3VkdXYkdycFV2RXNBSlpIZ0o3VklZYVJkYjRZUzhUOVRURWNJM1NwSE9wdFhGaXgxbFdhS1FSSkViaW9tOFhPN1ZwMVN1U0I0UFAwM3JjQ2JQTFVGWUJSVjBHMkxsL3RNd2VsUUx2UnlZeXRpc3RWZkQ3U28xRjZ5anEydTZrNFAzT1Fha2lQMm9QTzVOd3lYd1VVK2JISE90M2RLQlhCSnlCN3N4V2NxUzFVVUpNZWFQc2g1NEJwT05SS0U5aWRkcnhZYTNVa1dYdjNNUnBnTDcyYW4rRWtuZURkcHIzQXFsbXRyYnA5ZGR4SnBRMzhweUdTYmdyU3FENmlxWHNVZ1BhWWFjbVV1MC9McTk5ZWJHV1VtNTJtNHQvNTVscFhVa1BLUWNJN1dMcis3ZE5ubGxZVmhBSXY0MmMvSnBGbXpkMmdmcEtLLzh5TGF1VzUyNGFiQ3BpeE53MitrL3I3N253a3ZVS1BYcDNsYTBncmthcTB5TXhQWGhZR085clBVRlNBT2tNSm5kZ0FrRjgzK3RMYUpPckFGQU94L0t0THM1ejk2K29UTStJOUpOR1p2RDBrQ2hsMm1QQU95dEVxRjQyaytrRDZVTDBGZHRvT25qdmJMRHB1YUxHTjUwa2pMaEkxbUtNTDltK2tObzJkV3N1NmFMSy9Cbi9pNGxRNC95UTArNDliMVp0VytoenNkU2ZRZ0grQzdQU0c4S0JJeGdIV0M2NUUvTmp1UFlLVXJjME1CVlBYUTRBbHQzTWtvVCtGT2xLNTJ6Qm1WMDNVM0NxZUVlTzJOYllwNVBSVmRZVUtBR29MdXRVMTYwMWllc0VKVS9qb2FkeDNLQm5hVnBnZzQyZTd3MXloQ0RiMFd3QWRPeGpyVDRhK2RvR2RLK2RwZ09FazR6RFA0K1htR3BTZUxzL1dUeDVnby9MMWhpRUZyYnpsQ1NUTVRMRGtpc0NmeFBGNnVqT3VYRW9uRGNROHJWS3Ftbyt1WWVvY1NROXFETWx5TzNlR0JaTVNTb09TNm9qanJBYjR2Zk9pVno0ZEtmVk9SWU1SMzd6aFBQbitUR3FvMTVYSnI3OXBORU83V2plZGQ3Y0l4bCtFYktsWEhIL2ZLRDlSZ1BEWmFjRUhkV3RCcUtFVXRpNlNzNnM3Qyt5d0J5QU1rdDdBRjNQb0RiOEhwcWJ6eUJCRmNENFhxSWtLRi9QdWdCcDJrUnNjK01vK1hoZ01RSDlzRFg4dTFYUjZFZ2lZTWdBWmRRR1EramhzUGlBOVhXNFR4NWptUkxNOGtISnZESzJpRHdZZk9rb1QybUdlTEdVcHF3MmdvU2ZwNlY2VTZvaStwMXlVVENFRTFiVFBERENhelFIVTU0aEsvYll3ZEo3aWZrVGcybnZwMU56aWFIUXdDQWNoQjVQY2ZzVnpVV2Ntb2w2WVp5S0RMdDNxazQ3TEdIU25Bc3FuNjc4cmNncWNDMWxKalJZN1VPWWxIY0NsZmlkaFY2SCs2d3pncEF6SEs4Z3d1ejFYWEZwY1hkdWFOUzYvRDVJdDRPa3FHZ3hNVXFxK1J4N2QxdnMxNURTRmQvVlc4Ty9qeWJBRjZ5VDRSZU5HbnptWCsvWCtRNW1XSjZTcjZkNm00WU4xR0dhZTdjZHVGV0dxT2RtZFJ5N3haRDVJSFcwaTZPbnJndUpya0RvbHhNV3BzWkJDSTJuMjFTV1k4MDRQNXpaTnVtcllXaWMrdUh0clhLOVdXUmc4elVEOVE1cEJKVXJPc3huWVVaaFJ5MHFmYVpQMXBsd0RHc2ZqZUxrVStWcTlwbVl2Y3lETW1laFc0RERabEIySktOY0RLSzBHTDRSMWdYZ3QwUFp1ZnpFcWpkaUFoS2tqQ1FtZmd2M0JZbmxiTHl6MGV4RUluc1pBYi9qN3ZvSldkSERrSjM5dlord1I1eXJ4V29WeTBRYXJab08wMThWNHFXUlRENDZUU000OUdObG01NmpUT241emd1bUlaNFlFbzczMGE3WHZmYW1haTd1Uk13NFc0LzNwMFgybVVVZHRZVFVLWVBBRWpHUjZ0RHFCdnYrRkM5R2FNOXM3VHBjN2I3bk9Vcmp5SVVPbXJ2V0gvUi9taEVvK0pZZXN0TjBIZjhpeGhWNVY2UkU1ZjkrNTdKYkFiZWVvMFk3c2thbFZoMHlRUEZKcHloRU5LUXRsS1VqVGpCZWE1RUZYSncwTTBkZmMwZ0p2VWtEbFlRdWRUdFJoTWQ4ZDhXVS94TXdqU0dPUEZOZlcrSG15VjZaWElNNlVlaVprMEI2NmEzQUo3R2FMd1VmT3R2R3Awa0NqY2FaZkliK2NpWWdaalZMdkYwSGU3OGJBZTZUT3ZGRlVuQ01KSS9lN3J6WmxVeURYakorQ0dZZXB3a1BScDdKOXB5WU04VVhuUWJvYkZwcFJyK0RHaVQ1Qmt5Q3A4OGNwNzRtUjBjRDZjR3ZEM1F3bkdNNkRMVGlDTUwrWWpGV1FxaHpIWXgwdmRxOUduM0Y3WmpFY0dFYVZYTmkrT2dwdkVEWkJEaHFKVm8zY1ZrSEVucmN6RHoxOWxRTGJvbGVPOXZrdVNhM3FYZ2lhcUJDakFSQ3U3STZBQUJNVUFuYWI3dEc3anczTG02L3dyNFRReEJJZGVSSmVyRktMZ1JxY2JZRG5jRW8xcy9aUWI4NXNQM2J5eFdGZElGU3dmZ0FuaFpNV0MycFlUYXNUWmdacm9EaEN6M21XQytSWHpKckRaZlZTbzVuSm9aYlRFVGtGd0pFenBmQUxWTGI0bGpIdkVHcXk4bDBMRzJ2ZE9MOGQ2VmxLRUNEQis5bUZ4eUpYczY3Mk9CZzQ4MUcvTVdRd05OK1I1U0hnbXMxVk9tQzJiaDZQdTNsUGdsbENqY0JiZVJ3cUs4WmIrUXRvMGJkbktiREZEb2poN1J2MjlMN29ML1RHZjcvOXE3WUpMM1NYbk83MGh6Z3UrcUZkQk4yYVVOd2dTUlpyT0RjdTlxSHoyaWRzWndZaWtDRktRYWNzTkt6aDF2YnBpZUo4WHVaQVY1Rzhld09OSDY3V00wZC9lUWNCRERxQnQreGViRmhud2E2OW5tVGxLTTU0NEVoOGlRT0JFRWhnQ2FLWk1ZMGZxYmJpVkRmeTB0OTVrb3ZMTmVmdU90QlNzdndjWHZUdGlvUWVPTkY2WjV5OFkwWHRSMDdOU3RKSlgyeEN2Zll3K3VuVlBvRnR5Q3RQMWEvOHVzazlnTkZJNWRKaE1IbklqemIxUEcvMWFQMHdWVzFlSmZPZHp0bS9yTVhZTXU3UkpBeWhnNWxSMEUxd0daUnRWOHRhRjV5bzdwczR6VGJkQ2hoU0NpZkxDaFRXVjQ4Nk9FR0RUNEgzRTIzT2NFeThQOWJvK2JUcTNibG1aRitSdVNxM2E1bkQ0REhWcEptaUpTSHhTaFZLUGpXa2NwL2pBLzJKTEZ5bGQ0NG43QlZQUWZTaTNOa0RNTTFqRkR3RS82NFZPM3ZJQVRXb0RUeml1VUQ3Ry8yeDVFNSt3RmwySjNWQkdyWWhPelBMcnFxVmZBTm05MGEwbGtCR005aUtnZ05VSlJEeUJ6K1QwdHZoZnpld2I4ejJ2NWRHNHYzanRHZHphZTUwUEtOcG5RR2E1N0dpWmtQMi9CZHUySnI5cS81b2VyTmxDNjdHaFArT0V2K0o3d01QaXVpR1J4SVducW5jR0hpQXlkQ3dDVlZISm9peFlGRTNwZXI0THp3RzY4TkJHQWpmODlMNXk4bVF3T29uNWRITU4rTTV3VTd4OFRKQlIwK3J1OXFwQnRJZzJlNzUvR0xLRHNJTEtST04rdUdzV0FjKzduWFdOREw0aitneG0wRmVqMERiT0dtRHN1bVJNa3NsTk9pOUJBdkUxWWJpNWlubURKRGFOaS90aDhFdUZlQVNVV3BEd01zemY4bCtZM1ZYUlc2ZWtNbWtEZWtvVzlJaDFzcjVwVnJuckVIdzU3VTlCT0FOQzM4S0REdzVDWDJzWmFKdEVwbi9lZGo4MEFrbmxTcEcxeGVYdnFDK1I1ZU5OVEd3MkFtRW9qUExxWFR1WlRUOFNrOCtjVVdMbXFweXhaMVQvODl3VEcxL0JpWUF1a0plUSt4TWV0VUdsb3JxenZjK2cwcG1URGNwaTVVa0dUMHgrTnJ4dVBxdnNPQngyeSt3eW5MMDJJa1hUNEJiaCs5R0NHc2ZYRXFaQnZyb2pDR3k5YVFiVElUZkszdHlEcE0rMElzVjJ5M24zT0xiRFN5T0RIbmxQTE91K1A3QXZCQ3h2WEdaN0YxVkpUNStwdU5sWnZ6N08wTzJOQTB1ZlV2bmRpZnA0aDR0L2FkNmdUVjF5d2JyN0Q5emtXNmVtcHFMbDA3K1hpeDlJY1V5R05tQ0s4Y2c5TG93cnVGZ21VdnF4aTJiMlNua1g2V0Z2eG94ZmJjZ3FJenNPRDlDZlBQUHRJUDFybXZUVUV4MEs0a2hjQlBXeFUxMlg3WS9XR04wYkhHdmZGM0gzRENrYW9qYkc3Y3ZrTmJnNHBpalQ0aitCb1I1MjdMVjU0VjVPcy9RaEY4VmJjVk5yWWdMNWtrcFFtMUM3Ni8wcGNwNkRzamtOVjB0WHF6NktpOHpBMFN6eXdHQXV1NWZZZ3FhK05UcGZmRGJPdjlYcStRR3JndlVZSWtOcitDQmFOaW1xcS9CSmRUd2tOWlJOTjRjS21zRERjbnhuZzFTTmRGS1Y0MVo4dzYxcm9IeE43cGZnU0xWSGtnWTdjUDFiVmtoeHViTUNiWFlCV0ZuUm1BV3BrdUc3TDdqSjBBd3V0OXNhRDluMm1qQUVzUUxPckZ1eXFJYW1DYkRsRWNHTGtHcUNTeHZpRlBkbWRXK0JMc1dhTTlWdjR0aXlCUGZtcUlIbG5VRXozU3l6dzc1Q0pLMGhad0VOL1k3aCtEOG8rQ0Y3d041SWxkVTBBUVArbnlidXNuSVoyY05rK1ovWTRmSzQxbTM4N2MwL1FJaVFiek1hdWlldTU0U1orR1Aza0MvN0phejRONmxGVHl5OCtSNWY1REZCNmVYMG84U29Yc1Z1UUZWOHJWb3kzOE5NQjJSektTTVZUcFlHN3l3VG5JMC9kWXRoMk1kMlhQd3pGYWtiQi9NS2NoaVBZcktUdlBYWElDaXczV1d5RTVDVlBBNStTK2Z0OEFxanlFMWk1V2ZjZGduckFIaEx4dkJxcEpTS3p0QndqNHZGaWQyc2tGSTFTc0R2dmVkYTNabDh5aVpDandQNlZWZS9LOHFmL20rV2ZxdEVnSmgrTjJlOWNwb05SU3hVbkIyd3A2RXptZ1pIRHhJa1hKZ2ZBMVlSWWtjNXpmaUloT0YvVEdHaUpjSFEyVkpXeHBFTkZyQVZuQVg2UHVQQmV0U2lrQ3kvSlpZQzRTN0FJKzhzTTFHbXRrZ20vQ2lnZWJzb0hCbjg2Z1dTY3BXNWc0RlUwdDlJU1dFTk1GREJJQVgzVFg3aUNLNUJabElxbVMzQk04amowZ3JpbG04dEVYMUVTK0l6T0xaWVNObzV0L2dpOFZnY2p4OUo3SGZwNmJ5eFdMbzBpemVkd0dhamU2MXlBWjJpZCtSbTlIUjFPT3liaGZjSCtPTTVoSjBrMDFGSGVpVDZicFJDRm1yQ1ZRU1lQQ0VJRE1Bc3dQUlZnUVhIZXNLSndhazFmTi9ESllSNkpkSVFGU2g2OXhMQ09PYWdoUkRDSUdyTitPQUUxWE5lcEJMSSs4WThoNzJ6QWczZ0dZTTdSdzlNWnJLQjlqY2FlZW5KYUNxUXN4MU5POWV0NFpaanQ5S0FHZmVNR1hFSUkwSkVhY0NkYU03OVY2MjYrSXpuQjVjSDZycGd4a2hGeGxlSHVNT0cxZ0UwSmJsRmF0Qm4zWElkOFh3R24ydHkxYStabU42YWt1WHp6bWRTV1orMlByNGlyd1dUUWNuNGxXQWRzZ2lQSmRqRUk1Z0RmaGlxUXdna011NmlGOUZka0k0N3lkTkJkVW9Cd0RSZlJXZmhSeSttRUU2bmc2VGZUK1ZESHZrMjhvOTByRjNhaXVoSGVxMUU3dHo1bkdhVzd4YTBYdk82UlczWVozUGJvOEIzcmFvbnMyMFFjSmdDYnVMZ1Bpei9kOHo4N1dBZkxnRE5kQzJEYmlYNFdmUUxERVhIc0Z1K2pKdVY0bE45YTNRdjB4b2VhTjZ4WXg5VlpDdG5WZkg4YmJqZEtxbHcxbWdITFIwZjNUNXdtS1ZlT3dvRkUraWtJTlE3aEJxOGwyajRKcHRRY29TSDk2azdRcjN6aUVWekhkUWtjNnFhZ25uZXZVZ0FZU2c1ZG1EZkYyOXliVGhXQW9sbkExSSt0Y0U5WW1rc1YrVC9lV0RWb2dLS1FRWExxZkRqUVRlSnZML3BRSkpFZFdiTTRSSE5pQ0ZETSs3OE9Ic1ZMeXMxVWFXY1oyTFpyWXc4NDMyVk4ydGV2WjFXWHVhclVUb0RWbE9rb2ZHVXZLRG5MNDZWQjZVR1N4RXJiakxDY1pWajBBMTNuQUJ6bnBWUzkvQTJudSs1TVpNZ0dMZy9lOTdLS29BZFlRZVZnd1R2MndrOWZJelBmcmlqdHh5SWQ3emxEdWg5cXg1TnFHWCtqQVloTE9qZ0p6eVZzUGgwOWVZSTZ5b0VJSDdEMzkrdFJnTDJkMkZWRUJrdFo5aDJDamRHRHFFNVZycnRiNisvSU10Y2U1L3RDRGgrNnZVODF2MEh0dEM4aFBiME82UVdiVnpCdWV0YnUvMDR4eThSQ2p3cytVMFVsSHNRSjFjWFZybFJlWHRTa045V2xJS2Q3Rm9uclJJSjhnUTF5TDVCQ3Biem5vd3gvV2FEZWdaZXp5ZXpyQ2dvUmV1RC9LbjBlYXU1cEdvR1I2RVYvcTdscFhQOEZvY2lpVlpLS3J6S2VGREtuTzIvOC8vb3pRM0FTRWZEd3I4Y29GRk0zZ3RsT0dMdmY5SEkvSUFjb2VXT29nUTl0ZTNXK3d3K2lIekhiT09mcEQ2VWhseU1rVTBtQ3NGZFgwWXcwVmR2aE42dWFTdWFaZ3RtcVhuM1lIWlM4WG85K05heGdEbnRFMk5zcVNXQXRMWEUzU0FSQTRqaWxqSWpSV1NNc2RTZ2pYd3JzaFBBQzVKNUZiWjVhOUw3NGFpbk9wakxBanB5S09ySlpId28wQWppa3J3ZVNlMUpMYXZGZ1VFV2ZXbDJRMFhSZ1RzSWtnbkNVVG14Qnc4NlFNeVJhMURFOGtlWGQxUWVGUjRFdFg1NFlOVHltSmhtRGk4VFdrUW9hOUtERDZPZ1NZZHVwbXRlTFNnemF4MW5GQ1UveERiUEJPNnpiNHlRSWdMV1VxeFg1UFllRit0cjlEY2Z2aWY2OXJFSENmWlJaaHE2RkFQV2x3TEtvbURhVkVUdUhXQW05eUJ0Q2VQcktWWHVXa1l3SUFRaTFTeVhBRUZvZjRlYWlIdlVIZ2pzVXFmNnROVE1hVndqNGZKeHhONVpQZmltZU1POWNtUmtPbkZxNW1aa1oyYWU1RWVPQ0ljRTQ2VVRqT1A4Y3Z3aGtXa2R1eFBaazBvSlVqWHlGcDBFK3F3YWNYb0VpZEVMTExpSFBUekhEZ3ZXbTV3Qm1JNjFPb0M4aldPMjlCaDcrMFVBeDdpRkQyTkw0TGt1eEdUSldSTTV2UVBoM0tUdHdFa1hheDN3d3FMb0h4cHc1YUhoVHB5VGVDYmNjWXBvM25JZGxIREh1YVBtK0FMQ2dOa0N3dHZMY3pEVEdQclFoejYvSmRVTEpDRmdCVzVTZHAxSlcwQkJxY2xHSnlkYnpCaEtScTV3TmxYNFV1Z21SVjVnaEpIUFFUT09jVW90c05xaGJEcElkMGRPNE5pT3BESmpIbEVJaVV2UUUyWGFlTDRsRzB4aEdiVGgyZndOTDhMVFd2V0wrVnZJMFJvSmNyN0tTcThTZG5nRmZsTzQxRkZ3VmRGY2NqY3lzbk5FWktKUnh1bGYxbml4WmpnTTNxMDRWZE9VMUgzM3VxSUtKS0haNkdZK3VDcFB1VFFFeFMyOC9hM1FrcytZeFRCUE80MkFiNjIvTzdPc0NQdnB6VkFvSXFaVDU3cnkrSStjbHRPMnFnMllydFo1QW9zQUcrNXlscHcxTDBDTEIwdWgrdkN2U1gyT1BmeVVOUVpaMm9iOUFHaUJKOWVDRFUxZkppNEpORTEraHh1am1oMW9pd2hFVGRnS0dMU0hsN21LVUYyTHRtbWt2aVRUdUZvRkY4RkorWkZ2WHZTT1ZxTDF3WFZqZ05MVkJnUUxZdEpkS3drUXBmdTZLS0VZTmN2YWJEQ2lBME9lNldtYk1TcERHZ2liMjdYSEZ3L3JXZjlHbms2bDlrMmljRDRmR25TamZTemVpSW9tQWR3REJ0bk0yZEJyZytWQkQrcVdjdUs5OWtDd2xLZ3diUnVUcXNnck5SU2JXWjdPTW9ka2lFN1FqWG1rMjNnbjRXMm10RjcwTjF3TnlNOXVTUFl1RHFTWEp4ZExaZS8wUzNyR1VIeXRVYWFnRWxMc1kyZEplOXYrWWpMSWkwQVErcHY1N0t2OUFmSFFMTE10QzhlNUJOS1g0akpVMDQwSVo5Y2o0ZGgxa3I5WVhzTHBPRjR1RDNXVGtCWU9NNEVORmNBY2pWZGpxVWZyMGNMVzJTQ0dIcmVYd3JaQWRMZmlPZWNKMjc4RnlKMG1Sc0RvTHZUMjR6T1dTN1RrVG9rSGlOQk43Z1JDcWVwNGNKTW9hTW5oQjdraTdySWduMnJpTW53VzZqWmJuTDdDWlZ2aEF3TFBhMS9xRFFoNkhGTjlmZ1loNUJXVlYyaDRqTERTQVFncnpBb2lUNWd6Q2dHTUM3NVhNclFqUktjQ0RKVzBsWGhQVWEyWHd2TG5SbkRINmt2bHY4WHQyVW9SMFdDMzVrenhkc0xSenpySjZSdU5YSmhNaG5mL3A5U0EzNFd4OUNwRXNLcWxJN0Q3MWVMbGtTWlYrRFc1c0s0U1BadGlQbUxxbnRwOU5Kcnl5emNMeHhYOTNoU2tLWnBBZ1UzeFczQWVJRHdweitHY1JIaGM4S2phL3BZZmRZQmZQUDAwcjFGLzJPcnJ6UEowK3IwL2VWcktJTVBaS0k1elJRL1BOcGkxbXZXcFJRVnZKMUtXbEs1Rmhxc1RLcWlJSk4xMVNFeXplUFVGT2ltSjJRNkFnUXFadzZHR0xQY0RwMHo5WFdYVHFlMHU4VmxQWkRlYkI2YVl0UVFVTitoTDF1bE5oazMvU012djMxY280Z1lMcEEvcHJzVVVYTzJmOGNRUXA1MUplSzRBQnNFa2YxRkFnc2x4WFlZRXdwR09kRU1IZWYzOXdOYkxER0orbXBrTytyT21Ld29TMXEwVmRlNnVuSjh2eXRUN3NBWDZMN3hEcFM1QTcrUlVjTXpBM0hIbjVZS3VrcXN4NTBSRFlQL1YyYlJKSHQxclRuRUVCVzh1aWVZRzAxVWhIVDBXUTlYOXRwS1ZhY2xwQ1c2OHpwb2dWcG8wOUovajZkdXQ2dUlFZ0FaUklIYmZVekhydHRXTWpOTmtoTW1FTFhnV3l5VU1yRHR4UFVQNmVtbzZPQjZOdmJHbXhxM2NZV2k0QVhQZTdCcmUrcjNwa2p6NDcwL2dweTR6RFh6MlY5dVBXdXJnRjlRYkZ2bkVZOURGZ0prV1dEalZRdkhic0YzMWtOWjVVMTcyY2Q5c3pJMmVqMUJnb01meDlXWjVQanJPU1RnWXVHSXI4dm5XZHhVbXJRYnlqbmFiNTZnd3psMlU2dnhnWnJpY24wSjdPYXVMaDQxbFNlaXgyZmxRQU5aL2pBdEZqVmVzaitYSEd3NHFXakh2WWtzc3pjcitpVktNbDZmenNzSzFMdDRMQ0pQemNlUkxMOXJLb0E4MkRQL1p4eTdvWlVUVE1QUzBhT3g2dlF2OVdQT1lqQVZkZmJ6ZjVYNXU5V2I5QTE0ODFkaGxYd1QzZ1FvdGlCd3B2Uy9Vdm1QS0dCWTBTVVk0TG5PaTdTVTZ5My9admhVa2JFWEpCNXdaYlpQTFhwZVdkbm1PMUxWY013c3p6WnFPNk9JVjIxLzVmVzZEbWpRUUdKWUJqSXRnOWVFSUR5Z3RTdEtwSG5xOExxUnpMTUlLVmNlQ1FXV1h6YTR4dzc4QXRHQmhoajVTcmt3anhZQ0xWQitVMHluTHJGWUpPdDZZaVpTVHVZVE1uaGFJUWJMNy9XMFBRdmdvNlNIVjlNTU1PVVJ0bDZycXNQTmIrZXcxTzdPR29VNnR4ejBFOWJXZjQvdStEQWZwbDB3WHNIN3pxazA4eXlteVp6amJyU3dUZ3Y5NWF4SW1oMk8reWVLOG9LWHBlSmlwR3Jtb3AySUdicSthUENSNGJSUi8rUlZwV1IzUkhBUmZwb0FyQURoT3hlRWpocGdINkJEZS9FQTFYU0N0aUpMNXlGbU51bXdUR0pQNEJsUFBZN3dMRE5mVitOdklaLzdoaEtvdmFUSndnTjNtNmpmUFVMRlFZSWlrQW9kSnB3TlQ2SWovRS8rTE9lL0k1QTRmdHZZSStJdENaM3RseWpGcW5Mc2FMM0V4ekw1SlRSSzdwZU1wb2l4akd2RjlhOVMzSi81NzZ4d2s5VnM0eWNMSWU2T1N2L2pmRDlqcjNpdEdCUUJ2RUd5NlZXek5XSjBjcWpQUW9GRDB4UmdvbzUrNWlMNUNSa0J0OWxaWkZZUWswZGY3NXpRSERybUViZmY1MlBQOHZhSjUwa2VLb05JaGNYQjVLSW9HQzI1bEhYMkp3dkwxRWJkdHhPSlJFTGJqNTgycCthaDlnR0x1bWw2b2RkUXlMcWxqSTZsdDVHUDRkL1BiclBtL2JTWUNLRzlYRFBCTEpYTjNOd1F2amxvcytHNllxRGJydW9mbVF3dzVWOVZFYmVIZTV2a2JYSlQzWU9tSHBBZ1ozMXhSeldac3IxbHpBN041OFNMR0llMW5hYTMwbG52SEE4eHhkbFd5cjc4Z2dMcWZvUnpEOEZvMFRwdG10WnFiWDJvVjJIU01YQUFlWWdBYjNpakJFUjVWaXlMU3QrcUJHQzJzRTIzUnp2VmNmZFg3cU9sblZFUmZDNDlmTVFiVTZXUmFIZzJDSmwxRWlKbUl2OVQvQnVWc0o4dEdIWkhHQVJySHhHV2VnbXBaeGtOc3RCSmZBV3NlMDRpR0FlWmVXeGpZaXJSK0RpTndFeExad3U2K3FpQ1ZlVnZqKytHODhqWWRSNU5CNkRBU1BCMUVJMGx2VU1qclBZVG1XZ0N5dnUxekxBek5BSjY0aUpBL25xN0syZFlBMmc5S3lucGFlNHN3aGsxMWd3NlFQRVhFRU9YaUhaeDV6ZEV0ZWIyd2tqSkhCelFjUXAxTjZucUV6MHh4ZlJaWmwwc0pyZXpEQWlic3FjNk1zZUhtb0xmTmRzK3YramplMml2OFZROTYwV3ZYM1BWMDBtQURxbzFxQ2o1T0VKRXBtWHdBb1dCYUZGdTdRcDB1SCsySytEUktvOEJPR1VobFVsNlp4dkl5N0Zid0NHZmtMWTZkQ0JQS3h4YUoyeXM2ekRwZmE1cElURWw5cERqdnFvMitHM3dUaVlLOVBvL0V2TTBuNkhvRWREc3pEelNXdnFsQ0hkNlBYTi9XRjFhK1AvVkdtYXlNR0VacWRwRVh6aXVUTzdKQ3hUMWhpV281c3djaU5hc25VKy9aM21zRzQrbHpWMys5eUl6Qk0xRHYxMnV1YzJBcExpUi9XanJ2QkM2TkZwaEFIQU1EK28zajZrclZIR0xGTEFXcmluZEVCVWlhSnNsWnlnSWZ6SGZBRmVvdm5jQXpRKzQ5ejIxL1ZSdDYyR2VNVEYrOHlUa1hXY0FjUENZZHdsdFVXS1VTU3I3Q2FxSFh4MFcyd0NwYTBCODFqKzRUNUVsV2NFMHdWY2Y1cGQ3Y0FOOEZuZDY3MGFHYTVUMzVoTzVwUmtJMUJuSXp1MVh6eFNUaCs4VlJvYzhnYndwWlZWVmUxdm53MmtuYWRyN2lkS3owS2Y0VHN6T3RBS3VtOVl4SytkMExkcHBhUEM0V1M2VjA2TXo2R2lSTEYxUEZ6MmZkTHZwQ2NkOHpYNE4zNC9yVXo3dHVDeDVIWjZmcE1PZG1aTmxVNWhpSUowZ2w4dGhwSVpTSy85aUtDNmhZVjB2UVRYb2VuREhTSEd4MFpwYWJ6R3EwSHRwSkJTcXBON2g4TUZSVkV0blY1TndmcVgrUThNa0NkYndaa3NyT0d6WDBOY0JGdXdPTzR5Y3VLWnU0OWswOVFZZGY5UmFENHpUc00waTFBbUd4cUhiM0hHdW1Nbzd3RUVwZnVFV2JuR0dMYUJIbjhMd1V6RDFNZVZ3bnRNenRteDdaODFMY3laaTkwWVcvNUhQNzlpZHlZNmRHOXN3NGlVbWYxK2xUaktZOHpLSXViVUx5Z1RsQml3bDVFNDYrcW5FRVY5SWFWWHdML3Mrd2JoNHZuYVlCcGt3c0hHYjRZVTZSRXc4cEdmdkhiUjBjNVVCak9zVC9URGdJQ2I3cUZtUTlyR1hDTjJITGJvaGM2bFU1UWp6Q3Nld2JyYmtTVzNrWCtiRFh3SG9oNDlCS0hHWDFBaGdVOXBNR1FMUEtyZ0U3c3NKZ3oray82Z3N6WjFldmdlV0I5QzdGbHhnTFBxckp6Z3VjaC9VNk82UTMrZFN5Zm10VFpDUWtSZHFueTB5ODAyUWZlU0RiL2dQNUNWNWJmOVR6bXB6QU4rRW1DNWRmZlNzTGhJY1RIV1B3Zm9RZDY4MUhUclozaWNoMG50Q1VQbC96dDNyOUVCTU9ubmxTclZSa3hKa2tGTXkzOEQ4SWg2eXpQMXVaN3YvSkYxL1JSQ2QvNG9VSWNjc2VyODRWUUwvS1dUd044eU5XeDFieGdUQ0hvLzZSdHJ2elhpTklWaUlpdVJLNVVZWEpZMkV2MHE3WWJTblliWnUxaW1zVHErOXgvTExoVVR5eDRsbFVkK3JnblFLb3VaZjRVYXZzMjB1WTFyU0xXb0ZHRE5uOVZ1QVljYUhUV09JQ0tMbHZyeVJhb2N4cFNXNUZVUmJsRGFaVjFsWjNBdW1CZ3ltVjVHTUZWRnRnT2YvaGFzZ0x0M0diMERwM0VVUHc2MWQ4ZzhibGxyRnhDQWhUTlB0ZFI0bFcxWmltL25WZzg2MmEyNTZNSUQ0WkpGWDBPbmpwV2pWRTVqdit4U3Q5QnJzQzUrNjVFMmd2RVVuWEZISmhqNUZwV1kvSmxZUzRDTENtYTd5TVM3R1UrZWpucXJrNW94TUhTNEQrekJvNS9BSVpUTi80U3pwREtJN0xTdmRNUk5kVVR5T3NBWFRJcTNyTjI3SUlrdVNvblgrZEs0U1NiZHdJZE5jcEJqUUdpUkNlcThlMUhCcjVkaGQ0cUV0NkVvVkkyenZaVm1oTzR4T2JLL1dHMDI4bEM1R0dSNDM1THM5V0ZpRU01ZW02STE5TmVXcWM2U1VxTmFuZXg3bU5nUDBsSE1wUldpeWYzYlIxV0pYYmNiUE9aWmkwblFqVFNpV3JPYTRxWXBMdHcreWRNc1diR0dUK1E5WHcwZXhPUEZMYXFic1NRTS9uakR4ajQ3RXYwQWJmQzZwdVZyTklVZ1k5TEtZQjJ3RWswTGYzdVFCUVZiNXJ4VFp0Q1RvbHFTMHJmME1PQXNpT2szNlF0UmxLSTBSWklPY3AzdnRVYnE2VUhyQjR2c3hIaW44eDAvT0hjSEZINWYvQ1FOSk4veUx2L3RkWFltKzFtWmx3enFHcDBzQ3JpOUhDRFgybGlvQldMQWFYdEhpYUhrL1RCMm94K09KWVNTa2lDRzdYaWJZUWFNMjlraHVKTG9sS3ZHVkFiRVhuM29UYlpiZkFKTkw5TXlxMzFkenNkL2pPTHVlVkMvNVdwOUc4TEFnSlh0RjVWTTdhbDVvSlpGU0RHNmdHVWNtS3B2cE1hcmM2TmFJdkhzVmpqQnBaVkw2aXlIM3k1OVFxemtEV2xJaWRhd0VBdzJHYnNXRlQwckJSaHRQYVdJb3hJZWxJZEZ3bzA4T0kzT3dZWndQc01wOGpRQ24rZzh0MXJXTTF2c2k5YkhETDdDTC9rTmp2QzBpa1FoZW5iOTAzT3ZtWll2QTJWOTN4RFVaS2ZMNkJsVnl1alRYT1Bob0cvM2R3MmF3NVB4TXVLbEJhQzlFL3BUTE5iaVhJZlRNbVhaa01qNmZBMHJLR3gyNjlyLzFPZ2w0RERidmM1N1JBSkpYOUtTb05HRC84VWZadGxiRUZJcklhRGNEdjd2YW00TGpaSGRGOHZ1OWRLWmNkaXJtZ1ZZZ0o5Q3E5ckkwN0xMZHpqYWJmMzVLakF0ZXhXZkZPSXNPeXBHb0M2aGJzUi9PNTBjKzVYRkhCR0Fqc3g0ZEg3T25WMjBYNStEMkp3VktYL28xMzNyb0grZjFvQmw0MlpTUWg5L2x0RWwzSDQvWWJIM0k4a1pvZEJWVENWTHZsbXVyWnpBb09UekZBanJCcW54eDRWQ0RoaVNjT2JoTnp0MHF2WDRRU1RTTkc5cjEzS0lkNTVkUDZSYnFlcXhDQkJ4VEp1ZlB1VDVLUmF3Mm1SNlA0LzBackc2d3lOY0VlZm5EdjNDN0pQdkpPWGl5dWlCcXJDUTg1YWNndGtVajZVaER0Wk1sTHBYQmRhdnF0aUFpN25UMW10YTdBSElURjUrdGs3cVlZM3M1RzlYOUlPajIwNW5mQTE3bHJJbCtNR2pjb0xHRGJnN2RoZmxDdmxQQjQ4cW43emJRM2RwSHBaZVVPTWNZRDhkUlRNSXdiRHhiZ0NHaFNXOTk0Q0xicERIeWJTRm5tY1RGS2t3cTQySEdlUXVsSWIwekNNdS9VaVRmM0ZZSWdSN1Y3a0djb2ZGa3pRdytxbERaYUZVdHU1aDRMYmh6eDZBbzRBTEZqeWsyNGY2MVdvZzg0Zi9QcFpuand6MzlpWmhrYjdYZ0pDZnh2TldqWjZ5cEZTUzhiL2dkcWlDdXI0QWZ5UTNVeFlDTXJOakxFTTdLU2hlR3pyNmh4UlpvQXpKYjYyamNtMUpSRm51L2M0VlJwcVlFcmRrT0gwZFVDbElxNUl6N3NOczhuVDV1a0tNbTdGTjVnaFMyWlE1ejdHSmVoOENodFdQY3grYm9KaG5yMkF3MzFIdlI0N3ZSVnRyTmhCVXB1NjNZLzFXWGs2OTNNTmxPaHBwbzg5Q2hvdXRISHV1Y09ra21ERk1XYTgwUlhKZmpFK2hlRm5VdEE2RjJGdWFDTVZkTHA0QURnU1VJdFIraEI5Q1UyS1BPT0VQOHVYMzYrNWlmVENxMXVnMXpIOWFLaWlHU1dER1VadzFjYWxrMVFYbW10aTBiaFowazRDQkd3aVVxd0g5blhKWkM2dFpuSVRza01Jejd1YnNJSEdIVkhybjZUaEM5M2F3T21rbFN2V00zL25xdWZCT1ZKODVkLzFxbnhnakJqeUlFcUQ0dk1PcFNjYzNTZXVKWTJKNE0xNTByaVZUOHRqNEZvc25WcjkwREpLOWpicjBmVVJSNlNhT3BEVkJCMmxWQUF4UUVzc0xKSDkvMW9pQUdLM2VtNVBUTTNEVmF4ZlA5Mk1LVlNxaGNJaHNwUGdHemp6LzBVOFRPMEZoTjNEek9OcEF6T3hjNHFSM0R0OUh3RlNTbXhZNlIzdGRPaFBiODRSMWQrSGVubEU2cnJ4UEh6SnpnMzFDcTFKNzA5cW1hQzFLWUpPL2lSRk40aWtGVUhYL20xTTBxZkFkZHRWaXhqKzdISFdxc3pybHBDNis3U3dieitJUldRWHRnS01zNjgxYkR4bTZiRkxtanBKMldVSktxcFg3LzJ0WDd3ampqczRBcnVXNUExakxIMnptTldRV0NGRS9tMUVlUkZnK0MxMnM4TzVrSjFycjlaVzlXQUhBZjhBb3FzbzdHWjA5QzR0S3laNzV6YmVQbUhiNkI2QjYvdlhNUng0N0EwSHRkTHRqMFA0SGJaZlI5c2E4aXlWc254cFR3a3dKa2c4cHBodC83S2RZQlQ5S3RkWWhaVXA4QTVRcnA3TFd3MHJmalk2VVVyaUwxcTMzWjdCVGlpS0FwTCtZenRXWFpIMEM0cC9vczRrYndTS0lYUzI1dElPTGcvd1VRYXA3U2tmalFXSittV3NUdWNkQ3lzOGFLRzRyMWYyUW5XeWdTTkxJQUJudkdQbVRHdkdpYXVxcitEYUMwYWxXUVhPWU01aFRiN0tNNVM2TmhZdkozZmhMdEJqaVhYQkNMcENvV1hxaGcrZ1JRZ1JodHpaTVM0RHJiUElxUDlWVG9uNWcxdGUydUVvOHAxdy8vV3NtTzg0SjU4NWRsQ1I1amp3WUNWL21nbll3Tk5nSEdSSUtzWkVOcSs4RnE2Z25mNHN5eGROdjhLazNTa2F2Snh3cmhKWjF5SDc1elNpMGkyM0dzV05vU3l2ZW4vdVpQbkdLRmM0UE1yWVpxcnN3U2IybmhhVi9ob1lvVnl5WCtMUm1oSUx5Qk4yOG9rMmc4aGR4KzUvNUh1Q2pIRGpWYXVhMk5nNzNGb3RzT0NhSTNvd0lTSndsQ1orei90dU04cmpnbFVtMStTekxSK0MxUlJYUVRFVnZtem9nQm5RTUg0KzJnVzFZbCtQUGNwWlZXNm9QR0ltNjVJeGJBNGF3V214VGhla1NNdXBQaWorZzRuSWsxeXpHWWhRalpuTE9Jd3RYM004b1hMTUtTYkwvUDhsR1d3SG10MzRJMDJHYUErU0R2Z0E1N3cyNVVFYkMvUU95WmxVdk5Qci95ZDhuZkpleitieTIyTTlvTittY3c0UzA0eXpZcWw3ZlZraW11NlhVd2hhQjJCR29SQ0dzZi9TWHdkUjludldKbmNueFVmS0diamJmUEF0bTFKSExpTjhGSUtjUStOKzRKK3lVbDNaSUNWWnJOcnh6bDNGU3JBTHJ5SXZhZzFJbURSZXhESnUzeFhLNmxsUnk3aWt4ZFhTQlZWbE41UzVjelpuTjdaUFJ3dml2cGR3bHJDK29xMCs1bjFJNTdhOGJOcjVGcGw1anlDQnNOcDRKN2ZEb0M5NGg1L2FXZ3cxMzdVRi9KRG43RmNoNDBrQmxJc0t4d2VSaVFmZDVjUmFYV0cxejhhMnJ2cHBpdFBIak5xQnl4UFFXeE41dGNIOHYzbzk2V0V0eGRmZ1NvUW41RHNzY1ltSmh6dDZHdTNxSFNLalFrenJxVnozS2dGVGMvdDdKREY0aEVtc1FZRnY2bTNjTERZakVjeXl0RWx2OTY0VzZwMTcwLzcvODJnSkJGQkdXUWdCN0Eydm50anRxR1BOdys1OUp6SHhlTm9YeEE2dm40aDQveS9Eb2hwYVBoN2pxRkR4TlVqS05XWUFXREhSdGZWbTMrTjRzTDFDSVJ2V2szSml5Y3AyRzBYdlJUQlRIOTRSUGdHa0lXVXp4NnBBaGpKZS9Sd1lRcWE3bkJVWkhXemRiRjh2Mk1wSVh3TWJXRGFjVzk4NFY1NSt5MWxneE5FaVYxeXNuNllYcmw0RHNDN24vK294SDBvOFhWNjFtSnh6R0Z0UGM1TFEwZUoxNTNsT25yVnFHejJDM1U3Vnp0YTNxWkhmcThBNUVTUFNSQXlFVXJMN0wweGNTY29qWTFyblRYeERZUUJCamJYZHV2ZGZpMis4d1ZPeXczUjc5aG1UZXF2OGpqYnE5NFFTZHFHSTg0ZnhNUmRxUW9kaEFRS005SVRUOUdUdkJtL2Z4OENlbXJNZ2FzVWFlcDhJZ2RMSjlTdDJNNkVxd1B0T25aaGhPZkEwMUttZzRDeVZET1hoVWIvTWh3bDltSytzaVFaek81cVFqUXVTMWpwSmhsUEdjR3ErcXlTUkpWWklpNHprZHc5MXRaOE5CaXFQSlBDNU50QjhlV3F5VFpLZGRLcjB2UitlUmo2ZDlEL3F3ZkFyZ0NYN0ZwS1lrUjVIVWt4TmJTYW1iVlRQZVBwWDZjcHdpaWxjNVdkOVVibEhhTGovVW9LV2FJS2tOL1QvaUpVZlRCdWk0eXZ5bUdtcGoxZndQRUcyV3JuSmppSHQ0Ui9NV0E0N0g1c3VhMUZnQmNXM1piUEcrdFRERHNROFp6ZHdzUU00LzBqdnRoMVhIVmJaakhOb2RNWnVVU2JHV3FKSWcwaEFMMHpuZ3JDNmtBWjU0N0dJUnJoVjN6SENkekhCejZVM3JZRlZNb1pEdFZwYlFoZTM3RzFNU3RJdFVjdXNVL0xNc2lhQkpLQ3Joenp6eUVVZHFzNDZDMkdHaDdQYjAzd00vNHBsdUM0VkM0czhLczdIMWU5YXArNDNtMlU1RkdxTTBTOGFqcFVyKzF2QkhXV0pUbnkzZzB5ZldzTEs3bDZuT0VoWGxCOHVJREk5YzFKdUU0MS91TkdTZFlMQ05qZ0NlQXhPejJSZkpaTXNrdDVHSFp6aXl0VWd1dnc3azlPVGFEYTl1YUtydTJMVW01bEtra3RKckRRc2t4d0h6MjNSc2hsV0pBZTVMTGtQMzhtTTg2ZHVHZzBqV2UwcGNjODJQSEprZmZRZS9uOGN0VEF1TEdmaFlPVEpNSGY2T0s1aVFwVUZpdDRIQWNLWC9ibzU2ZjNjWlpuelo5dnNLL2tOTmZ6QkRnSTdwQ01neVlHVWRQUU80cFdaMHFLRWV0aXBKSGVZU3hMZE5hZzVvQ1RZak4rT2dNL3dndyt5RHpMR2ZDT2d4L3NxNlRjajNkbE1sWk9FaWxmQVNoSkNHT0ZBVDNOTG5xcWFsTTlaU2w1aXlHdXQyMTdta3RHK3NpRjZlTDJlMkJlZ3pQTjlHWldQcjZQMlZFTjdJSitxTHNIb28yL1ZSYllGbEhweWlLaGVFSXJTZmVKbVpoNlQwMzdISGx1NzJBQVpFdmo3Q2dmR2QrcjFEV0pWRm96RTlrK21kcFhESlhGajRuRDEvc0RtbzhvL0t0WGJiNUY4c0ZCMGRvSTNvQ2tmaWhGY1dNVGMyQVpIcE5LeUNneUt6Z2FtQUFKRWVQUUhWSUVqOGRDOTRQSlc4Y0xKSlp5QncrNmdEWXFXYllWQk1XZUUrUnlKbnV1cWdEcStGcE0wUVFKTzQrNFVIQUdrQWJ5UWx0c3dkVHVtTjBSVnNBNzV6RDhMM2liNC9tTW9YZE1aTGh5cFFjRSs0VHlaZ1FtL1k1amp2WXRlQW5hOFdlYmhobWhrS0duS1hnOWhBQlJ3TksvK0ViYWIwWEk5NFl0OHJKeU9LNnpMOVdzZCtXS0FtRzUwdzFoWmFwWUU3V0VFaDZIN241L1Y3R0NRVlJPYVEwRVJMcnk3WjVsOGVEUnBXK0g3bmNZZ2JLeWFaSVU4Yk9MUnhkZjU0QXVvUC96dmd6ZloxNytnSG5NWExpWGo5ZXJtUlVTRjBwS3NIc3RDTERpSTBZRGVYQUhaK1pQUVpoWS92RG1COG51cjhyc3V2bS83U3AxRFA4RVl6aTJLQ01IbmgvcVlweHRFWU5TU1BhMlc2aU9hdnJKQzVhS1NrU0tWM2YzYVFFOTE3YTV4MWg0VW4yL2xnQlRPcW1pVDNUOUthZjdpbUduVWR6K2MzdXhKQjFTLzE2YXJGK0ZxMk4xQ2NUcVJCOGlpRW1Hd3NCbGtCd2c2T1hzbG1ROWJZS2RGSU9GWUVZWlMveXBFWWhLT3d2MkpKMzlYa0Nnb0dYRFlubGovZ2JvaFlOSUZXWVNteXA0aXRUNVRxSStOaEdOd0MxVENkYlJCMmQzcGVTR3RDOENmZCt5eC9neTAzWGorKzdhTXU4aytvYXl0a093ZTN2cG41YmtVN2pqZGMzcjJTYUtIQVF0L1l5OVREd2FRL1hYTzAvajRZR2FyZWtZN0FwN2czQ3phUXc0TjVFa2s0Y0J0c3ZWSWVFa0d5QVd0T0JhcnNhSGk0NzZQT2I0MUp4Z1B1c2h1YkIxK2lENlpSQWRkckthcFllanFkLzM2bkU2dWF5Y0NpUlluaHNWM2l5N01QT0xRa2E2UXgvcENtZzRmU0FmYWlEclRxVFpsVkdIQzRTWkY4WmRNSVloZ0xJWHhPY3p0WG1ZWHVFeUNLK3Q4MFhZbFRHVWY5NnRuek9FUlJucjVBaDE2R0FHdytDaE4zQVNzL2RldUEyYXFLSmZoQTB3YjJYR0JVMmtiY0EzYWpFbWdkVHdiN1NqZUdYaFZpNEd5Q0FRUXJBS3NvVEU5WFZxR0l6dVZCK0dDbks5bEVOcVlLV0lmdlhTQXovYy9ZVUs0T05tTlFpKzZkYjdIeXNuLzB2NDFpUWxHd3FGMEludGhVRDdmS2xwNnN0WWtNMS9CY1Q4dEx0ZU5uWFJyU1IrOEtCcG12QzVKaEdGSjdzVTRDNUtlbnpCSFpGMnkrdDVpQnFYZmN1WmpTTjNqVzNVdlN5RlFmR2pTWEdZTy9sTUhkTnlBZnhWcE5NS3pWRFF2MFFpQWk5YXpEOTYzN3dxYUI0UjRsOHBFME9ySWg0czd1emc1ckMwSUlzYWJxdzVDL3VBZ01QQmx6MktEK3ZZUTlYdzlMNkE3NXJ4dGlYajdZZnc0U0tpbnhERlYvNDQ1T3ZNN2d2RDVXWFlFNmdvazg0c1JCSmo4RG4vQVQ5TUFFVktYZ2pTM2dzcStDenhnUEh3OW5nZVRPazhLQTlOSXk0ZEkzdXpRTTBPSHpqRzRmVDdFTFdTNnZ6K2NzcEtxZVNkeTIzS3JjUlhoOHY0SS9VUlI1ZmhoaTh1dTZjZ2w3YW1laUtKWVVQQmJBUi8yZHY1NVpDSWV4T2t1LzVKall2QUhDYVZIdi9DT29WVkhTSVNCTmtITjF2MndoRmtEdFFhVVorNlJURnVETkdJa0xzUlMyUTEvU2FiMXVZWWFaVHlLcTNQZFRTN3I1Q2VySFcyNEpRWkxmb2VoNTN4a0RTRWQyT0diaXRDT2ZOQmxuOTk3eWZ3VzQ4L3ZlUnFyaXVRcnJ0M2MvUDNNSU1UQVVkbDI4RmJTQ1BpS1dXTVVjeE83Z3hENk9CYjFnbjFHaUpIOVkwQmxjUVJ4NG9lQkRaZkNzRFEwbzZvTlFXTTZHeStaOG9PMVpVeFFzZ1J5UG9nVHlKR0YyN0I1Wk1ZQnkwMmdNOXRsTk8rR0NLYVlSOUp2M3ZjMzhSRHh3MTFzZTZYWC9aTmRDdVJ0cHBBenlaeGlSeE9nUVgxUkhSd0Q4T0ZVUVh3N01VNndHOEZCcDlWejQ5a2YvMlRNTXlnMEVwQ05YSmZEZGw5N3c4N1B2bXVpQzBjRjY1YTc3TFlyU0Vsb0VHVG8vUjVqcytwUjZaN0JENkh6WHR0RDl5dzRhUXR4RWF5ZG54dEtUOVBkRTFNSzZGRHlqUVFSbkx6R1FxOTY2aFIwMGxqTEpRS2tUV2hUbUpPVzlaMGdwS0h1Zk5rNlEvM0VyOVdJT3lWenNsMTVxMll2NkJESDBXaTRHUUFPeU9TRG13Ynl1VFFxUEhrVFRJbUNkemhsS1Y5bUppREp4eERaMnY3U1pIYnNqbGtON241d2NzNzFZRklHN3ZORUZkV1JIaEMwejR2TVNoNXAzejZsNzNwV2pPOW40SnlIdFh1K3VoOE8zU2tvSDRwNDViZjhEbXlJRzA1RGdXOGg5em9nbEdLUUZEbGpqaHJPa1BNaEdKdzUvdDgyakZJUmZXU3RWRVpFSkZiL09SUUVqTkVKVzhVZUtyQ0xYamk1dzA4Z0o3UUg5N1hHSHhLUTVMUml3T1M1bEo4L2JVMlhoZ1NvaXN3LzdzcWZ5cG5nTVpvN0t3SHh6WlF3Q3NiUzZnZlZXenlMeGEraUNzeGo4VW9ZMitkSm9zTGhPY2lKQWFMMlBOQkY5ZWpxWnZ2aytwS2tjUEdmcnpMMzdYVDJOMEY1dGNuRE05eHJLeHpmZ04rQzlqbXR1SHdhajViYmRKdk1iSWJZcTgybjBHRUhsRlhKcGFCTjltYlVNK1llcDIrNnhiKzVGMUExeWh0eUpIcFZTeEgzc1A0WVUzZ01IeU5HTGVlZURiKzlLdGQwRjBMM2NSckZnclVnN2JSaEp4R3NoYUEzZktUVlZDaXZvMGtEdnBsTEdIV3dDVkVCeCt3YThCV3Q1YTJPUXVES3FiaWdncU4wT3h3VDVwSTVVVDIyZ0M3bHE1NkRWSTZ4eVBqTTAvV1ZCaVpicURSR3JyWDNCSXdlc21KZmcvS1lJR09LRnVGSE1MSlFuNUswVFJISkR1YVU2Zk1hZG85N1dFQXg0WXFHd0dzOU1WTGY5SUFERVY5WGJBRHhBeWlLV0RSamJleHE1QU41ZElRYjdzSGVJSW5zSFhMM2hQdWgzQThVUFJ0V2VVYTJxL0hqTzVXK0lwdUNJdnR4d3E5U25xbGZWamt2c0FUUmlJa1hMNU5QWGFNamtGWFN6K3JZTEdMVTY1UDUxZ2t0bnBZNFNSbWgyVU96K3hEYUFOY0Q5VmlmZ0NaZ0dKWGdYellockdXdHZoQlVQMUZ5di84LzV3bk1mSGdMb055eURmdHlGblB0alloQUEzQ3hFb0d6aTJCY1ppM29VYy8xRnlnbWlBRHhqN2tiWTQ0cXJHNVFHc1JSa0oxZEtIODc0SFdGY1hxWXFGc0lqZDZ4dUgwZHg5WXVHRmZDcU9GNmx0ZFJPZHF0Q2xGY0xhVTUyNnFEREhnSUE2VXRkblp2WDdsbG0ydFpKMU5vY29MRDdsbHRuSFpwWi8yMjBFdHJ5ekpWQ2NOUk9DSmVhNGxpNkNRR1UwUzVXc2luRytPYksvalVLRk1GUHloQ0lkZkd1bkpEWmRYNFR1ZFFSRDBETUx1NHZPYURPV2hsKy9LOXRQeFNYTllGcGZYeTVTNFdmN0pOMFJndVdMOGs0ZFE3d2pDT1NkYkYxTjZrVDRkM3IwQk1QNmgxVkZMWU5rVHJqS0ZXV1JIYU9qNXVXQWU3S0tDVmlCTExmRmYxYkh6c2NWRTFPaGtxWlYwempkbzMxMnQ0RzZEWXV2TlBUcVNFZC9aTHJOeXp2K3pMdXZNSUhHNVpyS1R2QnNnYlVsSU80SlM5L1ZQcTlkcXlVMlNSM1BYaklrdlkrZFdBWk1PMFZKa0p0dHFwdUl3a0F3N3Vvb0xyT1hvdEQ3MFo4Snh3RVdCUUtqSFl2U08rTXd0TG8yTTFxcmZyVnVUbk9yU0Rpbk9KRWtTdi9IemZDL3QwamJ4V2pZMUZ6cy9zNkhKa0JvQWdhS25lcFYraDNGVFNRUzE1UTZ5QWNzVmN0T3IzWVRVOXZISGdSSnFqSG9GczZIZE5FR3g1elRkai8zaENudnZock1MZVhSRmN3ODhPak1FcjJXY0VmdTU5N0l1UHNVd0VISUxqWkM4U0J4d2VzR0MrMS94djdQMjNXbUE3L0x6T0U2UnQ3Z2o5QXREbU8yS043UW1GUy9UWldobnE5RGx6OFI4SlJ5MW1yUWI1QUhxQ00rR1pQbGViMUNMUGdvQ1VJc1JmSHY0bUVhd1hvL0xTcVorS1hYeVVCbklYanVWYXNKSTFJYWxaVnhTdkFlbnBLNGNVR2JxbGVYLyt1WEpBano4NU5kM0p4TnNxNm9WRytxd0xkejdIYzNaTXJyMktXMXdWRnpoWWl5aTMyTUdkYzRzd0V0eTZvL0c1NTBjYjBCR1BHNk5EYXBINFMzOE5rdnZwUmtLSHNBRStCcHNhU3VoZXBrYWlYU0Z4SXhkVUYvdkVYVjVkWDdFNW9UL01rMlJYd0NxZG0weXkraUxRQVV0K3h4KytnOXVjMVprNkhYQS9seGNHY1VLNVlHRkFDRllKd0NZeEVKaWJYbDRlTFRjNTBWMitPUVhsK2w3ejdvdG5RYlJnNkNTS2hlU2o2NXo4b054SWtMVTNucDZjSHh1SU0xQWZsZks5RXFEQXJqVXJ6Tlpnb1NlNjhDTTV4TElWSytVbHVHOWJXeE4vaTA5THZ5Z3FXRENGd0JPK1E1dnZzTmJ3RzZXUTV3cUxMa2owdmpmeGxQRkM4MFVVemVOKzhmSzBaN2NtOFhVd2tRODNFUVBiMlVhRUdkMlQyeVgzMmRnTXFXd2J2T0VjMWprMWJVSWUrUldOMXgxeldjM0EyT1ZtQ1dqL0ZJaDIvc3V1K1FNdno1cmNpcmxPNDY3ZXMxNERjTzhUY0tzQUN1YzBsN2Q3WUxsQVRxWDI1VTU3Mjc5K1dYOUlSRGEyM1U5bTg3clVaaElhZlBpYVBKY1B3RW9WZUc1WkFkMTk4OHJ2OFFBWHpPcnIwTnZ0Q3UyM0o4Mlg0OFRDMGdSY0loK3IwUGNZMlBselhUV2xLWGY2Z1FCZzFsLzRyQmhaV3B2OXI2Z0xHMVJpd3RwN0NCR0hGU2xVUFRlZXZGWE85cWpWTWRER1EzNjBHTUc1bCttUXFIMC9yL1JETG9kWGZWN0dDVmIxWWN4NkMxZ2thbEhIN2o2Z3JQaEx3TmVjYkpEVEgwZVpwMmhIY2F5ZG1UMUp1UzdaaHd2dXRkQUFRVm9uS3JnckNrbGFhWHZ4MGlSaHhTejc1QUVhdmw5NHhSaFRuZkh4OEFVNDdVOW5LakZ2ZURyZW9KOGZSOVBjSTdkN1B1WDF2T3BkUkQ1QVR3SXNiVmd1dWpRV0hkd3E3YWVKQnVXMHZjdFNrQUlSa2s2TjJKK2NRV3F5elBwVXA1L2ZjS1NoRG5JRlg4R1JYaXJqd2d2Q2ZpL0Q1NFJBaGV6Q25RVG9vYmNtbVQvT0ZRa2xWcExRVVAyMms3MzIyalFlcTVEZDdPRVNTNmZDWUxQU01MalpnRFFaNWR0S1FxN2ZiTFRaUWZYTjRBaEpWRTloZTlaRG9mUjhvOWM0M3cyak10dGx2blY1ZWcrT2N4d01SYVp6b2NSS01rV3ZqV3NLVFN2RGFMOE5YSVoraUJPL0o0Q1lNTVp3bkxIdGg4bnZGb1BoQ1YyUjVZVnU4bDFOamlIMmZiMjFadm9KTUgvV0Iyb2c3Z2w4UXZMZEdhaGNkZ2RsT3U1Ky9BV2pEUlhtajdYdXkrWktvNi9ORm9saUdmb1NqWTVRMDNWdjB2VzVMRzJuZUFJelN2aThBZWZ6QjVNYWF3K3FUWUR6RTBENUUvYkhVdmVoRWtnZk9vd2dUQktVU2ZWcnpzUm4xYjVkVEtCQ2FmNTY3VTVndWc4RTVzUFdVejBFRWJKUGFUOStSbHpjOTFXRkVPQ01zaGZCTkFDa2RYSTNORTk5WHBGcXQvaDhrQnBiZGFScHljUGFVa3FaUXJIYTJZUk9qS2pIYXhzcVFSQi9vdXhkaSt0aDlRUFQxbnZHeUNhTnIrcUlTSWtXelZYR1U2aVB0a2ZKaFZWclRMNm5temJXRFpVNVhGcXR0SjhuQ2JZTlhVdUpHaGtwbjh6ajQwQXlKa3JZbkNjS0ROS1ZQL3dwVkpMWlVxR1VIc2E3c21pdlJxK3pJaWd2clF6VXRvS2FUeGNpaHE5TXJEOWtGczJFdTZBSFNRMjNFSnZqdFRvbGZGRVl0aW9XQkplNWMzcXYwMlY2V3dnVEdnMWtJWUpmRWtCQno2WU5kaS9wRDJPVk5US21KZlZ4M0tWM0hjQzBQNGNITDdHSEtsWHNTSmg4bHNRdDBINkl2dGVZZTR0RGJsWS9zVlduN0xPVyszT3AxYlhMWFJMVnZ0L1h2SXF1R2JkdC84NHFKeERZU0I1Yys1d2JzMWJ5WGdnVDBYd3REMGZqMjZnZ3RXbUQzV2lrTGUvVENNSE1mdHZYQm5rK1lVNW9yQ29VdHFUOVVWb0twcm5Nakl0ZktqY0FNbG9OKzJETTZUeE9SWnZxY2Q3ZkF5b3JHYlBVczkrN1ptUU96VEs2NmJzRGpOREh3YlhyQVJmaGEwQ1RrdUVuQ3hnOE1BRW9wR2NuUG5mTHdzSXJnTGJ2OUp4cDlRVXlMd3ZnSWxPVThrVk1nSUJMUlF5amNuZ25LN1o4cTZDRWtUZlFGcUJjZkN3VHJJVzR6SXVTSDdycnBXd1hWclMzeldzOFN3SmVWeWlSblJoZ3c0aVFld1FOeDhlY3dBZG8zYjFINlo5VHZLNUhTYUl3Z0tETlM4T0FxMGp6VTRGSzNQUVhZREJDZzhSalRGdmgwNTRWNVRRaERtTXZzWU9iQnVrS1dKMmZwVCtmUlNZeWZ5S3djOWswMDI1NS9sTWMyVmdpVnQzWjgwd3p4Q1E0a0NPU1JxUTJwRFo3YnkvNmJ6QldrUktWSmJOb1N0L2JHT0tuc0Q4cHlHRjJ2QzhNSkNOUXBoU0JJMHVpUzZsVWx3ck5MMzZQa2lQR0pBaGIyL0o5elU1SzdoRytteGNWRzFXcXBTbUtmcmdNcWJibFc5MVc0bXlaWDdqUUR0S3JKclg3NkRoREt4MDRwSnIzdkFscmp4RXErUTN0UlJQdXhZQ1BkNVpqTHV6a09DRHdrVXlBckowOGh2Zyt2eWg4cithcE9hS0d0c3UzYksvY3FSUndXUWNTb2I2MHZCd1R0L1JDYkc2M0R0eWRWS2JIbVMvWXJkRHlaa2cvakMvMVZ6KzhteklqMjZ5S0tTaGFFdVRDaktSVFk1VWxOeXptN0hlMG9lS1IrdnZOcjVCZStuT1M3cDVDWTE0aUZ3dStXcXdMRllvc0V3aGFKbVlJRVk4ckFJM1VoVkdwQlZZY3BBTDFSUXdSWG9qVHEyZ296ck9HTEg0YjNEMlJZUjJxZEloNE9QaWlQbU1hL283OTRnYlFvRHFYUit2elJ0dHEyZ1IzTEtzWUlWVkRsaU9KN3JWS3NxdVpQczR1VGUvSmlwcnAxV0Y5M2FHOGp1cGdSZ1VxWDFZbjg1cFcyU2lTV09SWmxOUmxLSFhackNUVnY0V3h2dEtDOHJmY3BFZ1BPd3lmT3d5NGJTOXRteDJlSjB1NnhpNjdYbHZwZTVqWTQ5aW1ib2drdDRObFVRNHYreUcwaGoxaWNSQWV5VnJXSjFzeGRBYVBsZkpwQS9JeVU3NlYwZktISzE1eEIxbW9aamNQZmFTTnRaY3d3Tk1PNis0QmxUQXFtdUJ1VVZNNGZTUjJOVy9NUjA3NTlEaFg3WGRuNElxckZpWWRVYlVjdU9XSFZucnA2TDVTejhyd0VxWkRnM01MMFJPbjV4azZtdHZmUVVNdVd0NXBpNEtQR1Q4R2FxZk91eisyT2diQW5NeDU1TEtRQUl6WXhib1hydUh0ZjU1WHdyWDNBc3R5Z1YxenhGdFdIb0ZnamxBL29IVks5bW5FUWh2VG9vQVg2bFVGL2gxTU54amhZZ2Y3M0RrQVVqc0M0cWNnRU1RYXA5ZG43SXNIUjRVc0s0Y254d3ZJSzM3WlE1UWwvbXBzeVZldEN5cEJLVTIxMlArNVNId1Y5RWNVME5oOS9RQU0xRnUrUWlURmlhNFdpVkhNQzlacE5tU2JjWVJSQ3VPcXlxNWxnNU1ITmJ0UHJoWTk2VW1TRHlCcGxkQlE5TFpBT1RJdmMxUjI5YXhQZnoyc0p6azUzNWdGd2NMTG1rNWU4cy9sNSswMWRZTXlkQUJwaEN6YTdtMGNGYmhTU0FrYWJGZXNraHpFQXB0R3lvMUtYRi91UW1kdlZOL0FiUlZqNkhmYS9zZUpwMmtVc25UUVVWV1JnU0dla1hGbWpqNXVTTTVMdlJuRjlvWDNtM3RFZTZZdmhhRkRrVEZNUWFta1dCMmtiTHZXRHROdUx5TlBBeXNnYU4zTmt4WlgzZjFlNkZwWmNSY3pCUDdDOUJaSWFqd0JER3RkZzlNZ0dhaktHMW1OL3NLaERhdGJFek5aa2g5TE9td3ZmYjBHUGNIZnByTlNVeVRuZzBCZysyTGlhQStyOVg1b0lIQ014OE9aLzJEc0V0eUpqZldEeDUzVG1QUFdEZ3JIeEx1TnNMTTFwa0ZESHlhQjh2aGRMUDFydTc3RTkxOUpxNmN6VVdBOWRlaG1vNHprS1VtYWlGdE91WW5IeWlka211N05TSW1mMzNUeHhtYW9vb293VFdUMU9NYzhWT2RJWks0NVVGYUxFcExoVWVWVnpaejQ5NWJ6eE1sb3dHTStLTXgxTGZwWVRBdWw2WUgrUmxINU1DaExZTkI1QkJ1ditYZGp3dmtpZzdtL1dvWURocmp4OUFjc1ZzWEhWaWhtY1BKU3RRQ2R5WU12dFI0MGVHY2pOc21kdFhjZStQSS9TZVFubVZEWGpwWFNTTjN1N083UVdJTWpqbE44V0FzNlA2aTVCZ01NNmRRZzIrLzB2Ymt5c05FRm9mUGdxbnp0YkNRM29kbi9sSG1yVmJ0NDUyb2pnSFYrYjJ6Sjl4RFFLaGcvVEtvcm1mMXo0N3hBamlpNDMwRk9FRUxGTG9iY1h3dHpHeG96bU56U0dTNlFUdGgyYVkzZzhDNVR4OHVWdUJLNFZaeW5yUHBIcldxZVIzNnA0MnpUeTJKa1U0QWp4R0svdUp0cXpXUjdQYXFLTHVGdnVxOEc4dmNOOEtuS3lPNDV6ZHJPY2tBNm1ibHRlSUxjRUdObDRKdkw3RDRjOW9qc1VlYktrV0l6a3J0ZnhCY2V5T2puT1FHTlpGbUQzYkNqZkgvbWF4NmhVZGJ2YldTOWFDQ01OUFNZQy9EeFlSOHQ2dTdYdHlsQ29XSEZtNE41TjdkdG4vRDlZVk5lejRMcjhQMnhKVDlwZ1N3bkVDc3BXZjB5aUNmZ1hyNDZEQWRCaTZiditrYWsrdDRUMVp3Nk83UWF2NUdCZFhnWGN0dUxQZFgzc1pFVm1DY2YrR0QyaENtOW1pRE1iSDJ6d0JqL0MvSDNtSU8zTjBERzJjQ0dxYUlrN0xna2ovRUh4Qm1XQlBRSlRQMmZ6YXhwZkg0eGp0RnUwOXhhMHFCQ29pa1krSzhLbVVFNFJxQzVaaWtYU3A0QXc0YngzaVVOd2I2Q2x4cVljakdwRGNVRkQ5Ukw4QzIyd05qendOKzRKai9YYkNXbzVLNjJyUTM5aXNUUk5rdUtURlRkZFBQS3h1WnYwaUZ3NWVUOCt5R1RQVGhEOVRmd2NCYkZwZmpJanF2bkxjTHdhQVYrUk13MWR3ZFJ5RlptU21ydmNYQmJWQkMvUmJKVE9sSVNvTFVmRmY5azBKZE44WUl5VTBBQ05ic3V5cUdtNU1pUkRob3pTUk1Qc3ZreGJLeG1paGZ3akg5bzBYSVdxNmhYVUUwNEtzY0VibW4xNVZhcUxMRWZuWDV6NXRnc1g2QitlQU5Jazl5dlVmWUc4bTlMOGtNa0VDeEduckJvNkt5Z3dvajhpK1g4T3dBQW1jYjFmYXp4WEt6UW5uVTZlTHVtUDkvenZRSlVkNjRKdWp2NU4ySUhPTUlNanR1VmRlT1lLTVlVeC82NVZXSlArNFRJRkFYcnVGNTIxYVFDVFJXWmVhZjZQdlk1MHhZWlZ3SnNHOFBWb0FyS01qbGhYWTRqR3B4eCtweVh5OW4weGtwOFFzRXhrblkvYm5uRlQ0TlBaM0tXcnlFWkMvUEE3N1pFendHVEpGY3ZmVWl4ait0VjBqVnNKemRQbkk1TmZMVDFSeVBpTFR4dFZsaC9aNkR1NXV4ZUVkdUVibzc3ZzNUc1YvMU9Nei9tTnFVVEdvelJUdUhDc0FqdEVHQzB4aVZEY1htQk9nejhlYkdIQjF4QjEyenlkOUhWdjdnZmhNNm1rZmhHVVp3T3VHaGs1V0hvNlBqRERZSmtKNHBSNlJxamxvVUN5djF0V3lISkl0RkhpWkR0d3E5UVRzaTNoTjBMQTdXbzZuUllZYXYxWGh4RHFVRkxveDhUcFA1R01CcXArMUpSdXhKWEx1RTM3L3Z5bzVvc01QNXpkcVBadXVCOVJlTDFhbG9rbXkzTUswTlJQMDh6M2Q2YzUySEhHeFNub01vZk9Rc1JYYUNxM1dNajVreU44MW9uZTBFR3R3bFgvYUJyQkZKMXd4MzhRMW5KbjVzYU1jZ2wrTjVpTEM0blZBMU1QQS9TYVRHbklGNlNxQmcwYWhsNXJWWXBKM1RiTnVtYzRHelR6K013ejVVQmxLTW9Zc2RhbWFlMnVzV0JYOTdXSHJtQnVnSVRzMk5pcWdWQUpzTXdPeThXdjBaYjhrWll2Z3FGQzhmZzE4cXBzYTJsUkZyUXcyTDBuT0hoeFZ2Q2tsSFhPWEJMTXlrK0JHdzUwTFU4MGhZbDlrU1dBUkNRL1lDMk95SHVSOU9hazhpRUZvaWNOaXZGNC9GNmJnOHY1VldDbmZYM2ExbTI1c2FhTDY5bmlxa2ZyZ2pibVUwOW5hWDRNVUROR256cjNUMkY3cm5QYU9zUkk3UzdlT0dVUWJMQ3VrS3h4SDFhTmpSbC9hQWp4TzBONGwzS21QNUxaKzA0YnU2TVpZNnpCSzhWRjBTQUU5OVBVWnV1NEk0enRpamRNL0NwckVrV05udVR2L2tha0RnM25vb0xnbDJhMXdDNG9RVjM3Y29oNHVzb0VCKzFGbFN2Q0tNUEVXam5SZGxWNnNaSGI2T1JuK2h4RUczb1M4bWtpQnp2OFBjQXRMYTFYVlpPcHhMT1FvaWt2MWk4SWtYdG5ob0l4cmZtNDlyMHZ0MS9LMm9jV0k0ZHBOc28yRW4wSUk4UkNOWUk3eGpsU29abFJxN3dYN1RZUUJSL0Rva29mZVdUTTY0dXVkZlZIUFVlWWhrWHY5YmJwMlM1S2RTRkZvd3BJeGNpbnRqYWtxYlp1VW1yMHRNTVB3S280c2s3RUNRVDRMY3E5UXo3K0xhdE9MaHltRVVvNWx1eGtBY0dBMGk1T25JazhLemUvWll6VSttczdXZXY5UTl4RXhtYlJiQW1qMGFwejhNem11ZlQxaCtMakc2bFpKNFZBVUNCR0xtNUUyelV2dW9XdHRZc3VydTNXeGdCUmMxQld0ak5FRlQ1Ri9qUjgwdDlhZnFtWjV4Mk9hK2NHOGpjVlE5QUpNR0IrdldiRmxaRTZjQjBHd3NiYy9WVDQ0SWExUEdQZGdPb1NuT00wOGx3UEFRYmZXMlM2TnJNQXNJcDJybWxQWEQ5b204ZU05TnVabWNlekh3emh4NzZEWkU0ZXV0dFZYclhib2Q0QnBITEJ5MmdIZ1dLNEJDb21CWVZPVjBjRVU3K1BURzN0TDdPa3hSODZzczJkaWEzS2xxS044V2VFNVpMb2wybnplbWhiYkpyeDF1MlVrVG9BKzlxSG8xSG1zbTN3OE1makdRZVRQMFdBNEQrS3ZwK1NaUUMyWVdBR3lpQ0ZucFc2bzQ4KzcrTnMxT1NNWVNCTDZ2NnNkdnVJTWs2cHg4aVJRcUtYOVg1UXZJbXo4Q0V1ay9JQURCM1A0ekJoOTRpSzV4TzZ6VXZ6clh4UUtyN2xLc2Exby82NGs5TlNIRG0rOEYwbS9GT0MxUmlUa21kWXRKSDZXUjlWV1NnUnRxenZkRUhORElLd2NWQXlKeWdRbEtXVTNScGZhbjJiRzI0L0xFQ0hRVlFBcjEzSmp0eFBsNDRiRU9zVWVpUkhLc0M1OXRhdVhTUS83UkE3ekZTTk16dmExSENVU202aVZaQ2dmb3lzUmVUUG0vQzcwallJbkNvNzNid2V5bEdUYWJxYnYxRS9zOVJhS09YUnd4d3Axc1grMUp1Y1VxK0R5NWZ3V0VRQmpCSVBIenNuWnM0Nml2RkNXd21FdndPME9hM0VuNzRxNTJObTZSbmdRbXVZOU0xRmF6ZEg4R2k0c051N2J0cXR4QVBWeHNIY1QzaHJoSEJRdEhoKzRnWVUxZGRFMndzR1NNR2FRM2ZPZEppY3UwTjc4L3NhQkltQ2wxWW5pMm9YaDlwUDlLRVlSbkVYcTNYRkdkbEhwY1RZU0drdHBjODNSa0Z6azlVK0V4SkkrdGFvYjJNbEVnZXpyckFPQzY0MWpMQUdNSlRPNkFVRGw3S2wrYU53Z1IyQVpVR1QzYXNZNS9ZUGZwMCt3R1pjV2hrMnFxenM2cFA5LzlFUDFqTVV6bjl0c2VYQUhBaFZieFJjWmZaT1MxSEpFa0RTZ2xyWEp6aTIrQ09XL1F2YWZzRnE3Uk5yZzFCcHFjNWlWbVRpMGwzdjFmdGhSNUZCS0lISTJ3NEdDdnh1Sm9DMnZmL011WXhTWmJQYzV4T3RSYWJtNFhBaVpkSlRweHZTTUlRMUJRVGJpdGVHRThNcDYyM3JKd2ZTeHZXYkNXM3JLSEw4N1IwR0R4QVBvZ2dNSzNFejJuNW1aSHBNQU1UTmdzQUo3RWs2L3VQSVdlQWNUT2R1SU43N3FFVDFTMGE0dmNtQ2VlYUZQQ2VsWGhSTi9HblpNU0hpYTBoRE9ReS90NnVHY3NneHI4SkxxcFRWUFBkVDlXbW1nL2o1SG5JOHE5ZmtTOFpDRWoydkJyNjYxK0FVWEs5MnFBZjBqQjRuQkxhcjRQMGJlUTExcm1rTEI5OUdPNStRQ3Y0aStjdXd0MU5na3dVRUpwWEZib011VnFNWGl3UzdlV3lzZkE2QWVZS1FmeGJURVFSKzcyV0QveVZzdU1JU0pPUFF2eklPTkI2VExHK3ErY3dzUmN6d2tpWEd2dE4xc0RDWHkzUjFNSGJVSnFQQ2o5eDhadkpyNEFGaHFjTURMUE5LM1IrcU5lMTdXMHRDQzhXb0tFNjM0aE53R3BYQzRXQWREOTdCR2hWUy9sREJrYS9lYUFoQ2s5T3VXRlhuNDVUNjRiRC9WWHhBVFludWNWYzRUS1NyWGw5ay83Q1VaZjdLakpoaXNncmxFTXUxaU42cjRuSXhJaW5KTFBxT1c0UFJTSENuZnArcGdXVGx2d1RUc09oTEFSMS8ycTZpL25SUHNjQWpmaE0zcGNxMVMza2lOSU16ZnU2SGt2Nko0eFFxOXFxMHE1eS9JNkQxRzUyRGxzYlVZYkV0SU9iKzllMmttWlMyZkpuaklmWks3MVgzUzN3RWtLbEJiWFRxem5NTCs4NXFSV1BoemtrY3NEUVA0NUEvMUYvRXF2ZU5HWktGQ08vYmppejMwektTSit2KzlPVXdYVXRHdDhibjIzcVF4emhFWmxVUTh0dGZ1NkVTSzc5R0pLbUREWng3QXRGU2d0M20zTWF2VlV5SW1zVHhpK1BxYVpNcE91TDI5T3JNMkEzRTUyVE4zQjJuZ0QvUVBvOXBmbXZwajdJYlJJekRLenlQY25jVGhJaVR3cmxDcUd5TU82NmpQeXlzeVpLSnZ3U0Z4VTlJaXg3Sm92RmlVQUlGblQyK1NpVFluVjRFMHRpbCt6aXdkTk4zSEU4c0RGY0pNcVBTWU1FazRFTmxYd1dGT0E5Y0xpWjdWNFU2ZGtDTHN6eTRVb0dzeDFxajYvWTF2cW1XM0Q1cGhuano0T2hCYm5yWTZqczl0U0NXcDAxUTM1bE9rMXJVc1ArUERmZHVhRVNTZVRwcDVkbXQ4STI0OUFSV1dxZU9IcHR0SlV5dCtibjJ3b1ZiZEljR05JN1hXcGdLYnBiZG1La1lpM0hzSE5BMzdCQ2V1VWtreFdIWVdGbm1POWo0VEp5TkkzeGdqODYyN3BlZEN5SUdCRG8rVDZuM1pLVVhNUVEwNG9Iay9ZWThDd3dLUlN3Kzg5WmJUQ3psZXRUTWVTWmljZHZPN2p5bmk1akJteURnaVhLKzJTa0pkZFlqN2Vvd1ZmUFJsdWZnRWhkWVVNTEk4ZUZnOE9UWTZFMWcvOGhUSkFRNjJ1clNhS3Q1WUowdDBQQTNBUi9YL2g4anlHV2xpZHVCeDhUaDlhYjVRV2ZGSSt1K3V3M0h0TjljYXM5NFBFOTAyWkl2NUhCandzZGtDYXAzQ2M4KzNna09xRWtMUmZ5aGYyV3dDMWNsN0dZNU1SWndiM3p4aEZNVlQySHFYYUxBWWpyeHFMUHRtYldPRWJVRTd0RjZBQVpOOVpaYVBSd0VTVEtMOEpHdU4rMko5bGY3WlFqUzAyZFI1TnFiN0lsTG1sQmFKWDM2ZlNjZ2dQQVlubU5oZzNRUmZFd2ZuSE9WSEFTa0Z5RXZERmp3SWI0Y0tRRy9zVy9laTFwV2V5THF1RjUwN2tPSHNELzhWNHMzYW1xcVJJQ2svUWpDODJjcEJxU2E2SUY1YTVlVnVBZDZLekZQYjlqdThvTEFUS3praEQ4REJJeUZ1cVZETjE0L2haOStlbENyVCs1ZDZxRWV5RC8yT3FBakZYbmtTVTUzcUxoN0x0bHJ2VHFEcHhreGZBellIVlkzME8rOUhpMVZmYTBQdXdlbVRLOUNkRC90STQ4MSs0V2hFc092OGs3R2JCaENnT0V0SGpqdWhsUzgxV3pWeWQySTRtTW1zUHNEd0wwRUJTOUdmSkN2QTEvOVpyNWZwYitmRGNYdnFjcmNSeHU3QkZnU1JmVTl1WTZEeEhKaCtyZTFVL3I5T25SeE1jaHNXNjFTdm9xRW81RnFDZXFUdnA4V2RMK0ptZDYrN29aWVhLcHdIdWhZK3RnZEhDdFBXZDRXaXRYUUU1anhDTmgvVVh1YnRqNkRLVERKRVJZN0dqS3JObmxtaXNCWnRtZGNqS201Mm1OVUx4czNDZ2hRYjZUaU01MkNWU2MvU0RuaXlGL0xxTUpjTVNYRjJueGdlazNJZXFVQzcwQnhhU2YvUXRTOThHaHJBQ2lIWmlvYStiNGFGTDBmSEwzRUR3WU1LSnNFd1BwK2F6WHA0M0dRWHpPZ1BWTUlEZ2EyQVhWRE11YWNMNkJGemZCMzhIbldHc1RMRmwrR2NXTk9QYUo2UG5pcE5GeGdlaFZidy91MVoraERmb3A5UGxUYTdNNHF2RVRxSDUwdHFUOUFTR1hHYjdORVliZ0JFRG5oZFJxOG9FeHROb29XYmIrUWg2ZU4yL1ZFSXlGY2lXMzBSTktsTW4ya3VUcThGKzNTR0drenNsdDhVcVozMXFUMFBYY1RzNmpNeFVBRE9HOTRERTJRUE9sazJ0dzFNSEtpbzFkOUczd3diQ0Nwd1JGeldoVlJ3dUVFUzIrTnNwdEYrYUliWWQxQnF5cXo5TTVyN1BOMHh0ajh1dm0wQ1R5RHh3aGxENjIxRFQ5eU40SjZveWVQbjJMdjgzSTVOdk5GUTRCdFRYSXB5L2VEeDlON3J4emR3blJObnBSN0lLSGs2OExCbUFkWnBnQlFyV2tPZ0NFak9STXRIQnRtYlRid3QzclB1THRGU2VmZ1N4b1g2VWxPRjNRbk85UExUd21PeXZialNrSFY4Z3lnZkdHTG9OVlFNOU5VMjVuZHU4MG1PcFhyZVRsQnlVMHM5VVJtdGQ2RXZmKy9KUjJNdi9FMXRTUHAxTU40a2lPU2VJeCt3NXdZcHNuWkJCdWc0ek9BWXJaTWF3aUxvK2FvQ3Jud3c4SytmZWNENG9mUklBLzZSbDlPYmI3d05OamZGVEp5VlVOaE5pTE4wWjRGMXlnK0xoRmZZKzJWUFFGeU9SZjc0dE1JZUpHUkptSTlZR0JXc0o2elNUdGQ5YW9sS3grMlRXZko1bzQzWFhDY3JvOXplVFNXdGtnZUs4MkVQc0xWR0F2aUtCQTBtL1IvL0dFclgwTmI4S3BwKzRpWFpKNEl5RW5ieVdBTXJQbjQ0N1pXdzRFOE1ZUWJJZVJVVXgzUGJCczJIdjBwQ3FyYmV1dnhSUldPbkRiZVJFR3BnUys4byttRkRtcDFiVVJpKzlVai9USU9RRmJWYk1zM3RpZ0hJek9aS2M1ZllUdXNwMTcxOUFCUlc0UWVVNDk1a2Y1WXhTLy92UkI3dXJNRlBEVVQyYVpYWkl2aXZScmR6cExCOEFzVWZsN2xqSVdkaUZTQU1QMWJDcXJ6WW9naU42VVVXSlNVZk95aTUvRzlrQk1EZkdJSUZ3bVFzZll3WGxRamo5VVdYc1N4QW5waUFUb2JmZVkrdXlmWFZkQWF6NTJmbjBnbjdzZXJHK2hYcmNJaWtDaUUwb2FLa1QvWnRQNUs0WTA5eHVGN1dBcW5qN0RUL1o3QkJyYm0ybWZpSmVWcDFWbVZpZ0ZBMmVwTFR6dDdDdGxQRHpObGVZUTN0RkhyVXZlUDBvTk0zSklFelhwQXhGaExEczBud2R6VW9xZWM1dW83SVhoK0FsRTlNbFZ2a3ZGZkFZOVBTNjFMZWhZZ0JFczl5a0VOSTI3VjlhVlZ2VHZDZ3kvZldNRysvaHNuWThSaWc5ZWlxWTJueVRjdFlacFdiMytHMjFUVFZEQ3gzbjAvc01YRmFKTTJpL0lNUHdydFZXb2tRNHlrN3FtZmU2U3ZCU2UyNFd1UUs4Q3pqVXFQWDBPRCtveEdyWnNkUzVmM2lHaUk2d0FrRUVoMGZITUhrUk5wa3QycEo4dXhoVFM2dC9rbk5oaXRvOHNMSENaRkRkajBXSnlpRlVoZGVaMWtNZUJrYlBuaklYREVmTnVaMGUrWFpJaUxtelN3ZndSQVBGOURRM1E5YlNkaHhIWnBvTmN1dGw5NVdNQ1FVRzJRUVEwcTIxbEYrVUVna2MwR0ZaTUpZKzFGYW93ZlBCUCs3SUg0ZmNrVFJ4OU5hNkFKVmZVTG5iakYxRzFYbExaeFRmSTlaNithQ3VCMXlJaTVmVmYrNjNiQkZRU1FyR3I0RUNsYjhiMkxaRzB0Y0RjNStOM3ZvNy9WWXlwSEJ3UjB4dzBxQ1RScEJMdlpjVHVZdG1LczVXaGkyMVBnb2FBZmVHa3Y4eXEySWRkeVVXZEUrYVNqT1hFb1FPdWhpeVkvNGJzalJqNkxObk41YXQ3VmNYV2pwSytORGFTOSs1emlCcEVBQmc5LzVuNWZycXRvQlRzTlVoZXRiMHFocEdTZjdrdUVPb1BnWE8rUmZNSWZzemE2eXVmbkNpYmdpS2IrS25NdzhWTHNCejhKa1liR2FOcGRoa3plTG1BeUxsbE04bTBMS3phNTMrV3pQRDZCbVlCUE1UWk9mSmViSVpTdnkyTjlwZkFhalNvTFhiR05rLzg0d1ErZTZaeEU2NGM3M3JNSWZVdUtaWHBkUThBZmZGbGg5T3lXR09mRm1ia0k2d1FMTTdoU2Z2dERKbW9FS0JMYUJJQ0RIY3hyZ2lyV1FQeGI2cUZBNU9lZi9QcS9LamhzV0hqRFcwbFBwQ1lrYjBHeW5jQk5CTlNQQXdEdDVwRFhYK3hRTG1XK3VrZThLWUNIN1JuZXg2MU1nVllKUEt4WUxuQlBDUjJhWG9FTnFCWndKakJjcmduZ0Z3TExjUEdpbldPNmRVU3Z2REd3YWw3ZDJ2aEo4T1VCUTcveU1YVjE0U3h6YU4zaWJuTVFFdFZGN0FHQWJBQTZ2bWFTMlF3NzJFU25NRlBqY21DMjh1YTd4NGhtL3Z0MzdKNUVzRkhBRTl6K1IzV1JtOWtvYjF2dWN5Mk1DYk9vVGlWSzZXemM1RlRLSnZEUmdNR2VtbW1NMTNBeTVmQXdyUE9rM3ZsdDNURExVbE9jOEh2VzNPaWZlelBBUGxaQ01LSnVvL0JRSlRsd1Qyc1E0OERZY2htMWMxanNzZUU1Nk9ZclZMVnhOc3QyNHc2eTQzTkxsRjhld3BvenJ3Ym1iSGJaazhVb1BTQmRMU2lTYklKemdzMURlNzFIeFVTbVI1N0k5WGg4R2E2S0srOHFmbytiMFpwdThkcXZzRk5GREhJdnJkbTNVMUR5QTlVcG5nc1B6WitEVjBWV0MxbktsdzlaWHB1SUpGZzlmeGhBbU1DL1dKcmhlQTdJTGZENzJ3Q2IxdjhzUXZ0SndsUDlGVDBkdkpDT3pXS1MvaytRa0JWV0RCV0txa0lhQ3JjMVI1d1VIbHpBL3JZcis4b2pFM3BrR2tMU2VIakdFSjZwYldWN01TRGVtTkl2K21LOUUzU0xST2hYeStvL1RHUXFsK3dhM1huMHI4V2VxekV2OUlES1JuYUo5dHRpbU0vU3VOOEFrWWltdXhieGtoRFpGemMxY1lRVVFoYnYzOTRNUTZkaUUrMDJIZnM4Rmhid1l4R2haalVSZkNEMS9KRVdYejNjUWJkYWxieHY2RU8xUG02MmI3RlFmQkJKT2M4UmtTY0oycUQ0WUxuU29pYmpZbkZLRG9Fd2hnMEtka3dNSWp3WFpuZmNtK3RtM0FJakVTOVdqK2RoTldQaEEwd1NodjFrbWtYcWh2WU5GR3ZpWW9lanpIbUZEMDhYQlB0L3Y2bG1UQS9XRjdCMVlJZE9yaGhCT0ovU2ozSWp1b0xVN3p6NWY4SW4xTG16dHRIS3J1UlUwcEpBMVg3Mmx3YXJiUDZCckVyaCthYzVtUGdNRFRGdFpGRnNGK0VyaWRYWTZlMTRWZ2FTN05OcWdhVzN4ZkpkU05yWkpHZWhFVWI3a0Z6RnJ4eXM2eGQrUnNkMjRqZ2toUC9OVDVUSWRZL1dyVXB4OU05NUpBcmllem4yVkd4VzluVTFxNk94aXVZbTFmdTNYeXkvNmJmeVgxNklpOC9jeDFJWU51NWZpUHI5c1N6K2JmWUhwY2pTaDNudEtNeHBvQmk2VDRpQndVV0ZNNHJiTldaR2FHMXJEY2tNQXN2VDdlRjRlTGdtTHk2VUllOFphd0UweDRzdDkrMksxelZmWXpERHk0Mi94TTBudm1pUTI0VGduNlFGUXVDaVZhWE8vbGd6aTU5R2xGbEVlQ1kzY3lQNlA4VVEvSTlPckZpa0ZidWgvSUFmb016TjI0OWRRMXM1QnU2K0l3WkFUQ2tGWXpscE1EYy9qYjhoSG55dG5tQnhDcW53ZTJpZS90TUFtNkJFczVzenNKWDI5bi9ia0w4VmFYNndTZG41cThMWnpvZjlEMFBlYlErYjBZZEpQbk5FOTYrclgxd2xTQzJRbmtUd3c5WXFyb2EzczJ3amtBb2tGV3ZwVnZFU2xEaGdJZGtrTHprVkZldTA5VWY5Qnl2Tkoxd2RIZGtlcGpnU3hwK25rcDRnZXhlclRVU2dqVzYrNDBpb3phbzhRZWM1OEplMDdkMTJrbXplN1Uzd0J3U3A2NFRjU2ozL0ZGWjVlVE1iaDF4cTVvOVVKaFU0alQ4N2hSVFVYN2FVaHN6RiszdFlZZmpGUytrd3JqY2JaeHk5ZnAxOE10UFNaeG1Yd2xvcFFJZGs3aWdIaXpZaVdFTFMvRGEzYjJXM2ZJMTdCT0VmbFIvbXNybFMyNHRiZ3V3TEUrSVl1eGdhUTE3ZXN5QytCd0NVUDh3V3UyaGM1ZlBzNTlHZjJiQW1lOUNockZYRWttSWY0QlBRemJCYUtFU0ZIUzFsN2FYaVM1TGVCd0g0Vk1ZZ3ZWdEYrSXdwbTVmcGU0RC9OZWdzd2YySU1wVVdodUFPM0ZxU3ZKOTcvNS9ES1lDZGczNGhUS29EeXlZRlYwMTJ0Zy9VWTUyeGI3TVZRRXhrbFdBbWIvK2dZaFZ3UkYwcTBVZWJLU1N0VVdadXhzVDFLSXNRaG1KVnBLTGdWR1VyTVFFV2VoOTZpZlJSb1RTQURXdTloREpLYWg4NmoxREV6bFI3ZXRoeTFsaUxuMDNkR2xHeStkT2pCZ1RDdmR0OWxYeDlaSHNYUmh1RVhLTWNFREs2Z3FEZzhTaHFHTFRDa2dPYitDNmhlVEh1dElnRFN1b2RON2phVmhXVVBjaGNkNE01Q1JtMjViQTN5WWZmUFBEcW9oM3NNSWszV2pNNFBTcTZXQm5WNE1DY1dOQ1NDd1JsbGFOSk5CMFVCUUhYaVR1UlNtUElxSEs5WTlMK1RnWWNXemVSd253QzJXN0RYaG5wdDZDVUtGMG5KbXVKbG9tTndEUENJalltS3NmYzMzRnBEemQwaFpML0g0SnhaeWV5NWZPdEIwTEhZYjZTQkxNMXkyekdWcVpYZTV2YnZpNTFMRVhBOXFONDFaUCtFTWR2cjVzdm15Y3ZjRGl3cWVSNnlhQXhGOEFKQ1gyN0xiTW9CMGhlZHJ4bEEzMXpIdHJvc2R3aU5DZFYwdi9LMnFXWHFBR3h3MVFaMnRuUVN3a2I1bFZiTmMxUkJCWWwrRS9lbUoyNEIzRkxxL3ZTb0p4ZUNLYThMRUQxNUEzN3FKNGNrMTJjNzhwaGJYZk9aMFIrOCtsS3lSd3Zpb2d0SmdrWjlVd0VYRGZIK2tsL09KZ0krS0ZNRUhJVDhLenZ2Q3FRNDFBRGcvTWVaRVVka2dPd3FhNjZ6eVZEdnVEWkxDb1RaZk9RTGFMeFRFSnJoaWtkMk43TUpwaE9NMXlzTDB2NVpBRjlYS0dLQjhJaFlXRHhlYmhnaUtXN0t2TUtLbHNhMnpCSndBdTExdjhOeVpPczJHU3ZaQm4yWXM1eC9DWHdlYjVmVVg3ZHo1SkdkRkM4VnR3QlBuTm1IN0Y4S1lOV1orc3lUbVI0eXFKc0ZmYUVPS1ZwdGNHb0R3aDlCSGMvWmJwVmJiUzQyV3NGLysxUUFSb3BjTnhSV3ZJU0pDWGdNUWtKbzI4YUIzdVgydU5RZTdOK1oyd3BtZGtiUy8vc1ZyZlN3Y3FvVVNYQlJHY29nUUpNL3ZqTlBuZUdqU3UyN0huajRFTVY5dWR2N3lySHA3NVQxTDJobkVtMWJRODhOd1AySGN3QWkvTjhkTWpsWXo0amd1RVY1UFRrWkowTG5rSEhERGNScUFEa3lHbEdVTnRQR1B2NGVQT3cxL05oTjZXNVJPSFhPSkc4MGp6STNJaDZNQWpnbWhlMllJSUNrQzJUeE55ODVPWHZ2bEd2REN0d0IwL2thL1AxNTAvZTArRmk2bTczMTQ1Y0pqTHRBVjJBOEJyUlBxZjdUNkxadzRWSHRiTEhwZU1NS0J4V1V6TEdZdFpHRGx4T1JGdVNrcW8zYnBhck1LM0xnL0QxNXpuNDdFR3BqYno4Q0o3TitFMXltYUpJVHBXYTZjeGREbzVSbVplRW45WGlCQ0piUlRoWTd3Y1IxTDg5RStDbmkyT3VJSHBNem5jV1pkRzN2ZVRGOHd3ejVJemNDM1ZuWlByLzZHd3dvbk5kS3lZTURxNTdRWUhhOUJTVHl6WE5QaEg5SjhRamdQcE1JTnRtU0xQTmNiTTdmZGxjdUw2VXdlRDFCUithVC84Ritua2JDQVdzbHBmV1ptbnNzQWlZclFqT2JEZ0JBZkErMU03YnpRbTVrN2VNT0t5M1AyM2hIN0w2OXczNlRYdjhZVmJzQ0lKQjNScHVHTG91Z1FQTmdGZ3hSdm9nc0U2MWpyS3l1dzZ3TUNNc3pkQmNKNVFLRVlDRk1najlvYkhOYmRDU3YyV1FTbVMyb2xQbXFrY0F5Ym9YcEFlUU0yT1U1VXNSL1IycDVqbXNFeGw2djVZc2VDcXhxQ1hwUlhIYTN4OEZQc25HVjFTekp4a2Z3SXh2T1pPNVFxQmVoWTN4TFJHa2dBQ2w5ZXdIZEJsTkFDcGU2dElRTExQMHV2L2tPRjYxY0VFaExQTmNDZmxKalhvWFlxd0dwMTByTld0N1F0WWZ2SUwzUWJuU0ZGWCttczhEaThEcHZURW9mV0FTVTBTTUxvUklNZHhCK1NDaEFPZXBHRDlaNmhYM0FnNFI1eHJBRVVBY0MrYnh4YkxVdlJ2aDRpRTRINC80Z0xIWDk2L0libnVnemNZMlowa1pPK3lidHpSNEoyWnVQMmNZNEV5ejhpUHovRGE1WmRPNkRLaXFCTVp3d3VuMjAyZUZTbkpYcm1CeEc1N1NmY05RV2k5V2owUHBYMFZFenpKTEdaeTFmK2ovMWxUTWIzTjZmZkt0MmZxcG9uQ2dHYnJPZDhFTDNDcysyays2Yk9CelBiYUxEVWxsMUlBVXo4dVFVMlVZUmRVaCtKejdaRUNTUEhkYUpVUzMzMWtYcDBXYS90bjJnMnJyUzBzYnhiam5WTittQ0dkN1FGSDduZXh4VlBBV2swZTU4R1oxU3RiK2daSnZtUXRhak5WZms2cUNoYXowVzlCR3kzVE1jenZVN0pFdW84aG5OTWxWVHNQck5VRmlSeHR3aTVjamJwTjNIenh0N3RQcWt5a2M0d2QzdURiY0p6NWdieUNheGJHME5jVkFWNDNHZXJ4VmVHa2YramllVEI3K3hrZURUMitmTjhCNWhWNjZHKzk5MVNJNkt6V2FZZVRCbmRMc1FCdzVxK1hQZXZZVVZTWG9PS1ZkZG5mR1BteUE1SnZmbEREWEVBcmdFOVdkTFlCaHRQc0FMbWQrbEhZZ3dDQ05ON1NFNUREclJ6eFpOSmU3dW9yNWh3MDNWZWJaeTN6QnlhbmtKRHpOazdtWWxTWkM4UThCRklYV2VaQTdhcWdlVnJETWFjQkdPRElkTXRvZkowYUxLaSt6RjYweCtTMllQQTJCTzMxZ2xoTEZUcmVhdFA2eWhRZWRkeDhPSzlxd0dqOTF0YXJ4cy8zK0c1dmYvdS9PODlEUWpiTjJXYzl3ZWxtbnlqU1g5WFpxcnBhZVZFOUlrY1VLSTl2aFF4cDNOUzM1b2V0TWhTZXdaU1RCSEtXMDZlL0loNE4rMHl3bnBSelBpaEIzVXBrUkNrR0t4azZRVzROOFBrTmhDWGM5L1ZLb0FFTVdYbGI1K2g3eUdRQ1RqV1hXQi8vTVRsTk8weUtKQkhkM2J0YTJvSGR5V1FBU2dvZmo4cVZubzg2akhPaG1BbFhOUWg2VUVJRTVFaW96cGZhUXVacHE0blI5bGRXVlpRSG5oZmU5TXZudGRacjBCQkZITE5lOHdVcWFsV0QwMnRKeWJvRCtXMGlkcStSZHBOZjl1WHduUm5ZcW5PVFF6dC9SbnQybDgrbnhJa2lSSkxHUEpJUDJBZlYzd1J6cE5oaFYxN1NHWWM0NndQSmdRUUhUcDE5L21QYWgxN1JyRUg1VE85S2k3WWVXeUpxWEpvSDVzbWQ5SlJSbzNvcjFYaWNpVzBudk1TTkJORGRHSE0wejFpRFREWUVxV1BHTUxhRXlUL2pFSTZaMEhETEE2bS91SGZOdHdWMHplOFBjRHR6RnFHV2gzdkZTSDdnNlc2dnZIRzY0cHA0c2ZuakZaNktOVVJCLzVjU3B0M1VROHROSVN4cUZSVDhDTkc5OWtKN0tEeU9DcURZZ0hvUm9EQURiNEVZVzJ2bFZwbkVmbnE1aHM4SWQvOHVXOG5CR3dsUjR6RGRzYmNyOTFvVzhrRFBqZG82ZzlrMTVzSkNQT2dVVnJPZ2pPN1pzQllhWFRPUlBJakxkb0hMaXRNeG1kWVVrdDc5RTlGcFBCcjJHdFY2UWZyamdVYkVWR2g5L1RXWTRMSDFPa01GNFhvWGE5L1c5cDRYN2IzZlhwbTc0U3VjWnh3a1hCRFZ4ZzFCWW15U1BVUVVCUVVueTRoYUREZ2xTV0J1SE5IY1MxTTlDaTB0MlQvdkZBejk0Nmg5U2xhTWdPZEJkYUVhYnlLeWxFdXdyQnhsM0FLZ2dOY2tGR0FPZllnRkh0ekdSQ1YvNHdYTGZhNVZMbFlHaVo3K0RZK2ZRaVB4SkRyaytYNHBzQ0VUSm5KQlEvYkJkOWF5ZmhmcVkwWWlXSjRQcWxYaEYzdTBoWWhOR01BN0dvSlBpeXBVaDZlbXlJU3ZBcndGYVk2N01LYldjRWFnN20zMDdaTVR3NzU0UDdMbVZpeXR4bzNCa2J4YVU3NTlDeE5mbFhzRFZGc01zejNndUREZkU4elVLZUdOZDE2Y21RZStsUWl5KzA1R1d5WnM0NStNRS9WRnF0VklYUDExOU14Z1VWZ2NHeEQwaS9vaXVOOUZMbEZ4QzZ5YUJGd3hscFNnY3pORGlPVm0xTmJZMkp3YStBMjBra0lhRXFQNytzM3BPK1cxcGVUTkk4SGhnd1BJYm0xQmRkMXhqZDNqYjRrU0VuN1BDN0ZpUDFvdTRWUnRhQ0g4NHZFQkpoZUdjMlFneEh2SGk2Y0ZRWUxuc3haMGphWitLcHRNaytJMEN3MjFaRjh1VlR1NC94cVNUU2VhU3UxV3Fac2tyWjNMMXFJOXhrZlRYSXlkL1dnbk44cDBLSG10QVltcU04S1U4MTdQckpaeFc0TmNKYXEwSHdwMW5MQnBoNkxKSmtIVlc4MmV0YWM1YUl3dXE4a3kwbFc3cnhlRXlna0xGRFhQenpDcStTT29HMlVRYmlHTGQ1ajVvWEZ3RFBPTnkrKzVDd1RlNGRlb0QzR0Q3ZTVxY0JuMHVhQXJKSTgrR21rYlhscUpMWStHdnN3TkdoQURWdkFlUXRzQ2hXMU1mZ1ZPdzdFUFhWZmhQZ1ZlcllsUUM4QldoZ1NLSElTRjRrM1BKSkYrclYwWnM4WGw5c3dRNS80VnJyUTZJV2JOYnQzeXlUakRpZGVjMGVUTWFyYlVBVi9lSFJKclh0ZjR3LzFPaVd3Ry9lV3FjUlh5b0t6UkFDQWN2RG8rMUZicThXQVFjajk3VXhCTkRHeExZbWo4emxQK2puSHpzMXhkLzMwRVJ1VzNXQ2VLbWZ2aVdmeFBNL3BMa21yb3AxTHhJSWYwZURUV3IxR09JS25KSUN0ZnZkeXYveDZjeS8xQ1A4VXBnMzBERUJSL0FiZWhKZTk1ajkyRFlDaXIxa09XblNNbE5sa3VnTk5KaEZscFpYY2psa2lJeGVGUTlvS0hZY2JMZG9CR3JPUi92Q0dnRlBxT2tTRU1hUmI3ckErOXRoNStlNmo3dmNEaFNkMGpxWDRtU0JKM3B1MWJDeTRMck9TRi9OcnpjU0FNQ2NHWEFMYUVHRHRuR3YwQ1hScEVzQzNub0xES2I3c25xd1BRQUtSclNlemxpYThTNCthaTN4OWlpY1ZibkNyQVBlcXpRVGR2WXZjUStTbVIrQkNwZjlnbFpSV3BzcGg3dUd3SzN6Rm02MmluUS8rcFkrdzRvNlExUThObzdhS0U5bUlDemFUTEFCVWVaQzlGSzdzeGl2dUZyeVArNHBrOE1QUlhqbUxoaVdIZ0JycmxEeVhaOGlRT2lPa0gyeDh3SmJLZWp3Z0pFNzNRU1Rtb05FRUdkaGRoTEdKREtMTWszc0VGdGgwM3Fic1Q3TXFBMVlLUlhHUTkyTmdpRElENWZYaXJiOUpMb2dwSTBqZ0lzRzJxVlhuQ2pGS3g4NHY1NTY3NzJwNXpFMzB0T2U1dTRlZmtRNG9Ja2pOclNQVkU5MmM5cmpjeERvK0NRMnlYakFnWFVDTnBRc2tMNmIreHFhdFdSMDIzYkUvQUFJa0piL2ZKdkYyMXY1bHVwYUo2VUJjeG1qbzl3Z29GZkdJbXFEeGtySTFsQzdZbXNWd3JxOG5VcHo5dVRpdUNQZEV2bys5SEFod0dJRDZDSEdyVW8yUkpERmdwWENwMEpKdXZJcW1qTHdkcnNVWm4rYzFNdVh6WkhQV2Q3SWNMbm94aWFucXk2cGVrSUQwT29TVlIwYWVYcWFnS3N0bmxYczJkQWpHTit6cWhXM3Z6dXNCdnlkSXRkbXE5cUpkbHF3N1JoSDNkb2pSOGtMM3B4Qm1EOVJ4cUMxNFMwaldRRzdGSnEyRFU4OEIwbDFwanJVT2hIZ29NY1llQWQxNkRTMG16NSs4SU45QUdZc25QSm1qRUFDL0RaalZ1YjNMK05RT0FMd1AvK2RBZmFWN1g4UW9hUk83alFDbGVCY0ZZU0hOWjNmRjlja3pSMFpsdy9XNGNXSlRkOW9iMDhjSTlqc3hEV3IyWEVNOVZmUW4xSTBtRkdKa3YzazErM1lLY2U0R2FFM0lmQWJnQmVTSGRtSFJOL0MxZTd4eUVMVGgyeUtyK0t2ZnRDdnBuNng4eEwzaVc0Y3F6OGlsVE9jQ1duQ1NNYjliMWYzdTBGSSt3THd5N2FCL0tlNWk4YUZSQWcxS2NOM0RneXovdS8wNkVrQ0N4aE5INi9oQU5IOUZEbkxuelkyR081RGZQNERxN1pWcHQ0eVEvTm1vL2VmU2Fla3RFdllGbzNGam4wbGVjOUNhMEVnVUVrMkdTclYzd3RnTzlHTGJZY0E5VEdhdVlkT0NpN3VVekg2VlRDZC9NZG51Qm03L0hRMDR5NE9za0l5b0ZpaGE4TFphRDk2SStvYnNtdGtwUWljY3NPT011MWhpczJyZTVXZGM3Ym9uTWxOeGJtRTZmQ1lLR3M4cFJyWjk2TTVOOW1VMTJSSXpWMzdYY1hZNmxtNzE3a0dyVnZ0QnRwRU9GSERvekg5TkxMa2wzMlBDK0I4K3F3NkdBOHdjdjNybkh1bTRobE5WUzZ5dXVxc0xVa2V6UlFkR0RUZU9taFljMWxHMFhiMTR0aUdVK2V3WUYzOUJ1dGFabnBhR05EWTA4REx1VmJEcEx6YkdDeUtWK1JnaGVuejcyZWI4QURyZFlqQUFKL0ttako2TWRkU3hYcXI0UEtlZTdtbkhhdDgzdFRkTGJYVnRsRXhUNzh0Ny9iQ2RMZWtkem9FcHBCUENsWERub0ErdHJtTVFTejVKbk1EclBtRmswaStZeDNZZ0dkTXRqcjNFMHYyWlBQcHdiRGZZMTJYZWdJYjdPYWp4VjV6NjVXOHpxY0FKMG8wYXZwQm54UGZ0Tkk1UHltOFJsNVlrcFcxMkFrTVoxMnA3Yk50c0diaFBCSWJGeElMa2M5N2M5YUxNTzJLYnJWWjJyb3cxYmxHaHR2VkxqUk9ibFhNZHVhcDJtRndIU0Rxck4xQUhZbjltSW9HZ0lnVkpOYWVaWUFBQVZpQzVBczAxN0ZhcFI0WjdTRFdud21ld1pjL3plSHZuRVEvUHpCZ2VzT0o5Vk9aTElVZm85bWo1TGlLa25oeGdJc3hjZHhIRUp5S0dlSC9jeUQ4R2tIaVJINWJ5V2RraEl0bUVxcUpvZ1NzNklzZURTaXpsMEhwTElMaVdwaGhMTjBQdStCV1FvZXR5OHRsNWVlUHRhS3hSQi96aFJkbzhwdXYrT21EQkpqRWlqYnVlbXdvdDJlSjV2V011alJheGYvbTR3cFp4K2E5czNNV3hrSHc0aHRHeDF1WDh6OEhHRWJpMEZmN2V6SVNHZjlhVUtjMDduQlRxL0R5NmRnRVNxZTBrYnNocVNrV2kvT01jMmg4YUUybWFyK2NtSVB4V1FMbzhXajdQTlpUOU1ndUlDSGdFaWtmRnFyUTMvbDNCeG55NFlheGV2TWlFcHorTmR5Z2NPNzhNd2JJby9kc2c3MHQrZzQxRzlwRVhZSkxXa3cvRHhaR0E2OGFsTWU1NlRhUEhUTlNBR2Yzc3Q4dDlnZzVrNFp3cVg2SFdWbit3RFFBZkF1REVJa25JcWdRWmtFN0I0VVNFdWc4QTNTdVlhYnkrQ1dud295YXBxWUg2aDhVMTZRL3FnbThOOVVNQ3NMSlpQWWtTazJhZGhRbjRITnM1U3pKenljdjZ0RWNyRnkvVkc0VU1OZGZmRkN4TUNRd1JGRDZBM1RyWURFQzk1elRZYmlySXVjYzZ4SlFqSjFMekdjeVEvTGMwdFlGSXY2T2V3NWxoRlQvR3pxOHhZbDVsTWFidXJrdzdsaFMvTVUyOS9tTUIraTE4L0tPQkIxYUtRN1d5Um9tTUxqMUtQcnhVTDZJTm1RSXF6R0EyZDNVM1Z3Z0l4eCsxZDNUMm5EZy9MUW1QbzBqL2VxREJUVlhoUDFET08zY2NKaWFaSTdsMVdqTytEOHI0Vll1WWRLK3Q1cVF1c1ZEcEhnTFdBWUlrenNKaXFaTG5zUUhoN2RaT1I0ek9ZUDZXQ0xwVTI1NVdMTVIybmdFcElnNWwxT0hRczJWNGlNRS9BdmZ2eEcyN3Y0ZmdUYnkyRnUvbVA5R2puT3NhUUhIYUxFajIrM01UM0dqQ3dyY2pBTEpWbUVUaVRhQzBRak0rOWc1dHlPdUFDb3dEQlhXeFlVd1lqRVVheThtVlAyN3N1eGdFemk3Q1B1RytrQUpGQjZJZ1A5RlFjOVc5WC82ZGQ3VWE0b2FSMTV6MVQ2VXpRTmxLOTFZUW1laVF1cmo3RWx6WXJtclhXK0p1UW5ITW9zWXFCYmtmTTc0bTl4OTllMGhjRW9SSzlybWMzUW02amh5bkNqUG90ZU4rVlBZTmdBOFA2cS9xeE9CcElxUnBmNGtLYUVrTWMrbVQwcFdYekZDMVlDcS9BOEFublJFL1JSV3l5V2xObWV5OFNUSHpwaDlWWTM5Z3ZkdEFlL3N4T2RGNHJzNzA2Z0cvdHVUcVNXQXkyWmNrOWd6Q0draWpGY2ttcEtTUHdVRWtyZ2RKQjdUWmZ4L3pjZFYxM0x0RmNEaFZYaE9DSFlGU2VuUXZOQ2pwUzEvSlBzUU53TkdpUFE4SEFsbnpSNTJ6aTQrZW0wZzg2ellIb2R0UlJnUWR5RzBtZHpadTRBemtXcVc1R2h1SEFMc3V6TDdPQ2M3VGNuL1UrT3FnVjlMOWVBbWVQK25LWjhsMFhGSmU5L0pXVTNpOTA4ajdpOWQvV2N0eG5VTFlBdmNJd3ZQWmFLcHp1dTdsTnhoMi8xRFVCZFFUSk9qQ3VPMXZwWHBIY1NBVi9INkFSM1VjN0ZBdnFQakhNa1R3SHJOMm4vS3JDMDVTeGp3L3VlKzJBdkxjNlk2U0xVN1lQc1Z2RUdLWlJjYVRBT0s0blpBSnBxem9KZTFZdms3cnZDRXZMQ1BFdWJ3Ky9kdkxGbzBmMFk4UjkwMmxQRXk3TFBRRHBZM1ZYc3ZFZmp4ZWJVYllEMlVXb0NQTUhEdGhua2Ixd3UzeitGSjA1cWpzdE1pemFXa0JNN0YvaFNhMndiQm43NFlZM1pvY2xCTW94RHdVSVd5ZDFJQUNvQ0Z3b1ZmL2N1SmFMNDFIM2tJT1dFZ241aVJzNnBmaDBPSW83ZWFrNmljSU9BNGdBaDVRd2dZT1lIMkZMaDFEQWZVa2xOQnEvMmc1cGFHNnZuOUxwYThQdVE5TFFrNFhha0dtWVppTFVCaENVWlhJR21ZWjF1ZHJxdnF4bCs3a01VUzZaVTVkUmJZeU4zaU9LdDR5SkhDa1JzRDFCYlZOb2xDVFdPVTM1bHd1TWNySTZkRUlkR25PZS9lcGNqNHZlc3cwTVltSngydDhmOW1HeUVDNVRHWGVFSEJMeEo2RjNSL21IWDNEQ3drS3dQS3VsVEs5OG5uV1ZpNlZNd2pyTVlyTDhFSWUvWmE0TUlrOEpWZFZwdTRLbFlWdGxiQWNtUVFhN1lIQmlISnl3MWp4Unp6N2JlUWl3OG0xYU1sUGN1bE9WTHd6TmYxNVBrMUZrTU15b21TakRFbW5vbHovSEpzYjJpWW4zeDN3dHQ5OGo1ZEZqaVBEeEZZWnQxeXlDYWZ4d09GT3V5OUJ0NVd5SWhacXVEVlYycndzNFZtMnRBQ2V5dStZM2xxbmtHdFdXckdiUjJmUytUa1NLK3JYakhYc2hNYlBFc3hxWkNpeVk2QVBhTlJUU3JvTFZVRWlzNExBWkxiTUdVbmF0bzB0MVliVGxmbkNXMHFIVTdFZXR3em92OVhoMWczV1JCUDJOdWJpZ29NYXlNd3RIZmU1d3RwMW9hbzFCak9xeXdDYWwrMk50a3Rja0V6dGR0VFdwV1p2dUhwZ0xlNkxoQ0tTMUxjTXlGZmFOS2tVOUJxVXk5TXNvQmVwVU8zUktHajJoT2l6Q2RlKzVvRzVHNlJkWnRSRUh3TmxFa3Zlc1pTR0ZtZHNRTHFyNit5clpDWDI4cGNnNkxBVXhZN1IvT0FqUW9mMXk4aU8rVXpIcVRGcHBob09yMVNtSzUyNHY0Y1NZa3FMUTY4RlFVMmZSMDlvcDhueXJVMk54OVJRTmtSZmdUWm1kZXdYTm5iWFF5V29KMnkxdzFDWnZhczZFdFppMnhMUUJERDRHZXV3TG1SRXBsNWhNNzF5c1ZoeGdQSFM5RDQ5cmJ0UFc4cHJiMFNmQW9sZmlxTncwYllqRFBjbE84Uk5oMU5Kd0lTSFBkZmFLRXVaU2tWUFFJUlROSjJZTlR0VTBSRVdmZkFwdFpIaWhXdDF0c1ZDQkVQTFR0Lzc3Yy9JaUNVeDBFVUU5eTkwUXJUbU5ZeWlmZTlzR1VmT2RIME5PelN3dTREL2F3cG5rTjRmZHN1L1VkWnlYK1ZyWlBkYitRTUFhcTBQekF5Tjhwd0JiM09GR3hjSWtjd1RPb2RhMTBXUTlNa2RwWkdzZFB5ZlUzQ1g0cGROS0xWeUNHYXRnam05OFhLa0xQOVFpbVZGc3RzcVdPV2ZQYXFlQTY4UjhHKzBYMWtOd0RpNm53dlQvdGVGcFRYTTZLMS9aQ0U0Um91TXE5bjM2YXJIZldoaGlzdm1tTU81b0NxOGJXZllBQ2lkaUszTGR5eEpRVXg2Z05UTlhFOVlxNS95Ylk0d0RIL3JYKy9iRlJiVk4zS0NRc285Q3VXRFNObTVLd1VFb2padXk0b1AxMVY5RzhpdWJTNGRSbVZVVVdhck40aCszK3Rjb0lYamZtUTBBWmx4ODhqM3RGQ1lsN0wwZlNRQ3NHdFpHMDNMVVpJWlgvcXpVL2d4M3pTakliSDh5ak84ZkRSbE9iMEZTUm5kcnRkcnpkY3o0aElVY1NHMnFQZ0RnbXVLa2tVL2V2cFhyempaTVNBdy9Rcm9pUjI2azVNcml3U1BCY3c0Rmd2T2JjL042L25vRlhScS80WGtyMEcycHpoa3h0U010dHRjY3JNRFRhUFIvQmF3MExZalV1NGtibDR3d21tZkxtTklMbGxPd1dRVUZUbmdjcTFFa2RoVGdYT05TakNNcWtpRG52N1R1UUIyUkpUY254NW1MdmpORHNRNXF1NkpiRElWMy9mcGE4WG1iY09CRmx2UCtOUU9vbDRaK0FrQnVReTRWY2RaNEV4VFNQMHR3MmVscExkZ3FhR1haNndIem8xZHFwK21mYktsdGQwT1dqZDl3Mis1MkFhc1dVR2UxeXVVM2lvL2VHYkJBdjAwYkJjemRlM1JsMytuZEFOSkRvVU5tQU9sbE1GTTlnYkZtUjFJOHZiMWRYUFBGNUNZUXREYU9jd3JieTUvV0IvOGx0SmJ0Vno5YWJ3TmpWTHVvZ01oN2xqZ1p5ZWlPTEM4c2RmdU9lbXh4V2ZNaDRRUzBPeE1ZSFAzc202bHZMMmoxQUg2OEdRUUNyUXdDckp1TmFIckl2eGdQZmdWSWlNOE9HcWlRcHZLdEUzUWlxMGhaMjM1K0s5b1hOVzN0RkFNdTdhM092QXc2V1ZsOXNiVnYzMkxhMjBsQXFYcEtlU2FlQjZnNDZZYVZHd1g5OGdveCtsR284Sm5oRi9nbCtHcG55b21aTGQvM28yL1RmMnVCN2FMa3o5RkZtVzQzM1B2TDRvUVB4TlhxU0g2N25IejF6MkZmVVROTktWeW4xZVMraDEvT05wTDZSU2NaRlA1SjNjcFNGL2pnRzJ6TmdhS0dva0F2WXNpY2xSNzJFVlhyalE5UjdpeTB1N1FZeHdkMzBIcEU1Ui84Mlpkc1FDZ09DcHA5amFRLytia3p0dHBFWDZmVkFJTGpyV1A3U2w2ODRaVm1YVlFVMlN3cXplTVV4d3h3SGkyUWY2S3BxeU1HQWU2VlVKZ2xiS1NFclhYVWxkTVZEL0tZdjV4QkNtWVJPYXNnRy9oVzFmN3MxZHFPT0swWVhwZlkwY1ovd0FMOGFFK0V5WnF4V291MTBrdHE1djhQbUsvNDRpS3RnalRIOXZHa0hKQnN6czR1dmJ1WmpuNDEvSHF1am8wRDJnMGIveFFaM0d3RnZCeUdBcDBtNjlWYVZ1Mkl6RlpFR2hCcnBGQlhEMFRnaXpXczRUd2tLUFBLbENaRnpyUHVQMXR0MVdxTzdXdTEwYXJ0NUgwcGdiRW9YUXNLMTdWM2xuQUhDUWpraDlYV3dVbllHeXFsQjJ4TUUwNjM1dmZYTWF0RGlzYWdSU0s1dkZZT251Y0RLbGp0MVZseUhrQTloaGxqVjc1V0UvbnovR3lyWDBZUFV6TjhJSnF3dzEyN2RRV2NZUVNXd2gxd3U1VTlmTk9qMkVGQkYzVzUvaUErUFoyR0VJeUxCU1lMdHlrd01CSEpzbjNwS0hsT1VKM1F4K2lXR1A0WGdTV2xyOGpxYU1FY3Y2NitBVVZkL3VndmtPbWxDR3laMktVOTZ1T0xmb0JsT2haeHVya3RTMXRhWkxxLzNSSXJsemcvMmN6U0s1alQ5QjFqdGI3TFQvMGlBQTUvUS9ZbEE4d0s5OE0wQVl4ZmFDYzlKZFBvMWh5UnUweFAwaXRzSEhLWTNHaEdmVUovdzZKME55RHZnbXFTN0ZITDN0ZEY1eUU1dHNQeGVTK1A4eklBU2NvdEJZM2NkTjdKY2VVMjhZV1RFNWtiakR1TVRGNmtvS1BIcmEwQVBQeUNFSU9Ea1RodGljSUoyaVhObU1BOWJDMDVySGMyeXd1eVdmd1drbUMyKzY2a0RZNy9pRlpodW5ySCtqUW55MVpRY3oxSjNoOEppMWx1bENBTHVVOWVmM3RTL3R1TDFqZXd0TWpZeVBBaDlJc1d6NUxoRG9xRGxsbXNYdEZGQlJtUG9vbXNsVUM2aHcxTUdJUTc3NGxTM1I3akZZS1RhOW5vczIwaEdCV3ZnazNEY0xCNkRYMklNVml1QXpYVVpEKzZ6UkJ6RlVjT1F6NXdHWWhOZlU1VE9FbTFYeTZGL1RFVzNBYktLZHdJS3l6ZlhENWNnVTdyMWhCZExYa1RjWGgzYVFYNGhWYnprbjh4U2l0UjFNemFvR0JSVzJFeHRxc2NXNkx6VStzOXdjM2dYZFdnSTRyaExpMHpicmR4UkkyN3ArVFpRSkJWQzZEVUZyZnorUjRvNlhkcGZudkNjRkQ0L2RJRWQ0UWoyR21Ia2JFdmJ3VFBjZzRWek9Saldkd01GajQ1VWVzRDcvdEtsSEcxV0ZTMGNxVXdwbVR6WVFFRklLUUMrMXQ4S0Nqb0ovdTg1ZGlrNTlhbnN6dkxtZFBnWVMydSszM1ZBT3pERGZCTE51MlB2MjJ3N01KaHJHRXRQeWt0Y2lzYTFrWW1zaEZOSE1LZ2ZoTkZYMUZGRWdPUXZnTWNleEpraUpTNmNIN1p2bFRSZW5lK2gyNTNvb0gwNFMyM1FKR2ZPMzdlSGg2NnlFbXJjQlZSKzN1dWFTYVB6ZVRYcGFIOTBlcFM1QUU4UlRlcnpDQ0hoTDFNVEJLaWdtb3Y1T2s3NVRlY0tnV3o4NVpBSU9LQmd0Zk9uRGFvVC9VVTlUNXFldWRnYU01STR2QzA2TkVZdUI2RDV4dm9FRE5OSHY3UTRRKzhESEpvL08wSStZbkEraFhtd09SYlRXL0FjUkRLNG92VXRHMDhaNWNsQm1yQVJ0QnJhd2dzSlVXdkEvSFpQR2cwb0JHOFVTR0JoSVZQODNTMHQ3aExDV3UyUExDMkMvSGRmNjVsU2trRlZMU295WWlGVDg4VlEvb2lGZVlzWUdFVFVBSlJIYS95d2tHOWZMb0p4UkhadXZGbDBLZy9mWmhCZkdKYTI0N0JEMmdYS28wTlN3T1B0QWdqUjRQVjRKQkc2UmpuVHZZUkx6SWx0RkFyUGQvOWo5OUhuNU0raUhwTjJjVlRVS0hReXljVUpURTNrYlJqK3FkLy9Fa25ZREJrbi91RXQ3MDZPaWlCTE5oWThJTWgzOUpnODlzVjJENG9pdkRsYTYxRENJTHFTZG5aNmZZSFVJSWNZRk9uSHRQY1huZEhFZVd4ZXgrd2NreWlLUHRWVEVTNFFxa3JZcTRLV0t1T1piVExFRTFUWk9YQmhwTzdMU0l1dTl4emFlN1dWSjI0WlIzTEtkOW5qcmdDaC9pbkl5eFVCL0d4NitPV1B6eGttUHhkWkZhUGovSDVBRytNRFRRT1hrUVhRTE5ITWJrc28rWDBKRURnM1F1T2JNWFIyS3pYdjJIYUJMMlNiNU9YMXhnYnhuMVpCdEVVUDZlZm5SZTBuaGQ3SHNjMDcxaXFzM2hWem93dFBlMUJ5N09zd1JnOWRuL3h5V1BkcmQyeWpuWmFTUWgxeWNMNkRzcno0RFhCdEpxS2NwWU5HcW55SzZjZmc1U21LVVg2QlhkMTFFcmlnR2ZIU0JoUms1Wkw4ZVZERFFvVHF1MHdnUDFMenVCbHlxTk1VUWpOV3FjOCtUMnNLVHJxeU9RbVkrdDNpSHhnaWJWZGZPVXdONldNbDV2MFVBVWhZM0xJMWxwdHFhU1hpTnJmU1kxQkw5YXkvaHJBYVNUbmdkSFVCWnVqK1JEWjUyakRxT2hTNUFhSVdqakVRdjQrNTU5WWxDNlRGSS9wT2hid0tZWi82Sk51aURFb1d5dHhHTTAzL0lodGI2NUx0UVplejIzZkdob2FWbGg4bS9EQitaVm5DMmxRaCtxWjdTVlZJMENManM2ZTdPQk9PdUZhblZGRWVYWTc0NXdQOXU4UUxMbXZVVXZBY1NMUVF4WFZSeUQvUFJ0TlFRbHRiRkRjZkZpaXNYS3poVVMraloyMS9JaFBOSkhDRElzWmlteGNQVER1YnR5YzFNc015aEU2MzhsaHM5am44L0N6V1dtWTYxUnVNTmcrVU0rNkpoQU5BQzVqOVdQZi8yWVhDSHBQTHc0N29MdzlSckIvYTRiVCtqMDdvNEdlREExV1pZV0VhVzlvZ2t4dkV1NTdHd3E1bk4zMlVXZ2lWKzVSOXBhd0tZNDRjT3RQQXBzUVJ3dTU3Wlo1YTJjUzRESjR6M2pNUWFqZTZueXJWZGFrZWJYYXdFUldBemRzaDY0T29jbGRTVzFRYjlYV2tmT21XZzBaZStlaEpzL3I1SnRGQUZhNEx6NTVJT3JFTC9jYjg3ZWdqc0g5Ym5DMWhrVDg2TE5VNVQ2elNlTWxWbkpZNUgydDd2YUNuK3ZZaGdGSUQyUzFlVi9uWE1XazBCUWtXcm4wQWdlejJIcFkvSXFETnpJc3dkSjhkaGoxZGtuMmZDeHRwTkc4YnpmbUNyMlFwRW9QbEgyK1A2b01Ob25Fa1JFQUEzdG1wQ1dzWW0rZnpaUjI0UjB4cVo4MXFRR2FMeHlhdmwrWXRGcEl1RC8xYmZjeWNGR2FBaTRocTRtTldkWDBFZ0VuTGJxVjVNM1ZDc2JLd1p5MDlYalk1cUpSU1I2REFJWElQR1pXbDJxaWhSU0tBejJNWk9QS3pSditlRE0ydWUySmlMamhiM1BiUkZvZlRlb3EyZTYrM2FNZi9pSnJSdW5lbCtlTUQra1NhMnZGV0V5U0EwUXVSZDkrZkJQdFFVMWcyamJuKzl4ZEVOZ2swdnlkUnBVV2VMTHJZSjljTmNGellGYnBBelFTV0xnR1JxMEhJcnJjLzRUaXR4K0hrN1pyTnR5Q2hVSkVnakRJNG02WGJjSFZCTVVNd08wMUxiVHkzb3poaW1oQVc4V1NOOS9ETHFoY3UxS3VWYkdza1pGMkd0cDMvRWU5T0YyeUIycTVsL3gveVJrcnpnVllMZnRvbVkvNUZyZkh5Z3NhT2tMRE1KdHE0NE8xUG9QNEFDdWI5bWZVOHdnbHNJYzdHcWxuNW5EQ256L0ZScUdlSGUrbE00QmlMZ2VEVUNxNXVvSC9XYlRtL0xSQld4L2I5QmhoSDJ3bk84ODUwTlp0NGhNeHRJeGl4b0FQVkF5RFJKZU1YUU50WlVXVVJ5RDRDVjh1bFpoaUdYemVYZGpqbE5EQjNaS2hEZGptUGZKdCs2dndKVXN6MHhxS3kzc0NhQUtnQ3BMQWgzNldleTJwY2FLcEVhR2hHaG94WlFRbiswd1JhTFpnQzRPY0E5WnRERlZSZWZXcHNLWWdmOG1WaXNvRVlvV01jcVFzMmxYUmd5RFVoRGVDSXdzRjNQR0NHbWFwRGJmVW9JRkV5NGI0UUU5dWlRaHAybThVR1o1ZkZrblFWNk9WSU55L3JBcHVYcWJUUFZ1dDBoa2tJVXFHUG1ad2Z6YTBXQ1FzYndJTUUwc2VrMEt6Q01TMStqYjZrekZFd3l1YjhzcnA5aW51Y1luemJpYVJML0JXZTJFczROMmdkdVpRVW1SLzlJdGJZOVozamwvc0EvK0NjWGZpRnNGMmtLeGxzTzlsWDMyWC84VDFmTllINGRRV3VCbFI4MFlxdjkvdTFBRU4vZnRiaW5pZm52a1dVby82WTF0dDBaVFd5UG5jVkx2OE9rZkNkVlFTMU1vMHBydDdRYlNqOUVIRUdWb0grU3JiSmZyU0NGRkc2eDdhZ05ZeU1zdjg4Q09GeWVKUlczQ3liSU95VTBpSTJ3UlJzV0RwZnFoWWlvek9BdjBIdzlWNlNUTllFcWlyREhKZlhEalh1WklWQXh4ZHlOK1NvL1A3Wk5VV0hkcUlFQ0xHQTdUSTR6Y1ZYM1A4R2lKUjByanJLczhyMy91cm9nMlB1QWRaZnZGVmxyT1FRUE5xa3Z4UzJhSkh2U0U3TDJVVEtjaFRrWVZQOFNicVFvWGpmMzV0MnZOb2hkOXRxZTc5c0RHK08yS3pNcE1ZL1diZUt1SlY4ZHo0bjIyTmNhNGs1dnFwcXh1SmZBVWNJZjdhZUd2YUI3dUNCRElCQWlWcjBBOVhtbUxaTWpKbmhid1Qxb3ZIbEVsSjFaUTNacEp0TlFiTmprd1hIV3NvMndRbmp1TklpTStZUmRJOVhrcW5iaVlCL1ZzUjZhUlBpaUlSLzdvV1pTU0NZRm4wMVVVYW5XbHhxRFlRUTZYbVlEZjl6UXJKUWFiUThSTjkvcWlHUzlkVFNtYndUQzk1QVErWDk5RkJ1NksxVmIyQ3NnT0Nad2ZXVnQzU0p1cGsvdHVsMkpNclBhTFhGa0ZiOGVQSGlWYW9GZVZMakhESTVBTENJTU9ZdDVpUU8rblFmWXNobDhqcUJoa2EzYU9VSzNmNklwYy9UcUZEV3BPUC91WE0yRTk3dnNzYzdsUHhtaEt5cFk4TG1pdU1sQjl6cVlFQVF5N1pFN25Cc1VabWJUcnQ1aS9xSmtCc2dCajVpcmM2WTU0KzVXTlBZWDIrR2k3YjFrRTV3MHBHM3E2OW9UcXhSUUZQVTRKRXhtTGxvYlhHdnJNNkp1cUFyQWVIRVFzdUhmYzFPSXg3ZlcrZUJXR1o3N3IyeWZyZ2VCUW5RbGNtNHhoa25GUVhKbzJ0c1dNVTRXNVZtNzF0VHZWalFLVTNFZWtNTUJqYlk2MVo4WkIvRDFJeWFWRGlFQzN1V3dYRkErckZIMHlpY2d0ZWhkRTZGOXRLRVBiQVhJdlc0WjJpTFlFczN3QXNPYlpaMHNPRTlienduUnhZdUpYNnVldFpnVitjUDZ4bUMvTlByS1NqN0prS05Ud2tVanJQa25oQ3FaSWh2YVBuMm9SK0hXNnFoSTd0ZzhaOEhpenBYTTFocGRWUG9INXRDMzhmQi9MZFdvaGphUGN5ODNHYXg2cnZRRUN0TU5LeFNZOVlqWG82WnBKZnpYbXRHaXhHdUxtT2Y5dG1RQ2REejJZZlNlbVhGcW85c1dCTnJhN0N4cHR4Tis4dWh3Y1F5ZFVIMmNWenN2NXNFa2RJRDlCb2d3Z3J1NjdIN3BWV3o1ZjVVY1kxdWJYVWphbWE2dFcxbWNEMzNCNmZ6N1NlTkhoMXRhenkvUDV2aCsvWnhUcHZSSjBrM0RtT3pweklXOGdzbnY2YzBpODRVVjBVamZsOUZJdWhucTlJTS9VMEx0Wm1Sa0JrOUJJSm5zanRXWllHRzU4TWhZbHNDYnZVaTZBTVptOERnZE9icVk3d0hianJXeVNidjBqaU9PVlNSbkxjMVFrOWhrbENWWElpcTVjYVNsL0IzZ3VBNHQzMjJyMHZsb0NEc0dZUmtnUDRWTW1kL1JZWHZLYWhuRi9FN1hya2EwVzlVUWdKdmVKSDVxY05XSnZ6Yk9sNnMyeTByQUJtVHQwZG9yUmJIWWMxTlRHa29yN2RLSk52RHlIVzNGekw4eTJ4M21lNTVvMWZWUjlJb2V0Zjg0YzR0UWMzalFrSHJ3Q1JlVTF1L1NzTU5raXI2NzJuTzdtVGVwb1Q3NEtMRXFxRStDempUS2s3a09yMTFUU3BuY1daVkROOERnTzZmYy9rZWJHb0dTZnUxMzFONzRGdUlZZFdWV3hHNkVGSjJmTGhLdk9yQmdhaS9leWRIZzFaRngzWitDUjJQNTN6S0dkQUloYSttYWxIdllRc3ZWS2Z0QjB5NDdFUjU1UmV3ckp6TElrZ0pEUlFSV1NPRDJJVEZaU29vdE4vNldZY002NjFBeUhEdTB6WEllQ2V1RGVNd2NnVXBGNmZMZ0ZBRGNOaEh4MW1qOHdrbUZSVnYvRms3YmtZMzVrc25iMk42Z044QmozdmhEM0c3ZVFQZks3eER5SzN6RFVlbjgzdTJLSzBpRUNzbzhiOGtMOFJGWE0ySTBRTmwzdDZWZjFqWkRqUkFWd2xpY0p6am5XOWVrREl6YlVrVk1LNlRBY2xsNm91WFJ5bWIwZk5CdGMwMHh1bzJNZ2wwQkhwcTNONmFiVE5CMWhiMnlveGt6MThORWVkcUFpUkd5bGhMdklVWU9nQkgyUVpkdE5LM0dsRUx2dlhiaUVlMGlZb2dBNHI2ZC9MV2VCWXZsdjZZR01GTXQxb2tub1BlMHkxdDRZRkdsTjNCanpsTlhsd1pMWUpqVU9SQ3dpNmFSRWh2SUpWWG84dkdPUnM1VU0xdUJlWHZXcktJWHRZU0lsdExzNWRSWHFPSVRxRXlDV1BORTBkQ3ozQ2hRTnVrdU5nUXoySlNkZlVvWGRwVCtTRGRzOGozanZVd1hQNlJncjlobEtqSVo5bWcycHpjUHEzWXpWY3pTUk4vWTZyQUdKQWtOZTk0N1pRdFl1WHlKNWFBTW43Q0o1ZFNtZGtJMmh3K2JpbXA5ZktxbTlGSzRsUzZKU0xkNGZrSXBXdktjMVd6eWNvK0JqbVdzK0Y1ZitJWFhZUExUZGRhT2dCUXJoRzRrY0N5Q2lYNkJpMXZ0TmJqNXluQVYyb05uK2FhMjFJODZoMHU2S3R4SitsWmJEd0g0ckROZldZQnlabHE2MUR5T2t5RzVtbW9uZllYTXBNNWNMcXRFNWI1NFJTa0ZnWFhXYkE1WDI2QnRYZTc4TFp2UVFVRWNCYXRreWdTQ1BjVE1CNVhpMjBQbkdMS08xRlE2WWk2VEl2RkMxdnVUZnZvQWpUNTRUVUZBMktxOGhvOHBUNWh1TlFqZjRmZXRqYnVHR1lzUW4zRjF6OGkycGtEUXRjaEREdWU5WG1sU2ZwcE5vNW05ZEQwRUNzMytPUk9oTUpyS1F6aFo4QzZNdlBldkpTb0xGdDVHV05TdVd6NnBTMDZuZ1FGMVZ6T25mTDZMNXVKUm5mcFM2eXhEVFlWL1NzTDNyNFUyWVRrS3RhUWlrODlTaHlybjRSTTI3enlLTi82RkJrSFp1RnF1Z2MybnUxTS9qamlhdlBUY3ZNWjRaam9tWEhPSEpiQWhOK0p4Sm9IUXdGWXJIaGxlaFM5WVVZL2dkbnJkdjhKemF0MW5Fb3hvaHhLbDV4cHErQURCR3hmSy9CQjBCRk5ITHZHaWw3eU1KcmVFak45cVZwU0JteWllaWd5MllMa0lmV0hnSmlybGE3YXZpWGpxUWVhUFJRcVJ3ZnJKOU5mMndZVGVQbGpXYTBueEkxblNFY3dSK1VkekloT2VvcytMbnBKQWNhLzJpQWVqck40R0NSYk5Yb3E2SU9pLzNKamJQY3orNGYyWUlWbll0WTBpKzVBcCtBWG9QWCtEZWtHcjV3ZkFsT2c3UHRLZ3NldENzR1hZOVVXVWNsL29UKzBITjcwTlZwU1FEY0RQa0d5aDdoYWNZTEthM01SOWU2NVZRUWQ5V2VBWndpNzdLQk1SWGYyU01zVkR2WU84QjdNcnhZV3BOOGs4N094ekhrdzd6QW5wM3ZCOUt3YXR3dUJYU0xCTWk4aUtLem85ZzUvRFZwbEIwSml6d2o5TWhMREJJSmxjQzJoVXJMNFl1RlpNU2tqVnVmKzFVZ0MyZjBGV3R2Y3NVU2hObkZFQS96ZURWZnNzZ0ZsTVFxekgzbEsrU0NHMGZrWG14YkJac1BUVHVhcWJwN1BGTWQwZUpKU2t1YThna1dsZW5wdkdqT1VEVGsvbURUUTRQRXprd3BRZzY0ZUZoYXlDNTVJK0R2cnAxTTF1RXFsNUtvZU5hTnA3aHE3WHNYU044RTIyTm5aRkNYVDM0WDIxMGtkYjJpZm5oNkcrYlNjd3ZXeXZTUHorUzFSRmxUOXZLSXJmRVVhOVdNajZMOTNXR0p2TnpqeEVQbFVEb1J5d0pBaCtzK2kvUlMzT1ZHWU9qcDdZQkJkN2ZJSUpSdENaQk1XWGc3aEZ3S0FMNEZhYjZnaFZRWkxqYVEyTEo3ckJKem53VE5qRE1BY3BNS2lLekdNSmlhNHBscGZzeWxBOFBBeDlLMkQ5VEdQa1RLL05JN3JuakpwYm1xbEdWTVIreWhCaE5Sd0IwSkxWVExEYlA5Q09aMStEVVprRmhCd0E5NHZDMDZIWlQ1cTZ6bTcrQjVRbElQQ3R3QWMyRTl0WW5CVlFtbWxnRlIzdzVjSlhwZXhEZ2hoSDV2NXFzL2o3ZURBck0yODBKb2ZXUmlTcGxqK3o3Z0UrNTZSTDhMeWhVZ2N2WHVyb3R1ZmVqUkExSjlCaldTUi9oSTdHUzE2T3J1SWhmZkVjb3BndnNDSGlpc3ZVWUcxakxqek53MEs5Y3hMaitKeGZmeDBSWEx0TnpsNmh5bUFhN29TeEtXeDFReTFzRFVoakluNXRCZllsb003dkRXWXpMS2lQNzMwdWVqZS9SSkdjSi8vRk5lbHhERjJ1cFEwOE90b3BBQ3kvMExqLzE5eSs4bFJrdWZld3NoR2pkaWdyQmhWL1ZtVWJvWDhTdE04NCs0K2tTSmJZY3BPM2JWSHl5SHQzWG9nZ2NHcWdUOXVJdkhtOVFWTUhtQVpQWjJjaEliSGlqQnQxdWlxS0g4MnBSUzV1ZFlHL0M1ZXlKaS95NmY0emhGL2lyalZaMC9OLzYwLzhZUTV6YWcwK2x4QkxINU9HQ0xjVTRHcFpvcFJDSVoxTUJWdXR6bzJZYi8yWHRyOGk0dWJMOExuUnpTVndWOEtacDZBU0FBbFdiS1JYckxDK3AzMlRieTU4bnpScFhOb1hKOTVUVmYxaUxkdXJyN0NmVm5wdXQxUVZOWTFrV3pRMGg0ZDE5b0UxVHJsQ25NRG43dkJCdnhsTXFqZ1dkNUxKdjdjT2daOS9TY0E1VGYyMVkzaktKWTJKYzg3emYwT0ZCNW96RFdnNTdCelMwTjh4TXpKdGtBbGVyazhZaG1zdGxRSFFTdUtyVzZnZ0dBS0wwVElWMXhDczl4QjI1UmN2aGlENFhmenhSRTNlTXZZdWRxWHQ5T2poTC82Tmt1RTU4eVRpaExiZGFZK1ptZmR0WU9nRDJIYm1hOFZ5ZWg1SnVvNXg3VUl5dnpVR0VlVFFRZVF3MEVwVkVYQlg4QTM3eitCbVQ4KzRYWGdScU9LbDgwbjhiZS9RKytSbmlOeWpqSzkrajV2emZ6M3hPOW0yakRCZDgyTlpxZGIxTGJnZ1lpZ2xCRlU4a2xRalhmZHBSZnhCYWptak1idVlybXUxQmpYT1U5WDZ6Rk5rbjd0clJaSUJtZTk0anErMkN2OVRjTnBGSGZFWFlZaHkyT2tSUXhoQm44VzF2YTcwNkNlRXdueUgvZ2JWaVd4Z3E4cHcvNzNaT1Zad0NkdE5sVGFYalAvaDJaTVdwTEVNaytDRHBaUWdoWmVYazNlZXpHRWw4bDkybEZXWGZXeWFrVkZpT0EzNjh1ZWZJQ3dzSi95cGFISjlJVmZQcnZmK3lFZDBHNDVCdkVYWVZVMTM1SmtYeHZCbGlHdUN3eGNLazdDZlpLdGk0TEpGblQ4SFk5TXM3eWVRV0prR05qenR4VEYrcVJLTG9KbHdaYld6UnQ2OC9CY0F4MStJKzJKNFE2ZmFVZjdlVDVlMDNDN01hdUxiSU8ySWFMSGlTZWpoR0Jpa1lubEIrdHY3cGtZMUFFbU1DTGFvZTVrS3dHSjcwSkpuMGgwcnBjZ2ZiYnlwWDcrbitObU80bGx6clBLQVVLK01wb2U3NnFYcG1mQThTNU5kRFJLb3l2aHBLeDVtOEJhOG1BeThjQXlPeExqSFp0bHZ5dW40a0Z5RDkrMUgwdk56c0diY0d4M3hadnNqVXlxTzdDSTdHNVlib0NOa0xsMmFvQ1cwYnhoU2xacjZDYWFxNTZNcjJKVmlyNGVCMnJhVlRNVXk3blRlRk94ZzB4a1dpcVVnZGRralIyR1lpbFNsYTh1cy8zaUJZOHZOSDJqaEs5ekVlSnNXVEV1YWVkVzlEeWcwQVI2L3d3dEpUUERhelFXUC9uUGErejZCbTBBRkQxVm1wMzQ1bER1TTFNTkRNQ0hiaHdPS2tGSDZ4OUg3UjBERk93OXE2Zi9wZzNKRUF2c2pFTXdKNVNlWVM5cEI5RVIrb2xoeWVIOGtYZ3lLSVZpMGExYVBOdmc0Uk5OcFp3M1oza2FnekFqOXRaTnV1V2xtaUNLK051N2owUlJ1VHpzTHNIQUlLaitpTmRyRzRUeVYxR2ljdnpaNEY4c3F1Z0VidHBXVVJPamhHZHpoNXcrMm02dVR3WUFzMGgzZldRaHZzeXNjelVic1h2LzU2MHNBUFR3bkNKSkJzMUZpZGtnZGVzWHF4SGJ1c0tRc3lDNUc4ekFhcm5oVHFnaWJlMndLamFITVV4dU5nR2dzRmZ5TWRmOHBRQ3NORjhFc1FYOFJGekUrazZ6VlFoMllWRmRCY2FLazN0M0pMTTBtUHJrdS9VTUJhdDNCR2U1THBlbTVoa1ZzZTU0RDU3aTc0OXB4V0hxN2NaTjNXcFBDTlBpTTZHa3cxdWpmY1c5aXM0TTV4RFQ0TkROME0rb3gzNEkyT3gwL0pZR280UVUyc2pXRmYyYnNRb2JKOE9aSi9qRjNrLzJnM1NZcERvU0xKYUZyb0tKMkZab2VBRHMrdDZiNzdPS0RzZ2hPNXV1OFFMajYrRnJ3dTNYWGdITXpXa2Z5U2xicURrU3FjYm5tUG1EOUdOczErbWlDZDJaQ21ZVUhyWEdoazVvM3d0UldqK3laRWZlN0Y2MnB4dXlMdjdxNnQrdkFBTnpVb1RRa05HazdyVE9NTGwzaXkzcld6RnZvTFR6T2dUeUUvaUQ0VGFmZUtrTk1KVTgybDRIaGgrYmtMMGJWYXBiaFkrQ3NBWmFlNGRnVTlWZFFJYUYveVczZDI5eFhzejBZMklydmUwaEJFb2N3K0IyN0FXOGxiUWR3Wm4zZHBPRDR4ME1yOFZmUGZFNFY3Z0JVcUZEYUJWeE1xZVcrMjZ4OW1MbGlvaXZrekttSzlGM29lcnIzQ3FtSkFIUTA5R1VqSU1PVWNES1NMb3RxNUFacDZhNGxtZ2pxTWl2d082ZGg4YkNpaXo5YWxGMmJjQUtsdmRnaDN6azlVTmFhd1Z1ZHU3cGNtYzFWQjZoVTZMQ3YvWG1FM3NPZG9UcER0Y25iaGpIdlFVV0NSWjIwa1M0ZzBSczNrY0ovSHhWVmRxOWR3WDUyS05xMDc1YVVxRXFUYmJnVUhuQnBjWUxmT1QwMnhoMmNnK1BOVnNISWxud1M5R2ZHUWh2cE9wVUxwaTk2cytSQWxnazBvd3FYTjZ2bW9lc0h2Tmk1VExJc0NGVWxhVUgvR1dXQlZzNlVYNEVFNndKQVZVL0U5cU9GT1NJRUpUaXp6NEhFbml6UG5RMkhBcXFMSjMwZTB5UTRmRjRMbXM0cTRXS1ZqZjEvSjVvUVg3NjBIZGp6NDRZM2ZPUUJVbFU1cTgwWVd4bXQ3RlhyZTQ3UURXWUlEbjNjMnB4cTAzeWg5NnlLSnJ3RUJvSTFybVc2Yk91eU9aOWNoaXNYMmYvKzltR042bEcwVEZuMUp4dHhxYlVxOFgzNTlwQnNQQUl0Z0NjMkZEU0hWcFlqNURuK0RvTUhGMFVMWmxnQnFSUmx0b3h0Y2FOaDZDY3Q4LzJkWnBrUXJZUVgyKzBVSWNNWU5TOHh6c3dHb0Z3am1EMkt1aEFwSnNCKzNOSngreTVvSWl2ZE12ZHpDV2RwOC9WRmhCMU0wTFJqOCtDODRMUU5USExqSmRVM0R2MC9sL0NXejBJb3htQ01RZnZ0REp5eURVRnBHZURDcDFMSHhaRUUxUDFVQ2xtRU9teEFPK3lsd25lM1NubTkrWUYvM2dFR3I1eWlibjBXbUgrN0w3YTFaeXRPdzhKV0doWkp4aHFYN2E1K3d6STRCdHF0enZ5ZDRMbFZTeWlnWllhQ01GRllGZ2JwTEoyaFh4a2I0QlV2bHJqWnJRdzVNbGRFZkIxWjM2emZnZi9hVEZMRkI1NFNFSjhMUjFqaTBtb2dFS1NiS3VmVjVrdHh1TjN5eWhwZ0JVaDRSOEhRMDhmdnFWL1oxamI0d3ZhUG1zL2FhMjNrUWwzSFF3SFpZbUlvbk9GNHNya0NCRmJkVnNmRDFZc0pIZlFIK2JYa2NDYjVZRXRPaGkxVGdaMFlVVWh5T1plKzduN1ZFaWxlbkd0akZsK0Q2SlRiQTFWbWlva0NSRW1PKzFOWWlLaXhJRVZNaCtzV1lqV2s3QUYveW5xZjJoL0Q5MHpMRDNIdVJxbzFvZldITDhESklVaXVLdVJkSHZYZnA3K1hPckgxL2F5dGJhL0lpYVZuMzljeVIxTWFtSTNOOUJPWW0xbmg4eFdEUlpjYzlpNWxvZzlKUkpGYWtjc2g3dmF3S3dTRzVzQ1c5WUhmamhJcjJ4MEZkUFo0M1N0WndCdWRjODV1clVaU2EybUdkOFcvWXlpcjl4RFIvU2RGdEZqODFWMEhJOXp3YjFmUHFmTFdwOVZuTFJQUld5UUhmKzhkU1BMTFhaZVBickVvYnh1M3UwZ2RtYkxSYW1mL1lJY2RaRk9oTi80ZkJVVjdueFpnTGxIK2N5dkh3MDh1V1F2TE5xYzkrWlpON0pNQlRHVXltMVFmUlhRUXpRbVdKMGsyay9OWWs5RUFLWWEwQSt1ZXFaU05HV0wwSnZGN0pSMDZvY3hBeERZZEdTcThrYUJUMDEwajZHMXBteUttL1FSZlN4NjVBMDRrQXR1NGNKeEhPc0NIKzUvRVorRE5FRFQwb1NMWXhXN1NLWmRhRHM5N1hPanBjaHQwekxaWERNN29meEJMSmVHdVBobnFHWnA4b1kxTWpIMXl0cklqZngzRWVpdldkeWJvVGtTVytyYzFFelFvd1FFQVVtZi9SbEJyVElNTXBYUEN2TU5TOGNFNUw2TjIxZ3ZuTDVoanB4S0txL29PdjlMRkg3T3ArZVlJSm1idm00NmpvOVpvdmpTWityMmZrYW1PMjc1dXZPUU5adERBYkx0dDZoM1RjZVYyZjRKbEM5Z3FqaTdrNC8vODdjSitBNDBnVnBmUGtHeHlZZ2ZzS01wRkZzRDcxQlhBeTZ0dGt5TTV2SDBwbXB1MFJOcm9SYjZFT3V6cnVBUVpYWXU1dk1WT29icnk4UEtzam5GenR6R0R0dStSbS9lOC8zT3ZLeGNyNWpaVmMrWkx5dUNSYlVhMlZPakx0ODdNTlZ6YzQ1NmlFMUMzZ2c2Q2VGNUFObVJZOXBJRHpyblFQaXhTOUYzNFJxYTJIY3NGbEVsaDlFNHVYQkN1dytHS0N0Z2Qvb3Zkb1l4MWMwSTZMVVlTV1RqM1VmaS9ERGRzbmM3TUZZY2Zuc2FFVDFwYkZLWTlpMDA1WEdhUFBSdGtoaTFCZGtVdEVDVTVJR0dvRmNodlpuTXppMllIOUxBbW5Lb3VSWjRLTFlsQTB5ZEE2QTNqMVdlUGk4MHBmNFRlSjZrbXYrM3l0eGNlWlc3aEM3eUhPZ1pyTEFGRUJrcERycEJ6VGJPdVNoaUpaeUk5V3hMYldXT2pKZGFWNStldmFLVi9ObVBTc0htbW9BV0thQXdCeHpMd1RrckxoVXdpZ1dQcUErUEdVVTVOekVXUkRLV2JPSFVqU2tidTkvR0Z5YzFEM0taVThKamxRaHdHZ1J5VTIveXBVQWJUSUw4WnUwb21qS25ORE5CKzZQZWZ4NFRkaGdSM3dxdXIrKzU2akorR252cmhibWFYdGRHRlFBQk9hYzcwVGE0dmRmaVBMNGU0SCtUbmhlbnozWmF6dUsrazNSTURyZjQzUXVaOGVCYVh0KzAyU2RmS1N2K2tIQ1U5bXZ0bXJSVzZFSlk4Rkx0MXdiNkhLKzVKREdycVdJZ3YyaWhON01wNXhOd2paNFd6MVNSMHlTSjFEYXREK1MxeXpYRWlFYXRiTno1Rzc4bkZ4ZnpQSXMxRjRHSWt3QWFxYWcrc1JuamFiQ3VFRjZKNFVGM1pqYlNETGdibm1KeGNDSlJGMTVXdm1yVmw0OUdrL0hNbW41YXJndTZWU0NYU2w4SUZxbW1WU1E4Qm9FaFlPTTAvOXN6YXZ0Q2ROL0tFaWlqeDMwZnZTUXBkOG1FVkhYNWx5QWhqSktLbUdyOGx4Lzdud0puME4zeUZRY3dKWU5XTGVkOVBLVXduREpKdGZlY1hEZ0JVdE4vTWNZOU8wYU5wWnlaMjhER2d6YjBvRytiem1OUWRWUmR3bnFwNEZuTkZlcktFemlVbVNGVXBHK2Q0R2Npb2Q0Wnp0VDBiTmU2aXE4N1BJWFlnODFReThMcUJQNmpEQ080OWxtbXhWckNCNjRzTkw2dFBlbmpPbDVhVk8yclJ5MzdJUWRoYzY0a3c0VGl5c290Skxhd2dxWGlZOFVWMGQreVpGTlJqbEQ1T3lzOW94RU1sVlQwbUt4QnA2cXdpMXNreE1KeFU4VWFwaWhZUGxvSUhzd1d2Y29MM1JmODFDZVlkdlFkdWZxZ0R0Rmo0K0RQVk55S25SYmZFTGFidnhqbURhNTlEVUdmanlyLzVzc1g3eXNJdjd6WmJMbmRSdHUxUzNOMXdWV2RrOS9iZVNGWXpPdURmMkJrd0tSZDhZM2FGY1I5alZzQzU4WVdmYzVvSnJJTUFJK3ZmTU92c0R4ZjF6bE9USTQ3aEdydVlXU3UrUnhjUjdvdlorRzYrQzNVVlI0MGZYN21uWUJYVnlCQm9iNWZCQjRadTVYVkNKYjAwZHdQR1pSUTlnVFJleUl0RXIrWnJmU3JOdkliWkc5bmYrM0paMHIzcGpkaGFkVzR2Zmgva3dHaHBsYlhBakxiUkhhaWh6WFRSRHEvQU50TE53Z201RmcyR1pocTUzaDEzaFdIeDd2V0NWTk9HSHlxN0J4SU81YXlYWkkrYmRnN1FwRlNQbzhzc3ZtNklBaEhnN1lXM0ZraEZxbEJyZWY3eDM3ZHIyT1Ard3ZjOUR2clgxNWhQTWlrbVlZMStMTjlFSk9KZUROaHNGTjBOK21WcDVRdHlKdWdieExwZkxkRk9maTdQM1VOWEptdGdMbjRqb2p6bkc0TlV4dW9ybzN0Tm94YXAza3NNZm1sQjZDOXY5VVBYMHF0NE9keW1GK2FlUm5Dcy83czROQ0VhM3hjekFERHRqKzhXeGFjclQ2S3lJcHpZQWdVVGJNQzUvNFI3MUhocFJPNHRwUllpY1NsOUhQRjZ2dlp0WkZBa3UvMUVYbWkwZStQbUViUFRMUlhKbVdRT3Jzcno4S0lLSXFNd25nQjNnUHN0K2dmMjdBcGNTcDIyUXF5ZVhlVno5YWM3K08yZm9ZcVlaZ1RJeEo3UEZjYndxR3BoUklrWHZqWmhBQ0pJbXdLYkZDeSt4VWZNUWxuNXd2eGdZNnA0ZUJ4d1ovczBQaW9xMm43QjdtUnhVdWVTNHFpZlp3TVE5NWZEYmNYV0xNNzNSRXRxbFp3L0YzY2xDRVpxcG5CVVNRT00yZVpwYTNGa2pNanUyRXhDbDlvMUpQTlBBdWxSL29VUnFUcDVOWkhaWk1NZUl1QXplY0IySE5tM2FzZU83OTFpQ01mVUZ6WlRpMzZDQXRZaDJ0WlpSSzZYanVabHlHVkFZQm9oL1NRRncvZGFvaEd2dEMzZDNnYVIyeGJiNGpCMm1aRVl2bXJ6Q3VBelJSMzVWY1NxNDdMbjc1UTNsdWxoa2FZSW4waG9WOFFubDdHWFpFV0lNSjZmOXR5NGxmSzBnQWpPaEpRQ0pLbkJybUVqR3VWV3ZQZ2xZL252d3hYZ1JWbEdjRTM5QWN4b2tocTVCaGdOaW1uVVl3bWZmNVJFMnBEa3R1REt3ZWtTSEZzaDRXN0I3L3NzZUlXQ0VIdFBjcGpPVTM4dE9lMUlhZmVFaDZXWGVhN2Q3cGNnNlBnbGlHK0pKT2xEa2xTb0RzQzZHUHhQRWFweVNvYXpreWlFR1VRWS8wYktNK3RGczJEYURkMncrVWhGMFFtNUE3djltTlg2SHRnYXFQWUhmb2dLNDJFWEdHZVNVR2ZTck4vTkpsQTM0eFhySU5BTkhncWxzTTRJTWZBT1VNRmVBM2U0ZXBHaDI2VDExcGxsYlNXdUpBSVQzNzh0U1AwcXBOd3U3UTM3NGlncVdjQ05VYkJIMTU5VzZBUW9VZ3hSUThRMEJISEk0eVAwRmZwdUxLS1RQOE1nZmVoN1N3TnN1eVU4WDVHazZzaHYreTUySVNkZWMvaDA5a1FxNkVSVDFDS1lHVFB5dkhFOTdpL2FtMWFLbWphZlpPUWdyandCVXBQektNMkFBWmxZeWpkQjVmUVhEU0NhRmFldGNpQXNwWUhpSEpUeWZxZEloQU1rWGcrV09zZHNQOHpLeXp4bXArdHJjUzJ0SDVUU21Yb29tVHJIRzZtQ1BxbFNqUnlPTUZUMStIeG1aREY4SldGMysvUVU3R3I0OXd2RTZGS3VXTDMzbVhOVWh2YTVNUjdqUWdSY2xDVk5NNGJtSjhRMklqZHU2My9ZZVR5UkxzMGh5Ukp2Q1IwcFF2NG5ISzMrSTNiUkg0Rmx1YzkrNWd2L2NvU0J2WHhoc2dQaXh2eVh5aW9yOEwrRk1HSk52TzVFellIK1ozd2ZIMHFBK0xWTW56bk9kczFBZ3JJTzcrRERCMUVwZ1FkS2wzM2J4VGxtdmxKYmRDaHljOEZXVmZGYzZrZUVkVUF2TjRBNVBUQ01DN0RNMU5ZTENxcmhXUkFRdVV4VXdwSGZ2cXRUZWFGQy81WlhFVjlQNkNjZzVsZGxudVQrTTI3ZVNKSUtNK1BkYytiOXlEZC9kRDcwM0h3NHhadkE5RHNOdmNzZ013amhScW56amhNM1lpZTUxWFdtb2VoMnA2bndGK1NuOXl4d0FQa0IyZlM5dWlmNUs4ZjY5QzRFRkJyVHhhaXdvVzhuSERreEZ4L01MWFJic0cxdFZzdVoxcmRIdWg3UUtNelFLU1ZIYzJsNGNtT1BHbVJnRnNMYWdEZDJzbjVOajI4bExjQ1VOUmhQUDJSSm1QM0kyTTA0ajZnUVh0OHBycVFiT1ZYcDRmbDhLSENjdU1rTk82TWpiRVZKY1d0Q1BhQmU5aExHYWdNTm9EMUVVWXJTeDhFSkhwZzNxWnpKelJmenNGL1h0QzRVZENaY2VWKzVoRXZmK29SMXpTMFQ0WlVFbng2UVY5c0F0ajIwU3Q5Vm01Wi9PbXRRMHdwUWkvZ1EzaDIzcDgxYTlEbm94cFJyb3ZxeTlOQzhwRXNVSjlZdTdka1NzY1hpd296R2JObzJnTGU1TkVsOTFIcnIwdjBvUWg3UFRRY3EzVnR3WnZFNGs2K1JoeTZMdS8zMmtnbzFsTllORDNoK3JDaWNtQ24yT0RZblhxWDlUMlRkTEtjZzVJM2gvYWxXRGZOQ08wWHNJOFBycFZqTG94Vkc1OVIrR2o0SWdMc2Y5UWdLeUVGcE5pNm5JZkNaMTUyVlJwVUxLQWRvNS9GMWdUTUthOUcrUzZTWWVKSGZxOHpXV1cxUG9Qc1ZUWjJkeFJZc21GSnZDZ0NscW5uQkh2SWxieUp0SEdOT1VJbUgzemk3dXZFaG1ZNlRhKytxYUFBOThrU3p6MnhTNWY3WHpLclZreTcrdEhxZzE0em5adzJEejkzRDJNUlpyZ0dSeWt6R0NSdG9nRENrMytyWGR0QnFnd0loNEROaURicmpKQlVRVW04Wk05ZC9tSGVQWUZWSmZNS2FmeTA5OWM5ZkZXLzh6VFdRclFEd09weENvdS9Eei9HYlNtNFJMTTBxL2hlM24velhBNVI4dlRzOVZPVHlPNGVrakoxZkdUQW5CM3cvWVNpSmhBWmloYnFDdHR5Mms4S3ErbUF6MlplemlvcHBSbGh2eXdXSjVRQVNSMHMxSDV4UHBoOWJpV1BmWE10Yk5yUVBzT215OTVJL2xaMnAvVUpsZEdrQ0N2NmduWWcvQ216YWJIZXRBemdrU3NGYTlyNDhIWEI5NExNSWhvTGExclBOMnJlY2ZMWmFyaHZlQ0xCRUVOSlN5SitUQ3ZYRjVzWWRESW1JQTI0VkhRWUFiS1RHeHR4ODZiUTNCbGx3NWdDcWJPWDAyVzBRYkRENks3V1lUZHBCTFpVblRTYURHbEMwTnRHSU9QRENvaDRBY0J5OXFibEs3M2xPcWtOUFU5KzdSaVpEZEcwbFoyK2VMeU9kQU8veHlwWk1pTlA2UTl1YjUrZXRrTTJhYy85TTZ0Y2pUM0ZXWStqU3l5dXBvRnJuckNDRDBmMlNXRm5VakJWY1l4Zjg3YXZzVjRzREVJYmx1a3IzK09JalVic29zYktNYzlXOWc2M2J2YXNDRFI3QzhpS25TNXU4TXZOWU80SFZCM1JyQ2RqSUVNeCtyVktUYzhFTng1bXA4b0lEdU96ektYV0doc2N1cUhuOXdXa1NYSXlnbFdhMThOcFdVamVxRVYyZGVtQlk4MVpQWUVBVE5RbkJrNXViWW5mN3VvWjNFQU96OTViOFI0MXdPVDhZMEdHcHJlSUJ6V3RzVmI2RVlHTFk4TXo4b1Y4WW12RGVSYWNQME1RTHhuc1VsYmVSbUtCMitxZ25wRlA5eis4dHdJUW5ETTZVVjhrSWlUYWVCdTM3NzF4QXgrWnl3Q242V1JBRW1Zc1dFaUlmajJqNTFDM0kwM0xqR1FwNGdwa2FoaHY2Y1NmVmZzNkZTYVNtWGlFTVJ2WW9FV1piZU1EY3BCM2NMcUdabEErN0h5b3VHU0tTTndueXBXaWp6d0JQbW9uUll3ZnkxaXRKMldTZFh2NGJyQlBJTlU5Y050NTNPbURBLzZvVFlTb2NLeFc3TnV3ZVdycVBLNjVvdXc3ZERjdGZsc3NtQzZ3d25EdVh3ZTlLRThhSjlXalo3SXJjNGx4NXZQQVM2Smd3cG1Jc29lTHBoZFV0Vk5Hd2hCUHloa0xoRjRaUWxWV3AzWTZtS3FxTGFzbTBkeXk1L3dvNUhCZ0tUa1NiZ2lyeGxHZ3BOb2RoK3RnNzVaTERwd0R5dXRpNVZjZEQzc2hwVGVMdjdtWmdnUTUvRklSczlCckZKNzdhbE5RMW9yMllaaTlwZytCTFFvUk4wLzlhd0o1VFlUYTVrcElXMlBBelhpSTZ0R2JuU2pnbmFuTmFzYzZMYm95OS9mMTVMOVZDemR0LzRHclFVVXRuT2NSUWhMbFhubndMNlMzd2RybkxLSmZ5bFhzRHdMTFU2NGsrSVI5MHNUOEpQdS92ZXZSbkhDSkRqN1YySkFXWVhjbVdwRTRJU2pvY2FUQUNaZWd6dm5ZRm9zMjBCNmg1aFhydmRtUzRpUVcva0N3cU42WEZocDdQUGY3QzEySHRRS1NlbFFiOGJ4cVZqWU16Sjd4TnEzS2pXcU5uOFBDaHU3VTVVZWZLYzgrc2FSMnB4K0xWYUhIeUcydDRiYVdxbEwvQ1ZHbnlPM3pTSnVnQ21MUnhHd2E4NjV2UEJVZEVuZzJmZWk1SFZsZzJZV25Wem1BQjkzeGtmN1U0ditGbEM4V2R0M2MxNHdRZDRJUEZIYy9ld0tZekhFM3A3UEpqb3F6TDFFa3YwbFB4QnFZSWRNOFRMclQwK3diNWEvMThFM3Q1bWEwN094RjRPQ09SbTZoUmZXQXZIU1F2R0gxbUVuZSsrdWlwVUpFZno4ZU9tNjlKNVpOWExmR3Naank1VnhoV0JiY3lXL21sNjZXWEpBcWdqcVJCMGJKMEtlN093QkJBVk5BZ09zcU04SWtWSTVyeFJSelJlbWt2dk02dGZtU3BBU1pyTVEwQ25PRVdWd0J2L3Y2dk9jSURDZTR6Y2tnL2NacnpFUkFTazY1amV0T3ozNm54ZldwcU1HQklvQ0pDNDBoQ0xsN29JZWQ1MnJOV296eHZIQVgzbXJINzM1UytBUnlDcGJRcUh4UFZRSWx5UEY1bmdjWHZ0RnFteHJObWVvMGRjaEFpS2tGaWpMK0FHa2U5UGtybXhZUjl0WEhEUjV5OXVWY0tkK1p5SkZqdkdLZ1B4UFhvclpiVllHVm1sM1RKeDcyVS8wakJEblJKWmNLcFRMeUFGQkVQbnQ0SnJEcUtxSCtHVml3L2ZwUHNkdnVyMElTdWF6Wk1Gem9JUjREYndaNVVaT3Ixc1ZnQU55QXIrQ2xlWnlIN21pWm5xSFFHQ2Rrc0RsdVRUL01lZWxPd1dKWnovRGlFbURSNDdFSHAyNTU3L1JWVFc1aC8yRnRkV2pJNG1DNjdhTmd0KzJpdmFtOXAxb0NYODZHOEg4SE82NXFCT1lYUHIxSmQxNE9QVi9mZmFQZzR2V2lVWTJDcWN5RDMzdnh6NFJkakpPN1V6dldwL2p2bnR6SUQxaVdENm5yQTNtNEdTc3dRQlZ2QWd3OWFWRXhTOTBkUGYrRW5XbmtsZmdnNUZjdkFJK3ordDlUMXhNVGhRWTUvcjVoVm03ZWUzbVVpSkUvN1NmN0hUcGROV3RZcHQvNzlRbi9jRXRJY2lKNXJ0cUFBdm1mVjZlSnVjbUh0aEpNNjE4YzhUWW4ydzhRMTdIcXh2T2N2MjArN0xxZllRVzhucFBJVWxHYzZTWVhrckJKKzc5MmVtQWkyU0s3Q0U2bXBQQ3dTYTRFNzJURWRqVEN3NXZqeTJWVUFRWEhJWXc0MWlSOG5JeXZnMEdURW14VVZiekdhb2RJZDFWSERuWFVuSHo0bWpWMitmYmlkZzloQ0xSNWpRRGd0b3ZFVjJXckZXNkQyWVovVExOdVcrUTJTQ2Q1ZUxNaE4vQkU1YzhYcWh2a1oyUXFjSXhHUWcyVVBBaEMyZ1NMN3ZlWk9STGF4TlZwNXA0WEk4eitEVWt5ejBDcDJjUnkvdDR6TTVtcGY2eTFjSWhPTEkrYkMzUGtoeEdaN2p1VXNRQkRncUJ1NnMrL0RZMTZsUlV6RzNFK3lFR0hLa3JSU2ZHd2JMblcwMHViM2lSRTJvc3ZnaFM4bE9KUXZzdGZRLy9sN00vRXpiYzR6TUZ6enFwbitkVUM3MzBpLzVOZjNXU3l0RkdqL0FzTnU3T1JQTHJNdy9aN3JtZTE4d3BraDMwZmlCQVc5NGdVNE5yeUZQRXc4SHg4YjRkZGtSTHZqWkswb3ZCUjU2M0hNWG9tZXJJNnk5MStKVTV1RmYwT2FNKzFQdW9UTGNLUkdHak9SNzMxWlZKVWpCbmQwYWt3bDI0ZlZHeG05ME1WSDJVSndsVHBHNUdRZlcvaDBRS3lOa0ZKTHNzWlpWV0grR2Y3WEgvNThXb3hvTnZQQnI2RlVwck1seEtmYzRteGE1cmVEZ0NOU28vSWUyUGNTS1NPS0FWSVcwd2I1SXhvRzFZaEtsTmJkN29sUTJSVmpTTm5POVphd1c3VGc1MUJtSGZxaXlaL1hNUEY4QklXb3dLUjZ6NDBnNkNObFF6OTU4eFl1aXhwUGpFcTZCbGJlaDBSbzFOM0JIVlVqV0U1Snl6bnA1UldGbWZlQkJ2REp5amhkblo0Ly9ENytZNThHR2RZQktuZmswRlpWQ2lodld3RXBmdy84REl3U0ljTzhzcVR2cnlmSUJ5NlAyYW13R29ENUN4SEhNTUQwZ0NZdGZMbTNMY3hndXVQMnh1c2FsWGxDUU5GanQzVzBPbTBzT3JvYTRJVGd1MElaWlZlSEFhU3hzK1k1WXUwYWlFN0JEVldpL3VxVE9nS0dSdmo5L3RrUU5ycmxENHFLT0pVNGZCMFJKNHFvOTVzZ2J0b3hnenZMdkVJYzkzVkdxNXhnOG5FOG1ZVm5BcUI1cFd6K3J6ckZHK05WSGpvRDFMdEg5ZjRnTzFyTnhZNm5MMzd3YjZEeCs1QTNPY3lnNkZqVVV6eThyNUg3V3B4S3U5emowb05oRWQxajJsZkY1cGIvT3JLOG10RmdSbzdyYXA5V1hTOFk0TTlySm9kR3RFZEl5aFdrdkRYNXhaOThhTEF2b29PRHAzMU4xWTRSellFMEQ0cFdHODg4VWlXb1laeXJPNHNtZ0RzNW9XZ1FtcUl5N3dGbXp2MHNIUTNrSlBPSURmQVFHaGFVekhjTVBEWWFjVzFOVU95VzJKY1RuaTFxbXhkSUV6VnN0bHEwRWxIUzR1T2xhN0VPajBpNCtLV0RzM2hHNFRmOUxxYWU1SFdvcXVWZjlqL2ZSV3g4K2VQbXJ3ODV5Vk9DdUlUMnowMFk3cnFWZVM3ZEJYVVpLbGRoK1BVUW8rNmdHRXRTdGRDQVluNGZSR1NYZ0VHUm51S2pYRS9zTkxETDlldHdzQ2c2MmdsTjZQa3RubVpvUGV5cWJhOEl4SUMxRjFXUkFzSlRyY2t6dkZ5UGxUM3h1TlhCQjhWNXRLQjBGS3R3dXZPeVY2UVV5VTRnU1dMRHhzaFVUTktpZzd6WUpYelA3Y0M5ZW5YVWlGNzZDb20rdy94VVJ3Vy9uSUcrcG5xbjJIejJqbVA3VWp3Q0UzUGNWL3JBRDJ2dWY1Qno4aFlGQlNsKy9qdWY2bUNadVBIUlJRU21zUmdHQUJJcStOQ0Zlbkd0YUdVQWNHN01xVW9NTXJRMkZiSVFFNTJhRkUxTThQR3F2L0o2T21CU1BhZjRzTnFiZkgybE1SZlZKWnVnK2hjNWtuM1BadDNzOTJ1SHl4ZUw2TUF2Yno5eGRkQ3RPeFpXWnNRRHY0VUI1dUY3Sk5YMWJmRjBRa2ltSHB0WmN2ajVvSlkvcUdDSG12YkNtaTFIQnpYMEhNOXltY3RuZ3phYjExY3h6UzJmU2Vmam55TkpsenFYcFovRHhDRFhKcFRSa0hvVVM5TDlpUlZDeUhteFlRakJMMnpBNjdLSVFWRnVwd0dNUkQ5RHE2TzFNcEc5MVFRSWhxR2ZSNUlIZFRPbURnV2xEQjRxRlUwT29JNDY0L0RINU9oRnRDcGFHdytQWjVzdVFmOTFHbnI3Q0E1K0x5emNrb1ZNMmVtVzRzY0F2cGJZNnJSQVJydDdybFFpSUFlRnBkQ1U3anl6UUdCVThmanhzeDlaQTJqSEtoT2hxV0lWZ3NzYXlIdGlQeDU1NEZqUFE3aWhweXJra29vRGNTV09UY3FWM3c3YWdzNVo3cW94Z21wMFMwZm14V1RzeDZINTlxVUlkSXpiK1dOOTBtSStTTERPOEZoNGZFcmgzMTNpeE1weHQ1NklSdFVoYTJnOUU2TWZxMnBuRFI1aXZ2UVJjWHM3VDJvT1MzeS90bEI5VW1GREhtSmFJSjl1UXl6UG1Wc2hkRnFlZVdMS0owdGhzZVlncGNnU25kOXdLWk1Iano2RG5qZTdEVnpUWDZDTUVjbEhVOFcrVENtU3QzdmxJSkNjREthUWw1MTY1L1Q3YS81NUpyeVIwNDNuTTd5REg4YjVGNFZBakw2aE9HR0NaTWw4UWZqemdESFpQSjRaR3crQ3FhZU5Eb1k4cFVRNzFhZ3dWWFMrVUdsOEFGaTJaV2F4SkJRbGtPeUQ4cnZPZVpxM3ZlMzZ6QzIyb0tJV2x3VlVsQW1WbEN4L1RNR3J4RzY4eDVOUDZSTXBCRkpBTW1aN3BBdW5qKzhicGpBaWYzdkVWNmwvMDJQMzhIS1gwVUpGeitWbmxZcE5BTHcxOUNleE40UVJ4dGxuN1Avc21YOVphYjZUUUZJbkNESGUwQ3dCOU1mcFJVaC9GL2tUTFl0UUg3U0RRaTFDRElMQi9GSFhCUnIvcFBEa1FjZWtxWkUrZVQ4cVZqcDdUMDF6K0hoaWliSjVzdjQxY1pBOGhwODNBbkpuMStKSWNpQmNsZEFLR2phbjdkV1JpV093TXE1ZStZMU1PUDVzbnVUS2d0QWVwdFNhSXB3VEpEbC9kNldrMUpIbGJncEdZdEVKYjQwYisyK0laYXZUR0tDNGh6aEI0UDZWU0JQMk5ETGZzM2UrUHhWUFBiL0xvZ2Jrcnk3b1pUREdrZlNqVGEwWVg0bmZjM3hLOU9PM0JZNmsvN0JBaG13QnZNSk1CT3ZLaGZrR0NqOUhzeWlqTlBuOWlxMFFjbzhiRDNPbVpuMUZMR2c1aHZPMUV4Z1VzZE5tVFVjTzYrMkpIZHNRZkxKejZyMFBwOGRyNjg3b1dtTTlnN1hkWlVWSEFDM0JaaFd2QlA4R0V5YVFpU3IrZ1JwY2hrblhkUnBpYnpwYW51NnhuRFJWNWFudzFpVzVBanZvalFMazZkMDdsK0JTZllCNnF4VUs2UjBoa2x0K2NjUkdWZWRDK1VXb1RTVDU4QWQwQjc0eWFXaVNxMEErbGlINjNWODRDdG9MR01pSjE0cmJhT2VxWkhtRHpCMmJUN2IwWVcyV3VSbmxRcTlBbGdJZlRpeFVURHJkQ3ZEekJaLzYzc1RJTTBmcGlRT0hOZ2F1dVRUdmZ2Y2JGUUIxMDFoSGJmSjVwODY4WmVRQ0xReVZCeDZyRnYzd0xrUDNoMG9QOWtJR1dYOFdXMVdiWnk5bWJEWWtMZHlDaG1ZSFM5ekJNeVhiRGFONjhkY09DRWJiaGxJL2hXT05hbVVqeVAxZWNBVWdVV2FwNzgycXdhMnFiODRIOGgzRkJGZDZaMUhJZmhpSkpIdVdHWVJBQ3V6eTNVdG9tU0FHZFFJd2t0WkdTQ0NMTk44a2gyRy9oRlU2MW11OXNqalB4N1ZpY2dKUXI3MXIyZXFzTmE0VEcyNVIvOUc3bXc5TVdWR1hsRXJyb2pOT3dWeVlzVnpOdXdCRU5UK09lYitFVVVmK0hOQ1Vac1FYUElxWklZMmZyenp6cnlBL3N1MFdFZkxEL3NoNkp3N2w2a1ZGWHVITmdLYUtPcHIrR2c0LzhBQmtlMGo3UExENTRmU0g0YktqL3hlUm9jVDhWSU1kVEp6L2ZkR2x3UUZFWGlXNFBtVGZYakdvMXo4c1ZmSDRFL3hEWitLa3FLUG1XcXRwTUpPcU0vNFBHOFZSQm1PUGlVUVBHUVZBMUIyRmc0Um1vV3ByMzRuVWd5MmM1b1p4N0toOUtYN2xRSzgraW13UHM5ZDcvRFlxdXRBYzhIeENwN3RJV3N1cFIrVWJ4S3NMK2kwVUo3YUlHbUVlZmVYV1NKZFVWVW1ueTBUMFBRdnlpcXpURURoNjlJSHpEVFdJYXFTeWJWRWRNYU0yTENHSGFybWNYam9vSlllNmZjc1ZsS3MvWU5pMjlySGVBcUgzbnI5VGpkeVFtczR5RXByem5HYmFNcGVCRFRCK0lOQnJENHZWbTVWZjdOK1c1dnJCQ0prWUtCVWZIZ2dLWStOcmhCT3pUOHJ4YjZlVXFUV01MZGpteUE1R1Azc0VEbVF1RUgvNkZtdTJUYWpNNzUxeDAvWHkwU2FXQ2JWQ3Q0elkwaG5NZ2lFZXgzcWEyTXVSWndrb2ZQSVY4QWhTL2xjTXhiM1JHQkNoUzl2ZWpFSkE1c3IwWTlyVEcvNVhxNGg1Nk5Jb0Vybk5EOGUraG5ZMnVGZjZ2NCtGcm1ZaDN5QVFDL2s1Y1VIWlU5anZjOVBJN1N0SStNYnRKQnIxakFzQUFhbDVhOHMxOGFMRm4wNjA1dGw4ZXkralkvbXd2dzNwS2VWeG9QQlh1Vk5QZW9adTZJQ2RWcEs0RVYyTGxCdG4yNk51d29Zc2RWVUE2WmFQNnpFbVlTWGg3UEhBbmpOYjFZcWFWV1gvU3NWbUZaSElUZ2hBNU01cno4L3NsZE9pUDNPeUtGek11ZFpLTzlLVDRQVUhqa1Q5RGlXWXpJRjhwcFBpcjR6Mzh4cnVoR0o3bDN4L3ZkOWhBektDRHZzR2k4Z0FMSTdaMkFrNkFOR0lnbi9DcjlJbXRjN09oYjN1UjFjM3lLL01OTzJ5Um5HNUdlaXkvRnRMYkVhMndsWTBJNkxHbXJnTnk5aXAzck1INmxGVC9DZE1oQ0V1VXZucTFZSVBJREM2ZmFYMndicnZyVEVXSjUxZTM0UktSNWFYaWlLQjI3VTJubjFKNGxmTkZuU1FyMnpkZVJaZTJ5UkU4eDNVdkpheCtWejMwYzl4TG1lZVM4TWdzWVlsK1Zxb3lURlJRUTBleEhFVWFRUSs4d3owKzhMUUswWnpLUFV6YjRPalpjM0UyY1F4RmV0VHZXdW5KT0VJV1lXSU1TaXF4Q2lwSFBFOW1XTEdpZ0pRaTJOYjVWWk9PKzVoQjB0U0tzb3BXUTY2YzlCc0ZmR0VZV05PVUhheWtyOGtGZWRhLzhJV1dBY1JoWU1ZaEhsMmFoY1l0RmMzeERTUnJWYmZML21qWlc4Kys2a3FTZjRMdHYwaGVLZjY2NDcwaE5nOEx1T3VqUUVSRmtjbFIrL1dvbHFYSzNvUXVqME1YWEZWOVFWZ20yOUNDS0p4QmdFQ2VnK01XemNYem5BbkF1NWZnQlhiSFo1OS9UdSt0QlB1NnpyZGd5U3lReW9ONHlRcSt1OW9sWjZWaGlPaGg4cWNIdi95akYveFd0S0E0Q0hVTjFjZkpRMVQ1RVlTZit4NG1EZlBmL0RCampCOUx0eWZPQkNjL281aEdOYzhoaVFvUjZZUDY0SWQzYnBmZ2ZwdjY5aHQxL0VlWmh5N1FTcjdud0w5SUFRMTRTYWdGTy94RVFkOUxwNERIZFNNZ09oYXNuazJsNXU0K3JuY3dxcjJ0OUJqekhzM3l2WStKMWZMRmZzOE5md2h6ZGVQandzbHFENllVNFV1TWg1eEdkUDQ2RE5iTXZrcUtDdWkyNUxuc1hPaXB5RURzd0o4cWMzVG4yS1JST09hOHZ1c2tCS25GcXhoaVpmeFpSWVVIa0Q5QlRSNkRzc1hLWXlUSVo1M3drcE1EQ040L0tuY0xFVmYvaUcxZHp1NXVramFZczRTQlNMYmdGaW5kdWpEVWVlSS9iNld0TWxHQmVlUjRvb0dJeWQ3bWVwc2R0S3QyczVYdVM1MTlJUFd1SnRMQ0d3dUE1RTJCSkJIMU90RmUxNXBZUUlHZnpOZXNwVWFtVzhUVVM0ZlhheXBZbVBjdlhVZktUR1hDSGlJa3JKa0N6cStBT0dKSnE5SUlDYWZxanNweXFVTmdYU1ZkdFBBcFkrUFp3OG5VQXpwRXQ1eGMySVdOY0ZmV2JnMmNWeUd3K3lXK24waXZERUhVTEJ3TnNXMVhTUjZ2RnpqSUt0SW8vTzlOQzBMdmp5aXlKSFlBOUhuRVJwQ3N5aUNKelh5T1pZQ0cxOXY5RTFQRUEwQSsrNllmYUcyOXZGSDVaeVZDZnFwemd6K0NEdTRJTVZ1cWRLKy9PY1BqMHNIZDBvRUZyYVZCdTRPT0dYREQ3Uk5KUHhrZnF3TE9RS2lPYzkwTXM4UWxTS3pwUVlubzhvTzhqTmozY1pDaExDSDc1anl3TnoyZUJmd0NrNW1tWmk4YzRqNW5Pc1RvT3BVM0hVS3I5Y1hIVTdkQzJWdDlZdk1TNzVqbXhjR0pRR2NqZUFpaFA4aDh2b3luRnJOeHZRUEZaNGpnRk90OFlaZCtyeTBlNGliZzFsY1NGRkJjNXVtL0VIUEVmMzFSQml0US9KRXRGemdyaG45SXd1QlkvQjJudlUxRGdXc3pVcFlvUFJ4QWgwU3Izc2VYR2gxYWtRRFJ5aHdLbTV2TG1NTVZ0WFdlT1FMSU1oVjkxMWhYTW9zaXNVbFpudmxadU15Vzl1SEd2eU80NGhHNG41WFZRVC9iSVVCWCt6OUkiIC8+DQoNCg0KPHNjcmlwdCBzcmM9Ii9idW5kbGVzL01zQWpheEpzP3Y9RDZWTjBmSGx3RlNJV2piVnppNm1aeUU5THMtNExOclNTWVZHUlU0NlhGODEiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8c2NyaXB0IHNyYz0iU2NyaXB0cy9yZXNwb25kLm1pbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4NCjxzY3JpcHQgc3JjPSIvYnVuZGxlcy9XZWJGb3Jtc0pzP3Y9Tjh0eW1MOUtyYU1MR0FNRnVQeWNmSDNwWGU2dVVsUlhkaHRZdjhBX2pVVTEiIHR5cGU9InRleHQvamF2YXNjcmlwdCI+PC9zY3JpcHQ+DQo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfX1ZJRVdTVEFURUdFTkVSQVRPUiIgaWQ9Il9fVklFV1NUQVRFR0VORVJBVE9SIiB2YWx1ZT0iOEYwNjIzMUUiIC8+DQo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJfX1ZJRVdTVEFURUVOQ1JZUFRFRCIgaWQ9Il9fVklFV1NUQVRFRU5DUllQVEVEIiB2YWx1ZT0iIiAvPg0KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iX19FVkVOVFZBTElEQVRJT04iIGlkPSJfX0VWRU5UVkFMSURBVElPTiIgdmFsdWU9IkZHakxFbDgrVUNmMWhLRFpsSE1DMjJFS3hBSmZVRjNlcGlsTmo3L1FoRVdGMVdSeEszZlpCTmIrdGtDLzZCTGZxSHZMWFI0WTlGM3VUTlMvb2lnQm9FWTVhL0hXKzl5by9JTEs3MzlHcjlseEpUTDUwVVF1UFdHVDBUb3k4enYxcXNGRG9tTDNXYXhxMVp0ZmplODR6MncvWlpJL3pkakhpZnpUU1ZTMTE3d0JsNHZoUGVVMFkxWllpUkh0TDQ3aHpzdDJSNENINVlhdEZnMkRyQVJPcE5veU1YQldrWVFrelVhaWl2K3hwODArQnBUNktsQ05NT3JzajVTSDhtQ0l5bGl5RXZGOWE1MUlSblJjaDBIdmxjYjdZK29YUmtieVhsV2NsN2hVb016MWpvMWJVTk83dHhTQk9jWmJXeTFSODIxQjA2NXNwckNHeEpXUUtNUXMzYm5LSENQcjNCMWl2L1JBaVFCYXgvNnE5QUJxd0JMbFpxT0w1MGJyQVJZcnFIcWtSdDU0bEpZb3h5eXJOdmVLS1pnamRmVlh0TVMvN2p4aWNOYXZXODQ5c0F3cU92bC8weXU1SDcyR1JCZTVoaTJIVVd2b1ZNdzRidHVSQVpaS0FNeVpTK3FUUStMYTZ4eFV5MVhVM2xsYzA0K2tjdXhxbXdqMUdRQ2JmMGtadkhJcnVEamhnQ2cyeWtiWGpUTk10MUZUNEo4RmhYbi9saVkvR2hsaW9FWTV4aUlrUkxwNE1NbzdhcmNORjFMbk4yRmJhcitVcXlGemNJVHFnc3BuUlJwS2JFSklhdW1RZnBPMm91RnBlc0JOMlJCSUtRcG9LWGlyT2EvUlFURW1nMTR2eFk2NldoeldkQ251d1cvbDdlU2xnay9VNFlpS2RXeE9DVWpxUnFvTFJYeGt5dzF0T25XaWJja0lFdFVna2J5K3NlL2lwcGpLSEFTRXZwZTd5QkNlVnE0RWpmTEpKeS9TNFJ1cWZuQUdPMXFUM1NIa0RlbTRrd2ExQkx6NHhaMTlPc3g1VHh6dm1pWjdCR3YwUzBYZDB5dTlpTzkzRGlKRHFsSXdvMER5YVpyWGdiWGNoa1BqK0dvUy8wMmxmRUtBSnRULzM2M0QzQmgwdk1ibi8zcEdFOFF5OWRFM0N4UlNGSElhM21ZeFlMa2lsWHFNWDJ3ODdxRE1YekVqZEIyemFGT1RIb0UxZzRvRWdFemM4UnVVUEZ2ck03MFhIbTRPVzVZelBZVmFqN1AvVjh3MTBaN0E4aXpRZUM1S2F4cFBSM3ZwL3hnN3ZaS3FsV214RGVEU29RL0pJZmZGdXZHYkRIRnpKV3IweXZDUFYzcG4weEplYU40dmpLZFdGWXhVZmJ2ZXR3c08xN3BvU204TVROSFpqVmEwNnprQm1KY1A5WXBWRmNUcCtuSzBncDFvaVU5dUhCU2t6ejZmTjIyWDJPOTRzTml3bis0UzF5RFVXYVRFbnhUZGtMZ2U1QklrRFlpaW5lRlE0dnFpWTV6K0ZmOXBwb0NGR0J5SFBZVzcwTXJRNC9JSFNtQWVLdE1pNy9sbzk4UUdSa3pSSytPTko1Z0toRUFRTlJrQ1cyZ2Rya0ZvNjY5MVZSOWw1N2N6RzB5YVppN1UwVUNrMCtYZjRwdDNsM0FrRFJqNkhULzB2U3JWSWdnOTBmNW1YWnRjN3BVZ1lHRzNvb1hSRlBFKzlianZnYmoxb2dPMDI4cnN5WWZ0bDFsTGZmQlB3cnhmcUZYcXdpTDl3cXpxR3UrL2FONmZSNVg4RG1XOG9QRlZtekt2UTdadlF0c3hvY1NVQlY2TERYYTVtbWd6S29IZXl1QTVSZWJWbjAzSE1UV2x0RFpTMDVIa0dHS01SZkVnU2hRdFpMWUNuWS9SNW5ZTEZSZ0t1bk1NdDRFK3hEdkZhNU9Xc3lmN2IxQUhBZHZmUnBCZmpwNmk2RHlDL1Y2cjN5OTRiWFdzWk95Rlk5YmthdmFyRDBHMVVLZ3ZEazhpZkdUKzgwcDIrUm1tRmlXSHB0d2k5RXI2VWhYV3hJU3FOTm9kbTJCd0dLckN2QTBuNEZKMkZDeU91QlVHVFB5ekNXY2h6V1pSblBUbHc2OFBLOTdNNDErWlBiQURodUlLT2pIclpQQlJIamtJQWR4cnpnUGlGUktZZHRTV1pVUGpEWHhIckpYelNUYS9rZkFnbjhQVHZNcWswQzEwZXdQYjRnK214RFBRV2JUbXFjVzlJMEg0ak9WdFNxVWFHRUl6Ujg4MUtWb3NjY1dGU21HTFJWd2xvMVpMUG45MGp6ZHBhV2t4V0ZvM1ZHZ3NLNjlBd2ZVQ0x0YkdCek9lZXphd1RFcEU3U21WeTVHdFFNK08zZm1xc2tSR09EdStWMDJkb0RmL3E0enVXbXdQM0Y1OUZuU29zdityakNPdmxLS1gxVkkyTVlwcWpobVRWbUJXWFJZS3dFcG41cXRNUUNkZ0pMemtLdVkzVFBsOENwYTBjekd3c2xPcGVWSWVsTUNhTTVURkJMNUxleXNmRDNOVVBOME1ZOUxkbkcwVWRlYkdFaXBQaXY0RGUzcnVta2NBZ2E2OUtqNU84YTgvMkZFQUMrcFZCM3hUYnI1ZFFOSzJ4L1h3bHNjN2crdVgiIC8+DQogICAgICAgIA0KDQogICAgICAgIA0KICAgICAgICANCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiIGlkPSJjb250YWluZXJjbGFzcyI+DQogICAgICAgICAgICANCiAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3BlbitTYW5zIiByZWw9InN0eWxlc2hlZXQiIC8+DQogICAgDQoNCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmOCIgc3JjPSJodHRwczovL2Nkbi5kYXRhdGFibGVzLm5ldC8xLjExLjUvanMvanF1ZXJ5LmRhdGFUYWJsZXMubWluLmpzIj48L3NjcmlwdD4NCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBocmVmPSJodHRwczovL2Nkbi5kYXRhdGFibGVzLm5ldC8xLjExLjUvY3NzL2pxdWVyeS5kYXRhVGFibGVzLm1pbi5jc3MiIC8+DQogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zbGltLXNlbGVjdC8xLjE1LjEvc2xpbXNlbGVjdC5taW4uY3NzIiAvPg0KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zbGltLXNlbGVjdC8xLjE1LjEvc2xpbXNlbGVjdC5taW4uanMiPjwvc2NyaXB0Pg0KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhzdC5pY29uczguY29tL3Z1ZS1zdGF0aWMvbGFuZGluZ3MvbGluZS1hd2Vzb21lL2xpbmUtYXdlc29tZS8xLjMuMC9jc3MvbGluZS1hd2Vzb21lLm1pbi5jc3MiIC8+DQogICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfTWVldGluZ0xpc3RVcGRhdGVQcm9ncmVzcyIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KCQ0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGVyUG9zaXRpb24iPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYSBsYS1zcGlubmVyIGxhLXNwaW4gbG9hZGVyRGVzaWduIj48L3NwYW4+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgDQo8L2Rpdj4NCiAgICA8c3R5bGU+DQogICAgICAgIC5lbWJlZC1yZXNwb25zaXZlIHsNCiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICBwYWRkaW5nOiAwOw0KICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICAgICAgfQ0KDQogICAgICAgIC5lbWJlZC1yZXNwb25zaXZlOjpiZWZvcmUgew0KICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICIiOw0KICAgICAgICB9DQoNCiAgICAgICAgLmVtYmVkLXJlc3BvbnNpdmUgLmVtYmVkLXJlc3BvbnNpdmUtaXRlbSwgLmVtYmVkLXJlc3BvbnNpdmUgaWZyYW1lLCAuZW1iZWQtcmVzcG9uc2l2ZSBlbWJlZCwgLmVtYmVkLXJlc3BvbnNpdmUgb2JqZWN0LCAuZW1iZWQtcmVzcG9uc2l2ZSB2aWRlbyB7DQogICAgICAgICAgICAgICAgLypwb3NpdGlvbjogYWJzb2x1dGU7Ki8NCiAgICAgICAgICAgICAgICB0b3A6IDA7DQogICAgICAgICAgICAgICAgYm90dG9tOiAwOw0KICAgICAgICAgICAgICAgIGxlZnQ6IDA7DQogICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOw0KICAgICAgICAgICAgICAgIGJvcmRlcjogMDsNCiAgICAgICAgfQ0KDQogICAgICAgLnNzLW11bHRpLXNlbGVjdGVkIHsNCiAgICAgICAgICAgbWF4LWhlaWdodDo3MDBweDsNCiAgICAgICAgICAgb3ZlcmZsb3c6IHNjcm9sbCA7DQogICAgICAgICAgIG92ZXJmbG93LXk6IGhpZGRlbjsNCiAgICAgICAgICAgb3ZlcmZsb3cteDogaGlkZGVuOw0KICAgICAgIH0NCiAgICAgICAuZmMtZGF5LWdyaWQtZXZlbnQgLmZjLWNvbnRlbnQNCiAgICAgICB7DQogICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbg0KICAgICAgIH0NCiAgICAgICAgICNjYWxlbmRhciAuZmMtdmlldy1jb250YWluZXJ7DQogICAgICAgICAgIG1heC1oZWlnaHQ6aW5oZXJpdDsNCiAgICAgICAgICAgcGFkZGluZy1ib3R0b206MzBweDsNCiAgICAgICAgICAgb3ZlcmZsb3c6dmlzaWJsZTsNCiAgICAgICB9DQogICAgICAgICNkaXZEYXRlUmFuZ2VGaWx0ZXJQb3B1cCAuZGF0ZXJhbmdlcGlja2Vye21pbi13aWR0aDo0OTBweDt9DQoNCiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAoZGV2aWNlLXdpZHRoOiA3NjhweCkgew0KICAgICAgICAgICAgI2RpdkRhdGVSYW5nZUZpbHRlclBvcHVwIC5kYXRlcmFuZ2VwaWNrZXIgew0KICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgICAgICBsZWZ0OiAtMjAwcHggIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICByaWdodDogOTAwcHggIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICAvKmRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7Ki8NCiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDQ5MHB4Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAuZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0IHsNCiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAjUGFzdE1lZXRpbmdUaXRsZS5wdWxsLWxlZnQgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxMHB4ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICNQYXN0TWVldGluZ0ZpbHRlckJ1dHRvbi5idG4tZ3JvdXAgew0KICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweCAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLmlucHV0dGFibGUgdGggew0KICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMTJweDsNCiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogICAgICAgIH0NCg0KICAgICAgICBoMSB7DQogICAgICAgICAgICBmb250LXNpemU6IDJyZW0haW1wb3J0YW50Ow0KICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDcwMCFpbXBvcnRhbnQ7DQogICAgICAgIH0NCg0KICAgICAgICBoMiB7DQogICAgICAgICAgICBmb250LXdlaWdodDogNTAwIWltcG9ydGFudDsNCiAgICAgICAgfQ0KICAgIDwvc3R5bGU+DQogICAgPGRpdiBzdHlsZT0ibWluLWhlaWdodDogMTAwdmg7Ij4NCiAgICA8aGVhZGVyPg0KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtMTIgY29sLWxnLTEyIGNvbC1sZy0xMCBjb2wtbWQtb2Zmc2V0LTEgY29sLXhsLTEwIGNvbC14bC1vZmZzZXQtMSAiPg0KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxNXB4OyBtYXJnaW4tcmlnaHQ6IDE1cHg7Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1wcmVwZW5kICBkLWZsZXgiIGlkPSJhZHYtc2VhcmNoIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJza2lwLXRvLWNvbnRlbnQtbGluayIgaHJlZj0iIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTa2lwIHRvIGNvbnRlbnQNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAgaGFzLWZlZWRiYWNrIGhhcy1jbGVhciBzZWFyY2hHcm91cCAnIHN0eWxlPSJmbGV4LWJhc2lzOiAxMDAlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJzci1vbmx5IiBmb3I9ImN0bDAwX01haW5Db250ZW50X3R4dFNlYXJjaCI+PHNwYW4+U2VhcmNoPC9zcGFuPjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9ImN0bDAwJE1haW5Db250ZW50JHR4dFNlYXJjaCIgaWQ9ImN0bDAwX01haW5Db250ZW50X3R4dFNlYXJjaCIgY2xhc3M9ImZvcm0tY29udHJvbCIgY2xhc3M9IlNlYXJjaFRleHQiIG9ua2V5ZG93bj0icmV0dXJuIHNlYXJjaEVudGVyKGV2ZW50KTsiIHBsYWNlaG9sZGVyPSJTZWFyY2giIGFyaWEtbGFiZWxsZWRieT0iY3RsMDBfTWFpbkNvbnRlbnRfdHh0U2VhcmNoIiB0eXBlPSJzZWFyY2giIHN0eWxlPSJtYXgtd2lkdGg6IG5vbmU7IGJvcmRlci1yaWdodDogMDsiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvcm0tY29udHJvbC1jbGVhciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBmb3JtLWNvbnRyb2wtZmVlZGJhY2sgaGlkZGVuIj4gPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gcm9sZT0iYnV0dG9uIiBhcmlhLWxhYmVsPSJzZWFyY2giIGlkPSJzZWFyY2hCdG5NYWluIiBjbGFzcz0naW5wdXQtZ3JvdXAtYXBwZW5kIHNlYXJjaEdyb3VwICcgc3R5bGU9ImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHggIWltcG9ydGFudDsgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDRweCAhaW1wb3J0YW50OyBjdXJzb3I6IHBvaW50ZXI7IiB0eXBlPSJidXR0b24iIG9uY2xpY2s9InNlYXJjaERhdGEoKTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYmluZGV4PSIwIiBjbGFzcz0iaW5wdXQtZ3JvdXAtdGV4dCBpbnB1dC1ncm91cC1hZGRvbiIgb25rZXlkb3duPSJyZXR1cm4gc2VhcmNoRW50ZXIoZXZlbnQpOyIgYXJpYS1sYWJlbD0ic2VhcmNoIGJ1dHRvbiI+PHNwYW4gY2xhc3M9ImZhIGZhLXNlYXJjaCBmb250SWNvbiIgYXJpYS1oaWRkZW49InRydWUiPjwvc3Bhbj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZpbHRlckljb24iIGNsYXNzPSdpbnB1dC1ncm91cC1idG4gaW5wdXQtZ3JvdXAtYWRkb24gJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiIHJvbGU9Imdyb3VwIiBhcmlhLWxhYmVsPSJGaWx0ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93biBkcm9wZG93bi1sZyIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJidG5GaWx0ZXIiIGNsYXNzPSJidG4gZmlsdGVyLWljb24gZHJvcGRvd24tdG9nZ2xlIGRyb3Bkb3duLXRvZ2dsZS1vZmYiIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1sYWJlbD0iRmlsdGVyIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAuNzVlbTsiPjxzcGFuIGNsYXNzPSJsYSBsYS1maWx0ZXIiPjwvc3Bhbj48c3BhbiBjbGFzcz0iZmEgZmEtY2FyZXQtZG93biI+PC9zcGFuPjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iZGl2RGF0ZVJhbmdlRmlsdGVyUG9wdXAiIGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHQiIHJvbGU9Im1lbnUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgZmlsdGVybGFiZWwiIHJvbGU9Im1lbnVpdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY3RsMDBfTWFpbkNvbnRlbnRfRmlsdGVyQnlEYXRlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbHRlciBCeSBEYXRlPC9sYWJlbD48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtcHJlcGVuZCBzcmNoLWlucHV0LWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRGaWx0ZXJCeURhdGUiIHR5cGU9InRleHQiIGlkPSJjdGwwMF9NYWluQ29udGVudF9GaWx0ZXJCeURhdGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wgRmlsdGVyQnlEYXRlIiBvbnBhc3RlPSJyZXR1cm4gZmFsc2U7IiBzdHlsZT0ibWF4LXdpZHRoOiBub25lOyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS08c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYXBwZW5kIGNvbnRyb2wtY2xlYXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC10ZXh0IGlucHV0LWdyb3VwLWFkZG9uIj48c3BhbiBjbGFzcz0iZmEgZmEtdGltZXMgZm9udEljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPi0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIiByb2xlPSJtZW51aXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImN0bDAwX01haW5Db250ZW50X2xibE11bHRpU2VsZWN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbHRlciBCeSBNZWV0aW5nIFR5cGU8L2xhYmVsPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IHNpemU9IjQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JGxibE11bHRpU2VsZWN0IiBtdWx0aXBsZT0ibXVsdGlwbGUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sYmxNdWx0aVNlbGVjdCIgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdGJveCIgb25jaGFuZ2U9IkNoYW5nZUZpbHRlckZsYWcoKTsiPg0KCTxvcHRpb24gdmFsdWU9IjEqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0xLTEqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5BY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjMqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0zLTMqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5BZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI2KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtNi02KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+QXJ0cywgQ3VsdHVyZSBhbmQgUmVjcmVhdGlvbiBBZHZpc29yeSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI3KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtNy03KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+QXJ0cywgQ3VsdHVyZSwgSGVyaXRhZ2UgYW5kIFJlY3JlYXRpb24gQWR2aXNvcnkgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iOSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTktOSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkF1ZGl0IENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjEwKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMTAtMTAqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5BdWRpdCBTdWItQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTEqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0xMS0xMSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkF1ZGl0b3IgR2VuZXJhbCBIaXJpbmcgUGFuZWw8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI0MCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTEwLTQwKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Qm9hcmQgb2YgSGVhbHRoPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTMwKjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtMTAtMTMwKjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyI+QnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMjEqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0yMS0yMSozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPkJ1aWx0IEhlcml0YWdlIFN1Yi1Db21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTEzLTEzKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Q2l0eSBDb3VuY2lsPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTM2KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtMTYtMTM2KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyI+Q2l0eSBNYW5hZ2VyIEhpcmluZyBQYW5lbDwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjE0KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtMTQtMTQqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5Db21taXR0ZWUgb2YgQWRqdXN0bWVudDwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjUzKjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtMjMtNTMqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5Db21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDE8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxNyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTE3LTE3KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Q29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAyPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTgqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0xOC0xOCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkNvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMzwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjE5KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMTktMTkqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Db21taXR0ZWUgb2YgUmV2aXNpb248L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIyMCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTIwLTIwKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Q29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjIxKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMjEtMjEqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Db21tdW5pdHkgU2VydmljZSBBZHZpc29yeSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMzEqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0xMS0xMzEqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5Db21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTUqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0xNS0xNSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkNvdW5jaWwgRnJhbmNvcGhvbmUgQ2F1Y3VzPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTI1KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtNS0xMjUqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5Db3VydCBvZiBSZXZpc2lvbjwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjY1KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtNS02NSozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPkRlYmVudHVyZSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIyNCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTI0LTI0KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+RWxlY3Rpb24gQ29tcGxpYW5jZSBBdWRpdCBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMzIqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0xMi0xMzIqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjEzMyozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiIGRhdGEtaWQ9Im10LTEzLTEzMyozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPkVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIyNSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTI1LTI1KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+RW52aXJvbm1lbnQgYW5kIENsaW1hdGUgUHJvdGVjdGlvbiBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIyNiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTI2LTI2KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+RW52aXJvbm1lbnQgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMjcqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0yNy0yNyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkVudmlyb25tZW50YWwgU3Rld2FyZHNoaXAgQWR2aXNvcnkgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTI5KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtOS0xMjkqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5GaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMjgqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0yOC0yOCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjMyKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMi0zMiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMzcqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0xNy0xMzcqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5HZW5lcmFsIE1hbmFnZXIgb2YgUGxhbm5pbmcsIFJlYWwgRXN0YXRlIGFuZCBFY29ub21pYyBEZXZlbG9wbWVudCBIaXJpbmcgUGFuZWw8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIzMyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTMtMzMqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5JbmZvcm1hdGlvbiBUZWNobm9sb2d5IFN1Yi1Db21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxNDYqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0yNi0xNDYqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5Kb2ludCBBdWRpdCBDb21taXR0ZWUgYW5kIFRyYW5zaXQgQ29tbWlzc2lvbjwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjEyNCozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiIGRhdGEtaWQ9Im10LTQtMTI0KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyI+Sm9pbnQgRW52aXJvbm1lbnQsIFdhdGVyIGFuZCBXYXN0ZSBNYW5hZ2VtZW50IGFuZCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlyczwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjE0OSozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiIGRhdGEtaWQ9Im10LTI5LTE0OSozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPkpvaW50IEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBhbmQgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMzQqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC00LTM0KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Sm9pbnQgRmluYW5jZSBhbmQgRWNvbm9taWMgRGV2ZWxvcG1lbnQgQ29tbWl0dGVlIGFuZCBBdWRpdCBTdWItQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMjkqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0yOS0yOSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPkpvaW50IEZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZSBhbmQgR292ZXJuYW5jZSBSZW5ld2FsIFN1Yi1Db21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI0OSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTE5LTQ5KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Sm9pbnQgTWVldGluZyBvZiBGaW5hbmNlIGFuZCBFY29ub21pYyBEZXZlbG9wbWVudCBDb21taXR0ZWUgYW5kIENvbW11bml0eSBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIzNiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTYtMzYqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Kb2ludCBNZWV0aW5nIG9mIFBsYW5uaW5nIENvbW1pdHRlZSBhbmQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTI2KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtNi0xMjYqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Kb2ludCBtZWV0aW5nIG9mIFBsYW5uaW5nIENvbW1pdHRlZSBhbmQgQnVpbHQgSGVyaXRhZ2UgU3ViLWNvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjUwKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMjAtNTAqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Kb2ludCBNZWV0aW5nIG9mIHRoZSBBY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSBhbmQgdGhlIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIzNyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTctMzcqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Kb2ludCBNZWV0aW5nIG9mIHRoZSBGaW5hbmNlIGFuZCBFY29ub21pYyBEZXZlbG9wbWVudCBDb21taXR0ZWUgYW5kIHRoZSBOb21pbmF0aW5nIENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjUxKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMjEtNTEqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Kb2ludCBNZWV0aW5nIG9mIHRoZSBQbGFubmluZyBDb21taXR0ZWUgYW5kIENvbW11bml0eSBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxNDIqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0yMi0xNDIqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5Kb2ludCBQbGFubmluZyBhbmQgSG91c2luZyBhbmQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTUwKjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtMzAtMTUwKjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyI+Sm9pbnQgUGxhbm5pbmcgYW5kIEhvdXNpbmcgYW5kIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxNTEqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0xLTE1MSozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPkpvaW50IFRyYW5zaXQgQ29tbWlzc2lvbiBhbmQgTGlnaHQgUmFpbCBTdWItQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMzgqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC04LTM4KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+Sm9pbnQgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIGFuZCBUcmFuc2l0IENvbW1pc3Npb248L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMzUqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC0xNS0xMzUqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIj5MaWdodCBSYWlsIFN1Yi1Db21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMjgqMzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzIiBkYXRhLWlkPSJtdC04LTEyOCozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPk5vbWluYXRpbmcgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iNDEqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0xMS00MSplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPk90dGF3YSBCdWlsdCBIZXJpdGFnZSBBZHZpc29yeSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI0MiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTEyLTQyKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+T3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZDwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjEzMiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTEyLTEzMiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgLSBTcGVjaWFsIE1lZXRpbmc8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI0MyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTEzLTQzKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+T3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iNDQqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC0xNC00NCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPlBsYW5uaW5nIEFkdmlzb3J5IENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjEzNCozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiIGRhdGEtaWQ9Im10LTE0LTEzNCozMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMiPlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjQ1KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMTUtNDUqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5QbGFubmluZyBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSI0NiplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTE2LTQ2KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+UG9saWNlIFNlcnZpY2VzIEJvYXJkIENvbXBsYWludHMgQ29tbWl0dGVlPC9vcHRpb24+DQoJPG9wdGlvbiB2YWx1ZT0iMTE3KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyIgZGF0YS1pZD0ibXQtMjctMTE3KjMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyI+UG9saWNlIFNlcnZpY2VzIEJvYXJkIEZpbmFuY2UgYW5kIEF1ZGl0IENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjQ4KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMTgtNDgqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5Qb2xpY2UgU2VydmljZXMgQm9hcmQgSHVtYW4gUmVzb3VyY2VzIENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjEyOCplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiIGRhdGEtaWQ9Im10LTgtMTI4KmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+UG9saWNlIFNlcnZpY2VzIEJvYXJkIFBvbGljeSBhbmQgR292ZXJuYW5jZSBDb21taXR0ZWU8L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIxMjcqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIiBkYXRhLWlkPSJtdC03LTEyNyplZjU4MjM2Yi1mY2U5LTQ1Y2MtYmVjZi1jMzFjN2E5NWQyMGYiPlNwZWNpYWwgSm9pbnQgTWVldGluZyBvZiB0aGUgUGxhbm5pbmcgQ29tbWl0dGVlIGFuZCB0aGUgQ29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjUyKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMjItNTIqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5TdGFuZGluZyBDb21taXR0ZWUgb24gRW52aXJvbm1lbnRhbCBQcm90ZWN0aW9uLCBXYXRlciBhbmQgV2FzdGUgTWFuYWdlbWVudDwvb3B0aW9uPg0KCTxvcHRpb24gdmFsdWU9IjUzKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMjMtNTMqZWY1ODIzNmItZmNlOS00NWNjLWJlY2YtYzMxYzdhOTVkMjBmIj5UcmFuc2l0IENvbW1pc3Npb248L29wdGlvbj4NCgk8b3B0aW9uIHZhbHVlPSIyKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiIgZGF0YS1pZD0ibXQtMi0yKmVmNTgyMzZiLWZjZTktNDVjYy1iZWNmLWMzMWM3YTk1ZDIwZiI+VHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlPC9vcHRpb24+DQoNCjwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIGlkPSJGaWx0ZXJCeUNvbmZsaWN0TWVtYmVyIiByb2xlPSJtZW51aXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImN0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlDb25mbGljdE1lbWJlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWx0ZXIgQnkgQ29uZmxpY3QgTWVtYmVyPC9sYWJlbD48YnIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBzaXplPSI0IiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRsYkZpbHRlckJ5Q29uZmxpY3RNZW1iZXIiIG11bHRpcGxlPSJtdWx0aXBsZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlDb25mbGljdE1lbWJlciIgb25jaGFuZ2U9IkNoYW5nZUZpbHRlckZsYWcoKTsiPg0KDQo8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIGlkPSJGaWx0ZXJCeVN0YWdlIiByb2xlPSJtZW51aXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImN0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlTdGFnZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWx0ZXIgQnkgU3RhZ2U8L2xhYmVsPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IHNpemU9IjQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JGxiRmlsdGVyQnlTdGFnZSIgbXVsdGlwbGU9Im11bHRpcGxlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbGJGaWx0ZXJCeVN0YWdlIiBvbmNoYW5nZT0iQ2hhbmdlRmlsdGVyRmxhZygpOyI+DQoNCjwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIGlkPSJGaWx0ZXJCeVN0YXR1cyIgcm9sZT0ibWVudWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjdGwwMF9NYWluQ29udGVudF9sYkZpbHRlckJ5U3RhdHVzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbHRlciBCeSBTdGF0dXM8L2xhYmVsPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IHNpemU9IjQiIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JGxiRmlsdGVyQnlTdGF0dXMiIG11bHRpcGxlPSJtdWx0aXBsZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlTdGF0dXMiIG9uY2hhbmdlPSJDaGFuZ2VGaWx0ZXJGbGFnKCk7Ij4NCg0KPC9zZWxlY3Q+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgaWQ9IkZpbHRlckJ5RGVwYXJ0bWVudCIgcm9sZT0ibWVudWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjdGwwMF9NYWluQ29udGVudF9sYkZpbHRlckJ5RGVwYXJ0bWVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWx0ZXIgQnkgRGVwYXJ0bWVudDwvbGFiZWw+PGJyIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3Qgc2l6ZT0iNCIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkbGJGaWx0ZXJCeURlcGFydG1lbnQiIG11bHRpcGxlPSJtdWx0aXBsZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlEZXBhcnRtZW50IiBvbmNoYW5nZT0iQ2hhbmdlRmlsdGVyRmxhZygpOyI+DQoNCjwvc2VsZWN0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgaWQ9IkZpbHRlckJ5S2V5d29yZCIgcm9sZT0ibWVudWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJjdGwwMF9NYWluQ29udGVudF90eHRGaWx0ZXJCeUtleXdvcmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyIEJ5IEtleXdvcmQ8L2xhYmVsPjxiciAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCBzcmNoLWlucHV0LWdyb3VwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSJjdGwwMCRNYWluQ29udGVudCR0eHRGaWx0ZXJCeUtleXdvcmQiIHR5cGU9InRleHQiIGlkPSJjdGwwMF9NYWluQ29udGVudF90eHRGaWx0ZXJCeUtleXdvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24gY29udHJvbC1jbGVhciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IE1vZGFsYnV0dG9ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0blJlc2V0RmlsdGVycyIgY2xhc3M9ImJ0biBidG4tcmVzZXQiIG9uY2xpY2s9IlJlc2V0RmlsdGVycygpOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzZXQgRmlsdGVyczwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgTW9kYWxidXR0b25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG9uY2xpY2s9InJldHVybiBwb3N0YmFja0J1dHRvbkNsaWNrKCk7IiBpZD0iRmlsdGVyUmVzdWx0cyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tb3JhbmdlIHJlc3VsdHMiIGhyZWY9ImphdmFzY3JpcHQ6X19kb1Bvc3RCYWNrKCYjMzk7Y3RsMDAkTWFpbkNvbnRlbnQkRmlsdGVyUmVzdWx0cyYjMzk7LCYjMzk7JiMzOTspIj5GaWx0ZXIgUmVzdWx0czwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iYnRuRmlsdGVyUmVzdWx0cyIgY2xhc3M9ImJ0bi1wcmltYXJ5IGJ0bi1vcmFuZ2UiIG9uY2xpY2s9InNlYXJjaERhdGEoKTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbHRlciBSZXN1bHRzPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0bkZ1bm5lbEZpbHRlclJlc3VsdHMiIGNsYXNzPSJidG4tcHJpbWFyeSBidG4tb3JhbmdlIiA+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsdGVyIFJlc3VsdHM8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgPC9kaXY+DQogICAgPC9oZWFkZXI+DQoNCiAgICA8bWFpbiBpZD0ibWFpbmNvbnRlbnQiIGNsYXNzPSJyb3cgZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTEyIGNvbC1sZy0xMiBjb2wtbGctMTAgY29sLW1kLW9mZnNldC0xIGNvbC14bC0xMCBjb2wteGwtb2Zmc2V0LTEgIj4NCiAgICAgICAgICAgIDxkaXYgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxNXB4OyBtYXJnaW4tcmlnaHQ6IDE1cHg7IiBjbGFzcz0iY2hpbGQiPg0KICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNhbGVuZGFyIiBjbGFzcz0nJz48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY2FsLWxpc3QiIGNsYXNzPSJmYyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgcm9sZT0ibmF2aWdhdGlvbiIgYXJpYS1sYWJlbD0ib3RoZXIgbWVldGluZ3Mgb3B0aW9ucyIgY2xhc3M9ImZjLXRvb2xiYXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X01vbnRoTWVudSIgY2xhc3M9ImZjLWxlZnQiPg0KCQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkU3RhcnRNb250aERhdGUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9TdGFydE1vbnRoRGF0ZSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEVuZE1vbnRoRGF0ZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X0VuZE1vbnRoRGF0ZSIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JEN1cnJlbnRNb250aCIgaWQ9ImN0bDAwX01haW5Db250ZW50X0N1cnJlbnRNb250aCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JExhc3REYXkiIGlkPSJjdGwwMF9NYWluQ29udGVudF9MYXN0RGF5IiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkSXNGaWx0ZXJMaXN0IiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfSXNGaWx0ZXJMaXN0IiB2YWx1ZT0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JElzQ2hhbmdlSW5Nb250aCIgaWQ9ImN0bDAwX01haW5Db250ZW50X0lzQ2hhbmdlSW5Nb250aCIgdmFsdWU9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0blByZXZpb3VzTW9udGgiIGNsYXNzPSJmYy1idXR0b24gZmMtc3RhdGUtZGVmYXVsdCBmYy1jb3JuZXItbGVmdCBmYy1jb3JuZXItcmlnaHQiIGFyaWEtbGFiZWw9IlByZXZpb3VzIE1vbnRoIj48c3BhbiBjbGFzcz0iZmMtaWNvbiBmYy1pY29uLWxlZnQtc2luZ2xlLWFycm93Ij48L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS08aDEgc3R5bGU9ImRpc3BsYXk6bm9uZSIgYXJpYS1oaWRkZW49InRydWUiIGlkPSJtb250aFRleHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJjdGwwMF9NYWluQ29udGVudF9sYmxNb250aFRleHQiPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDE+LS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0bk5leHRNb250aCIgY2xhc3M9ImZjLWJ1dHRvbiBmYy1zdGF0ZS1kZWZhdWx0IGZjLWNvcm5lci1sZWZ0IGZjLWNvcm5lci1yaWdodCIgYXJpYS1sYWJlbD0iTmV4dCBNb250aCI+PHNwYW4gY2xhc3M9ImZjLWljb24gZmMtaWNvbi1yaWdodC1zaW5nbGUtYXJyb3ciPjwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1lcmdlZExpc3RIZWFkZXIiIGNsYXNzPSJmYy1sZWZ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlVwY29taW5nIE1lZXRpbmdzPC9oMT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InBhc3RIZWFkZXIiIGNsYXNzPSJmYy1sZWZ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgxPlBhc3QgTWVldGluZ3M8L2gxPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkFnZW5kYUl0ZW1IaXN0b3J5SGVhZGVyIGZjLWxlZnQgY29sLWxnLTQgY29sLW1kLTMiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDBweCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJjdXN0b20tc2VhcmNoYmFyLWhpc3RvcnlpdGVtIiBjbGFzcz0idGl0bGUtaWNvbnMgc2VhcmNoLXJlc291cmNlbGlicmFyeSBBZ2VuZGFJdGVtSGlzdG9yeVNlYXJjaEZpZWxkIiBzdHlsZT0id2lkdGg6IDEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VhcmNodGFibGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBpZD0iRmlsdGVyQWdlbmRhSXRlbUhpc3RvcnlMYWJlbCIgZm9yPSJMZWdpc2xhdGlvblNlYXJjaEZpZWxkIiBjbGFzcz0ic3Itb25seSI+RmlsdGVyIExlZ2lzbGF0aW9uPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIG5hbWU9IkxlZ2lzbGF0aW9uU2VhcmNoRmllbGQiIHBsYWNlaG9sZGVyPSJGaWx0ZXIiIGlkPSJBZ2VuZGFJdGVtSGlzdG9yeVNlYXJjaEZpZWxkIiBhcmlhLWxhYmVsbGVkYnk9IkZpbHRlckFnZW5kYUl0ZW1IaXN0cnlMYWJlbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTGVnaXNsYXRpb25IZWFkZXIgZmMtbGVmdCBjb2wtbGctNCBjb2wtbWQtMyIgc3R5bGU9InBhZGRpbmctbGVmdDogMHB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImN1c3RvbS1zZWFyY2hiYXItbGVnaXNsYXRpb24iIGNsYXNzPSJ0aXRsZS1pY29ucyBzZWFyY2gtcmVzb3VyY2VsaWJyYXJ5IExlZ2lzbGF0aW9uTGlicmFyeVNlYXJjaEZpZWxkIiBzdHlsZT0id2lkdGg6IDEwMCUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VhcmNodGFibGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBpZD0iRmlsdGVyTGVnaXNsYXRpb25MYWJlbCIgZm9yPSJMZWdpc2xhdGlvblNlYXJjaEZpZWxkIiBjbGFzcz0ic3Itb25seSI+RmlsdGVyIExlZ2lzbGF0aW9uPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0idGV4dCIgYXV0b2NvbXBsZXRlPSJvZmYiIG5hbWU9IkxlZ2lzbGF0aW9uU2VhcmNoRmllbGQiIHBsYWNlaG9sZGVyPSJGaWx0ZXIiIGlkPSJMZWdpc2xhdGlvblNlYXJjaEZpZWxkIiBhcmlhLWxhYmVsbGVkYnk9IkZpbHRlckxlZ2lzbGF0aW9uTGFiZWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImhlYWRlci1idXR0b25zIiBjbGFzcz0iZmMtcmlnaHQiIHJvbGU9Imdyb3VwIiBhcmlhLWxhYmVsPSJldmVudCB2aWV3cyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBpZD0iYnRuQ2FsZW5kYXJWaWV3IiBjbGFzcz0iZmMtbW9udGgtYnV0dG9uIGNhbGVuZGFyVmlldyBmYy1idXR0b24gZmMtc3RhdGUtZGVmYXVsdCBmYy1jb3JuZXItbGVmdCBmYy1jb3JuZXItcmlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FsZW5kYXI8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGlkPSJidG5NZXJnZWRMaXN0VmlldyIgY2xhc3M9ImZjLW1lcmdlZExpc3RWaWV3QnV0dG9uLWJ1dHRvbiBtZXJnZWRMaXN0VmlldyBmYy1idXR0b24gZmMtc3RhdGUtZGVmYXVsdCBmYy1jb3JuZXItbGVmdCBmYy1jb3JuZXItcmlnaHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0bkxpc3RWaWV3IiBjbGFzcz0iZmMtbXlDdXN0b21CdXR0b24tYnV0dG9uIGxpc3RWaWV3IGZjLWJ1dHRvbiBmYy1zdGF0ZS1kZWZhdWx0IGZjLWNvcm5lci1sZWZ0IGZjLWNvcm5lci1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGNvbWluZzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0blBhc3RWaWV3IiBjbGFzcz0iZmMtcGFzdFZpZXdCdXR0b24tYnV0dG9uIHBhc3RWaWV3IGZjLWJ1dHRvbiBmYy1zdGF0ZS1kZWZhdWx0IGZjLWNvcm5lci1sZWZ0IGZjLWNvcm5lci1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXN0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgaWQ9ImJ0bkNvbmZsaWN0c1ZpZXciIGNsYXNzPSJmYy1teUN1c3RvbUNvbmZsaWN0c0J1dHRvbi1idXR0b24gY29uZmxpY3RzIGZjLWJ1dHRvbiBmYy1zdGF0ZS1kZWZhdWx0IGZjLWNvcm5lci1sZWZ0IGZjLWNvcm5lci1yaWdodCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25mbGljdHMgUmVnaXN0cnk8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJmaWx0ZXItb3B0aW9ucyIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iZmlsdGVyLW1lZXRpbmctY29sbGFwc2UiIGNsYXNzPSJmYSBmYS1jYXJldC1yaWdodCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2ZpbHRlci1tZWV0aW5nLWRvY21lbnQiIG9uY2xpY2s9Im9uRmlsdGVyTWVldGluZ0RvY3VtZW50KCk7IiBzdHlsZT0iZmxvYXQ6bGVmdCAhaW1wb3J0YW50OyBsaW5lLWhlaWdodDoxLjU7IiA+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iY3Vyc29yOnBvaW50ZXI7IiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjZmlsdGVyLW1lZXRpbmctZG9jbWVudCIgb25jbGljaz0ib25GaWx0ZXJNZWV0aW5nRG9jdW1lbnQoKTsiPjxiPiAgRmlsdGVyIE9wdGlvbnM6IDwvYj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImZpbHRlci1tZWV0aW5nLWRvY21lbnQiIGNsYXNzPSJjb2xsYXBzZSBjb2wtbGctMTIiIHN0eWxlPSJsZWZ0OiAxNXB4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxiPiBNZWV0aW5nIERvY3VtZW50czogPC9iPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9IkFnZW5kYUNvdmVyIiBjbGFzcz0iY2hrTWVldGluZ0RvY3VtZW50cyBjb21tb24tZmlsdGVyIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BZ2VuZGEgQ292ZXIgUGFnZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSJBZ2VuZGEiIGNsYXNzPSJjaGtNZWV0aW5nRG9jdW1lbnRzIGNvbW1vbi1maWx0ZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWdlbmRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9IkFkZGVuZHVtIiBjbGFzcz0iY2hrTWVldGluZ0RvY3VtZW50cyBjb21tb24tZmlsdGVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkFkZGVuZHVtPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9Ik1lcmdlZCIgY2xhc3M9ImNoa01lZXRpbmdEb2N1bWVudHMgY29tbW9uLWZpbHRlciIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5SZXZpc2VkIEFnZW5kYTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSJQb3N0QWdlbmRhIiBjbGFzcz0iY2hrTWVldGluZ0RvY3VtZW50cyBjb21tb24tZmlsdGVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBvc3QgQWdlbmRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9IlBvc3RNaW51dGVzIiBjbGFzcz0iY2hrTWVldGluZ0RvY3VtZW50cyBjb21tb24tZmlsdGVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk1pbnV0ZXM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9IkFkZGl0aW9uYWxEb2N1bWVudHMiIGNsYXNzPSJjaGtNZWV0aW5nRG9jdW1lbnRzIGNvbW1vbi1maWx0ZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWRkaXRpb25hbCBEb2N1bWVudHM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiB2YWx1ZT0iTWVyZ2VkQ292ZXIiIGNsYXNzPSJjaGtNZWV0aW5nRG9jdW1lbnRzIGNvbW1vbi1maWx0ZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmV2aXNlZCBBZ2VuZGEgQ292ZXIgUGFnZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy04Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxiPkFsc28gc2VhcmNoIGluOiA8L2I+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJjaGtDb25mbGljdHMiIHZhbHVlPSJDb25mbGljdHMiIGNsYXNzPSJjb21tb24tZmlsdGVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvbmZsaWN0czwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJjaGtDb21tZW50cyIgdmFsdWU9IlB1YmxpY0NvbW1lbnRzIiBjbGFzcz0iIGNvbW1vbi1maWx0ZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UHVibGljIENvbW1lbnRzPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgY29sLWxnLTEwIiBzdHlsZT0icGFkZGluZy10b3A6MTBweDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGI+RG9jdW1lbnQgVHlwZXM6PC9iPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSIuaHRtbCIgY2xhc3M9ImNoa0RvY3VtZW50VHlwZXMgY29tbW9uLWZpbHRlciIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkhUTUw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9Ii5wZGYiIGNsYXNzPSJjaGtEb2N1bWVudFR5cGVzIGNvbW1vbi1maWx0ZXIiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlBERjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBjb2wtbGctMTAiIHN0eWxlPSJwYWRkaW5nLXRvcDoxMHB4OyIgaWQ9Imxhbmd1YWdlRmlsdGVyRHYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGI+TGFuZ3VhZ2U6IDwvYj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiB2YWx1ZT0iMCw5IiBjbGFzcz0iY2hrTGFuZ3VhZ2UiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVuZ2xpc2ggPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSIwLDEyIiBjbGFzcz0iY2hrTGFuZ3VhZ2UiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkZyZW5jaCA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgY29sLWxnLTEwIiBzdHlsZT0icGFkZGluZy10b3A6MTBweDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImZjLWJ1dHRvbiBmYy1zdGF0ZS1kZWZhdWx0IGZjLWNvcm5lci1sZWZ0IGZjLWNvcm5lci1yaWdodCIgaWQ9ImJ0blNhdmVGaWx0ZXJDcml0ZXJpYSIgb25jbGljaz0icmV0dXJuIHNlYXJjaERhdGEoKTsiID4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNhdmUgRmlsdGVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZjLWNlbnRlciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmYy1jbGVhciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9InJlZ2lvbiIgYXJpYS1sYWJlbD0iTWVldGluZ3MgbGlzdCIgaWQ9ImFsbC1saXN0IiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfTWVldGluZ1R5cGVMaXN0Ij4NCgkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRJc0ZpbHRlciIgaWQ9ImN0bDAwX01haW5Db250ZW50X0lzRmlsdGVyIiB2YWx1ZT0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRzY3JvbGxJbmRleGVyIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfc2Nyb2xsSW5kZXhlciIgdmFsdWU9IjEiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImN0bDAwX01haW5Db250ZW50X2J0blNob3dNb3JlIiBjbGFzcz0iZC1ub25lIiBocmVmPSJqYXZhc2NyaXB0Ol9fZG9Qb3N0QmFjaygmIzM5O2N0bDAwJE1haW5Db250ZW50JGJ0blNob3dNb3JlJiMzOTssJiMzOTsmIzM5OykiPlNob3cgTW9yZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbWVldGluZ3NQYWdpbmciPjwvc3Bhbj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgcm9sZT0icmVnaW9uIiBhcmlhLWxhYmVsPSJTZWFyY2ggcmVzdWx0IiBpZD0ic2VhcmNocmVzdWx0cyIgY2xhc3M9ImNvbC1tZC0xMiIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXMtV1BCb2R5IG5vaW5kZXgiIHN0eWxlPSJ3aWR0aDogMTAwJSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzcmNoLXJlc3VsdHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgaWQ9InNlYXJjaFRhYmxlVGVtcCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ZGltZ3JleTsgY29sb3I6d2hpdGU7IGJvcmRlcjogbm9uZTsgd2lkdGg6IDEwMCU7IHdvcmQtd3JhcDogYnJlYWstd29yZDsgd29yZC1icmVhazogYnJlYWstd29yZDsgZGlzcGxheTpub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT0iZmxvYXQ6bGVmdDsgcGFkZGluZy1sZWZ0OiA1cHg7Ij5OYW1lPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRvY3VtZW50IFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0ic2VhcmNoVGFibGUiIHN0eWxlPSJib3JkZXI6IG5vbmU7IHdpZHRoOiAxMDAlOyB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7IHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9InJlZ2lvbiIgYXJpYS1sYWJlbD0iUmVnaXN0ZXJlZCBDb25mbGljdHMiIGlkPSJhbGwtY29uZmxpY3RzLWxpc3QiIGNsYXNzPSJjb2wtbWQtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgaWQ9InRhYmxlLWNvbmZsaWN0cy1saXN0IiByb2xlPSJncmlkIiBzdHlsZT0id2lkdGg6IDEwMCU7IHdvcmQtd3JhcDogYnJlYWstd29yZDsgd29yZC1icmVhazogYnJlYWstd29yZDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciByb2xlPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlcGFkZGluZyIgc2NvcGU9ImNvbCIgc3R5bGU9IndpZHRoOjI0JSIgaWQ9ImNvbmZsaWN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lbWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0idGFibGVwYWRkaW5nIiBzY29wZT0iY29sIiBzdHlsZT0id2lkdGg6MjQlIiBpZD0ibWVldGluZ1R5cGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVldGluZyBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiIHN0eWxlPSJ3aWR0aDoyNCUiIGlkPSJtZWV0aW5nRGF0ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWV0aW5nIERhdGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlcGFkZGluZyIgc2NvcGU9ImNvbCIgc3R5bGU9IndpZHRoOjIwJSIgaWQ9ImFnZW5kYUl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWdlbmRhIEl0ZW08L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InRhYmxlcGFkZGluZyIgc2NvcGU9ImNvbCIgc3R5bGU9IndpZHRoOjglIiBjbGFzcz0ibm8tc29ydCIgaWQ9InZpZXdSZWdDb25mbGljdCI+PHNwYW4gc3R5bGU9InZpc2liaWxpdHk6IGhpZGRlbjsgZGlzcGxheTpub25lOyI+Q29uZmxpY3RzIEljb248L3NwYW4+Q29uZmxpY3Q8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYWxsLWxlZ2lzbGF0aW9uLWxpc3QiIHJvbGU9InJlZ2lvbiIgYXJpYS1sYWJlbD0iTGVnaXNsYXRpb24gSGlzdG9yeSIgY2xhc3M9ImNvbC1tZC0xMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjdGFibGUtbGVnaXNsYXRpb24tbGlzdCB0aCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxlZ2lzbGF0aW9uSGVhZGVyIC5pbnB1dC1ncm91cC1hcHBlbmQgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMnB4ICFpbXBvcnRhbnQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5MZWdpc2xhdGlvbkhlYWRlciAuc2VhcmNodGFibGUgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkxlZ2lzbGF0aW9uSGVhZGVyIC5pbnB1dC1ncm91cC1hcHBlbmQgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDhweDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMTBweDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lICFpbXBvcnRhbnQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZlcnRpY2FsLW1pZGRsZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZSAhaW1wb3J0YW50Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHh0RG9jdW1lbnRUeXBlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNXB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1cHg7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52ZXJ0aWNhbC1taWRkbGUgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGUgIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnR4dERvY3VtZW50VHlwZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDVweDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogNXB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N0eWxlPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0idGFibGUtbGVnaXNsYXRpb24tbGlzdC1uby1sb25nZXItdXNlIiBjbGFzcz0ibGlzdCIgcm9sZT0iZ3JpZCIgc3R5bGU9IndpZHRoOiAxMDAlOyB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7IHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgcm9sZT0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSJsZWdpc2xhdGlvbi1pY29uLXRoIiBhcmlhLWxhYmVsPSJmaWxlIGljb24iIHNjb3BlPSJjb2wiIHN0eWxlPSJ3aWR0aDogNSUiIGNsYXNzPSJuby1zb3J0Ij48c3BhbiBzdHlsZT0idmlzaWJpbGl0eTogaGlkZGVuIj5sZWdpc2xhdGlvbiBpY29uPC9zcGFuPjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb24tbnVtYmVyLXRoIiBjbGFzcz0ibGVnV29yZFdyYXAgdGFibGVwYWRkaW5nIGxpbmsiIHNjb3BlPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb24tdGV4dC10aCIgY2xhc3M9ImxlZ1dvcmRXcmFwIHRhYmxlcGFkZGluZyIgc2NvcGU9ImNvbCIgc3R5bGU9IndpZHRoOiAzMyUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVnaXNsYXRpdmUgVGV4dA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uLWRlcGFydG1lbnQtdGgiIGNsYXNzPSJsZWdXb3JkV3JhcCB0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiIHN0eWxlPSJ3aWR0aDogMTUlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcGFydG1lbnQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uLXN0YWdlLXRoIiBjbGFzcz0ibGVnV29yZFdyYXAgdGFibGVwYWRkaW5nIiBzY29wZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YWdlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb24tc3RhdHVzLXRoIiBjbGFzcz0ibGVnV29yZFdyYXAgdGFibGVwYWRkaW5nIiBzY29wZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1cw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYWdlbmRhaXRlbWhpc3RvcnktbGlzdCIgcm9sZT0icmVnaW9uIiBhcmlhLWxhYmVsPSJBZ2VuZGEgSXRlbSBIaXN0b3J5IiBjbGFzcz0iY29sLW1kLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICN0YWJsZS1hZ2VuZGFpdGVtaGlzdG9yeS1saXN0IHRoIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuQWdlbmRhSXRlbUhpc3RvcnlIZWFkZXIgLmlucHV0LWdyb3VwLWFwcGVuZCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAycHggIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLkFnZW5kYUl0ZW1IaXN0b3J5SGVhZGVyIC5zZWFyY2h0YWJsZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuQWdlbmRhSXRlbUhpc3RvcnlIZWFkZXIgLmlucHV0LWdyb3VwLWFwcGVuZCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogOHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAxMHB4Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHlsZT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgaWQ9InRhYmxlLWFnZW5kYWl0ZW1oaXN0b3J5LWxpc3QiIGNsYXNzPSJsaXN0IiByb2xlPSJncmlkIiBzdHlsZT0id2lkdGg6IDEwMCU7IHdvcmQtd3JhcDogYnJlYWstd29yZDsgd29yZC1icmVhazogYnJlYWstd29yZDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciByb2xlPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImFnZW5kYWl0ZW1oaXN0b3J5LW51bWJlci10aCIgY2xhc3M9ImxlZ1dvcmRXcmFwIHRhYmxlcGFkZGluZyBsaW5rIiBzY29wZT0iY29sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImFnZW5kYWl0ZW1oaXN0b3J5LXRleHQtdGgiIGNsYXNzPSJsZWdXb3JkV3JhcCB0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiIHN0eWxlPSJ3aWR0aDogMzMlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0iYWdlbmRhaXRlbWhpc3RvcnktZGVwYXJ0bWVudC10aCIgY2xhc3M9ImxlZ1dvcmRXcmFwIHRhYmxlcGFkZGluZyIgc2NvcGU9ImNvbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXBhcnRtZW50DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0iYWdlbmRhaXRlbWhpc3RvcnktbWVldGluZ3R5cGUtdGgiIGNsYXNzPSJsZWdXb3JkV3JhcCB0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVldGluZyBUeXBlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0iYWdlbmRhaXRlbWhpc3RvcnktbWVldGluZ2RhdGUtdGgiIGNsYXNzPSJsZWdXb3JkV3JhcCB0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVldGluZyBEYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0iYWdlbmRhaXRlbWhpc3Rvcnktc3RhZ2UtdGgiIGNsYXNzPSJsZWdXb3JkV3JhcCB0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhZ2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSJhZ2VuZGFpdGVtaGlzdG9yeS1zdGF0dXMtdGgiIGNsYXNzPSJsZWdXb3JkV3JhcCB0YWJsZXBhZGRpbmciIHNjb3BlPSJjb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdHVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhbGwtbWVyZ2VkLWxpc3QiIGNsYXNzPSJjb2wtbWQtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtZXJnZWQtbGlzdCIgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUgZGF0YVRhYmxlIG5vLWZvb3RlciIgc3R5bGU9IndpZHRoOiAxMDAlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9InJlZ2lvbiIgYXJpYS1sYWJlbD0iTGlzdCBvZiBVcGNvbWluZyBNZWV0aW5ncyIgY2xhc3M9InVwY29taW5nLW1lZXRpbmdzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yNi01NiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgOTowMCBBTSc+Q29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAzPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyAxNCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04YzY0N2UwMS0yZWJkLTRkMzEtODEwNy0wZGE2ZDFlYmZmYzQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOGM2NDdlMDEtMmViZC00ZDMxLTgxMDctMGRhNmQxZWJmZmM0JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAzIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAzIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDMgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04YzY0N2UwMS0yZWJkLTRkMzEtODEwNy0wZGE2ZDFlYmZmYzQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDBfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAzIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgOTowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPThjNjQ3ZTAxLTJlYmQtNGQzMS04MTA3LTBkYTZkMWViZmZjNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAzIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgOTowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9OGM2NDdlMDEtMmViZC00ZDMxLTgxMDctMGRhNmQxZWJmZmM0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDMgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyAxNCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04YzY0N2UwMS0yZWJkLTRkMzEtODEwNy0wZGE2ZDFlYmZmYzQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpIGNsYXNzPSdsYXMgbGEtZmlsZSBmYS1sZyc+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWNrYWdlTmFtZSIgbGFuZz0iZW4iPkFnZW5kYTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icmVzb3VyY2UtbGluayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J01lZXRpbmcuYXNweD9JZD04YzY0N2UwMS0yZWJkLTRkMzEtODEwNy0wZGE2ZDFlYmZmYzQmQWdlbmRhPUFnZW5kYSZsYW5nPUVuZ2xpc2gnIGNsYXNzPSJsaW5rICIgdGFyZ2V0PSJfYmxhbmsiIGxhbmc9J2VuJyBhcmlhLWxhYmVsPSdBZ2VuZGEgKEhUTUwpIGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDMgMTYgSmFudWFyeSAyMDI0Jz5IVE1MPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InJlc291cmNlLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdGaWxlU3RyZWFtLmFzaHg/RG9jdW1lbnRJZD0xNjI2MDgnIGNsYXNzPSJsaW5rICIgdGFyZ2V0PSJfYmxhbmsiIGxhbmc9J2VuJyBhcmlhLWxhYmVsPSdBZ2VuZGEgKFBERikgZm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyAxNiBKYW51YXJ5IDIwMjQnPlBERjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxpIGNsYXNzPSdsYXMgbGEtZmlsZSBmYS1sZyc+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwYWNrYWdlTmFtZSIgbGFuZz0iZnIiPk9yZHJlIGR1IGpvdXI8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InJlc291cmNlLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OGM2NDdlMDEtMmViZC00ZDMxLTgxMDctMGRhNmQxZWJmZmM0JkFnZW5kYT1BZ2VuZGEmbGFuZz1GcmVuY2gnIGNsYXNzPSJsaW5rICIgdGFyZ2V0PSJfYmxhbmsiIGxhbmc9J2ZyJyBhcmlhLWxhYmVsPSdPcmRyZSBkdSBqb3VyIChIVE1MKSBwb3VyIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyAxNiBqYW52aWVyIDIwMjQnPkhUTUw8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC0xMzAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MzAgQU0nPkJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Njk5Y2NiMDEtMGY3ZC00NjI5LTk1YmEtZDEyMmNkYWQ0ZmNiJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q2OTljY2IwMS0wZjdkLTQ2MjktOTViYS1kMTIyY2RhZDRmY2InIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDFfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY5OWNjYjAxLTBmN2QtNDYyOS05NWJhLWQxMjJjZGFkNGZjYiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Njk5Y2NiMDEtMGY3ZC00NjI5LTk1YmEtZDEyMmNkYWQ0ZmNiJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD02OTljY2IwMS0wZjdkLTQ2MjktOTViYS1kMTIyY2RhZDRmY2ImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDFfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTY5OWNjYjAxLTBmN2QtNDYyOS05NWJhLWQxMjJjZGFkNGZjYicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGkgY2xhc3M9J2xhcyBsYS1maWxlIGZhLWxnJz48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhY2thZ2VOYW1lIiBsYW5nPSJlbiI+QWdlbmRhIENvdmVyIFBhZ2U8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InJlc291cmNlLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdGaWxlU3RyZWFtLmFzaHg/RG9jdW1lbnRJZD0xNjIxMzInIGNsYXNzPSJsaW5rICIgdGFyZ2V0PSJfYmxhbmsiIGxhbmc9J2VuJyBhcmlhLWxhYmVsPSdBZ2VuZGEgQ292ZXIgUGFnZSAoUERGKSBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDE2IEphbnVhcnkgMjAyNCc+UERGPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGkgY2xhc3M9J2xhcyBsYS1maWxlIGZhLWxnJz48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhY2thZ2VOYW1lIiBsYW5nPSJlbiI+QWdlbmRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY5OWNjYjAxLTBmN2QtNDYyOS05NWJhLWQxMjJjZGFkNGZjYiZBZ2VuZGE9QWdlbmRhJmxhbmc9RW5nbGlzaCcgY2xhc3M9ImxpbmsgIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J0FnZW5kYSAoSFRNTCkgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxNiBKYW51YXJ5IDIwMjQnPkhUTUw8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0nbGFzIGxhLWZpbGUgZmEtbGcnPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFja2FnZU5hbWUiIGxhbmc9ImZyIj5PcmRyZSBkdSBqb3VyPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY5OWNjYjAxLTBmN2QtNDYyOS05NWJhLWQxMjJjZGFkNGZjYiZBZ2VuZGE9QWdlbmRhJmxhbmc9RnJlbmNoJyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdmcicgYXJpYS1sYWJlbD0nT3JkcmUgZHUgam91ciAoSFRNTCkgcG91ciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTYgamFudmllciAyMDI0Jz5IVE1MPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjUtNTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDE6MDAgUE0nPkNvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgMTQgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODA5M2RkNDUtM2QwNS00Y2M4LThiN2MtZmYzMWVkMDI4OTIzJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCAxOjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0JlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkJlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDgwOTNkZDQ1LTNkMDUtNGNjOC04YjdjLWZmMzFlZDAyODkyMycgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMiBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgMTowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMiBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgMTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAyIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCAxOjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODA5M2RkNDUtM2QwNS00Y2M4LThiN2MtZmYzMWVkMDI4OTIzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMiBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgMTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDE6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04MDkzZGQ0NS0zZDA1LTRjYzgtOGI3Yy1mZjMxZWQwMjg5MjMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMiBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgMTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDE6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTgwOTNkZDQ1LTNkMDUtNGNjOC04YjdjLWZmMzFlZDAyODkyMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAyIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCAxOjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgMTQgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODA5M2RkNDUtM2QwNS00Y2M4LThiN2MtZmYzMWVkMDI4OTIzJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0nbGFzIGxhLWZpbGUgZmEtbGcnPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFja2FnZU5hbWUiIGxhbmc9ImVuIj5BZ2VuZGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InJlc291cmNlLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODA5M2RkNDUtM2QwNS00Y2M4LThiN2MtZmYzMWVkMDI4OTIzJkFnZW5kYT1BZ2VuZGEmbGFuZz1FbmdsaXNoJyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdlbicgYXJpYS1sYWJlbD0nQWdlbmRhIChIVE1MKSBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAyIDE2IEphbnVhcnkgMjAyNCc+SFRNTDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nRmlsZVN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9MTYyNzQxJyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdlbicgYXJpYS1sYWJlbD0nQWdlbmRhIChQREYpIGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgMTYgSmFudWFyeSAyMDI0Jz5QREY8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0nbGFzIGxhLWZpbGUgZmEtbGcnPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFja2FnZU5hbWUiIGxhbmc9ImZyIj5PcmRyZSBkdSBqb3VyPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgwOTNkZDQ1LTNkMDUtNGNjOC04YjdjLWZmMzFlZDAyODkyMyZBZ2VuZGE9QWdlbmRhJmxhbmc9RnJlbmNoJyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdmcicgYXJpYS1sYWJlbD0nT3JkcmUgZHUgam91ciAoSFRNTCkgcG91ciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDIgMTYgamFudmllciAyMDI0Jz5IVE1MPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMi0xMjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgNjowMCBQTSc+QWNjZXNzaWJpbGl0eSBBZHZpc29yeSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWNjZXNzaWJpbGl0eSBBZHZpc29yeSBDb21taXR0ZWUgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iNDgxZWMyYS03ZmU0LTQ5YzItYmFiYy0zZWRhYjRjNWEwNDcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDY6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nRWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uJz5FbGVjdHJvbmljIFBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGI0ODFlYzJhLTdmZTQtNDljMi1iYWJjLTNlZGFiNGM1YTA0NycgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEFjY2Vzc2liaWxpdHkgQWR2aXNvcnkgQ29tbWl0dGVlIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA2OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQWNjZXNzaWJpbGl0eSBBZHZpc29yeSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDY6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFjY2Vzc2liaWxpdHkgQWR2aXNvcnkgQ29tbWl0dGVlIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA2OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YjQ4MWVjMmEtN2ZlNC00OWMyLWJhYmMtM2VkYWI0YzVhMDQ3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFjY2Vzc2liaWxpdHkgQWR2aXNvcnkgQ29tbWl0dGVlIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA2OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEFjY2Vzc2liaWxpdHkgQWR2aXNvcnkgQ29tbWl0dGVlIFR1ZXNkYXksIEphbnVhcnkgMTYsIDIwMjQgQCA2OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YjQ4MWVjMmEtN2ZlNC00OWMyLWJhYmMtM2VkYWI0YzVhMDQ3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBBY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgNjowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgNjowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YjQ4MWVjMmEtN2ZlNC00OWMyLWJhYmMtM2VkYWI0YzVhMDQ3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgNjowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWNjZXNzaWJpbGl0eSBBZHZpc29yeSBDb21taXR0ZWUgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iNDgxZWMyYS03ZmU0LTQ5YzItYmFiYy0zZWRhYjRjNWEwNDcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iYWRkaXRpb25hbC1kb2MtbGlzdCByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nRmlsZVN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9MTYyMzM1JyB0aXRsZT0iQ2FuY2VsbGF0aW9uIEZyZW5jaCAtIEFBQyAxNiBqYW52aWVyIDIwMjQucGRmIiBjbGFzcz0ibGluayB0ZWFzZXJMaW5rIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J0NhbmNlbGxhdGlvbiBGcmVuY2ggLSBBQUMgMTYgamFudmllciAyMDI0LnBkZiBBY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSBUdWVzZGF5LCBKYW51YXJ5IDE2LCAyMDI0IEAgNjowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2xhcyBsYS1maWxlLXBkZiBmYS1sZyc+PC9pPjxzcGFuIGNsYXNzPSJ0ZWFzZXIiPkNhbmNlbGxhdGlvbiBGcmVuY2ggLSBBQUMgMTYgamFudmllciAyMDI0PC9zcGFuPjxzcGFuPi5wZGY8L3NwYW4+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nRmlsZVN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9MTYyMzM2JyB0aXRsZT0iQ2FuY2VsbGF0aW9uIEVuZ2xpc2ggLSBBQUMgSmFudWFyeSAxNiwgMjAyNC5wZGYiIGNsYXNzPSJsaW5rIHRlYXNlckxpbmsiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdlbicgYXJpYS1sYWJlbD0nQ2FuY2VsbGF0aW9uIEVuZ2xpc2ggLSBBQUMgSmFudWFyeSAxNiwgMjAyNC5wZGYgQWNjZXNzaWJpbGl0eSBBZHZpc29yeSBDb21taXR0ZWUgVHVlc2RheSwgSmFudWFyeSAxNiwgMjAyNCBAIDY6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdsYXMgbGEtZmlsZS1wZGYgZmEtbGcnPjwvaT48c3BhbiBjbGFzcz0idGVhc2VyIj5DYW5jZWxsYXRpb24gRW5nbGlzaCAtIEFBQyBKYW51YXJ5IDE2LCAyMDI0PC9zcGFuPjxzcGFuPi5wZGY8L3NwYW4+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTQtMTM0Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDk6MzAgQU0nPlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Nzg4ZmZmNjMtMmZmYy00YjYwLWI4NjItOGVmZTFjMWM4Mzk0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDc4OGZmZjYzLTJmZmMtNGI2MC1iODYyLThlZmUxYzFjODM5NCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Nzg4ZmZmNjMtMmZmYy00YjYwLWI4NjItOGVmZTFjMWM4Mzk0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Nzg4ZmZmNjMtMmZmYy00YjYwLWI4NjItOGVmZTFjMWM4Mzk0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDE3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDE3LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9Nzg4ZmZmNjMtMmZmYy00YjYwLWI4NjItOGVmZTFjMWM4Mzk0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDE3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc4OGZmZjYzLTJmZmMtNGI2MC1iODYyLThlZmUxYzFjODM5NCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGkgY2xhc3M9J2xhcyBsYS1maWxlIGZhLWxnJz48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhY2thZ2VOYW1lIiBsYW5nPSJlbiI+QWdlbmRhPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nTWVldGluZy5hc3B4P0lkPTc4OGZmZjYzLTJmZmMtNGI2MC1iODYyLThlZmUxYzFjODM5NCZBZ2VuZGE9QWdlbmRhJmxhbmc9RW5nbGlzaCcgY2xhc3M9ImxpbmsgIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J0FnZW5kYSAoSFRNTCkgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxNyBKYW51YXJ5IDIwMjQnPkhUTUw8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icmVzb3VyY2UtbGluayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J0ZpbGVTdHJlYW0uYXNoeD9Eb2N1bWVudElkPTE2MjI2NCcgY2xhc3M9ImxpbmsgIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J0FnZW5kYSAoUERGKSBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDE3IEphbnVhcnkgMjAyNCc+UERGPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGkgY2xhc3M9J2xhcyBsYS1maWxlIGZhLWxnJz48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBhY2thZ2VOYW1lIiBsYW5nPSJmciI+T3JkcmUgZHUgam91cjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icmVzb3VyY2UtbGluayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J01lZXRpbmcuYXNweD9JZD03ODhmZmY2My0yZmZjLTRiNjAtYjg2Mi04ZWZlMWMxYzgzOTQmQWdlbmRhPUFnZW5kYSZsYW5nPUZyZW5jaCcgY2xhc3M9ImxpbmsgIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZnInIGFyaWEtbGFiZWw9J09yZHJlIGR1IGpvdXIgKEhUTUwpIHBvdXIgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDE3IGphbnZpZXIgMjAyNCc+SFRNTDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTIzLTUzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDE6MDAgUE0nPkNvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDEgMTQgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NDM3MDQ5ODMtMWNiZi00ZTkwLWE0MDUtOGMwNDQwMWIwY2U0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDE6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENDM3MDQ5ODMtMWNiZi00ZTkwLWE0MDUtOGMwNDQwMWIwY2U0JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDE6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDVfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDEgV2VkbmVzZGF5LCBKYW51YXJ5IDE3LCAyMDI0IEAgMTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDE6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00MzcwNDk4My0xY2JmLTRlOTAtYTQwNS04YzA0NDAxYjBjZTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDVfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDE6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxIFdlZG5lc2RheSwgSmFudWFyeSAxNywgMjAyNCBAIDE6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00MzcwNDk4My0xY2JmLTRlOTAtYTQwNS04YzA0NDAxYjBjZTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCAxOjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCAxOjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD00MzcwNDk4My0xY2JmLTRlOTAtYTQwNS04YzA0NDAxYjBjZTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDVfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMSBXZWRuZXNkYXksIEphbnVhcnkgMTcsIDIwMjQgQCAxOjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDEgMTQgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NDM3MDQ5ODMtMWNiZi00ZTkwLWE0MDUtOGMwNDQwMWIwY2U0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0nbGFzIGxhLWZpbGUgZmEtbGcnPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFja2FnZU5hbWUiIGxhbmc9ImVuIj5BZ2VuZGE8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InJlc291cmNlLWxpbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NDM3MDQ5ODMtMWNiZi00ZTkwLWE0MDUtOGMwNDQwMWIwY2U0JkFnZW5kYT1BZ2VuZGEmbGFuZz1FbmdsaXNoJyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdlbicgYXJpYS1sYWJlbD0nQWdlbmRhIChIVE1MKSBmb3IgQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxIDE3IEphbnVhcnkgMjAyNCc+SFRNTDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nRmlsZVN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9MTYyMzY3JyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdlbicgYXJpYS1sYWJlbD0nQWdlbmRhIChQREYpIGZvciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDEgMTcgSmFudWFyeSAyMDI0Jz5QREY8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48aSBjbGFzcz0nbGFzIGxhLWZpbGUgZmEtbGcnPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGFja2FnZU5hbWUiIGxhbmc9ImZyIj5PcmRyZSBkdSBqb3VyPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJyZXNvdXJjZS1saW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nTWVldGluZy5hc3B4P0lkPTQzNzA0OTgzLTFjYmYtNGU5MC1hNDA1LThjMDQ0MDFiMGNlNCZBZ2VuZGE9QWdlbmRhJmxhbmc9RnJlbmNoJyBjbGFzcz0ibGluayAiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdmcicgYXJpYS1sYWJlbD0nT3JkcmUgZHUgam91ciAoSFRNTCkgcG91ciBDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDEgMTcgamFudmllciAyMDI0Jz5IVE1MPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTItMTMyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMTgsIDIwMjQgQCA5OjMwIEFNJz5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xMDFlZTk4Zi1lMDgzLTRlZjUtYWRhZC1lNmM4NjEzYzRiODQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEphbnVhcnkgMTgsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QxMDFlZTk4Zi1lMDgzLTRlZjUtYWRhZC1lNmM4NjEzYzRiODQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSmFudWFyeSAxOCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDZfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSmFudWFyeSAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDE4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTEwMWVlOThmLWUwODMtNGVmNS1hZGFkLWU2Yzg2MTNjNGI4NCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSmFudWFyeSAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMTgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTAxZWU5OGYtZTA4My00ZWY1LWFkYWQtZTZjODYxM2M0Yjg0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSmFudWFyeSAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMTgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0xMDFlZTk4Zi1lMDgzLTRlZjUtYWRhZC1lNmM4NjEzYzRiODQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDZfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MTAxZWU5OGYtZTA4My00ZWY1LWFkYWQtZTZjODYxM2M0Yjg0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFkZGl0aW9uYWwtZG9jLWxpc3QgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J0ZpbGVTdHJlYW0uYXNoeD9Eb2N1bWVudElkPTE2MjI2NScgdGl0bGU9IkNhbmNlbGxhdGlvbiBFbmdsaXNoIC0gRVBQU0MgMTggSmFuIDIwMjQucGRmIiBjbGFzcz0ibGluayB0ZWFzZXJMaW5rIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J0NhbmNlbGxhdGlvbiBFbmdsaXNoIC0gRVBQU0MgMTggSmFuIDIwMjQucGRmIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDE4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2xhcyBsYS1maWxlLXBkZiBmYS1sZyc+PC9pPjxzcGFuIGNsYXNzPSJ0ZWFzZXIiPkNhbmNlbGxhdGlvbiBFbmdsaXNoIC0gRVBQU0MgMTggSmFuIDIwMjQ8L3NwYW4+PHNwYW4+LnBkZjwvc3Bhbj48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSdGaWxlU3RyZWFtLmFzaHg/RG9jdW1lbnRJZD0xNjIyNjYnIHRpdGxlPSJDYW5jZWxsYXRpb24gRnJlbmNoIC0gRVBQU0MgMTggSmFuIDIwMjQucGRmIiBjbGFzcz0ibGluayB0ZWFzZXJMaW5rIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J0NhbmNlbGxhdGlvbiBGcmVuY2ggLSBFUFBTQyAxOCBKYW4gMjAyNC5wZGYgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMTgsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbGFzIGxhLWZpbGUtcGRmIGZhLWxnJz48L2k+PHNwYW4gY2xhc3M9InRlYXNlciI+Q2FuY2VsbGF0aW9uIEZyZW5jaCAtIEVQUFNDIDE4IEphbiAyMDI0PC9zcGFuPjxzcGFuPi5wZGY8L3NwYW4+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjItMjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSmFudWFyeSAyMiwgMjAyNCBAIDQ6MDAgUE0nPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWM5NTJjZDU0LWM5NGQtNGVmYi05YTAzLWEwOGQxYjk0N2Y2ZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIEphbnVhcnkgMjIsIDIwMjQgQCA0OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0VsZWN0cm9uaWMgUGFydGljaXBhdGlvbic+RWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RjOTUyY2Q1NC1jOTRkLTRlZmItOWEwMy1hMDhkMWI5NDdmNmUnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSmFudWFyeSAyMiwgMjAyNCBAIDQ6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDdfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSmFudWFyeSAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBKYW51YXJ5IDIyLCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWM5NTJjZDU0LWM5NGQtNGVmYi05YTAzLWEwOGQxYjk0N2Y2ZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsN19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSmFudWFyeSAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEphbnVhcnkgMjIsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Yzk1MmNkNTQtYzk0ZC00ZWZiLTlhMDMtYTA4ZDFiOTQ3ZjZlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSmFudWFyeSAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEphbnVhcnkgMjIsIDIwMjQgQCA0OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1jOTUyY2Q1NC1jOTRkLTRlZmItOWEwMy1hMDhkMWI5NDdmNmUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDdfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBKYW51YXJ5IDIyLCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWM5NTJjZDU0LWM5NGQtNGVmYi05YTAzLWEwOGQxYjk0N2Y2ZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSmFudWFyeSAyNCwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc1MjEwOWMwLWYyMGUtNDdmNy05YjY1LTE1OGU1OGJlOTM4MycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIEphbnVhcnkgMjQsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q3NTIxMDljMC1mMjBlLTQ3ZjctOWI2NS0xNThlNThiZTkzODMnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKYW51YXJ5IDI0LCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDhfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKYW51YXJ5IDI0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEphbnVhcnkgMjQsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTc1MjEwOWMwLWYyMGUtNDdmNy05YjY1LTE1OGU1OGJlOTM4MyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKYW51YXJ5IDI0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSmFudWFyeSAyNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NzUyMTA5YzAtZjIwZS00N2Y3LTliNjUtMTU4ZTU4YmU5MzgzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKYW51YXJ5IDI0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSmFudWFyeSAyNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD03NTIxMDljMC1mMjBlLTQ3ZjctOWI2NS0xNThlNThiZTkzODMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDhfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEphbnVhcnkgMjQsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc1MjEwOWMwLWYyMGUtNDdmNy05YjY1LTE1OGU1OGJlOTM4MycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjgtMTQ4Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDI1LCAyMDI0IEAgOTozMCBBTSc+VHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD00N2JmMTcyZi1hYzEwLTQ5M2ItYTY3YS0wOTJmMWMzMWU0MTUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEphbnVhcnkgMjUsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q0N2JmMTcyZi1hYzEwLTQ5M2ItYTY3YS0wOTJmMWMzMWU0MTUnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMjUsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDI1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDI1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTQ3YmYxNzJmLWFjMTAtNDkzYi1hNjdhLTA5MmYxYzMxZTQxNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMjUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgSmFudWFyeSAyNSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00N2JmMTcyZi1hYzEwLTQ5M2ItYTY3YS0wOTJmMWMzMWU0MTUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDlfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgSmFudWFyeSAyNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDI1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NDdiZjE3MmYtYWMxMC00OTNiLWE2N2EtMDkyZjFjMzFlNDE1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEphbnVhcnkgMjUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NDdiZjE3MmYtYWMxMC00OTNiLWE2N2EtMDkyZjFjMzFlNDE1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFkZGl0aW9uYWwtZG9jLWxpc3QgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J0ZpbGVTdHJlYW0uYXNoeD9Eb2N1bWVudElkPTE2MjIzNScgdGl0bGU9IkNhbmNlbGxhdGlvbiBFbmdsaXNoIC0gVFJDIDI1IEphbiAyMDI0LnBkZiIgY2xhc3M9ImxpbmsgdGVhc2VyTGluayIgdGFyZ2V0PSJfYmxhbmsiIGxhbmc9J2VuJyBhcmlhLWxhYmVsPSdDYW5jZWxsYXRpb24gRW5nbGlzaCAtIFRSQyAyNSBKYW4gMjAyNC5wZGYgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDI1LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2xhcyBsYS1maWxlLXBkZiBmYS1sZyc+PC9pPjxzcGFuIGNsYXNzPSJ0ZWFzZXIiPkNhbmNlbGxhdGlvbiBFbmdsaXNoIC0gVFJDIDI1IEphbiAyMDI0PC9zcGFuPjxzcGFuPi5wZGY8L3NwYW4+PC9hPjwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0nRmlsZVN0cmVhbS5hc2h4P0RvY3VtZW50SWQ9MTYyMjM2JyB0aXRsZT0iQ2FuY2VsbGF0aW9uIEZyZW5jaCAtIFRSQyAyNSBKYW4gMjAyNC5wZGYiIGNsYXNzPSJsaW5rIHRlYXNlckxpbmsiIHRhcmdldD0iX2JsYW5rIiBsYW5nPSdlbicgYXJpYS1sYWJlbD0nQ2FuY2VsbGF0aW9uIEZyZW5jaCAtIFRSQyAyNSBKYW4gMjAyNC5wZGYgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKYW51YXJ5IDI1LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9J2xhcyBsYS1maWxlLXBkZiBmYS1sZyc+PC9pPjxzcGFuIGNsYXNzPSJ0ZWFzZXIiPkNhbmNlbGxhdGlvbiBGcmVuY2ggLSBUUkMgMjUgSmFuIDIwMjQ8L3NwYW4+PHNwYW4+LnBkZjwvc3Bhbj48L2E+PC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xNC0xMzQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDMxLCAyMDI0IEAgOTozMCBBTSc+UGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1jNDUwZjdhOS1lYWVlLTRiMTQtYTRjYS1lMzhhOWRiZjFhMmInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBKYW51YXJ5IDMxLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYzQ1MGY3YTktZWFlZS00YjE0LWE0Y2EtZTM4YTlkYmYxYTJiJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSmFudWFyeSAzMSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSmFudWFyeSAzMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMzEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YzQ1MGY3YTktZWFlZS00YjE0LWE0Y2EtZTM4YTlkYmYxYTJiJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDMxLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDMxLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWM0NTBmN2E5LWVhZWUtNGIxNC1hNGNhLWUzOGE5ZGJmMWEyYiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMzEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEphbnVhcnkgMzEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1jNDUwZjdhOS1lYWVlLTRiMTQtYTRjYS1lMzhhOWRiZjFhMmImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKYW51YXJ5IDMxLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWM0NTBmN2E5LWVhZWUtNGIxNC1hNGNhLWUzOGE5ZGJmMWEyYicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMS02MSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0FncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDEsIDIwMjQgQCAxMDowMCBBTSc+QWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1mMjZjZDM3OC1iMTJjLTQ3ZGQtODc3NS0zYTNiMDY2NmY5OTYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEZlYnJ1YXJ5IDAxLCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZjI2Y2QzNzgtYjEyYy00N2RkLTg3NzUtM2EzYjA2NjZmOTk2JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwMSwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwMSwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZjI2Y2QzNzgtYjEyYy00N2RkLTg3NzUtM2EzYjA2NjZmOTk2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDAxLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwMSwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZjI2Y2QzNzgtYjEyYy00N2RkLTg3NzUtM2EzYjA2NjZmOTk2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZjI2Y2QzNzgtYjEyYy00N2RkLTg3NzUtM2EzYjA2NjZmOTk2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZjI2Y2QzNzgtYjEyYy00N2RkLTg3NzUtM2EzYjA2NjZmOTk2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC05LTEyOSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0ZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMDYsIDIwMjQgQCA5OjMwIEFNJz5GaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MGQxYzgyYjAtMzY4ZS00MTdlLThlZTctZGQzZWJhOTcwNWZkJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEZlYnJ1YXJ5IDA2LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMGQxYzgyYjAtMzY4ZS00MTdlLThlZTctZGQzZWJhOTcwNWZkJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAwNiwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAwNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMDYsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MGQxYzgyYjAtMzY4ZS00MTdlLThlZTctZGQzZWJhOTcwNWZkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDA2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDA2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTBkMWM4MmIwLTM2OGUtNDE3ZS04ZWU3LWRkM2ViYTk3MDVmZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMDYsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMDYsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0wZDFjODJiMC0zNjhlLTQxN2UtOGVlNy1kZDNlYmE5NzA1ZmQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDA2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0wZDFjODJiMC0zNjhlLTQxN2UtOGVlNy1kZDNlYmE5NzA1ZmQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIEZlYnJ1YXJ5IDA3LCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODkzYjZlYjAtYWRjNS00NmI4LWE2Y2EtNWZhMzBiNTE5MGUwJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgRmVicnVhcnkgMDcsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q4OTNiNmViMC1hZGM1LTQ2YjgtYTZjYS01ZmEzMGI1MTkwZTAnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBGZWJydWFyeSAwNywgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxM19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEZlYnJ1YXJ5IDA3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEZlYnJ1YXJ5IDA3LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04OTNiNmViMC1hZGM1LTQ2YjgtYTZjYS01ZmEzMGI1MTkwZTAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEZlYnJ1YXJ5IDA3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTg5M2I2ZWIwLWFkYzUtNDZiOC1hNmNhLTVmYTMwYjUxOTBlMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEZlYnJ1YXJ5IDA3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ODkzYjZlYjAtYWRjNS00NmI4LWE2Y2EtNWZhMzBiNTE5MGUwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxM19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTg5M2I2ZWIwLWFkYzUtNDZiOC1hNmNhLTVmYTMwYjUxOTBlMCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtNzAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgOTozMCBBTSc+VHJhbnNpdCBDb21taXNzaW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0zYWIxZmIwYi0zYTlmLTQ2OTktOGNhNi0wNDUyNmYzNTUxYWEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEM2FiMWZiMGItM2E5Zi00Njk5LThjYTYtMDQ1MjZmMzU1MWFhJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBGZWJydWFyeSAwOCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBGZWJydWFyeSAwOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9M2FiMWZiMGItM2E5Zi00Njk5LThjYTYtMDQ1MjZmMzU1MWFhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTNhYjFmYjBiLTNhOWYtNDY5OS04Y2E2LTA0NTI2ZjM1NTFhYSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTRfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0zYWIxZmIwYi0zYTlmLTQ2OTktOGNhNi0wNDUyNmYzNTUxYWEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNpdCBDb21taXNzaW9uIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTNhYjFmYjBiLTNhOWYtNDY5OS04Y2E2LTA0NTI2ZjM1NTFhYScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNi0xMjYiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwOCwgMjAyNCBAIDU6MzAgUE0nPkZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1lZjI4YTVhMy1hYWExLTQ3MDMtOWE3ZS01ZTBiYmQ4N2Q1NWUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgNTozMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZWYyOGE1YTMtYWFhMS00NzAzLTlhN2UtNWUwYmJkODdkNTVlJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA1OjMwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA1OjMwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWYyOGE1YTMtYWFhMS00NzAzLTlhN2UtNWUwYmJkODdkNTVlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAwOCwgMjAyNCBAIDU6MzAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA1OjMwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWYyOGE1YTMtYWFhMS00NzAzLTlhN2UtNWUwYmJkODdkNTVlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDA4LCAyMDI0IEAgNTozMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZWYyOGE1YTMtYWFhMS00NzAzLTlhN2UtNWUwYmJkODdkNTVlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMDgsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWVmMjhhNWEzLWFhYTEtNDcwMy05YTdlLTVlMGJiZDg3ZDU1ZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjQtMjQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBGZWJydWFyeSAxMiwgMjAyNCBAIDU6MDAgUE0nPkJvYXJkIG9mIEhlYWx0aDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCb2FyZCBvZiBIZWFsdGggMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YWRjZDAwYzctN2E5ZS00ZTM1LWI5MDYtMzhiM2UxZGE0NzI4JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPk1vbmRheSwgRmVicnVhcnkgMTIsIDIwMjQgQCA1OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RhZGNkMDBjNy03YTllLTRlMzUtYjkwNi0zOGIzZTFkYTQ3MjgnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBGZWJydWFyeSAxMiwgMjAyNCBAIDU6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE2X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgRmVicnVhcnkgMTIsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBGZWJydWFyeSAxMiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hZGNkMDBjNy03YTllLTRlMzUtYjkwNi0zOGIzZTFkYTQ3MjgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE2X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIEZlYnJ1YXJ5IDEyLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBGZWJydWFyeSAxMiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hZGNkMDBjNy03YTllLTRlMzUtYjkwNi0zOGIzZTFkYTQ3MjgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE2X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBGZWJydWFyeSAxMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgRmVicnVhcnkgMTIsIDIwMjQgQCA1OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1hZGNkMDBjNy03YTllLTRlMzUtYjkwNi0zOGIzZTFkYTQ3MjgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE2X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBGZWJydWFyeSAxMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJvYXJkIG9mIEhlYWx0aCAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hZGNkMDBjNy03YTllLTRlMzUtYjkwNi0zOGIzZTFkYTQ3MjgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEwLTEzMCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0J1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDk6MzAgQU0nPkJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YTRlYmI5ZWItOThiZi00OWZiLWE2NDMtMTA5MGI2ODE0MzZmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEZlYnJ1YXJ5IDEzLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYTRlYmI5ZWItOThiZi00OWZiLWE2NDMtMTA5MGI2ODE0MzZmJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDEzLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTdfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMTMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMTMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YTRlYmI5ZWItOThiZi00OWZiLWE2NDMtMTA5MGI2ODE0MzZmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxN19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMTMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hNGViYjllYi05OGJmLTQ5ZmItYTY0My0xMDkwYjY4MTQzNmYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE3X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMTMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWE0ZWJiOWViLTk4YmYtNDlmYi1hNjQzLTEwOTBiNjgxNDM2ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTdfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hNGViYjllYi05OGJmLTQ5ZmItYTY0My0xMDkwYjY4MTQzNmYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTcyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEZlYnJ1YXJ5IDEzLCAyMDI0IEAgNTowMCBQTSc+T3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1jMjgxZmFiYy1lZGI1LTQ1NWUtOWVjNS1mZjAxMDExMjBjYzEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgRmVicnVhcnkgMTMsIDIwMjQgQCA1OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RjMjgxZmFiYy1lZGI1LTQ1NWUtOWVjNS1mZjAxMDExMjBjYzEnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgRmVicnVhcnkgMTMsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxOF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1jMjgxZmFiYy1lZGI1LTQ1NWUtOWVjNS1mZjAxMDExMjBjYzEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE4X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEZlYnJ1YXJ5IDEzLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWMyODFmYWJjLWVkYjUtNDU1ZS05ZWM1LWZmMDEwMTEyMGNjMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMThfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBGZWJydWFyeSAxMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEZlYnJ1YXJ5IDEzLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YzI4MWZhYmMtZWRiNS00NTVlLTllYzUtZmYwMTAxMTIwY2MxJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxOF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEZlYnJ1YXJ5IDEzLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIDEzIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWMyODFmYWJjLWVkYjUtNDU1ZS05ZWM1LWZmMDEwMTEyMGNjMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTQtMTM0Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMTQsIDIwMjQgQCA5OjMwIEFNJz5QbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTRlZjJjZGNjLTMzYjItNGVlZC04NjM0LWY5OTdiNzNmZTkzYScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIEZlYnJ1YXJ5IDE0LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENGVmMmNkY2MtMzNiMi00ZWVkLTg2MzQtZjk5N2I3M2ZlOTNhJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMTQsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxOV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDE0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMTQsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NGVmMmNkY2MtMzNiMi00ZWVkLTg2MzQtZjk5N2I3M2ZlOTNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxOV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBGZWJydWFyeSAxNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMTQsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NGVmMmNkY2MtMzNiMi00ZWVkLTg2MzQtZjk5N2I3M2ZlOTNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxOV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMTQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDE0LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NGVmMmNkY2MtMzNiMi00ZWVkLTg2MzQtZjk5N2I3M2ZlOTNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxOV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMTQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NGVmMmNkY2MtMzNiMi00ZWVkLTg2MzQtZjk5N2I3M2ZlOTNhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMi0xMzIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMTUsIDIwMjQgQCA5OjMwIEFNJz5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1lMDAzZmMzZS1lOGFmLTQwMGMtODNhNS00ODgwNWFmZjNlMWYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEZlYnJ1YXJ5IDE1LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZTAwM2ZjM2UtZThhZi00MDBjLTgzYTUtNDg4MDVhZmYzZTFmJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDE1LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjBfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMTUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMTUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZTAwM2ZjM2UtZThhZi00MDBjLTgzYTUtNDg4MDVhZmYzZTFmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyMF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMTUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAxNSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1lMDAzZmMzZS1lOGFmLTQwMGMtODNhNS00ODgwNWFmZjNlMWYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDIwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMTUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAxNSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWUwMDNmYzNlLWU4YWYtNDAwYy04M2E1LTQ4ODA1YWZmM2UxZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjBfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAxNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWUwMDNmYzNlLWU4YWYtNDAwYy04M2E1LTQ4ODA1YWZmM2UxZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTMtMTMzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAyMCwgMjAyNCBAIDk6MzAgQU0nPkVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSAyMCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01Mjc2NGEzMC1jYWJkLTQ0NDEtYWU5My0yMGYwZmE3MDJkNWUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgRmVicnVhcnkgMjAsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q1Mjc2NGEzMC1jYWJkLTQ0NDEtYWU5My0yMGYwZmE3MDJkNWUnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDIwLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjFfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDIwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAyMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01Mjc2NGEzMC1jYWJkLTQ0NDEtYWU5My0yMGYwZmE3MDJkNWUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDIxX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjAsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NTI3NjRhMzAtY2FiZC00NDQxLWFlOTMtMjBmMGZhNzAyZDVlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyMV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAyMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAyMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTUyNzY0YTMwLWNhYmQtNDQ0MS1hZTkzLTIwZjBmYTcwMmQ1ZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjFfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIDIwIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTUyNzY0YTMwLWNhYmQtNDQ0MS1hZTkzLTIwZjBmYTcwMmQ1ZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMjEsIDIwMjQgQCAxMDowMCBBTSc+Q2l0eSBDb3VuY2lsPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1jMmNhMmNhMS0wZjE4LTQxMzMtYWY5Yy01YzdmMTM1ZjE0ODYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBGZWJydWFyeSAyMSwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGMyY2EyY2ExLTBmMTgtNDEzMy1hZjljLTVjN2YxMzVmMTQ4NicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEZlYnJ1YXJ5IDIxLCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDIyX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMjEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMjEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWMyY2EyY2ExLTBmMTgtNDEzMy1hZjljLTVjN2YxMzVmMTQ4NiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjJfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMjEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBGZWJydWFyeSAyMSwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YzJjYTJjYTEtMGYxOC00MTMzLWFmOWMtNWM3ZjEzNWYxNDg2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyMl9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRmVicnVhcnkgMjEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBGZWJydWFyeSAyMSwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1jMmNhMmNhMS0wZjE4LTQxMzMtYWY5Yy01YzdmMTM1ZjE0ODYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDIyX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBGZWJydWFyeSAyMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YzJjYTJjYTEtMGYxOC00MTMzLWFmOWMtNWM3ZjEzNWYxNDg2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yOC0xNDgiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgOTozMCBBTSc+VHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hMzhhYjVlNi1lNjM5LTQzYWQtOTRlZS1kZDIzZTdiMjRhNDAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYTM4YWI1ZTYtZTYzOS00M2FkLTk0ZWUtZGQyM2U3YjI0YTQwJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyMiwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDIzX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YTM4YWI1ZTYtZTYzOS00M2FkLTk0ZWUtZGQyM2U3YjI0YTQwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyM19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWEzOGFiNWU2LWU2MzktNDNhZC05NGVlLWRkMjNlN2IyNGE0MCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1hMzhhYjVlNi1lNjM5LTQzYWQtOTRlZS1kZDIzZTdiMjRhNDAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDIzX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWEzOGFiNWU2LWU2MzktNDNhZC05NGVlLWRkMjNlN2IyNGE0MCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMi0xNTIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdQbGFubmluZyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgNTozMCBQTSc+UGxhbm5pbmcgQWR2aXNvcnkgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIEFkdmlzb3J5IENvbW1pdHRlZSAyMCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iNGNhMDYxNy04MWY5LTRmMmYtYjdkOC1iY2JlZDM0NDkzMjQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgNTozMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDb2xvbmVsIEJ5IFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5Db2xvbmVsIEJ5IFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RiNGNhMDYxNy04MWY5LTRmMmYtYjdkOC1iY2JlZDM0NDkzMjQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBQbGFubmluZyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgNTozMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjRfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBQbGFubmluZyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDIyLCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgUGxhbm5pbmcgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyMiwgMjAyNCBAIDU6MzAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1iNGNhMDYxNy04MWY5LTRmMmYtYjdkOC1iY2JlZDM0NDkzMjQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDI0X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFBsYW5uaW5nIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMjQgQCA1OjMwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YjRjYTA2MTctODFmOS00ZjJmLWI3ZDgtYmNiZWQzNDQ5MzI0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyNF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgUGxhbm5pbmcgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyMiwgMjAyNCBAIDU6MzAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgUGxhbm5pbmcgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyMiwgMjAyNCBAIDU6MzAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWI0Y2EwNjE3LTgxZjktNGYyZi1iN2Q4LWJjYmVkMzQ0OTMyNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjRfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjIsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBBZHZpc29yeSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YjRjYTA2MTctODFmOS00ZjJmLWI3ZDgtYmNiZWQzNDQ5MzI0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yMi0yMiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J090dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBGZWJydWFyeSAyNiwgMjAyNCBAIDQ6MDAgUE0nPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWUwNWNlNDEyLWM4ZGQtNGZlOC1hNGRmLTJiZDUwOWZkYzc3OCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIEZlYnJ1YXJ5IDI2LCAyMDI0IEAgNDowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZTA1Y2U0MTItYzhkZC00ZmU4LWE0ZGYtMmJkNTA5ZmRjNzc4JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEZlYnJ1YXJ5IDI2LCAyMDI0IEAgNDowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjVfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgRmVicnVhcnkgMjYsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgRmVicnVhcnkgMjYsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZTA1Y2U0MTItYzhkZC00ZmU4LWE0ZGYtMmJkNTA5ZmRjNzc4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyNV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgRmVicnVhcnkgMjYsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBGZWJydWFyeSAyNiwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1lMDVjZTQxMi1jOGRkLTRmZTgtYTRkZi0yYmQ1MDlmZGM3NzgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDI1X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgRmVicnVhcnkgMjYsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBGZWJydWFyeSAyNiwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWUwNWNlNDEyLWM4ZGQtNGZlOC1hNGRmLTJiZDUwOWZkYzc3OCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjVfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBGZWJydWFyeSAyNiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1lMDVjZTQxMi1jOGRkLTRmZTgtYTRkZi0yYmQ1MDlmZGM3NzgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTExLTEzMSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjcsIDIwMjQgQCA5OjMwIEFNJz5Db21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgMDggRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OWYyNmE3MjEtYzQyZi00ZTliLWFhZWYtNmFhNzJlYjRlODhkJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEZlYnJ1YXJ5IDI3LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOWYyNmE3MjEtYzQyZi00ZTliLWFhZWYtNmFhNzJlYjRlODhkJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAyNywgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDI2X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBGZWJydWFyeSAyNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OWYyNmE3MjEtYzQyZi00ZTliLWFhZWYtNmFhNzJlYjRlODhkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyNl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDI3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDI3LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTlmMjZhNzIxLWM0MmYtNGU5Yi1hYWVmLTZhYTcyZWI0ZTg4ZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRmVicnVhcnkgMjcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD05ZjI2YTcyMS1jNDJmLTRlOWItYWFlZi02YWE3MmViNGU4OGQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDI2X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEZlYnJ1YXJ5IDI3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSAwOCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05ZjI2YTcyMS1jNDJmLTRlOWItYWFlZi02YWE3MmViNGU4OGQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTE0LTEzNCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1BsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDI4LCAyMDI0IEAgOTozMCBBTSc+UGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hZGFmOTBhYS0wNjUyLTRmZGMtOTViZi1iNWM2YThkOWMxZWUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBGZWJydWFyeSAyOCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGFkYWY5MGFhLTA2NTItNGZkYy05NWJmLWI1YzZhOGQ5YzFlZScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDI4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjdfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBGZWJydWFyeSAyOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDI4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWFkYWY5MGFhLTA2NTItNGZkYy05NWJmLWI1YzZhOGQ5YzFlZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjdfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgRmVicnVhcnkgMjgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDI4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWFkYWY5MGFhLTA2NTItNGZkYy05NWJmLWI1YzZhOGQ5YzFlZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjdfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBGZWJydWFyeSAyOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWFkYWY5MGFhLTA2NTItNGZkYy05NWJmLWI1YzZhOGQ5YzFlZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjdfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEZlYnJ1YXJ5IDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWFkYWY5MGFhLTA2NTItNGZkYy05NWJmLWI1YzZhOGQ5YzFlZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMi02MiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0F1ZGl0IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjksIDIwMjQgQCA5OjMwIEFNJz5BdWRpdCBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQXVkaXQgQ29tbWl0dGVlIDIzIE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTI2MmFkOWI2LTJjMWItNGUxMi05YTI3LWYyMGIxMDZmMGY0YScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgRmVicnVhcnkgMjksIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QyNjJhZDliNi0yYzFiLTRlMTItOWEyNy1mMjBiMTA2ZjBmNGEnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBBdWRpdCBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDI5LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjhfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBBdWRpdCBDb21taXR0ZWUgVGh1cnNkYXksIEZlYnJ1YXJ5IDI5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQXVkaXQgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyOSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yNjJhZDliNi0yYzFiLTRlMTItOWEyNy1mMjBiMTA2ZjBmNGEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDI4X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEF1ZGl0IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEF1ZGl0IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MjYyYWQ5YjYtMmMxYi00ZTEyLTlhMjctZjIwYjEwNmYwZjRhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwyOF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQXVkaXQgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQXVkaXQgQ29tbWl0dGVlIFRodXJzZGF5LCBGZWJydWFyeSAyOSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTI2MmFkOWI2LTJjMWItNGUxMi05YTI3LWYyMGIxMDZmMGY0YSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjhfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEF1ZGl0IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBdWRpdCBDb21taXR0ZWUgMjMgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MjYyYWQ5YjYtMmMxYi00ZTEyLTlhMjctZjIwYjEwNmYwZjRhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImFkZGl0aW9uYWwtZG9jLWxpc3QgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9J0ZpbGVTdHJlYW0uYXNoeD9Eb2N1bWVudElkPTE2MjMwNycgdGl0bGU9Ik5vdGljZSBvZiBEYXRlIENoYW5nZSBCSUwgLSBBdWRpdCBDb21taXR0ZWUucGRmIiBjbGFzcz0ibGluayB0ZWFzZXJMaW5rIiB0YXJnZXQ9Il9ibGFuayIgbGFuZz0nZW4nIGFyaWEtbGFiZWw9J05vdGljZSBvZiBEYXRlIENoYW5nZSBCSUwgLSBBdWRpdCBDb21taXR0ZWUucGRmIEF1ZGl0IENvbW1pdHRlZSBUaHVyc2RheSwgRmVicnVhcnkgMjksIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0nbGFzIGxhLWZpbGUtcGRmIGZhLWxnJz48L2k+PHNwYW4gY2xhc3M9InRlYXNlciI+Tm90aWNlIG9mIERhdGUgQ2hhbmdlIEJJTCAtIEF1ZGl0IENvbW1pdHRlZTwvc3Bhbj48c3Bhbj4ucGRmPC9zcGFuPjwvYT48L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEwLTEzMCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0J1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBNb25kYXksIE1hcmNoIDA0LCAyMDI0IEAgOTozMCBBTSc+QnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1mNGRlOTE3Mi1iNzVmLTQ2MTktYTc4Ni1iMzgzOThjYmRmMjMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBNYXJjaCAwNCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGY0ZGU5MTcyLWI3NWYtNDYxOS1hNzg2LWIzODM5OGNiZGYyMycgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBNb25kYXksIE1hcmNoIDA0LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgTW9uZGF5LCBNYXJjaCAwNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBNb25kYXksIE1hcmNoIDA0LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWY0ZGU5MTcyLWI3NWYtNDYxOS1hNzg2LWIzODM5OGNiZGYyMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjlfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIE1vbmRheSwgTWFyY2ggMDQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBNb25kYXksIE1hcmNoIDA0LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWY0ZGU5MTcyLWI3NWYtNDYxOS1hNzg2LWIzODM5OGNiZGYyMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjlfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBNb25kYXksIE1hcmNoIDA0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgTW9uZGF5LCBNYXJjaCAwNCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWY0ZGU5MTcyLWI3NWYtNDYxOS1hNzg2LWIzODM5OGNiZGYyMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMjlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBNb25kYXksIE1hcmNoIDA0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWY0ZGU5MTcyLWI3NWYtNDYxOS1hNzg2LWIzODM5OGNiZGYyMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtOS0xMjkiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDA1LCAyMDI0IEAgOTozMCBBTSc+RmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc1YzkyNDg1LWJmOGQtNDQ3NS1iNzZiLTZmYWRmM2I1NDE3ZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBNYXJjaCAwNSwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDc1YzkyNDg1LWJmOGQtNDQ3NS1iNzZiLTZmYWRmM2I1NDE3ZicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMDUsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzMF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMDUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDA1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTc1YzkyNDg1LWJmOGQtNDQ3NS1iNzZiLTZmYWRmM2I1NDE3ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzBfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAwNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAwNSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD03NWM5MjQ4NS1iZjhkLTQ0NzUtYjc2Yi02ZmFkZjNiNTQxN2YmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDMwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDA1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDA1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NzVjOTI0ODUtYmY4ZC00NDc1LWI3NmItNmZhZGYzYjU0MTdmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzMF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAwNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NzVjOTI0ODUtYmY4ZC00NDc1LWI3NmItNmZhZGYzYjU0MTdmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAwNiwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPThiODEyMTllLTE0OGEtNDQxNC1hMDJlLTcyYjFiYmJjMDVlYicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIE1hcmNoIDA2LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOGI4MTIxOWUtMTQ4YS00NDE0LWEwMmUtNzJiMWJiYmMwNWViJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWFyY2ggMDYsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzFfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAwNiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAwNiwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OGI4MTIxOWUtMTQ4YS00NDE0LWEwMmUtNzJiMWJiYmMwNWViJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzMV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAwNiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1hcmNoIDA2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04YjgxMjE5ZS0xNDhhLTQ0MTQtYTAyZS03MmIxYmJiYzA1ZWImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDMxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAwNiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1hcmNoIDA2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPThiODEyMTllLTE0OGEtNDQxNC1hMDJlLTcyYjFiYmJjMDVlYiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzFfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1hcmNoIDA2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04YjgxMjE5ZS0xNDhhLTQ0MTQtYTAyZS03MmIxYmJiYzA1ZWInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEtNjEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1hcmNoIDA3LCAyMDI0IEAgMTA6MDAgQU0nPkFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMDcgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9N2M1MWM5ZWEtYjRiMC00MDFjLWI0YTAtNDZiYjM5YTQ4MDdmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBNYXJjaCAwNywgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0JlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkJlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDdjNTFjOWVhLWI0YjAtNDAxYy1iNGEwLTQ2YmIzOWE0ODA3ZicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMDcsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzJfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1hcmNoIDA3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTdjNTFjOWVhLWI0YjAtNDAxYy1iNGEwLTQ2YmIzOWE0ODA3ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzJfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAwNywgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTdjNTFjOWVhLWI0YjAtNDAxYy1iNGEwLTQ2YmIzOWE0ODA3ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1hcmNoIDA3LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTdjNTFjOWVhLWI0YjAtNDAxYy1iNGEwLTQ2YmIzOWE0ODA3ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzJfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTdjNTFjOWVhLWI0YjAtNDAxYy1iNGEwLTQ2YmIzOWE0ODA3ZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMi02MiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0F1ZGl0IENvbW1pdHRlZSBGcmlkYXksIE1hcmNoIDA4LCAyMDI0IEAgOTozMCBBTSc+QXVkaXQgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEF1ZGl0IENvbW1pdHRlZSAwOSBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTFjNjVlMTVlLTBkODItNGNlYS04YzZiLTVkMzhkMzkzOThmZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5GcmlkYXksIE1hcmNoIDA4LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMWM2NWUxNWUtMGQ4Mi00Y2VhLThjNmItNWQzOGQzOTM5OGZkJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQXVkaXQgQ29tbWl0dGVlIEZyaWRheSwgTWFyY2ggMDgsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzM19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEF1ZGl0IENvbW1pdHRlZSBGcmlkYXksIE1hcmNoIDA4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQXVkaXQgQ29tbWl0dGVlIEZyaWRheSwgTWFyY2ggMDgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MWM2NWUxNWUtMGQ4Mi00Y2VhLThjNmItNWQzOGQzOTM5OGZkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzM19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBdWRpdCBDb21taXR0ZWUgRnJpZGF5LCBNYXJjaCAwOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQXVkaXQgQ29tbWl0dGVlIEZyaWRheSwgTWFyY2ggMDgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MWM2NWUxNWUtMGQ4Mi00Y2VhLThjNmItNWQzOGQzOTM5OGZkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzM19JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQXVkaXQgQ29tbWl0dGVlIEZyaWRheSwgTWFyY2ggMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEF1ZGl0IENvbW1pdHRlZSBGcmlkYXksIE1hcmNoIDA4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MWM2NWUxNWUtMGQ4Mi00Y2VhLThjNmItNWQzOGQzOTM5OGZkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzM19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQXVkaXQgQ29tbWl0dGVlIEZyaWRheSwgTWFyY2ggMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBdWRpdCBDb21taXR0ZWUgMDkgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xYzY1ZTE1ZS0wZDgyLTRjZWEtOGM2Yi01ZDM4ZDM5Mzk4ZmQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTcyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1hcmNoIDEyLCAyMDI0IEAgNTowMCBQTSc+T3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04MDE5YTM3OC0wZTdiLTRjZjQtOWRjYS00N2Q5MDdiMGVmOTYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgTWFyY2ggMTIsIDIwMjQgQCA1OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q4MDE5YTM3OC0wZTdiLTRjZjQtOWRjYS00N2Q5MDdiMGVmOTYnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTWFyY2ggMTIsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzNF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBNYXJjaCAxMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBNYXJjaCAxMiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04MDE5YTM3OC0wZTdiLTRjZjQtOWRjYS00N2Q5MDdiMGVmOTYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDM0X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBNYXJjaCAxMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1hcmNoIDEyLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgwMTlhMzc4LTBlN2ItNGNmNC05ZGNhLTQ3ZDkwN2IwZWY5NiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzRfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBNYXJjaCAxMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1hcmNoIDEyLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ODAxOWEzNzgtMGU3Yi00Y2Y0LTlkY2EtNDdkOTA3YjBlZjk2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzNF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1hcmNoIDEyLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIDEzIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTgwMTlhMzc4LTBlN2ItNGNmNC05ZGNhLTQ3ZDkwN2IwZWY5NicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTQtMTM0Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMTMsIDIwMjQgQCA5OjMwIEFNJz5QbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTU4Y2I3MTE4LTg1OGUtNDllMy05MDVhLTc5NmFiNmZlOThjYScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIE1hcmNoIDEzLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENThjYjcxMTgtODU4ZS00OWUzLTkwNWEtNzk2YWI2ZmU5OGNhJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMTMsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzNV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1hcmNoIDEzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMTMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NThjYjcxMTgtODU4ZS00OWUzLTkwNWEtNzk2YWI2ZmU5OGNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzNV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMTMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NThjYjcxMTgtODU4ZS00OWUzLTkwNWEtNzk2YWI2ZmU5OGNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzNV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMTMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1hcmNoIDEzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NThjYjcxMTgtODU4ZS00OWUzLTkwNWEtNzk2YWI2ZmU5OGNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzNV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMTMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NThjYjcxMTgtODU4ZS00OWUzLTkwNWEtNzk2YWI2ZmU5OGNhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC03MCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE1hcmNoIDE4LCAyMDI0IEAgOTozMCBBTSc+VHJhbnNpdCBDb21taXNzaW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05ZDJjNjczZC01MjgzLTQ0NjktOGI5ZC03ZGRlYmJiNmQzMTgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBNYXJjaCAxOCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDlkMmM2NzNkLTUyODMtNDQ2OS04YjlkLTdkZGViYmI2ZDMxOCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE1hcmNoIDE4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzZfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBUcmFuc2l0IENvbW1pc3Npb24gTW9uZGF5LCBNYXJjaCAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE1hcmNoIDE4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTlkMmM2NzNkLTUyODMtNDQ2OS04YjlkLTdkZGViYmI2ZDMxOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzZfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNpdCBDb21taXNzaW9uIE1vbmRheSwgTWFyY2ggMTgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE1hcmNoIDE4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTlkMmM2NzNkLTUyODMtNDQ2OS04YjlkLTdkZGViYmI2ZDMxOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE1hcmNoIDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gTW9uZGF5LCBNYXJjaCAxOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTlkMmM2NzNkLTUyODMtNDQ2OS04YjlkLTdkZGViYmI2ZDMxOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzZfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE1hcmNoIDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNpdCBDb21taXNzaW9uIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTlkMmM2NzNkLTUyODMtNDQ2OS04YjlkLTdkZGViYmI2ZDMxOCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTMtMTMzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAxOSwgMjAyNCBAIDk6MzAgQU0nPkVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSAyMCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01ZTgzODQwMC01NTExLTRhNGQtOTliZS00N2M0YjE1NWY0OGQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgTWFyY2ggMTksIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q1ZTgzODQwMC01NTExLTRhNGQtOTliZS00N2M0YjE1NWY0OGQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDE5LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzdfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDE5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAxOSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01ZTgzODQwMC01NTExLTRhNGQtOTliZS00N2M0YjE1NWY0OGQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDM3X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NWU4Mzg0MDAtNTUxMS00YTRkLTk5YmUtNDdjNGIxNTVmNDhkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzN19JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAxOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAxOSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTVlODM4NDAwLTU1MTEtNGE0ZC05OWJlLTQ3YzRiMTU1ZjQ4ZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzdfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIDIwIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTVlODM4NDAwLTU1MTEtNGE0ZC05OWJlLTQ3YzRiMTU1ZjQ4ZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWFyY2ggMjAsIDIwMjQgQCAxMDowMCBBTSc+Q2l0eSBDb3VuY2lsPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0wNDY2MzBkZi01YWIwLTRmY2MtODIwYi01M2U4MmNjMjAyN2EnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBNYXJjaCAyMCwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDA0NjYzMGRmLTVhYjAtNGZjYy04MjBiLTUzZTgyY2MyMDI3YScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1hcmNoIDIwLCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDM4X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWFyY2ggMjAsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWFyY2ggMjAsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTA0NjYzMGRmLTVhYjAtNGZjYy04MjBiLTUzZTgyY2MyMDI3YSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzhfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWFyY2ggMjAsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAyMCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MDQ2NjMwZGYtNWFiMC00ZmNjLTgyMGItNTNlODJjYzIwMjdhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzOF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWFyY2ggMjAsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAyMCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0wNDY2MzBkZi01YWIwLTRmY2MtODIwYi01M2U4MmNjMjAyN2EmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDM4X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXJjaCAyMCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MDQ2NjMwZGYtNWFiMC00ZmNjLTgyMGItNTNlODJjYzIwMjdhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMi0xMzIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjEsIDIwMjQgQCA5OjMwIEFNJz5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1kMTFjNGE4YS1iMWJjLTRiNTMtYjg3ZC0yNDFhYTVlMDY4M2QnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE1hcmNoIDIxLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZDExYzRhOGEtYjFiYy00YjUzLWI4N2QtMjQxYWE1ZTA2ODNkJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE1hcmNoIDIxLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZDExYzRhOGEtYjFiYy00YjUzLWI4N2QtMjQxYWE1ZTA2ODNkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwzOV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAyMSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1kMTFjNGE4YS1iMWJjLTRiNTMtYjg3ZC0yNDFhYTVlMDY4M2QmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDM5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAyMSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWQxMWM0YThhLWIxYmMtNGI1My1iODdkLTI0MWFhNWUwNjgzZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMzlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAyMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWQxMWM0YThhLWIxYmMtNGI1My1iODdkLTI0MWFhNWUwNjgzZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjItMjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgTWFyY2ggMjUsIDIwMjQgQCA0OjAwIFBNJz5PdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD02NjRiZDljYi05MTcxLTQxNzEtYWI4NC0zYzIxNDc2YjY0OTUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBNYXJjaCAyNSwgMjAyNCBAIDQ6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nRWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uJz5FbGVjdHJvbmljIFBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDY2NGJkOWNiLTkxNzEtNDE3MS1hYjg0LTNjMjE0NzZiNjQ5NScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBNYXJjaCAyNSwgMjAyNCBAIDQ6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE1hcmNoIDI1LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE1hcmNoIDI1LCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY2NGJkOWNiLTkxNzEtNDE3MS1hYjg0LTNjMjE0NzZiNjQ5NSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDBfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE1hcmNoIDI1LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgTWFyY2ggMjUsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NjY0YmQ5Y2ItOTE3MS00MTcxLWFiODQtM2MyMTQ3NmI2NDk1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0MF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE1hcmNoIDI1LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgTWFyY2ggMjUsIDIwMjQgQCA0OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD02NjRiZDljYi05MTcxLTQxNzEtYWI4NC0zYzIxNDc2YjY0OTUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgTWFyY2ggMjUsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NjY0YmQ5Y2ItOTE3MS00MTcxLWFiODQtM2MyMTQ3NmI2NDk1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMS0xMzEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDI2LCAyMDI0IEAgOTozMCBBTSc+Q29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWIyMDNhYzZkLTVjMmEtNDc1Mi05YjJkLTAxOWYyNTg0MTk4YScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBNYXJjaCAyNiwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGIyMDNhYzZkLTVjMmEtNDc1Mi05YjJkLTAxOWYyNTg0MTk4YScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMjYsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0MV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWFyY2ggMjYsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDI2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWIyMDNhYzZkLTVjMmEtNDc1Mi05YjJkLTAxOWYyNTg0MTk4YSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDFfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAyNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAyNiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1iMjAzYWM2ZC01YzJhLTQ3NTItOWIyZC0wMTlmMjU4NDE5OGEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDI2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1hcmNoIDI2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YjIwM2FjNmQtNWMyYS00NzUyLTliMmQtMDE5ZjI1ODQxOThhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0MV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXJjaCAyNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgMDggRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YjIwM2FjNmQtNWMyYS00NzUyLTliMmQtMDE5ZjI1ODQxOThhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xNC0xMzQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAyNywgMjAyNCBAIDk6MzAgQU0nPlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MjhlOWQ5ODAtOTU0NS00YjEzLWJmYzQtNGZkNThiN2VkN2MwJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgTWFyY2ggMjcsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QyOGU5ZDk4MC05NTQ1LTRiMTMtYmZjNC00ZmQ1OGI3ZWQ3YzAnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAyNywgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQyX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMjcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAyNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yOGU5ZDk4MC05NTQ1LTRiMTMtYmZjNC00ZmQ1OGI3ZWQ3YzAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQyX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1hcmNoIDI3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAyNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yOGU5ZDk4MC05NTQ1LTRiMTMtYmZjNC00ZmQ1OGI3ZWQ3YzAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQyX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAyNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWFyY2ggMjcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0yOGU5ZDk4MC05NTQ1LTRiMTMtYmZjNC00ZmQ1OGI3ZWQ3YzAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQyX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXJjaCAyNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yOGU5ZDk4MC05NTQ1LTRiMTMtYmZjNC00ZmQ1OGI3ZWQ3YzAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTI4LTE0OCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjgsIDIwMjQgQCA5OjMwIEFNJz5UcmFuc3BvcnRhdGlvbiBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWEzOTU0MTUzLWNhYjctNGIwYS1iZWE4LWRlYWNkYmQ4YzdhMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgTWFyY2ggMjgsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RhMzk1NDE1My1jYWI3LTRiMGEtYmVhOC1kZWFjZGJkOGM3YTEnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE1hcmNoIDI4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDNfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE1hcmNoIDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAyOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hMzk1NDE1My1jYWI3LTRiMGEtYmVhOC1kZWFjZGJkOGM3YTEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YTM5NTQxNTMtY2FiNy00YjBhLWJlYTgtZGVhY2RiZDhjN2ExJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0M19JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAyOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBNYXJjaCAyOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWEzOTU0MTUzLWNhYjctNGIwYS1iZWE4LWRlYWNkYmQ4YzdhMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDNfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWFyY2ggMjgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YTM5NTQxNTMtY2FiNy00YjBhLWJlYTgtZGVhY2RiZDhjN2ExJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC05LTEyOSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0ZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDIsIDIwMjQgQCA5OjMwIEFNJz5GaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OTNkNjk1MzAtZDAxNy00OGFmLWE3NWQtNTI0NDY5MjY3MGNjJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEFwcmlsIDAyLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOTNkNjk1MzAtZDAxNy00OGFmLWE3NWQtNTI0NDY5MjY3MGNjJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAwMiwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQ0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAwMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OTNkNjk1MzAtZDAxNy00OGFmLWE3NWQtNTI0NDY5MjY3MGNjJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0NF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDAyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDAyLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTkzZDY5NTMwLWQwMTctNDhhZi1hNzVkLTUyNDQ2OTI2NzBjYyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDRfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD05M2Q2OTUzMC1kMDE3LTQ4YWYtYTc1ZC01MjQ0NjkyNjcwY2MmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQ0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDAyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05M2Q2OTUzMC1kMDE3LTQ4YWYtYTc1ZC01MjQ0NjkyNjcwY2MnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDAzLCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZjNhYmMwMmItOWY1NC00MTI3LWE1ZjItODRkYjgyNTJkYmZlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgQXByaWwgMDMsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RmM2FiYzAyYi05ZjU0LTQxMjctYTVmMi04NGRiODI1MmRiZmUnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBcHJpbCAwMywgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0NV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDAzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDAzLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mM2FiYzAyYi05ZjU0LTQxMjctYTVmMi04NGRiODI1MmRiZmUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQ1X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDAzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXByaWwgMDMsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWYzYWJjMDJiLTlmNTQtNDEyNy1hNWYyLTg0ZGI4MjUyZGJmZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDAzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXByaWwgMDMsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZjNhYmMwMmItOWY1NC00MTI3LWE1ZjItODRkYjgyNTJkYmZlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0NV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXByaWwgMDMsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWYzYWJjMDJiLTlmNTQtNDEyNy1hNWYyLTg0ZGI4MjUyZGJmZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMS02MSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0FncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMDQsIDIwMjQgQCAxMDowMCBBTSc+QWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1lZDMxYWM2MS0zOWM5LTRhZTMtOGQ3MC1mNjNkMzVjNGQ5MWQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEFwcmlsIDA0LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZWQzMWFjNjEtMzljOS00YWUzLThkNzAtZjYzZDM1YzRkOTFkJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAwNCwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0Nl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMDQsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAwNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWQzMWFjNjEtMzljOS00YWUzLThkNzAtZjYzZDM1YzRkOTFkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0Nl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDA0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAwNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWQzMWFjNjEtMzljOS00YWUzLThkNzAtZjYzZDM1YzRkOTFkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0Nl9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAwNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMDQsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZWQzMWFjNjEtMzljOS00YWUzLThkNzAtZjYzZDM1YzRkOTFkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0Nl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAwNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZWQzMWFjNjEtMzljOS00YWUzLThkNzAtZjYzZDM1YzRkOTFkJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC0xMzAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA5OjMwIEFNJz5CdWlsdCBIZXJpdGFnZSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWJkODc5MGNhLWVkNDEtNDQ2Ni05NzY2LTYwYzU2YzJmYmVlNicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBBcHJpbCAwOSwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGJkODc5MGNhLWVkNDEtNDQ2Ni05NzY2LTYwYzU2YzJmYmVlNicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAwOSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQ3X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDA5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDA5LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJkODc5MGNhLWVkNDEtNDQ2Ni05NzY2LTYwYzU2YzJmYmVlNiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDdfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDA5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YmQ4NzkwY2EtZWQ0MS00NDY2LTk3NjYtNjBjNTZjMmZiZWU2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0N19JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDA5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1iZDg3OTBjYS1lZDQxLTQ0NjYtOTc2Ni02MGM1NmMyZmJlZTYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQ3X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YmQ4NzkwY2EtZWQ0MS00NDY2LTk3NjYtNjBjNTZjMmZiZWU2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMi03MiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J090dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBBcHJpbCAwOSwgMjAyNCBAIDU6MDAgUE0nPk90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODc1MmExMzItMjI1NS00ZTZiLWE2YTAtYzI0NGZkODFjZDM0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEFwcmlsIDA5LCAyMDI0IEAgNTowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEODc1MmExMzItMjI1NS00ZTZiLWE2YTAtYzI0NGZkODFjZDM0JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEFwcmlsIDA5LCAyMDI0IEAgNTowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDhfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA1OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODc1MmExMzItMjI1NS00ZTZiLWE2YTAtYzI0NGZkODFjZDM0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw0OF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBBcHJpbCAwOSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04NzUyYTEzMi0yMjU1LTRlNmItYTZhMC1jMjQ0ZmQ4MWNkMzQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDQ4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXByaWwgMDksIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBBcHJpbCAwOSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTg3NTJhMTMyLTIyNTUtNGU2Yi1hNmEwLWMyNDRmZDgxY2QzNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDhfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBBcHJpbCAwOSwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04NzUyYTEzMi0yMjU1LTRlNmItYTZhMC1jMjQ0ZmQ4MWNkMzQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTE0LTEzNCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1BsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEFwcmlsIDEwLCAyMDI0IEAgOTozMCBBTSc+UGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yODFjZjc5OS1kNzVjLTQ5OGMtYjU4Mi05MTFiOTY4MDlmYTknIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBBcHJpbCAxMCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDI4MWNmNzk5LWQ3NWMtNDk4Yy1iNTgyLTkxMWI5NjgwOWZhOScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEFwcmlsIDEwLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBBcHJpbCAxMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEFwcmlsIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTI4MWNmNzk5LWQ3NWMtNDk4Yy1iNTgyLTkxMWI5NjgwOWZhOSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDlfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgQXByaWwgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEFwcmlsIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTI4MWNmNzk5LWQ3NWMtNDk4Yy1iNTgyLTkxMWI5NjgwOWZhOSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDlfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEFwcmlsIDEwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBBcHJpbCAxMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTI4MWNmNzk5LWQ3NWMtNDk4Yy1iNTgyLTkxMWI5NjgwOWZhOSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNDlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEFwcmlsIDEwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTI4MWNmNzk5LWQ3NWMtNDk4Yy1iNTgyLTkxMWI5NjgwOWZhOScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtNzAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEFwcmlsIDExLCAyMDI0IEAgOTozMCBBTSc+VHJhbnNpdCBDb21taXNzaW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04ODhlMDYzZi00YWYxLTRhMDEtYmRiMy1iNGRjYmY5Y2IyYzEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEFwcmlsIDExLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEODg4ZTA2M2YtNGFmMS00YTAxLWJkYjMtYjRkY2JmOWNiMmMxJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBBcHJpbCAxMSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBBcHJpbCAxMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgQXByaWwgMTEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODg4ZTA2M2YtNGFmMS00YTAxLWJkYjMtYjRkY2JmOWNiMmMxJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1MF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEFwcmlsIDExLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEFwcmlsIDExLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTg4OGUwNjNmLTRhZjEtNGEwMS1iZGIzLWI0ZGNiZjljYjJjMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgQXByaWwgMTEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgQXByaWwgMTEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD04ODhlMDYzZi00YWYxLTRhMDEtYmRiMy1iNGRjYmY5Y2IyYzEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEFwcmlsIDExLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNpdCBDb21taXNzaW9uIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTg4OGUwNjNmLTRhZjEtNGEwMS1iZGIzLWI0ZGNiZjljYjJjMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjQtMjQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBBcHJpbCAxNSwgMjAyNCBAIDU6MDAgUE0nPkJvYXJkIG9mIEhlYWx0aDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCb2FyZCBvZiBIZWFsdGggMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OTViMTg1ODktMjU0OS00MjdlLTgyM2UtNmRmNDg2ZTExMDZjJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPk1vbmRheSwgQXByaWwgMTUsIDIwMjQgQCA1OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q5NWIxODU4OS0yNTQ5LTQyN2UtODIzZS02ZGY0ODZlMTEwNmMnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBBcHJpbCAxNSwgMjAyNCBAIDU6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUxX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgQXByaWwgMTUsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBBcHJpbCAxNSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD05NWIxODU4OS0yNTQ5LTQyN2UtODIzZS02ZGY0ODZlMTEwNmMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUxX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIEFwcmlsIDE1LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBBcHJpbCAxNSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD05NWIxODU4OS0yNTQ5LTQyN2UtODIzZS02ZGY0ODZlMTEwNmMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBBcHJpbCAxNSwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgQXByaWwgMTUsIDIwMjQgQCA1OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD05NWIxODU4OS0yNTQ5LTQyN2UtODIzZS02ZGY0ODZlMTEwNmMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUxX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBBcHJpbCAxNSwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJvYXJkIG9mIEhlYWx0aCAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05NWIxODU4OS0yNTQ5LTQyN2UtODIzZS02ZGY0ODZlMTEwNmMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEzLTEzMyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0Vudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMTYsIDIwMjQgQCA5OjMwIEFNJz5FbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MzFlYWZiYTgtMTVmZC00MzI3LWEyMzctNzkxN2M3ODlkZGYyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEFwcmlsIDE2LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMzFlYWZiYTgtMTVmZC00MzI3LWEyMzctNzkxN2M3ODlkZGYyJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAxNiwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUyX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAxNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMTYsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MzFlYWZiYTgtMTVmZC00MzI3LWEyMzctNzkxN2M3ODlkZGYyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1Ml9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDE2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDE2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTMxZWFmYmE4LTE1ZmQtNDMyNy1hMjM3LTc5MTdjNzg5ZGRmMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMTYsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMTYsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0zMWVhZmJhOC0xNWZkLTQzMjctYTIzNy03OTE3Yzc4OWRkZjImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUyX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDE2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSAyMCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0zMWVhZmJhOC0xNWZkLTQzMjctYTIzNy03OTE3Yzc4OWRkZjInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDE3LCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MzA1NjQ4ZDktYzQ2Zi00ZTBjLWI4Y2MtN2JkZDdmYmVlMTRmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgQXByaWwgMTcsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QzMDU2NDhkOS1jNDZmLTRlMGMtYjhjYy03YmRkN2ZiZWUxNGYnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBcHJpbCAxNywgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1M19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDE3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDE3LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0zMDU2NDhkOS1jNDZmLTRlMGMtYjhjYy03YmRkN2ZiZWUxNGYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDUzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDE3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXByaWwgMTcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTMwNTY0OGQ5LWM0NmYtNGUwYy1iOGNjLTdiZGQ3ZmJlZTE0ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEFwcmlsIDE3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXByaWwgMTcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MzA1NjQ4ZDktYzQ2Zi00ZTBjLWI4Y2MtN2JkZDdmYmVlMTRmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1M19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXByaWwgMTcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTMwNTY0OGQ5LWM0NmYtNGUwYy1iOGNjLTdiZGQ3ZmJlZTE0ZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTItMTMyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDE4LCAyMDI0IEAgOTozMCBBTSc+RW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OTAzZjBmYjQtYzFmZi00YzhkLTg0ZDktZWRjNzNjNDk5NGU4JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBBcHJpbCAxOCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDkwM2YwZmI0LWMxZmYtNGM4ZC04NGQ5LWVkYzczYzQ5OTRlOCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAxOCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDE4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTkwM2YwZmI0LWMxZmYtNGM4ZC04NGQ5LWVkYzczYzQ5OTRlOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTRfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMTgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OTAzZjBmYjQtYzFmZi00YzhkLTg0ZDktZWRjNzNjNDk5NGU4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1NF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMTgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD05MDNmMGZiNC1jMWZmLTRjOGQtODRkOS1lZGM3M2M0OTk0ZTgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMTgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05MDNmMGZiNC1jMWZmLTRjOGQtODRkOS1lZGM3M2M0OTk0ZTgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTIyLTIyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEFwcmlsIDIyLCAyMDI0IEAgNDowMCBQTSc+T3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODEwMTk3ZjktNGJhMS00MTk2LWE5NzUtMWFmZWMxZTUzMDIxJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPk1vbmRheSwgQXByaWwgMjIsIDIwMjQgQCA0OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0VsZWN0cm9uaWMgUGFydGljaXBhdGlvbic+RWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q4MTAxOTdmOS00YmExLTQxOTYtYTk3NS0xYWZlYzFlNTMwMjEnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgQXByaWwgMjIsIDIwMjQgQCA0OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1NV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBBcHJpbCAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBBcHJpbCAyMiwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04MTAxOTdmOS00YmExLTQxOTYtYTk3NS0xYWZlYzFlNTMwMjEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU1X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBBcHJpbCAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEFwcmlsIDIyLCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgxMDE5N2Y5LTRiYTEtNDE5Ni1hOTc1LTFhZmVjMWU1MzAyMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBBcHJpbCAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEFwcmlsIDIyLCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ODEwMTk3ZjktNGJhMS00MTk2LWE5NzUtMWFmZWMxZTUzMDIxJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1NV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEFwcmlsIDIyLCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTgxMDE5N2Y5LTRiYTEtNDE5Ni1hOTc1LTFhZmVjMWU1MzAyMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTEtMTMxIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAyMywgMjAyNCBAIDk6MzAgQU0nPkNvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSAwOCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yNTZjYjc5Yy1jOGNhLTQ4ODktYjAxNi02NjVjM2FlNWQ1NzYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgQXByaWwgMjMsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QyNTZjYjc5Yy1jOGNhLTQ4ODktYjAxNi02NjVjM2FlNWQ1NzYnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDIzLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTZfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEFwcmlsIDIzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAyMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yNTZjYjc5Yy1jOGNhLTQ4ODktYjAxNi02NjVjM2FlNWQ1NzYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU2X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMjMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMjMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MjU2Y2I3OWMtYzhjYS00ODg5LWIwMTYtNjY1YzNhZTVkNTc2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1Nl9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAyMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBBcHJpbCAyMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTI1NmNiNzljLWM4Y2EtNDg4OS1iMDE2LTY2NWMzYWU1ZDU3NiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTZfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgQXByaWwgMjMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTI1NmNiNzljLWM4Y2EtNDg4OS1iMDE2LTY2NWMzYWU1ZDU3NicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjgtMTQ4Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAyNSwgMjAyNCBAIDk6MzAgQU0nPlRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OGJjNTdmYjYtY2QyNy00MDBlLWIwNmItZWQ2MDUxYTJlNDBlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBBcHJpbCAyNSwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDhiYzU3ZmI2LWNkMjctNDAwZS1iMDZiLWVkNjA1MWEyZTQwZScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMjUsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1N19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgQXByaWwgMjUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDI1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPThiYzU3ZmI2LWNkMjctNDAwZS1iMDZiLWVkNjA1MWEyZTQwZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTdfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAyNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAyNSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04YmM1N2ZiNi1jZDI3LTQwMGUtYjA2Yi1lZDYwNTFhMmU0MGUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU3X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDI1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEFwcmlsIDI1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9OGJjNTdmYjYtY2QyNy00MDBlLWIwNmItZWQ2MDUxYTJlNDBlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1N19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBcHJpbCAyNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04YmM1N2ZiNi1jZDI3LTQwMGUtYjA2Yi1lZDYwNTFhMmU0MGUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAwMSwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTNhOGQyZjdjLWJiMDYtNDUzZC05MTYzLTJhZTNhOWViZGVmNScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIE1heSAwMSwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDNhOGQyZjdjLWJiMDYtNDUzZC05MTYzLTJhZTNhOWViZGVmNScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAwMSwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1OF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAwMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMDEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTNhOGQyZjdjLWJiMDYtNDUzZC05MTYzLTJhZTNhOWViZGVmNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNThfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDAxLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDAxLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0zYThkMmY3Yy1iYjA2LTQ1M2QtOTE2My0yYWUzYTllYmRlZjUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMDEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMDEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9M2E4ZDJmN2MtYmIwNi00NTNkLTkxNjMtMmFlM2E5ZWJkZWY1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1OF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDAxLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0zYThkMmY3Yy1iYjA2LTQ1M2QtOTE2My0yYWUzYTllYmRlZjUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEtNjEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwMiwgMjAyNCBAIDEwOjMwIEFNJz5BZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc2NTQ2OTJjLWUzYTMtNDJkYi1iZmVkLTUyZTkyMmRjOGFjYycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgTWF5IDAyLCAyMDI0IEAgMTA6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENzY1NDY5MmMtZTNhMy00MmRiLWJmZWQtNTJlOTIyZGM4YWNjJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMDIsIDIwMjQgQCAxMDozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwMiwgMjAyNCBAIDEwOjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwMiwgMjAyNCBAIDEwOjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NzY1NDY5MmMtZTNhMy00MmRiLWJmZWQtNTJlOTIyZGM4YWNjJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw1OV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwMiwgMjAyNCBAIDEwOjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDAyLCAyMDI0IEAgMTA6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD03NjU0NjkyYy1lM2EzLTQyZGItYmZlZC01MmU5MjJkYzhhY2MmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDU5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwMiwgMjAyNCBAIDEwOjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDAyLCAyMDI0IEAgMTA6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTc2NTQ2OTJjLWUzYTMtNDJkYi1iZmVkLTUyZTkyMmRjOGFjYyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNTlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDAyLCAyMDI0IEAgMTA6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD03NjU0NjkyYy1lM2EzLTQyZGItYmZlZC01MmU5MjJkYzhhY2MnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTktMTI5Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMDcsIDIwMjQgQCA5OjMwIEFNJz5GaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YTUxNGQ4NzUtNGMzMi00NjUwLTk4MzAtODlhN2E5YTc3MGUyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE1heSAwNywgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGE1MTRkODc1LTRjMzItNDY1MC05ODMwLTg5YTdhOWE3NzBlMicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDA3LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjBfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAwNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDA3LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWE1MTRkODc1LTRjMzItNDY1MC05ODMwLTg5YTdhOWE3NzBlMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjBfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMDcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDA3LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWE1MTRkODc1LTRjMzItNDY1MC05ODMwLTg5YTdhOWE3NzBlMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDA3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAwNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWE1MTRkODc1LTRjMzItNDY1MC05ODMwLTg5YTdhOWE3NzBlMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjBfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDA3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hNTE0ZDg3NS00YzMyLTQ2NTAtOTgzMC04OWE3YTlhNzcwZTInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTE0LTEzNCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1BsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAwOCwgMjAyNCBAIDk6MzAgQU0nPlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZDM0ZjU1MTktNWFkMC00YzI0LTgwOTYtMTE4MjM0YTg3N2Y4JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgTWF5IDA4LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZDM0ZjU1MTktNWFkMC00YzI0LTgwOTYtMTE4MjM0YTg3N2Y4JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWF5IDA4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjFfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMDgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZDM0ZjU1MTktNWFkMC00YzI0LTgwOTYtMTE4MjM0YTg3N2Y4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2MV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAwOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1kMzRmNTUxOS01YWQwLTRjMjQtODA5Ni0xMTgyMzRhODc3ZjgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDYxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAwOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWQzNGY1NTE5LTVhZDAtNGMyNC04MDk2LTExODIzNGE4NzdmOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjFfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAwOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1kMzRmNTUxOS01YWQwLTRjMjQtODA5Ni0xMTgyMzRhODc3ZjgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEwLTcwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA5OjMwIEFNJz5UcmFuc2l0IENvbW1pc3Npb248L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNpdCBDb21taXNzaW9uIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTA1N2VhZmRhLTE3OGQtNDNhNC1iZWI4LTVmM2IwYjAzYjNkZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMDU3ZWFmZGEtMTc4ZC00M2E0LWJlYjgtNWYzYjBiMDNiM2RlJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2Ml9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MDU3ZWFmZGEtMTc4ZC00M2E0LWJlYjgtNWYzYjBiMDNiM2RlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2Ml9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIE1heSAwOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MDU3ZWFmZGEtMTc4ZC00M2E0LWJlYjgtNWYzYjBiMDNiM2RlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2Ml9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MDU3ZWFmZGEtMTc4ZC00M2E0LWJlYjgtNWYzYjBiMDNiM2RlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2Ml9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc2l0IENvbW1pc3Npb24gMDcgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MDU3ZWFmZGEtMTc4ZC00M2E0LWJlYjgtNWYzYjBiMDNiM2RlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC02LTEyNiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0ZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwOSwgMjAyNCBAIDU6MzAgUE0nPkZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD00MmMyYzRhYi04ZDA1LTQ2ZmUtYTM5Yy1hYzFjNmE0YTI2ZTgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE1heSAwOSwgMjAyNCBAIDU6MzAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nRWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uJz5FbGVjdHJvbmljIFBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDQyYzJjNGFiLThkMDUtNDZmZS1hMzljLWFjMWM2YTRhMjZlOCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAwOSwgMjAyNCBAIDU6MzAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDYzX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgNTozMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTQyYzJjNGFiLThkMDUtNDZmZS1hMzljLWFjMWM2YTRhMjZlOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjNfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA1OjMwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NDJjMmM0YWItOGQwNS00NmZlLWEzOWMtYWMxYzZhNGEyNmU4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2M19JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDA5LCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA1OjMwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD00MmMyYzRhYi04ZDA1LTQ2ZmUtYTM5Yy1hYzFjNmE0YTI2ZTgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDYzX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMDksIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTQyYzJjNGFiLThkMDUtNDZmZS1hMzljLWFjMWM2YTRhMjZlOCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtMTMwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDk6MzAgQU0nPkJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NTJkYTgzNzctMzY5ZC00OGYxLWI1NGEtYjQ1YjVmMGVhMDIwJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDUyZGE4Mzc3LTM2OWQtNDhmMS1iNTRhLWI0NWI1ZjBlYTAyMCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMTQsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2NF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMTQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDE0LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTUyZGE4Mzc3LTM2OWQtNDhmMS1iNTRhLWI0NWI1ZjBlYTAyMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjRfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01MmRhODM3Ny0zNjlkLTQ4ZjEtYjU0YS1iNDViNWYwZWEwMjAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDY0X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDE0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDE0LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NTJkYTgzNzctMzY5ZC00OGYxLWI1NGEtYjQ1YjVmMGVhMDIwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2NF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01MmRhODM3Ny0zNjlkLTQ4ZjEtYjU0YS1iNDViNWYwZWEwMjAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTcyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDU6MDAgUE0nPk90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MjM1ZjY3YjItZmYyYi00MTEyLWJmNzQtM2I0YjM2MjYxZWU3JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDIzNWY2N2IyLWZmMmItNDExMi1iZjc0LTNiNGIzNjI2MWVlNycgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBNYXkgMTQsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2NV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBNYXkgMTQsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTWF5IDE0LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTIzNWY2N2IyLWZmMmItNDExMi1iZjc0LTNiNGIzNjI2MWVlNyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjVfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yMzVmNjdiMi1mZjJiLTQxMTItYmY3NC0zYjRiMzYyNjFlZTcmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDY1X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTWF5IDE0LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTWF5IDE0LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MjM1ZjY3YjItZmYyYi00MTEyLWJmNzQtM2I0YjM2MjYxZWU3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2NV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE1heSAxNCwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yMzVmNjdiMi1mZjJiLTQxMTItYmY3NC0zYjRiMzYyNjFlZTcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAxNSwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWJmNjBlNzdhLTZhODItNDliNy1hNzY1LTZmNjI0MGVlMmM4ZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIE1heSAxNSwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGJmNjBlNzdhLTZhODItNDliNy1hNzY1LTZmNjI0MGVlMmM4ZCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAxNSwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2Nl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAxNSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMTUsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJmNjBlNzdhLTZhODItNDliNy1hNzY1LTZmNjI0MGVlMmM4ZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjZfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDE1LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDE1LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1iZjYwZTc3YS02YTgyLTQ5YjctYTc2NS02ZjYyNDBlZTJjOGQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDY2X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMTUsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMTUsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YmY2MGU3N2EtNmE4Mi00OWI3LWE3NjUtNmY2MjQwZWUyYzhkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2Nl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDE1LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iZjYwZTc3YS02YTgyLTQ5YjctYTc2NS02ZjYyNDBlZTJjOGQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTEzMiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0VtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMTYsIDIwMjQgQCA5OjMwIEFNJz5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yYzIyNmRmNi1iZGZiLTQ0NzUtODAzMS1hMDQwMWRkMDMwOGYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE1heSAxNiwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDJjMjI2ZGY2LWJkZmItNDQ3NS04MDMxLWEwNDAxZGQwMzA4ZicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMTYsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2N19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMTYsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDE2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTJjMjI2ZGY2LWJkZmItNDQ3NS04MDMxLWEwNDAxZGQwMzA4ZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjdfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAxNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAxNiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yYzIyNmRmNi1iZGZiLTQ0NzUtODAzMS1hMDQwMWRkMDMwOGYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDY3X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDE2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDE2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MmMyMjZkZjYtYmRmYi00NDc1LTgwMzEtYTA0MDFkZDAzMDhmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2N19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAxNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTJjMjI2ZGY2LWJkZmItNDQ3NS04MDMxLWEwNDAxZGQwMzA4ZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTMtMTMzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMjEsIDIwMjQgQCA5OjMwIEFNJz5FbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Nzg1MmFiMzMtNzk1NC00OTdjLWI2ZWEtYTI0NzcyZjA4Y2YyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE1heSAyMSwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDc4NTJhYjMzLTc5NTQtNDk3Yy1iNmVhLWEyNDc3MmYwOGNmMicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDIxLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjhfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAyMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDIxLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTc4NTJhYjMzLTc5NTQtNDk3Yy1iNmVhLWEyNDc3MmYwOGNmMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjhfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMjEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDIxLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTc4NTJhYjMzLTc5NTQtNDk3Yy1iNmVhLWEyNDc3MmYwOGNmMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjhfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDIxLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAyMSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTc4NTJhYjMzLTc5NTQtNDk3Yy1iNmVhLWEyNDc3MmYwOGNmMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjhfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDIxLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSAyMCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD03ODUyYWIzMy03OTU0LTQ5N2MtYjZlYS1hMjQ3NzJmMDhjZjInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTE0LTEzNCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1BsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAyMiwgMjAyNCBAIDk6MzAgQU0nPlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NDI2NTRhNTMtMGQyMy00ZGI2LTgxNGMtZjZkOWRmMGY1YjI3JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgTWF5IDIyLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENDI2NTRhNTMtMGQyMy00ZGI2LTgxNGMtZjZkOWRmMGY1YjI3JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgTWF5IDIyLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NDI2NTRhNTMtMGQyMy00ZGI2LTgxNGMtZjZkOWRmMGY1YjI3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw2OV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAyMiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00MjY1NGE1My0wZDIzLTRkYjYtODE0Yy1mNmQ5ZGYwZjViMjcmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDY5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBNYXkgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAyMiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTQyNjU0YTUzLTBkMjMtNGRiNi04MTRjLWY2ZDlkZjBmNWIyNyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNjlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIE1heSAyMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD00MjY1NGE1My0wZDIzLTRkYjYtODE0Yy1mNmQ5ZGYwZjViMjcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTI4LTE0OCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDIzLCAyMDI0IEAgOTozMCBBTSc+VHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iZDBkOWVkNS0wZDM3LTQ4NGYtOGY1Mi04Y2ZmYzEzODk4NTYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE1heSAyMywgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGJkMGQ5ZWQ1LTBkMzctNDg0Zi04ZjUyLThjZmZjMTM4OTg1NicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDIzLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzBfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAyMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDIzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJkMGQ5ZWQ1LTBkMzctNDg0Zi04ZjUyLThjZmZjMTM4OTg1NiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzBfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBNYXkgMjMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDIzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJkMGQ5ZWQ1LTBkMzctNDg0Zi04ZjUyLThjZmZjMTM4OTg1NiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDIzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE1heSAyMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWJkMGQ5ZWQ1LTBkMzctNDg0Zi04ZjUyLThjZmZjMTM4OTg1NiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzBfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTWF5IDIzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWJkMGQ5ZWQ1LTBkMzctNDg0Zi04ZjUyLThjZmZjMTM4OTg1NicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTEtMTMxIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMjgsIDIwMjQgQCA5OjMwIEFNJz5Db21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgMDggRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YmY0YzkwMGUtOGYxZS00OWM4LTg1N2UtZDJjZGIxNzU4Zjk0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE1heSAyOCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGJmNGM5MDBlLThmMWUtNDljOC04NTdlLWQyY2RiMTc1OGY5NCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDI4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzFfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAyOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDI4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJmNGM5MDBlLThmMWUtNDljOC04NTdlLWQyY2RiMTc1OGY5NCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzFfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBNYXkgMjgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDI4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJmNGM5MDBlLThmMWUtNDljOC04NTdlLWQyY2RiMTc1OGY5NCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzFfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE1heSAyOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWJmNGM5MDBlLThmMWUtNDljOC04NTdlLWQyY2RiMTc1OGY5NCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzFfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTWF5IDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSAwOCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iZjRjOTAwZS04ZjFlLTQ5YzgtODU3ZS1kMmNkYjE3NThmOTQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAyOSwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWJkMjIyYzk3LWMwMjctNGMzNi04YjA5LThhNjZlOWRkNGQ4ZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIE1heSAyOSwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGJkMjIyYzk3LWMwMjctNGMzNi04YjA5LThhNjZlOWRkNGQ4ZCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAyOSwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3Ml9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE1heSAyOSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMjksIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWJkMjIyYzk3LWMwMjctNGMzNi04YjA5LThhNjZlOWRkNGQ4ZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzJfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDI5LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDI5LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1iZDIyMmM5Ny1jMDI3LTRjMzYtOGIwOS04YTY2ZTlkZDRkOGQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDcyX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMjksIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBNYXkgMjksIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YmQyMjJjOTctYzAyNy00YzM2LThiMDktOGE2NmU5ZGQ0ZDhkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3Ml9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTWF5IDI5LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iZDIyMmM5Ny1jMDI3LTRjMzYtOGIwOS04YTY2ZTlkZDRkOGQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTktMTI5Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDA0LCAyMDI0IEAgOTozMCBBTSc+RmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTgyMWRkYjYwLWZlYmYtNDdhNi1iNmFmLTM2NDU1M2IxYmVjNScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBKdW5lIDA0LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEODIxZGRiNjAtZmViZi00N2E2LWI2YWYtMzY0NTUzYjFiZWM1JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDA0LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzNfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMDQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMDQsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODIxZGRiNjAtZmViZi00N2E2LWI2YWYtMzY0NTUzYjFiZWM1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3M19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMDQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAwNCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04MjFkZGI2MC1mZWJmLTQ3YTYtYjZhZi0zNjQ1NTNiMWJlYzUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDczX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMDQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAwNCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTgyMWRkYjYwLWZlYmYtNDdhNi1iNmFmLTM2NDU1M2IxYmVjNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzNfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAwNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODIxZGRiNjAtZmViZi00N2E2LWI2YWYtMzY0NTUzYjFiZWM1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xNC0xMzQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDA1LCAyMDI0IEAgOTozMCBBTSc+UGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xMjM3MTEwZS1iMGY2LTRiNWEtODVlNy1jNTg2ZTAxODA0YjAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBKdW5lIDA1LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMTIzNzExMGUtYjBmNi00YjVhLTg1ZTctYzU4NmUwMTgwNGIwJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSnVuZSAwNSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSnVuZSAwNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEp1bmUgMDUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTIzNzExMGUtYjBmNi00YjVhLTg1ZTctYzU4NmUwMTgwNGIwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3NF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDA1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDA1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTEyMzcxMTBlLWIwZjYtNGI1YS04NWU3LWM1ODZlMDE4MDRiMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzRfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEp1bmUgMDUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEp1bmUgMDUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0xMjM3MTEwZS1iMGY2LTRiNWEtODVlNy1jNTg2ZTAxODA0YjAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDA1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTEyMzcxMTBlLWIwZjYtNGI1YS04NWU3LWM1ODZlMDE4MDRiMCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMS02MSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0FncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAwNiwgMjAyNCBAIDEwOjAwIEFNJz5BZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTQ4NWI2NjY0LTVmMDYtNGEyNy04MDA2LTZiNWVjMDVmYzA1MicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgSnVuZSAwNiwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0JlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkJlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDQ4NWI2NjY0LTVmMDYtNGEyNy04MDA2LTZiNWVjMDVmYzA1MicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAwNiwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3NV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAwNiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMDYsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTQ4NWI2NjY0LTVmMDYtNGEyNy04MDA2LTZiNWVjMDVmYzA1MiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzVfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdW5lIDA2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdW5lIDA2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00ODViNjY2NC01ZjA2LTRhMjctODAwNi02YjVlYzA1ZmMwNTImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc1X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMDYsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMDYsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NDg1YjY2NjQtNWYwNi00YTI3LTgwMDYtNmI1ZWMwNWZjMDUyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3NV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdW5lIDA2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD00ODViNjY2NC01ZjA2LTRhMjctODAwNi02YjVlYzA1ZmMwNTInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTItNjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBKdW5lIDEwLCAyMDI0IEAgOTozMCBBTSc+QXVkaXQgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEF1ZGl0IENvbW1pdHRlZSAyMyBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1jZjFjMThmZi1kOGZiLTQ5ZWItYjY5NC1mMTVmNGM5ZDE5ZTMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBKdW5lIDEwLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEY2YxYzE4ZmYtZDhmYi00OWViLWI2OTQtZjE1ZjRjOWQxOWUzJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQXVkaXQgQ29tbWl0dGVlIE1vbmRheSwgSnVuZSAxMCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc2X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQXVkaXQgQ29tbWl0dGVlIE1vbmRheSwgSnVuZSAxMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEF1ZGl0IENvbW1pdHRlZSBNb25kYXksIEp1bmUgMTAsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Y2YxYzE4ZmYtZDhmYi00OWViLWI2OTQtZjE1ZjRjOWQxOWUzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3Nl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBKdW5lIDEwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBKdW5lIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWNmMWMxOGZmLWQ4ZmItNDllYi1iNjk0LWYxNWY0YzlkMTllMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEF1ZGl0IENvbW1pdHRlZSBNb25kYXksIEp1bmUgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEF1ZGl0IENvbW1pdHRlZSBNb25kYXksIEp1bmUgMTAsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1jZjFjMThmZi1kOGZiLTQ5ZWItYjY5NC1mMTVmNGM5ZDE5ZTMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc2X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBKdW5lIDEwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQXVkaXQgQ29tbWl0dGVlIDIzIE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWNmMWMxOGZmLWQ4ZmItNDllYi1iNjk0LWYxNWY0YzlkMTllMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtMTMwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA5OjMwIEFNJz5CdWlsdCBIZXJpdGFnZSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPThiYWM0MTM1LThkZmUtNGQwNS05ZjU5LTk1ZTA4M2E4Y2Q4OCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOGJhYzQxMzUtOGRmZS00ZDA1LTlmNTktOTVlMDgzYThjZDg4JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3N19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OGJhYzQxMzUtOGRmZS00ZDA1LTlmNTktOTVlMDgzYThjZDg4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3N19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAxMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OGJhYzQxMzUtOGRmZS00ZDA1LTlmNTktOTVlMDgzYThjZDg4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3N19JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9OGJhYzQxMzUtOGRmZS00ZDA1LTlmNTktOTVlMDgzYThjZDg4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw3N19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OGJhYzQxMzUtOGRmZS00ZDA1LTlmNTktOTVlMDgzYThjZDg4JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMi03MiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J090dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgNTowMCBQTSc+T3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xNjM3YzIzNi03OTFlLTRlOWUtODVmOS1hMjgwMmE1MDY3ZWYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgSnVuZSAxMSwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDE2MzdjMjM2LTc5MWUtNGU5ZS04NWY5LWEyODAyYTUwNjdlZicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgNTowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzhfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgSnVuZSAxMSwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTE2MzdjMjM2LTc5MWUtNGU5ZS04NWY5LWEyODAyYTUwNjdlZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzhfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEp1bmUgMTEsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTE2MzdjMjM2LTc5MWUtNGU5ZS04NWY5LWEyODAyYTUwNjdlZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzhfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgSnVuZSAxMSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTE2MzdjMjM2LTc5MWUtNGU5ZS04NWY5LWEyODAyYTUwNjdlZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsNzhfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdW5lIDExLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIDEzIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTE2MzdjMjM2LTc5MWUtNGU5ZS04NWY5LWEyODAyYTUwNjdlZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVuZSAxMiwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWFmNDljM2VkLTgwOTktNDA4Yy04ZjYyLTZkOTlhZTMxNWRhZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIEp1bmUgMTIsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RhZjQ5YzNlZC04MDk5LTQwOGMtOGY2Mi02ZDk5YWUzMTVkYWQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDEyLCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc5X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVuZSAxMiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDEyLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hZjQ5YzNlZC04MDk5LTQwOGMtOGY2Mi02ZDk5YWUzMTVkYWQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc5X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bmUgMTIsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDEyLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hZjQ5YzNlZC04MDk5LTQwOGMtOGY2Mi02ZDk5YWUzMTVkYWQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDEyLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVuZSAxMiwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1hZjQ5YzNlZC04MDk5LTQwOGMtOGY2Mi02ZDk5YWUzMTVkYWQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDc5X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDEyLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hZjQ5YzNlZC04MDk5LTQwOGMtOGY2Mi02ZDk5YWUzMTVkYWQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEwLTcwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBKdW5lIDEzLCAyMDI0IEAgOTozMCBBTSc+VHJhbnNpdCBDb21taXNzaW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yYjg0ZjI2Mi0xOTE1LTQyNDktODU3My00ZWRhZTc4OThlNzEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEp1bmUgMTMsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QyYjg0ZjI2Mi0xOTE1LTQyNDktODU3My00ZWRhZTc4OThlNzEnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIEp1bmUgMTMsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4MF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgSnVuZSAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgSnVuZSAxMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yYjg0ZjI2Mi0xOTE1LTQyNDktODU3My00ZWRhZTc4OThlNzEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDgwX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgSnVuZSAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBKdW5lIDEzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTJiODRmMjYyLTE5MTUtNDI0OS04NTczLTRlZGFlNzg5OGU3MSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgSnVuZSAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBKdW5lIDEzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MmI4NGYyNjItMTkxNS00MjQ5LTg1NzMtNGVkYWU3ODk4ZTcxJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4MF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBKdW5lIDEzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNpdCBDb21taXNzaW9uIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTJiODRmMjYyLTE5MTUtNDI0OS04NTczLTRlZGFlNzg5OGU3MScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjQtMjQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBKdW5lIDE3LCAyMDI0IEAgNTowMCBQTSc+Qm9hcmQgb2YgSGVhbHRoPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJvYXJkIG9mIEhlYWx0aCAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1lZTZkNmZjMy02MmVjLTRkN2UtOGEwMS00MDZmMGE2NTQ0NjcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBKdW5lIDE3LCAyMDI0IEAgNTowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZWU2ZDZmYzMtNjJlYy00ZDdlLThhMDEtNDA2ZjBhNjU0NDY3JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgSnVuZSAxNywgMjAyNCBAIDU6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDgxX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgSnVuZSAxNywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIEp1bmUgMTcsIDIwMjQgQCA1OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWU2ZDZmYzMtNjJlYy00ZDdlLThhMDEtNDA2ZjBhNjU0NDY3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4MV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBKdW5lIDE3LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBKdW5lIDE3LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWVlNmQ2ZmMzLTYyZWMtNGQ3ZS04YTAxLTQwNmYwYTY1NDQ2NyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODFfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIEp1bmUgMTcsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIEp1bmUgMTcsIDIwMjQgQCA1OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1lZTZkNmZjMy02MmVjLTRkN2UtOGEwMS00MDZmMGE2NTQ0NjcmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDgxX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBKdW5lIDE3LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQm9hcmQgb2YgSGVhbHRoIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWVlNmQ2ZmMzLTYyZWMtNGQ3ZS04YTAxLTQwNmYwYTY1NDQ2NycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTMtMTMzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDE4LCAyMDI0IEAgOTozMCBBTSc+RW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIDIwIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTI4MjI4NmI5LWRhMjItNGRkOS04YWUyLTgzZTllYmJjMTBmMicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBKdW5lIDE4LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMjgyMjg2YjktZGEyMi00ZGQ5LThhZTItODNlOWViYmMxMGYyJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDE4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODJfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MjgyMjg2YjktZGEyMi00ZGQ5LThhZTItODNlOWViYmMxMGYyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4Ml9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAxOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yODIyODZiOS1kYTIyLTRkZDktOGFlMi04M2U5ZWJiYzEwZjImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDgyX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMTgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAxOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTI4MjI4NmI5LWRhMjItNGRkOS04YWUyLTgzZTllYmJjMTBmMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODJfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MjgyMjg2YjktZGEyMi00ZGQ5LThhZTItODNlOWViYmMxMGYyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xNC0xMzQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDE5LCAyMDI0IEAgOTozMCBBTSc+UGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05MGU5ODljNC01ZWRlLTQxOTItYTgxMy0zYTcxMDQ5YTdjNzcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBKdW5lIDE5LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOTBlOTg5YzQtNWVkZS00MTkyLWE4MTMtM2E3MTA0OWE3Yzc3JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSnVuZSAxOSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDgzX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIFdlZG5lc2RheSwgSnVuZSAxOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEp1bmUgMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OTBlOTg5YzQtNWVkZS00MTkyLWE4MTMtM2E3MTA0OWE3Yzc3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4M19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDE5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDE5LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTkwZTk4OWM0LTVlZGUtNDE5Mi1hODEzLTNhNzEwNDlhN2M3NyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEp1bmUgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSBXZWRuZXNkYXksIEp1bmUgMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD05MGU5ODljNC01ZWRlLTQxOTItYTgxMy0zYTcxMDQ5YTdjNzcmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDgzX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBQbGFubmluZyBhbmQgSG91c2luZyBDb21taXR0ZWUgV2VkbmVzZGF5LCBKdW5lIDE5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgUGxhbm5pbmcgYW5kIEhvdXNpbmcgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTkwZTk4OWM0LTVlZGUtNDE5Mi1hODEzLTNhNzEwNDlhN2M3NycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTItMTMyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjAsIDIwMjQgQCA5OjMwIEFNJz5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1mM2RmNTFjMC00OTA0LTQzYTctOTY5OS0wOTYwYTEwODRiZTknIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIEp1bmUgMjAsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RmM2RmNTFjMC00OTA0LTQzYTctOTY5OS0wOTYwYTEwODRiZTknIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyMCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mM2RmNTFjMC00OTA0LTQzYTctOTY5OS0wOTYwYTEwODRiZTkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg0X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdW5lIDIwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mM2RmNTFjMC00OTA0LTQzYTctOTY5OS0wOTYwYTEwODRiZTkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg0X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjAsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1mM2RmNTFjMC00OTA0LTQzYTctOTY5OS0wOTYwYTEwODRiZTkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWYzZGY1MWMwLTQ5MDQtNDNhNy05Njk5LTA5NjBhMTA4NGJlOScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjItMjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVuZSAyNCwgMjAyNCBAIDQ6MDAgUE0nPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTI2NWVhODIzLTEwZWUtNDQyOC1iMDFiLTcyOWJkZWY3MDZjZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIEp1bmUgMjQsIDIwMjQgQCA0OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0VsZWN0cm9uaWMgUGFydGljaXBhdGlvbic+RWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QyNjVlYTgyMy0xMGVlLTQ0MjgtYjAxYi03MjliZGVmNzA2Y2UnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVuZSAyNCwgMjAyNCBAIDQ6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg1X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bmUgMjQsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVuZSAyNCwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yNjVlYTgyMy0xMGVlLTQ0MjgtYjAxYi03MjliZGVmNzA2Y2UmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg1X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBKdW5lIDI0LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVuZSAyNCwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yNjVlYTgyMy0xMGVlLTQ0MjgtYjAxYi03MjliZGVmNzA2Y2UmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg1X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVuZSAyNCwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bmUgMjQsIDIwMjQgQCA0OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0yNjVlYTgyMy0xMGVlLTQ0MjgtYjAxYi03MjliZGVmNzA2Y2UmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg1X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVuZSAyNCwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yNjVlYTgyMy0xMGVlLTQ0MjgtYjAxYi03MjliZGVmNzA2Y2UnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTExLTEzMSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAyNSwgMjAyNCBAIDk6MzAgQU0nPkNvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSAwOCBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yYjUxOGI1OC1mNzBlLTQxNWUtYTkwYS04YjdmNjE0MzcyYzInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgSnVuZSAyNSwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDJiNTE4YjU4LWY3MGUtNDE1ZS1hOTBhLThiN2Y2MTQzNzJjMicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVuZSAyNSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg2X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDI1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDI1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTJiNTE4YjU4LWY3MGUtNDE1ZS1hOTBhLThiN2Y2MTQzNzJjMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODZfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDI1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMjUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MmI1MThiNTgtZjcwZS00MTVlLWE5MGEtOGI3ZjYxNDM3MmMyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4Nl9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdW5lIDI1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMjUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0yYjUxOGI1OC1mNzBlLTQxNWUtYTkwYS04YjdmNjE0MzcyYzImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg2X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bmUgMjUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTJiNTE4YjU4LWY3MGUtNDE1ZS1hOTBhLThiN2Y2MTQzNzJjMicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVuZSAyNiwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWNjNTIwMmJkLWQ1ZGQtNDVlNS1hZDczLWU0MGUyMWYxNDQ1NCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIEp1bmUgMjYsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RjYzUyMDJiZC1kNWRkLTQ1ZTUtYWQ3My1lNDBlMjFmMTQ0NTQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDI2LCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg3X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVuZSAyNiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDI2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1jYzUyMDJiZC1kNWRkLTQ1ZTUtYWQ3My1lNDBlMjFmMTQ0NTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg3X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bmUgMjYsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDI2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1jYzUyMDJiZC1kNWRkLTQ1ZTUtYWQ3My1lNDBlMjFmMTQ0NTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg3X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDI2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVuZSAyNiwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1jYzUyMDJiZC1kNWRkLTQ1ZTUtYWQ3My1lNDBlMjFmMTQ0NTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg3X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdW5lIDI2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1jYzUyMDJiZC1kNWRkLTQ1ZTUtYWQ3My1lNDBlMjFmMTQ0NTQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTI4LTE0OCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyNywgMjAyNCBAIDk6MzAgQU0nPlRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODcxYmY3ZjItOGI1Ny00ZTdhLWFkM2ItZWJmMjM4MjU3M2I2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBKdW5lIDI3LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEODcxYmY3ZjItOGI1Ny00ZTdhLWFkM2ItZWJmMjM4MjU3M2I2JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBKdW5lIDI3LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODhfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODcxYmY3ZjItOGI1Ny00ZTdhLWFkM2ItZWJmMjM4MjU3M2I2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4OF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04NzFiZjdmMi04YjU3LTRlN2EtYWQzYi1lYmYyMzgyNTczYjYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEp1bmUgMjcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTg3MWJmN2YyLThiNTctNGU3YS1hZDNiLWViZjIzODI1NzNiNiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODhfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgSnVuZSAyNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04NzFiZjdmMi04YjU3LTRlN2EtYWQzYi1lYmYyMzgyNTczYjYnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTktMTI5Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdWx5IDAyLCAyMDI0IEAgOTozMCBBTSc+RmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTJhN2M5NDM5LTI1NzgtNDg5OS04YjNlLWQxMGQ0MzBmN2VjZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBKdWx5IDAyLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMmE3Yzk0MzktMjU3OC00ODk5LThiM2UtZDEwZDQzMGY3ZWNlJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBKdWx5IDAyLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MmE3Yzk0MzktMjU3OC00ODk5LThiM2UtZDEwZDQzMGY3ZWNlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw4OV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVseSAwMiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yYTdjOTQzOS0yNTc4LTQ4OTktOGIzZS1kMTBkNDMwZjdlY2UmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDg5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVseSAwMiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTJhN2M5NDM5LTI1NzgtNDg5OS04YjNlLWQxMGQ0MzBmN2VjZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsODlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgSnVseSAwMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MmE3Yzk0MzktMjU3OC00ODk5LThiM2UtZDEwZDQzMGY3ZWNlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xLTYxIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdWx5IDA0LCAyMDI0IEAgMTA6MDAgQU0nPkFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YzRhNTMwY2EtMTk2YS00NGNjLThhMzQtOGJiNmY5NDQ3M2Q0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBKdWx5IDA0LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYzRhNTMwY2EtMTk2YS00NGNjLThhMzQtOGJiNmY5NDQ3M2Q0JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdWx5IDA0LCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDkwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBKdWx5IDA0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVseSAwNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YzRhNTMwY2EtMTk2YS00NGNjLThhMzQtOGJiNmY5NDQ3M2Q0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5MF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bHkgMDQsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bHkgMDQsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWM0YTUzMGNhLTE5NmEtNDRjYy04YTM0LThiYjZmOTQ0NzNkNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVseSAwNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgSnVseSAwNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1jNGE1MzBjYS0xOTZhLTQ0Y2MtOGEzNC04YmI2Zjk0NDczZDQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDkwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEp1bHkgMDQsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWM0YTUzMGNhLTE5NmEtNDRjYy04YTM0LThiYjZmOTQ0NzNkNCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtMTMwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA5OjMwIEFNJz5CdWlsdCBIZXJpdGFnZSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWJmNGJlYmRmLTYxMTctNGFkNi05MTc1LTdjNjIxMTRlNjJmOCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYmY0YmViZGYtNjExNy00YWQ2LTkxNzUtN2M2MjExNGU2MmY4JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5MV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YmY0YmViZGYtNjExNy00YWQ2LTkxNzUtN2M2MjExNGU2MmY4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5MV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgSnVseSAwOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YmY0YmViZGYtNjExNy00YWQ2LTkxNzUtN2M2MjExNGU2MmY4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5MV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YmY0YmViZGYtNjExNy00YWQ2LTkxNzUtN2M2MjExNGU2MmY4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5MV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YmY0YmViZGYtNjExNy00YWQ2LTkxNzUtN2M2MjExNGU2MmY4JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMi03MiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J090dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgNTowMCBQTSc+T3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD02NzU4N2Q1Ni1lMjYzLTQ4MGMtYTIzMi1jNGU4ZDFjOGI3ZjEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgSnVseSAwOSwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDY3NTg3ZDU2LWUyNjMtNDgwYy1hMjMyLWM0ZThkMWM4YjdmMScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgNTowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTJfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgSnVseSAwOSwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY3NTg3ZDU2LWUyNjMtNDgwYy1hMjMyLWM0ZThkMWM4YjdmMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTJfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEp1bHkgMDksIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY3NTg3ZDU2LWUyNjMtNDgwYy1hMjMyLWM0ZThkMWM4YjdmMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgSnVseSAwOSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTY3NTg3ZDU2LWUyNjMtNDgwYy1hMjMyLWM0ZThkMWM4YjdmMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTJfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBKdWx5IDA5LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIDEzIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTY3NTg3ZDU2LWUyNjMtNDgwYy1hMjMyLWM0ZThkMWM4YjdmMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVseSAxMCwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWY3OTI3ZTFiLTUzNWEtNDJkMS05NTgzLTZlMWZkZmFjZGRiYScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIEp1bHkgMTAsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RmNzkyN2UxYi01MzVhLTQyZDEtOTU4My02ZTFmZGZhY2RkYmEnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDEwLCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDkzX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVseSAxMCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDEwLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mNzkyN2UxYi01MzVhLTQyZDEtOTU4My02ZTFmZGZhY2RkYmEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDkzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bHkgMTAsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDEwLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mNzkyN2UxYi01MzVhLTQyZDEtOTU4My02ZTFmZGZhY2RkYmEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDkzX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDEwLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVseSAxMCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1mNzkyN2UxYi01MzVhLTQyZDEtOTU4My02ZTFmZGZhY2RkYmEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDkzX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDEwLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1mNzkyN2UxYi01MzVhLTQyZDEtOTU4My02ZTFmZGZhY2RkYmEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTIyLTIyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bHkgMjIsIDIwMjQgQCA0OjAwIFBNJz5PdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD05Yzc4YzllZS1jNmU2LTRlNGEtOGI0Yy0yNThjMzRlYTg0ZjInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBKdWx5IDIyLCAyMDI0IEAgNDowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEOWM3OGM5ZWUtYzZlNi00ZTRhLThiNGMtMjU4YzM0ZWE4NGYyJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bHkgMjIsIDIwMjQgQCA0OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5NF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBKdWx5IDIyLCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bHkgMjIsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OWM3OGM5ZWUtYzZlNi00ZTRhLThiNGMtMjU4YzM0ZWE4NGYyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5NF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgSnVseSAyMiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bHkgMjIsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OWM3OGM5ZWUtYzZlNi00ZTRhLThiNGMtMjU4YzM0ZWE4NGYyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5NF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bHkgMjIsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBKdWx5IDIyLCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9OWM3OGM5ZWUtYzZlNi00ZTRhLThiNGMtMjU4YzM0ZWE4NGYyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5NF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIEp1bHkgMjIsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9OWM3OGM5ZWUtYzZlNi00ZTRhLThiNGMtMjU4YzM0ZWE4NGYyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDI0LCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODI4N2ZkYzgtZTA3YS00MDFlLThlOGQtNzhiZWUyYWQ3YzUzJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgSnVseSAyNCwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDgyODdmZGM4LWUwN2EtNDAxZS04ZThkLTc4YmVlMmFkN2M1MycgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bHkgMjQsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTVfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDI0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bHkgMjQsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgyODdmZGM4LWUwN2EtNDAxZS04ZThkLTc4YmVlMmFkN2M1MyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTVfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgSnVseSAyNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bHkgMjQsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgyODdmZGM4LWUwN2EtNDAxZS04ZThkLTc4YmVlMmFkN2M1MyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bHkgMjQsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBKdWx5IDI0LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTgyODdmZGM4LWUwN2EtNDAxZS04ZThkLTc4YmVlMmFkN2M1MyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTVfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEp1bHkgMjQsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTgyODdmZGM4LWUwN2EtNDAxZS04ZThkLTc4YmVlMmFkN2M1MycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMS02MSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0FncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDAxLCAyMDI0IEAgMTA6MDAgQU0nPkFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MTliNWFlNjgtNTk3Yi00YjJlLTlhMWQtNzExYjU3MmM4YTE0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBBdWd1c3QgMDEsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdCZW4gRnJhbmtsaW4gUGxhY2UsIFRoZSBDaGFtYmVyLCBNYWluIEZsb29yLCAxMDEgQ2VudHJlcG9pbnRlIERyaXZlLCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5CZW4gRnJhbmtsaW4gUGxhY2UsIFRoZSBDaGFtYmVyLCBNYWluIEZsb29yLCAxMDEgQ2VudHJlcG9pbnRlIERyaXZlLCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QxOWI1YWU2OC01OTdiLTRiMmUtOWExZC03MTFiNTcyYzhhMTQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIEF1Z3VzdCAwMSwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5Nl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDAxLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDAxLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0xOWI1YWU2OC01OTdiLTRiMmUtOWExZC03MTFiNTcyYzhhMTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDk2X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDAxLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMDEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTE5YjVhZTY4LTU5N2ItNGIyZS05YTFkLTcxMWI1NzJjOGExNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDAxLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMDEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MTliNWFlNjgtNTk3Yi00YjJlLTlhMWQtNzExYjU3MmM4YTE0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5Nl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMDEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTE5YjVhZTY4LTU5N2ItNGIyZS05YTFkLTcxMWI1NzJjOGExNCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXVndXN0IDA3LCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MzE0YzJhNDUtOGVkZi00YWJiLThkYjctYTczZDY5Y2I1NzI2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgQXVndXN0IDA3LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMzE0YzJhNDUtOGVkZi00YWJiLThkYjctYTczZDY5Y2I1NzI2JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXVndXN0IDA3LCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDk3X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXVndXN0IDA3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEF1Z3VzdCAwNywgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MzE0YzJhNDUtOGVkZi00YWJiLThkYjctYTczZDY5Y2I1NzI2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5N19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTMxNGMyYTQ1LThlZGYtNGFiYi04ZGI3LWE3M2Q2OWNiNTcyNiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTdfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEF1Z3VzdCAwNywgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEF1Z3VzdCAwNywgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0zMTRjMmE0NS04ZWRmLTRhYmItOGRiNy1hNzNkNjljYjU3MjYmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDk3X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTMxNGMyYTQ1LThlZGYtNGFiYi04ZGI3LWE3M2Q2OWNiNTcyNicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtMTMwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDk6MzAgQU0nPkJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MTBhZTYyOTEtMDA5Zi00ZTBlLTk3ZWEtZDIwNmJlZGE4YTRkJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDEwYWU2MjkxLTAwOWYtNGUwZS05N2VhLWQyMDZiZWRhOGE0ZCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBBdWd1c3QgMTMsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5OF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBBdWd1c3QgMTMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXVndXN0IDEzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTEwYWU2MjkxLTAwOWYtNGUwZS05N2VhLWQyMDZiZWRhOGE0ZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOThfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0xMGFlNjI5MS0wMDlmLTRlMGUtOTdlYS1kMjA2YmVkYThhNGQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDk4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXVndXN0IDEzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgQXVndXN0IDEzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MTBhZTYyOTEtMDA5Zi00ZTBlLTk3ZWEtZDIwNmJlZGE4YTRkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5OF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xMGFlNjI5MS0wMDlmLTRlMGUtOTdlYS1kMjA2YmVkYThhNGQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTcyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDU6MDAgUE0nPk90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YTUyN2U5MjMtZGE5Mi00ZDIwLTkzMDAtZDRmMmE5NDdlMzMyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGE1MjdlOTIzLWRhOTItNGQyMC05MzAwLWQ0ZjJhOTQ3ZTMzMicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBBdWd1c3QgMTMsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5OV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBBdWd1c3QgMTMsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXVndXN0IDEzLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWE1MjdlOTIzLWRhOTItNGQyMC05MzAwLWQ0ZjJhOTQ3ZTMzMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsOTlfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hNTI3ZTkyMy1kYTkyLTRkMjAtOTMwMC1kNGYyYTk0N2UzMzImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDk5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXVndXN0IDEzLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgQXVndXN0IDEzLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YTUyN2U5MjMtZGE5Mi00ZDIwLTkzMDAtZDRmMmE5NDdlMzMyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmw5OV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIEF1Z3VzdCAxMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hNTI3ZTkyMy1kYTkyLTRkMjAtOTMwMC1kNGYyYTk0N2UzMzInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIEF1Z3VzdCAyMSwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWFlMTVkNTRiLTdjOTgtNGNiZi04OTA2LTM4OTRmY2U3NGY4ZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIEF1Z3VzdCAyMSwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGFlMTVkNTRiLTdjOTgtNGNiZi04OTA2LTM4OTRmY2U3NGY4ZScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEF1Z3VzdCAyMSwgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDBfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMjEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgQXVndXN0IDIxLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hZTE1ZDU0Yi03Yzk4LTRjYmYtODkwNi0zODk0ZmNlNzRmOGUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwMF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMjEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMjEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWFlMTVkNTRiLTdjOTgtNGNiZi04OTA2LTM4OTRmY2U3NGY4ZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTAwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMjEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBBdWd1c3QgMjEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YWUxNWQ1NGItN2M5OC00Y2JmLTg5MDYtMzg5NGZjZTc0ZjhlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDBfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIEF1Z3VzdCAyMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YWUxNWQ1NGItN2M5OC00Y2JmLTg5MDYtMzg5NGZjZTc0ZjhlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yOC0xNDgiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEF1Z3VzdCAyMiwgMjAyNCBAIDk6MzAgQU0nPlRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NTU2NTA4NGUtNTBlYy00MjE2LWFlNzUtZDNjMWNmOGM1MTQ5JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBBdWd1c3QgMjIsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q1NTY1MDg0ZS01MGVjLTQyMTYtYWU3NS1kM2MxY2Y4YzUxNDknIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEF1Z3VzdCAyMiwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwMV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDIyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NTU2NTA4NGUtNTBlYy00MjE2LWFlNzUtZDNjMWNmOGM1MTQ5Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDFfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgQXVndXN0IDIyLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTU1NjUwODRlLTUwZWMtNDIxNi1hZTc1LWQzYzFjZjhjNTE0OSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTAxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIEF1Z3VzdCAyMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD01NTY1MDg0ZS01MGVjLTQyMTYtYWU3NS1kM2MxY2Y4YzUxNDkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwMV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBBdWd1c3QgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NTU2NTA4NGUtNTBlYy00MjE2LWFlNzUtZDNjMWNmOGM1MTQ5JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC05LTEyOSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0ZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDAzLCAyMDI0IEAgOTozMCBBTSc+RmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTkyNTgyMjZjLTM2ZmQtNGNiNy1iODU1LWVjZGEzMDdmNmMyMCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBTZXB0ZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q5MjU4MjI2Yy0zNmZkLTRjYjctYjg1NS1lY2RhMzA3ZjZjMjAnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwMl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDAzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OTI1ODIyNmMtMzZmZC00Y2I3LWI4NTUtZWNkYTMwN2Y2YzIwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDJfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDAzLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTkyNTgyMjZjLTM2ZmQtNGNiNy1iODU1LWVjZGEzMDdmNmMyMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTAyX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD05MjU4MjI2Yy0zNmZkLTRjYjctYjg1NS1lY2RhMzA3ZjZjMjAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwMl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTkyNTgyMjZjLTM2ZmQtNGNiNy1iODU1LWVjZGEzMDdmNmMyMCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDA0LCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MmVhMGNhOWYtYWM3Zi00MmQyLWJmYjctNTI5ZWNiY2UxNmQ3JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgU2VwdGVtYmVyIDA0LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMmVhMGNhOWYtYWM3Zi00MmQyLWJmYjctNTI5ZWNiY2UxNmQ3JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDA0LCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwM19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIFNlcHRlbWJlciAwNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBTZXB0ZW1iZXIgMDQsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTJlYTBjYTlmLWFjN2YtNDJkMi1iZmI3LTUyOWVjYmNlMTZkNyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTAzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIFNlcHRlbWJlciAwNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIFNlcHRlbWJlciAwNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MmVhMGNhOWYtYWM3Zi00MmQyLWJmYjctNTI5ZWNiY2UxNmQ3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIFNlcHRlbWJlciAwNCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIFNlcHRlbWJlciAwNCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0yZWEwY2E5Zi1hYzdmLTQyZDItYmZiNy01MjllY2JjZTE2ZDcmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwM19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDA0LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yZWEwY2E5Zi1hYzdmLTQyZDItYmZiNy01MjllY2JjZTE2ZDcnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEtNjEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAwNSwgMjAyNCBAIDEwOjAwIEFNJz5BZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTgyMDljZjlmLWViYTctNDJhZC05MTRmLTZkOTY3M2I5OTRkZicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgU2VwdGVtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEODIwOWNmOWYtZWJhNy00MmFkLTkxNGYtNmQ5NjczYjk5NGRmJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMDUsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMDUsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMDUsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgyMDljZjlmLWViYTctNDJhZC05MTRmLTZkOTY3M2I5OTRkZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA0X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMDUsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTgyMDljZjlmLWViYTctNDJhZC05MTRmLTZkOTY3M2I5OTRkZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA0X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAwNSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTgyMDljZjlmLWViYTctNDJhZC05MTRmLTZkOTY3M2I5OTRkZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAwNSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODIwOWNmOWYtZWJhNy00MmFkLTkxNGYtNmQ5NjczYjk5NGRmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC0xMzAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgOTozMCBBTSc+QnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xNTA0NWQ3NS05ODIwLTRjZjAtYjI2NS1jYWQ2MmM3ZjViM2YnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMTUwNDVkNzUtOTgyMC00Y2YwLWIyNjUtY2FkNjJjN2Y1YjNmJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAxMCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwNV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTE1MDQ1ZDc1LTk4MjAtNGNmMC1iMjY1LWNhZDYyYzdmNWIzZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA1X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTUwNDVkNzUtOTgyMC00Y2YwLWIyNjUtY2FkNjJjN2Y1YjNmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0xNTA0NWQ3NS05ODIwLTRjZjAtYjI2NS1jYWQ2MmM3ZjViM2YmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwNV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAxMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xNTA0NWQ3NS05ODIwLTRjZjAtYjI2NS1jYWQ2MmM3ZjViM2YnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTcyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIFNlcHRlbWJlciAxMCwgMjAyNCBAIDU6MDAgUE0nPk90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZTBjZTIwODctMmRkMi00MDdhLThmM2ItMzI1M2JjMmFhOTQ0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIFNlcHRlbWJlciAxMCwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGUwY2UyMDg3LTJkZDItNDA3YS04ZjNiLTMyNTNiYzJhYTk0NCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDZfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIFNlcHRlbWJlciAxMCwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1lMGNlMjA4Ny0yZGQyLTQwN2EtOGYzYi0zMjUzYmMyYWE5NDQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwNl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWUwY2UyMDg3LTJkZDItNDA3YS04ZjNiLTMyNTNiYzJhYTk0NCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA2X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgU2VwdGVtYmVyIDEwLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZTBjZTIwODctMmRkMi00MDdhLThmM2ItMzI1M2JjMmFhOTQ0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDZfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBTZXB0ZW1iZXIgMTAsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZTBjZTIwODctMmRkMi00MDdhLThmM2ItMzI1M2JjMmFhOTQ0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC03MCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgOTozMCBBTSc+VHJhbnNpdCBDb21taXNzaW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD02MGYzMjg4Mi0wZTQ2LTRkZDUtOWZlMi02ZmQ5Yjg4NTQ3YzUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDYwZjMyODgyLTBlNDYtNGRkNS05ZmUyLTZmZDliODg1NDdjNScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA3X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD02MGYzMjg4Mi0wZTQ2LTRkZDUtOWZlMi02ZmQ5Yjg4NTQ3YzUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwN19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NjBmMzI4ODItMGU0Ni00ZGQ1LTlmZTItNmZkOWI4ODU0N2M1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMDdfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTYwZjMyODgyLTBlNDYtNGRkNS05ZmUyLTZmZDliODg1NDdjNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA3X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD02MGYzMjg4Mi0wZTQ2LTRkZDUtOWZlMi02ZmQ5Yjg4NTQ3YzUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTYtMTI2Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgNTozMCBQTSc+RnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWM3NTA3NzY2LWEyYzYtNGE2Yi04YzVhLTAwYjliMDk4ZDkwYycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgNTozMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYzc1MDc3NjYtYTJjNi00YTZiLThjNWEtMDBiOWIwOThkOTBjJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgNTozMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA4X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgNTozMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWM3NTA3NzY2LWEyYzYtNGE2Yi04YzVhLTAwYjliMDk4ZDkwYyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA4X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDU6MzAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDEyLCAyMDI0IEAgNTozMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWM3NTA3NzY2LWEyYzYtNGE2Yi04YzVhLTAwYjliMDk4ZDkwYyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTIsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAxMiwgMjAyNCBAIDU6MzAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWM3NTA3NzY2LWEyYzYtNGE2Yi04YzVhLTAwYjliMDk4ZDkwYyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTA4X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTIsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIDA3IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWM3NTA3NzY2LWEyYzYtNGE2Yi04YzVhLTAwYjliMDk4ZDkwYycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjQtMjQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBTZXB0ZW1iZXIgMTYsIDIwMjQgQCA1OjAwIFBNJz5Cb2FyZCBvZiBIZWFsdGg8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQm9hcmQgb2YgSGVhbHRoIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTU1ZjUwYWRmLWMzZjctNDY3Ni1hNzA4LTYyNzEwYTFhY2VhZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIFNlcHRlbWJlciAxNiwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDU1ZjUwYWRmLWMzZjctNDY3Ni1hNzA4LTYyNzEwYTFhY2VhZScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIFNlcHRlbWJlciAxNiwgMjAyNCBAIDU6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwOV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIFNlcHRlbWJlciAxNiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIFNlcHRlbWJlciAxNiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01NWY1MGFkZi1jM2Y3LTQ2NzYtYTcwOC02MjcxMGExYWNlYWUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwOV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBTZXB0ZW1iZXIgMTYsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIFNlcHRlbWJlciAxNiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01NWY1MGFkZi1jM2Y3LTQ2NzYtYTcwOC02MjcxMGExYWNlYWUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwOV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgU2VwdGVtYmVyIDE2LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBTZXB0ZW1iZXIgMTYsIDIwMjQgQCA1OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD01NWY1MGFkZi1jM2Y3LTQ2NzYtYTcwOC02MjcxMGExYWNlYWUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEwOV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgU2VwdGVtYmVyIDE2LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQm9hcmQgb2YgSGVhbHRoIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTU1ZjUwYWRmLWMzZjctNDY3Ni1hNzA4LTYyNzEwYTFhY2VhZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTMtMTMzIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTcsIDIwMjQgQCA5OjMwIEFNJz5FbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YjBiNzY2OGEtNjRlMS00MjcxLWE2MDctOTkxYTY4ODU1ZGM1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIFNlcHRlbWJlciAxNywgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGIwYjc2NjhhLTY0ZTEtNDI3MS1hNjA3LTk5MWE2ODg1NWRjNScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDE3LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTEwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAxNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1iMGI3NjY4YS02NGUxLTQyNzEtYTYwNy05OTFhNjg4NTVkYzUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExMF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAxNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMTcsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YjBiNzY2OGEtNjRlMS00MjcxLWE2MDctOTkxYTY4ODU1ZGM1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTBfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDE3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAxNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWIwYjc2NjhhLTY0ZTEtNDI3MS1hNjA3LTk5MWE2ODg1NWRjNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTEwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAxNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YjBiNzY2OGEtNjRlMS00MjcxLWE2MDctOTkxYTY4ODU1ZGM1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBTZXB0ZW1iZXIgMTgsIDIwMjQgQCAxMDowMCBBTSc+Q2l0eSBDb3VuY2lsPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1mMzE0NWViMi1lNmRlLTRhZTUtOTQ2Zi02MzdhMWMyOTFiYzMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBTZXB0ZW1iZXIgMTgsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RmMzE0NWViMi1lNmRlLTRhZTUtOTQ2Zi02MzdhMWMyOTFiYzMnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBTZXB0ZW1iZXIgMTgsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTExX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDE4LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIFNlcHRlbWJlciAxOCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZjMxNDVlYjItZTZkZS00YWU1LTk0NmYtNjM3YTFjMjkxYmMzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTFfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDE4LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDE4LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mMzE0NWViMi1lNmRlLTRhZTUtOTQ2Zi02MzdhMWMyOTFiYzMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExMV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDE4LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgU2VwdGVtYmVyIDE4LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWYzMTQ1ZWIyLWU2ZGUtNGFlNS05NDZmLTYzN2ExYzI5MWJjMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTExX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBTZXB0ZW1iZXIgMTgsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWYzMTQ1ZWIyLWU2ZGUtNGFlNS05NDZmLTYzN2ExYzI5MWJjMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTItMTMyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAxOSwgMjAyNCBAIDk6MzAgQU0nPkVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTBlN2VlMWNhLTk0ZmItNDc5Yy1hYjZkLWE3MWNiZWJiNTlhZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgU2VwdGVtYmVyIDE5LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMGU3ZWUxY2EtOTRmYi00NzljLWFiNmQtYTcxY2JlYmI1OWFlJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAxOSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExMl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDE5LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTBlN2VlMWNhLTk0ZmItNDc5Yy1hYjZkLWE3MWNiZWJiNTlhZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTEyX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MGU3ZWUxY2EtOTRmYi00NzljLWFiNmQtYTcxY2JlYmI1OWFlJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0wZTdlZTFjYS05NGZiLTQ3OWMtYWI2ZC1hNzFjYmViYjU5YWUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExMl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAxOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTBlN2VlMWNhLTk0ZmItNDc5Yy1hYjZkLWE3MWNiZWJiNTlhZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjItMjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgU2VwdGVtYmVyIDIzLCAyMDI0IEAgNDowMCBQTSc+T3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZDVlMzZmODMtNTRmYS00YjI1LWE1YTgtNTdkN2M0YzQ1NjUwJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPk1vbmRheSwgU2VwdGVtYmVyIDIzLCAyMDI0IEAgNDowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZDVlMzZmODMtNTRmYS00YjI1LWE1YTgtNTdkN2M0YzQ1NjUwJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIFNlcHRlbWJlciAyMywgMjAyNCBAIDQ6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExM19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBTZXB0ZW1iZXIgMjMsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgU2VwdGVtYmVyIDIzLCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWQ1ZTM2ZjgzLTU0ZmEtNGIyNS1hNWE4LTU3ZDdjNGM0NTY1MCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTEzX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBTZXB0ZW1iZXIgMjMsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBTZXB0ZW1iZXIgMjMsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZDVlMzZmODMtNTRmYS00YjI1LWE1YTgtNTdkN2M0YzQ1NjUwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBTZXB0ZW1iZXIgMjMsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBTZXB0ZW1iZXIgMjMsIDIwMjQgQCA0OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1kNWUzNmY4My01NGZhLTRiMjUtYTVhOC01N2Q3YzRjNDU2NTAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExM19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIFNlcHRlbWJlciAyMywgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgMDMgSmFudWFyeSAyMDI0JyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1kNWUzNmY4My01NGZhLTRiMjUtYTVhOC01N2Q3YzRjNDU2NTAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTExLTEzMSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDI0LCAyMDI0IEAgOTozMCBBTSc+Q29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTQwYWY0MzA0LTIwNjEtNDcyYi1hNGU1LTNkZTY3NzQ4MmVhOCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBTZXB0ZW1iZXIgMjQsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q0MGFmNDMwNC0yMDYxLTQ3MmItYTRlNS0zZGU2Nzc0ODJlYTgnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAyNCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExNF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDI0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMjQsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NDBhZjQzMDQtMjA2MS00NzJiLWE0ZTUtM2RlNjc3NDgyZWE4Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTRfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMjQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgU2VwdGVtYmVyIDI0LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTQwYWY0MzA0LTIwNjEtNDcyYi1hNGU1LTNkZTY3NzQ4MmVhOCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE0X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIFNlcHRlbWJlciAyNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMjQsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD00MGFmNDMwNC0yMDYxLTQ3MmItYTRlNS0zZGU2Nzc0ODJlYTgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExNF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBTZXB0ZW1iZXIgMjQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTQwYWY0MzA0LTIwNjEtNDcyYi1hNGU1LTNkZTY3NzQ4MmVhOCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjgtMTQ4Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMjYsIDIwMjQgQCA5OjMwIEFNJz5UcmFuc3BvcnRhdGlvbiBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc3YzQ0NzhmLTBhZmYtNDE4NC04ZGE1LTFlMWE2N2RkYWRlMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgU2VwdGVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENzdjNDQ3OGYtMGFmZi00MTg0LThkYTUtMWUxYTY3ZGRhZGUzJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMjYsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTVfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAyNiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTc3YzQ0NzhmLTBhZmYtNDE4NC04ZGE1LTFlMWE2N2RkYWRlMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE1X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIFNlcHRlbWJlciAyNiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD03N2M0NDc4Zi0wYWZmLTQxODQtOGRhNS0xZTFhNjdkZGFkZTMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExNV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBTZXB0ZW1iZXIgMjYsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NzdjNDQ3OGYtMGFmZi00MTg0LThkYTUtMWUxYTY3ZGRhZGUzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTVfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgU2VwdGVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTc3YzQ0NzhmLTBhZmYtNDE4NC04ZGE1LTFlMWE2N2RkYWRlMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtOS0xMjkiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDEsIDIwMjQgQCA5OjMwIEFNJz5GaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Zjg5OTVjY2YtODZjZS00YjMwLTk2NGMtMjU3YWI5ZjRiYjhjJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE9jdG9iZXIgMDEsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RmODk5NWNjZi04NmNlLTRiMzAtOTY0Yy0yNTdhYjlmNGJiOGMnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDEsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTZfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Zjg5OTVjY2YtODZjZS00YjMwLTk2NGMtMjU3YWI5ZjRiYjhjJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTZfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDAxLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDEsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Zjg5OTVjY2YtODZjZS00YjMwLTk2NGMtMjU3YWI5ZjRiYjhjJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAwMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDAxLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9Zjg5OTVjY2YtODZjZS00YjMwLTk2NGMtMjU3YWI5ZjRiYjhjJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTZfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAwMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTEgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Zjg5OTVjY2YtODZjZS00YjMwLTk2NGMtMjU3YWI5ZjRiYjhjJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDAyLCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NTM0MzA4YWMtOGY1NC00ZTk5LWE3ZWQtNWUxNDIwMGUxMGU1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgT2N0b2JlciAwMiwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDUzNDMwOGFjLThmNTQtNGU5OS1hN2VkLTVlMTQyMDBlMTBlNScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE9jdG9iZXIgMDIsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE3X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgT2N0b2JlciAwMiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDAyLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01MzQzMDhhYy04ZjU0LTRlOTktYTdlZC01ZTE0MjAwZTEwZTUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExN19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDAyLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgT2N0b2JlciAwMiwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NTM0MzA4YWMtOGY1NC00ZTk5LWE3ZWQtNWUxNDIwMGUxMGU1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTdfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE9jdG9iZXIgMDIsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDAyLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTUzNDMwOGFjLThmNTQtNGU5OS1hN2VkLTVlMTQyMDBlMTBlNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE3X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDAyLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01MzQzMDhhYy04ZjU0LTRlOTktYTdlZC01ZTE0MjAwZTEwZTUnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEtNjEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMDMsIDIwMjQgQCAxMDowMCBBTSc+QWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1jYjE4MTVhOC1lZGJjLTRhMjYtYTRiZS01MWZhZGE5ZDA2NGInIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE9jdG9iZXIgMDMsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdCZW4gRnJhbmtsaW4gUGxhY2UsIFRoZSBDaGFtYmVyLCBNYWluIEZsb29yLCAxMDEgQ2VudHJlcG9pbnRlIERyaXZlLCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5CZW4gRnJhbmtsaW4gUGxhY2UsIFRoZSBDaGFtYmVyLCBNYWluIEZsb29yLCAxMDEgQ2VudHJlcG9pbnRlIERyaXZlLCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RjYjE4MTVhOC1lZGJjLTRhMjYtYTRiZS01MWZhZGE5ZDA2NGInIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMDMsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE4X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDAzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAwMywgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Y2IxODE1YTgtZWRiYy00YTI2LWE0YmUtNTFmYWRhOWQwNjRiJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMThfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDAzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDAzLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1jYjE4MTVhOC1lZGJjLTRhMjYtYTRiZS01MWZhZGE5ZDA2NGImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExOF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDAzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDAzLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWNiMTgxNWE4LWVkYmMtNGEyNi1hNGJlLTUxZmFkYTlkMDY0YiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE4X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMDMsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWNiMTgxNWE4LWVkYmMtNGEyNi1hNGJlLTUxZmFkYTlkMDY0YicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtMTMwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA5OjMwIEFNJz5CdWlsdCBIZXJpdGFnZSBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTAyMGI3NzE5LWE4ZDctNDRlZi05ZWIwLWZhMzgzZThhNWRiMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMDIwYjc3MTktYThkNy00NGVmLTllYjAtZmEzODNlOGE1ZGIzJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAwOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTAyMGI3NzE5LWE4ZDctNDRlZi05ZWIwLWZhMzgzZThhNWRiMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTE5X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAwOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0wMjBiNzcxOS1hOGQ3LTQ0ZWYtOWViMC1mYTM4M2U4YTVkYjMmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDExOV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MDIwYjc3MTktYThkNy00NGVmLTllYjAtZmEzODNlOGE1ZGIzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMTlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTAyMGI3NzE5LWE4ZDctNDRlZi05ZWIwLWZhMzgzZThhNWRiMycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTItNzIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgT2N0b2JlciAwOCwgMjAyNCBAIDU6MDAgUE0nPk90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Mjk2MzA2MDQtMTg2Mi00MDBhLWFiNGMtOGRlZTczN2EyMWFkJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA1OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QyOTYzMDYwNC0xODYyLTQwMGEtYWI0Yy04ZGVlNzM3YTIxYWQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgT2N0b2JlciAwOCwgMjAyNCBAIDU6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyMF9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA1OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Mjk2MzA2MDQtMTg2Mi00MDBhLWFiNGMtOGRlZTczN2EyMWFkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjBfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBPY3RvYmVyIDA4LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTI5NjMwNjA0LTE4NjItNDAwYS1hYjRjLThkZWU3MzdhMjFhZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgT2N0b2JlciAwOCwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA1OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0yOTYzMDYwNC0xODYyLTQwMGEtYWI0Yy04ZGVlNzM3YTIxYWQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyMF9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE9jdG9iZXIgMDgsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgMTMgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Mjk2MzA2MDQtMTg2Mi00MDBhLWFiNGMtOGRlZTczN2EyMWFkJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC03MCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgT2N0b2JlciAxMCwgMjAyNCBAIDk6MzAgQU0nPlRyYW5zaXQgQ29tbWlzc2lvbjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc2l0IENvbW1pc3Npb24gMDcgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NWM3ZTE0NzMtYmZjOS00NjA2LWI3ZmYtZWIxZjIwMjA5YWU2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBPY3RvYmVyIDEwLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENWM3ZTE0NzMtYmZjOS00NjA2LWI3ZmYtZWIxZjIwMjA5YWU2JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBPY3RvYmVyIDEwLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIxX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBPY3RvYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBPY3RvYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTVjN2UxNDczLWJmYzktNDYwNi1iN2ZmLWViMWYyMDIwOWFlNiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIxX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgT2N0b2JlciAxMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgVHJhbnNpdCBDb21taXNzaW9uIFRodXJzZGF5LCBPY3RvYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTVjN2UxNDczLWJmYzktNDYwNi1iN2ZmLWViMWYyMDIwOWFlNiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIE9jdG9iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zaXQgQ29tbWlzc2lvbiBUaHVyc2RheSwgT2N0b2JlciAxMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTVjN2UxNDczLWJmYzktNDYwNi1iN2ZmLWViMWYyMDIwOWFlNiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIxX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gVGh1cnNkYXksIE9jdG9iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc2l0IENvbW1pc3Npb24gMDcgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NWM3ZTE0NzMtYmZjOS00NjA2LWI3ZmYtZWIxZjIwMjA5YWU2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMy0xMzMiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMTUsIDIwMjQgQCA5OjMwIEFNJz5FbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MTcxMDQwM2QtNDYyMi00ZmQxLWIwNGYtNjQ3ZTRhNWEwYTA2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE9jdG9iZXIgMTUsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QxNzEwNDAzZC00NjIyLTRmZDEtYjA0Zi02NDdlNGE1YTBhMDYnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMTUsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjJfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMTUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMTUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTcxMDQwM2QtNDYyMi00ZmQxLWIwNGYtNjQ3ZTRhNWEwYTA2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjJfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDE1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMTUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTcxMDQwM2QtNDYyMi00ZmQxLWIwNGYtNjQ3ZTRhNWEwYTA2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjJfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAxNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDE1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MTcxMDQwM2QtNDYyMi00ZmQxLWIwNGYtNjQ3ZTRhNWEwYTA2Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjJfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAxNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MTcxMDQwM2QtNDYyMi00ZmQxLWIwNGYtNjQ3ZTRhNWEwYTA2JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE2LCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YTJlYWU0OTgtMzQzZi00MDg1LWI4MjktNzI3ZDRhODg1YzIxJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgT2N0b2JlciAxNiwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGEyZWFlNDk4LTM0M2YtNDA4NS1iODI5LTcyN2Q0YTg4NWMyMScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE9jdG9iZXIgMTYsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIzX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgT2N0b2JlciAxNiwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1hMmVhZTQ5OC0zNDNmLTQwODUtYjgyOS03MjdkNGE4ODVjMjEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyM19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgT2N0b2JlciAxNiwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YTJlYWU0OTgtMzQzZi00MDg1LWI4MjktNzI3ZDRhODg1YzIxJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE9jdG9iZXIgMTYsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE2LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWEyZWFlNDk4LTM0M2YtNDA4NS1iODI5LTcyN2Q0YTg4NWMyMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTIzX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDE2LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1hMmVhZTQ5OC0zNDNmLTQwODUtYjgyOS03MjdkNGE4ODVjMjEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTEzMiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0VtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDE3LCAyMDI0IEAgOTozMCBBTSc+RW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MDU0ZjBlMzEtMGVlOS00MDQ2LThhN2QtMDI4NDhkZTJjYzM1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBPY3RvYmVyIDE3LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMDU0ZjBlMzEtMGVlOS00MDQ2LThhN2QtMDI4NDhkZTJjYzM1JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMTcsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjRfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAxNywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDE3LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTA1NGYwZTMxLTBlZTktNDA0Ni04YTdkLTAyODQ4ZGUyY2MzNSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTI0X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDE3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAxNywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0wNTRmMGUzMS0wZWU5LTQwNDYtOGE3ZC0wMjg0OGRlMmNjMzUmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyNF9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMTcsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDE3LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MDU0ZjBlMzEtMGVlOS00MDQ2LThhN2QtMDI4NDhkZTJjYzM1Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjRfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDE3LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MDU0ZjBlMzEtMGVlOS00MDQ2LThhN2QtMDI4NDhkZTJjYzM1JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMS0xMzEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMjIsIDIwMjQgQCA5OjMwIEFNJz5Db21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgMDggRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZWM4YjEwMzUtZTljYy00NmM3LWI4NTctOGIyOGY0ODgzNGVmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE9jdG9iZXIgMjIsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RlYzhiMTAzNS1lOWNjLTQ2YzctYjg1Ny04YjI4ZjQ4ODM0ZWYnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMjIsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjVfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMjIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWM4YjEwMzUtZTljYy00NmM3LWI4NTctOGIyOGY0ODgzNGVmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjVfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDIyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE9jdG9iZXIgMjIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ZWM4YjEwMzUtZTljYy00NmM3LWI4NTctOGIyOGY0ODgzNGVmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAyMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBPY3RvYmVyIDIyLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZWM4YjEwMzUtZTljYy00NmM3LWI4NTctOGIyOGY0ODgzNGVmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjVfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgT2N0b2JlciAyMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgMDggRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZWM4YjEwMzUtZTljYy00NmM3LWI4NTctOGIyOGY0ODgzNGVmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yOC0xNDgiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMjQsIDIwMjQgQCA5OjMwIEFNJz5UcmFuc3BvcnRhdGlvbiBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWYxNGVkMDM4LTg1ODQtNGFmMi04ZTNmLTMyNTViYjNmZTkyZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UaHVyc2RheSwgT2N0b2JlciAyNCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRGYxNGVkMDM4LTg1ODQtNGFmMi04ZTNmLTMyNTViYjNmZTkyZCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAyNCwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyNl9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAyNCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAyNCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mMTRlZDAzOC04NTg0LTRhZjItOGUzZi0zMjU1YmIzZmU5MmQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyNl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMjQsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgT2N0b2JlciAyNCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1mMTRlZDAzOC04NTg0LTRhZjItOGUzZi0zMjU1YmIzZmU5MmQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyNl9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDI0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE9jdG9iZXIgMjQsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD1mMTRlZDAzOC04NTg0LTRhZjItOGUzZi0zMjU1YmIzZmU5MmQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyNl9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBPY3RvYmVyIDI0LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWYxNGVkMDM4LTg1ODQtNGFmMi04ZTNmLTMyNTViYjNmZTkyZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjItMjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgT2N0b2JlciAyOCwgMjAyNCBAIDQ6MDAgUE0nPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTEwZDgzM2QwLWNmNDYtNGE2NS05YWUxLWE3NGQ0MTU4OTRlMicgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIE9jdG9iZXIgMjgsIDIwMjQgQCA0OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0VsZWN0cm9uaWMgUGFydGljaXBhdGlvbic+RWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QxMGQ4MzNkMC1jZjQ2LTRhNjUtOWFlMS1hNzRkNDE1ODk0ZTInIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgT2N0b2JlciAyOCwgMjAyNCBAIDQ6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyN19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBPY3RvYmVyIDI4LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE9jdG9iZXIgMjgsIDIwMjQgQCA0OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTBkODMzZDAtY2Y0Ni00YTY1LTlhZTEtYTc0ZDQxNTg5NGUyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjdfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE9jdG9iZXIgMjgsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBPY3RvYmVyIDI4LCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTEwZDgzM2QwLWNmNDYtNGE2NS05YWUxLWE3NGQ0MTU4OTRlMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTI3X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgT2N0b2JlciAyOCwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE9jdG9iZXIgMjgsIDIwMjQgQCA0OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0xMGQ4MzNkMC1jZjQ2LTRhNjUtOWFlMS1hNzRkNDE1ODk0ZTImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyN19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE9jdG9iZXIgMjgsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MTBkODMzZDAtY2Y0Ni00YTY1LTlhZTEtYTc0ZDQxNTg5NGUyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDMwLCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9M2VmY2M0NzgtZDljNC00ZDkyLWEwZjctYjkyODE0NzU5MDc0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgT2N0b2JlciAzMCwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDNlZmNjNDc4LWQ5YzQtNGQ5Mi1hMGY3LWI5MjgxNDc1OTA3NCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE9jdG9iZXIgMzAsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTI4X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgT2N0b2JlciAzMCwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDMwLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0zZWZjYzQ3OC1kOWM0LTRkOTItYTBmNy1iOTI4MTQ3NTkwNzQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyOF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDMwLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgT2N0b2JlciAzMCwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9M2VmY2M0NzgtZDljNC00ZDkyLWEwZjctYjkyODE0NzU5MDc0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjhfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE9jdG9iZXIgMzAsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDMwLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTNlZmNjNDc4LWQ5YzQtNGQ5Mi1hMGY3LWI5MjgxNDc1OTA3NCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTI4X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBPY3RvYmVyIDMwLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0zZWZjYzQ3OC1kOWM0LTRkOTItYTBmNy1iOTI4MTQ3NTkwNzQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTI0LTI0Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgTm92ZW1iZXIgMDQsIDIwMjQgQCA1OjAwIFBNJz5Cb2FyZCBvZiBIZWFsdGg8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQm9hcmQgb2YgSGVhbHRoIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWQwMzcxMDI4LWMxZTktNDJjNC1iYTRiLTUzYTQ4OTUwNjc1NycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIE5vdmVtYmVyIDA0LCAyMDI0IEAgNTowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZDAzNzEwMjgtYzFlOS00MmM0LWJhNGItNTNhNDg5NTA2NzU3JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgTm92ZW1iZXIgMDQsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjlfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBOb3ZlbWJlciAwNCwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIE5vdmVtYmVyIDA0LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWQwMzcxMDI4LWMxZTktNDJjNC1iYTRiLTUzYTQ4OTUwNjc1NyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTI5X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIE5vdmVtYmVyIDA0LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBOb3ZlbWJlciAwNCwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD1kMDM3MTAyOC1jMWU5LTQyYzQtYmE0Yi01M2E0ODk1MDY3NTcmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEyOV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgTm92ZW1iZXIgMDQsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIE5vdmVtYmVyIDA0LCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ZDAzNzEwMjgtYzFlOS00MmM0LWJhNGItNTNhNDg5NTA2NzU3Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMjlfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIE5vdmVtYmVyIDA0LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQm9hcmQgb2YgSGVhbHRoIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWQwMzcxMDI4LWMxZTktNDJjNC1iYTRiLTUzYTQ4OTUwNjc1NycgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtOS0xMjkiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgOTozMCBBTSc+RmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTJhNzkyOGFiLThhYTMtNGRiOS1iZDBhLTJhNmM1N2FlOWQyOScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDJhNzkyOGFiLThhYTMtNGRiOS1iZDBhLTJhNmM1N2FlOWQyOScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMDUsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzBfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yYTc5MjhhYi04YWEzLTRkYjktYmQwYS0yYTZjNTdhZTlkMjkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzMF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTJhNzkyOGFiLThhYTMtNGRiOS1iZDBhLTJhNmM1N2FlOWQyOSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTMwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MmE3OTI4YWItOGFhMy00ZGI5LWJkMGEtMmE2YzU3YWU5ZDI5Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzBfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMDUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIDExIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTJhNzkyOGFiLThhYTMtNGRiOS1iZDBhLTJhNmM1N2FlOWQyOScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTItNzIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTm92ZW1iZXIgMDUsIDIwMjQgQCA1OjAwIFBNJz5PdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIDEzIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTRmYmQ2Njg0LWNhZDEtNDIwNy1hNzAzLTgyY2I1NGViMGZiOScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDRmYmQ2Njg0LWNhZDEtNDIwNy1hNzAzLTgyY2I1NGViMGZiOScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDU6MDAgUE0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzMV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00ZmJkNjY4NC1jYWQxLTQyMDctYTcwMy04MmNiNTRlYjBmYjkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzMV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTm92ZW1iZXIgMDUsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBOb3ZlbWJlciAwNSwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD00ZmJkNjY4NC1jYWQxLTQyMDctYTcwMy04MmNiNTRlYjBmYjkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzMV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgTm92ZW1iZXIgMDUsIDIwMjQgQCA1OjAwIFBNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD00ZmJkNjY4NC1jYWQxLTQyMDctYTcwMy04MmNiNTRlYjBmYjkmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzMV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIE5vdmVtYmVyIDA1LCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIDEzIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTRmYmQ2Njg0LWNhZDEtNDIwNy1hNzAzLTgyY2I1NGViMGZiOScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMS02MSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0FncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMDcsIDIwMjQgQCAxMDowMCBBTSc+QWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xMDIwMDJkZC0zYTk0LTRlNTgtYmRiYi05ZGQ0NDUzYjkxMjEnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE5vdmVtYmVyIDA3LCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QmVuIEZyYW5rbGluIFBsYWNlLCBUaGUgQ2hhbWJlciwgTWFpbiBGbG9vciwgMTAxIENlbnRyZXBvaW50ZSBEcml2ZSwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMTAyMDAyZGQtM2E5NC00ZTU4LWJkYmItOWRkNDQ1M2I5MTIxJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAwNywgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzJfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDA3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTEwMjAwMmRkLTNhOTQtNGU1OC1iZGJiLTlkZDQ0NTNiOTEyMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTMyX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDA3LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0xMDIwMDJkZC0zYTk0LTRlNTgtYmRiYi05ZGQ0NDUzYjkxMjEmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzMl9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAwNywgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMDcsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MTAyMDAyZGQtM2E5NC00ZTU4LWJkYmItOWRkNDQ1M2I5MTIxJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzJfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMDcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIDEyIERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTEwMjAwMmRkLTNhOTQtNGU1OC1iZGJiLTlkZDQ0NTNiOTEyMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMTAtMTMwIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDEyLCAyMDI0IEAgOTozMCBBTSc+QnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iZWEyNDRiZC04N2U1LTQxNjEtODVkMS0yOWYwNzA2MjViZTMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgTm92ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0RiZWEyNDRiZC04N2U1LTQxNjEtODVkMS0yOWYwNzA2MjViZTMnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzNfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YmVhMjQ0YmQtODdlNS00MTYxLTg1ZDEtMjlmMDcwNjI1YmUzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzNfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDEyLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTIsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9YmVhMjQ0YmQtODdlNS00MTYxLTg1ZDEtMjlmMDcwNjI1YmUzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzNfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBOb3ZlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDEyLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9YmVhMjQ0YmQtODdlNS00MTYxLTg1ZDEtMjlmMDcwNjI1YmUzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzNfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBOb3ZlbWJlciAxMiwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD1iZWEyNDRiZC04N2U1LTQxNjEtODVkMS0yOWYwNzA2MjViZTMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTUtNSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0NpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDEzLCAyMDI0IEAgMTA6MDAgQU0nPkNpdHkgQ291bmNpbDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ODE5OWFmMmItMmVmOS00NmUxLThmNjEtN2I0OTRjODhjNjgwJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPldlZG5lc2RheSwgTm92ZW1iZXIgMTMsIDIwMjQgQCAxMDowMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdBbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5BbmRyZXcgUy4gSGF5ZG9uIEhhbGwsIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q4MTk5YWYyYi0yZWY5LTQ2ZTEtOGY2MS03YjQ5NGM4OGM2ODAnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBOb3ZlbWJlciAxMywgMjAyNCBAIDEwOjAwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzRfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBOb3ZlbWJlciAxMywgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBOb3ZlbWJlciAxMywgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODE5OWFmMmItMmVmOS00NmUxLThmNjEtN2I0OTRjODhjNjgwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzRfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTm92ZW1iZXIgMTMsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBOb3ZlbWJlciAxMywgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9ODE5OWFmMmItMmVmOS00NmUxLThmNjEtN2I0OTRjODhjNjgwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzRfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDEzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTm92ZW1iZXIgMTMsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9ODE5OWFmMmItMmVmOS00NmUxLThmNjEtN2I0OTRjODhjNjgwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzRfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDEzLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04MTk5YWYyYi0yZWY5LTQ2ZTEtOGY2MS03YjQ5NGM4OGM2ODAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTYtMTI2Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMTQsIDIwMjQgQCA1OjMwIFBNJz5GcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgMDcgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Njc0Yjk4ODUtY2JmNC00NDJjLWI2ZmQtZDRmYjZiOTE2MjNjJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBOb3ZlbWJlciAxNCwgMjAyNCBAIDU6MzAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nRWxlY3Ryb25pYyBQYXJ0aWNpcGF0aW9uJz5FbGVjdHJvbmljIFBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDY3NGI5ODg1LWNiZjQtNDQyYy1iNmZkLWQ0ZmI2YjkxNjIzYycgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDE0LCAyMDI0IEAgNTozMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM1X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMTQsIDIwMjQgQCA1OjMwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAxNCwgMjAyNCBAIDU6MzAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD02NzRiOTg4NS1jYmY0LTQ0MmMtYjZmZC1kNGZiNmI5MTYyM2MmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzNV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAxNCwgMjAyNCBAIDU6MzAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMTQsIDIwMjQgQCA1OjMwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9Njc0Yjk4ODUtY2JmNC00NDJjLWI2ZmQtZDRmYjZiOTE2MjNjJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzVfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDE0LCAyMDI0IEAgNTozMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAxNCwgMjAyNCBAIDU6MzAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTY3NGI5ODg1LWNiZjQtNDQyYy1iNmZkLWQ0ZmI2YjkxNjIzYyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM1X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAxNCwgMjAyNCBAIDU6MzAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUgMDcgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9Njc0Yjk4ODUtY2JmNC00NDJjLWI2ZmQtZDRmYjZiOTE2MjNjJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMC03MCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J1RyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE5vdmVtYmVyIDE4LCAyMDI0IEAgOTozMCBBTSc+VHJhbnNpdCBDb21taXNzaW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04ZTNkZDUxMC01ODdkLTQ4ZjQtYjk1OC05ZWIzNWQzZGYxYjAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBOb3ZlbWJlciAxOCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDhlM2RkNTEwLTU4N2QtNDhmNC1iOTU4LTllYjM1ZDNkZjFiMCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE5vdmVtYmVyIDE4LCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM2X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgVHJhbnNpdCBDb21taXNzaW9uIE1vbmRheSwgTm92ZW1iZXIgMTgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gTW9uZGF5LCBOb3ZlbWJlciAxOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD04ZTNkZDUxMC01ODdkLTQ4ZjQtYjk1OC05ZWIzNWQzZGYxYjAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzNl9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc2l0IENvbW1pc3Npb24gTW9uZGF5LCBOb3ZlbWJlciAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgVHJhbnNpdCBDb21taXNzaW9uIE1vbmRheSwgTm92ZW1iZXIgMTgsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9OGUzZGQ1MTAtNTg3ZC00OGY0LWI5NTgtOWViMzVkM2RmMWIwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIFRyYW5zaXQgQ29tbWlzc2lvbiBNb25kYXksIE5vdmVtYmVyIDE4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gTW9uZGF5LCBOb3ZlbWJlciAxOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPThlM2RkNTEwLTU4N2QtNDhmNC1iOTU4LTllYjM1ZDNkZjFiMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM2X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc2l0IENvbW1pc3Npb24gTW9uZGF5LCBOb3ZlbWJlciAxOCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIFRyYW5zaXQgQ29tbWlzc2lvbiAwNyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD04ZTNkZDUxMC01ODdkLTQ4ZjQtYjk1OC05ZWIzNWQzZGYxYjAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEzLTEzMyI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0Vudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNJz5FbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NGI3YTU4MmYtNTQ1NS00YTMyLWI4MTAtNjdmYTJlOThkMGEyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIE5vdmVtYmVyIDE5LCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENGI3YTU4MmYtNTQ1NS00YTMyLWI4MTAtNjdmYTJlOThkMGEyJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBOb3ZlbWJlciAxOSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzN19JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBFbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDE5LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTRiN2E1ODJmLTU0NTUtNGEzMi1iODEwLTY3ZmEyZTk4ZDBhMiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM3X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NGI3YTU4MmYtNTQ1NS00YTMyLWI4MTAtNjdmYTJlOThkMGEyJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzdfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMTksIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD00YjdhNTgyZi01NDU1LTRhMzItYjgxMC02N2ZhMmU5OGQwYTImbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzN19pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSBUdWVzZGF5LCBOb3ZlbWJlciAxOSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUgMjAgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NGI3YTU4MmYtNTQ1NS00YTMyLWI4MTAtNjdmYTJlOThkMGEyJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMi0xMzIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMjEsIDIwMjQgQCA5OjMwIEFNJz5FbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xOWE2N2VhNC0yMjA1LTQ0MTMtODNjNi1jYjVmZDk1ZThjYTMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VGh1cnNkYXksIE5vdmVtYmVyIDIxLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QnPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMTlhNjdlYTQtMjIwNS00NDEzLTgzYzYtY2I1ZmQ5NWU4Y2EzJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDIxLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM4X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDIxLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDIxLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTE5YTY3ZWE0LTIyMDUtNDQxMy04M2M2LWNiNWZkOTVlOGNhMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM4X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAyMSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDIxLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTE5YTY3ZWE0LTIyMDUtNDQxMy04M2M2LWNiNWZkOTVlOGNhMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMjEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEVtZXJnZW5jeSBQcmVwYXJlZG5lc3MgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAyMSwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTE5YTY3ZWE0LTIyMDUtNDQxMy04M2M2LWNiNWZkOTVlOGNhMyZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM4X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMjEsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBFbWVyZ2VuY3kgUHJlcGFyZWRuZXNzIGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xOWE2N2VhNC0yMjA1LTQ0MTMtODNjNi1jYjVmZDk1ZThjYTMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTItNjIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBOb3ZlbWJlciAyNSwgMjAyNCBAIDk6MzAgQU0nPkF1ZGl0IENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBdWRpdCBDb21taXR0ZWUgMjMgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MDQ2YmYxMzUtM2FmOS00MjI2LTlmMGUtMTZkNjQzZjk1YmNmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPk1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QwNDZiZjEzNS0zYWY5LTQyMjYtOWYwZS0xNmQ2NDNmOTViY2YnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBOb3ZlbWJlciAyNSwgMjAyNCBAIDk6MzAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzOV9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIEF1ZGl0IENvbW1pdHRlZSBNb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQXVkaXQgQ29tbWl0dGVlIE1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MDQ2YmYxMzUtM2FmOS00MjI2LTlmMGUtMTZkNjQzZjk1YmNmJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxMzlfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQXVkaXQgQ29tbWl0dGVlIE1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIEF1ZGl0IENvbW1pdHRlZSBNb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTA0NmJmMTM1LTNhZjktNDIyNi05ZjBlLTE2ZDY0M2Y5NWJjZiZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTM5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBBdWRpdCBDb21taXR0ZWUgTW9uZGF5LCBOb3ZlbWJlciAyNSwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQXVkaXQgQ29tbWl0dGVlIE1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA5OjMwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0wNDZiZjEzNS0zYWY5LTQyMjYtOWYwZS0xNmQ2NDNmOTViY2YmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDEzOV9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQXVkaXQgQ29tbWl0dGVlIE1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBdWRpdCBDb21taXR0ZWUgMjMgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MDQ2YmYxMzUtM2FmOS00MjI2LTlmMGUtMTZkNjQzZjk1YmNmJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yMi0yMiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J090dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBOb3ZlbWJlciAyNSwgMjAyNCBAIDQ6MDAgUE0nPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTI1YmMwYzkzLWI1M2ItNDIxOS04YjhkLWVlOTA0ZGQ3MmIxNCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgNDowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEMjViYzBjOTMtYjUzYi00MjE5LThiOGQtZWU5MDRkZDcyYjE0JyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgNDowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTI1YmMwYzkzLWI1M2ItNDIxOS04YjhkLWVlOTA0ZGQ3MmIxNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQwX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBOb3ZlbWJlciAyNSwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIE5vdmVtYmVyIDI1LCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTI1YmMwYzkzLWI1M2ItNDIxOS04YjhkLWVlOTA0ZGQ3MmIxNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBOb3ZlbWJlciAyNSwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTI1YmMwYzkzLWI1M2ItNDIxOS04YjhkLWVlOTA0ZGQ3MmIxNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgTm92ZW1iZXIgMjUsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9MjViYzBjOTMtYjUzYi00MjE5LThiOGQtZWU5MDRkZDcyYjE0JyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0xMS0xMzEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSc+Q29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTFjMzJmYTQxLTgxMzAtNGI0Ny05N2JjLTkyYTk2OTI1ZTY1ZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5UdWVzZGF5LCBOb3ZlbWJlciAyNiwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDFjMzJmYTQxLTgxMzAtNGI0Ny05N2JjLTkyYTk2OTI1ZTY1ZCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMjYsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDFfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBOb3ZlbWJlciAyNiwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0xYzMyZmE0MS04MTMwLTRiNDctOTdiYy05MmE5NjkyNWU2NWQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0MV9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTFjMzJmYTQxLTgxMzAtNGI0Ny05N2JjLTkyYTk2OTI1ZTY1ZCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQxX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIE5vdmVtYmVyIDI2LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MWMzMmZhNDEtODEzMC00YjQ3LTk3YmMtOTJhOTY5MjVlNjVkJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDFfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgTm92ZW1iZXIgMjYsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDb21tdW5pdHkgU2VydmljZXMgQ29tbWl0dGVlIDA4IERlY2VtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTFjMzJmYTQxLTgxMzAtNGI0Ny05N2JjLTkyYTk2OTI1ZTY1ZCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtNS01Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTm92ZW1iZXIgMjcsIDIwMjQgQCAxMDowMCBBTSc+Q2l0eSBDb3VuY2lsPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIENpdHkgQ291bmNpbCAxNiBOb3ZlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0yMGIxNjBhOC03NDg0LTRkMmQtYWQ1Yi1kOWI5NDFjNjZkNDgnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+V2VkbmVzZGF5LCBOb3ZlbWJlciAyNywgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0FuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkFuZHJldyBTLiBIYXlkb24gSGFsbCwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDIwYjE2MGE4LTc0ODQtNGQyZC1hZDViLWQ5Yjk0MWM2NmQ0OCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDI3LCAyMDI0IEAgMTA6MDAgQU0nPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0Ml9JbWFnZTIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIGFyaWEtbGFiZWw9IlNoYXJlIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDI3LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDI3LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yMGIxNjBhOC03NDg0LTRkMmQtYWQ1Yi1kOWI5NDFjNjZkNDgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0Ml9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBOb3ZlbWJlciAyNywgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9jb21tZW50LWFsdC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUlRTQWNpdHZlIGxpbmsgZC1ub25lIiAgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIE5vdmVtYmVyIDI3LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD0yMGIxNjBhOC03NDg0LTRkMmQtYWQ1Yi1kOWI5NDFjNjZkNDgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0Ml9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTm92ZW1iZXIgMjcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBOb3ZlbWJlciAyNywgMjAyNCBAIDEwOjAwIEFNIiBocmVmPScuL0RlbGVnYXRpb25SZXF1ZXN0LmFzcHg/UG9ydGFsSWQ9MzFjYzdlZTAtMGM2OS00NGFmLWI4ZjItZjBmODBlOTYwNmMzJk1lZXRpbmdJZD0yMGIxNjBhOC03NDg0LTRkMmQtYWQ1Yi1kOWI5NDFjNjZkNDgmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0Ml9pbWdEZWxlZ2F0aW9uMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgTm92ZW1iZXIgMjcsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTIwYjE2MGE4LTc0ODQtNGQyZC1hZDViLWQ5Yjk0MWM2NmQ0OCcgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8gbGEtbGciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW1SZXNvdXJjZXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXR0YWNobWVudC1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkLW5vbmUgcmVzb3VyY2UtbGlzdCIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9hZE1vcmVBdHRhY2htZW50cyIgdGFiaW5kZXg9IjAiPlNlZSBtb3JlPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwYWNrYWdlLWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icmVzb3VyY2UtbGlzdCAiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFja2FnZVR5cGUgZC1ub25lIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwLjVlbTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmxpbmUtcGFja2FnZS1jb2xsZWN0aW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwY29taW5nLW1lZXRpbmctY29udGFpbmVyIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhbGVuZGFyLWl0ZW0iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYXJrZXIgbXQtMjgtMTQ4Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAyOCwgMjAyNCBAIDk6MzAgQU0nPlRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NjgxYzBhODQtYWFiNS00NDQ5LThmNWEtYzk3NDcxMzE5MGNhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBOb3ZlbWJlciAyOCwgMjAyNCBAIDk6MzAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDY4MWMwYTg0LWFhYjUtNDQ0OS04ZjVhLWM5NzQ3MTMxOTBjYScgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMjgsIDIwMjQgQCA5OjMwIEFNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDNfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgVHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlIFRodXJzZGF5LCBOb3ZlbWJlciAyOCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD02ODFjMGE4NC1hYWI1LTQ0NDktOGY1YS1jOTc0NzEzMTkwY2EmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0M19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDI4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTY4MWMwYTg0LWFhYjUtNDQ0OS04ZjVhLWM5NzQ3MTMxOTBjYSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQzX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDI4LCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgVGh1cnNkYXksIE5vdmVtYmVyIDI4LCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9NjgxYzBhODQtYWFiNS00NDQ5LThmNWEtYzk3NDcxMzE5MGNhJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDNfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIFRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSBUaHVyc2RheSwgTm92ZW1iZXIgMjgsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NjgxYzBhODQtYWFiNS00NDQ5LThmNWEtYzk3NDcxMzE5MGNhJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yNC0yNCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0JvYXJkIG9mIEhlYWx0aCBNb25kYXksIERlY2VtYmVyIDAyLCAyMDI0IEAgNTowMCBQTSc+Qm9hcmQgb2YgSGVhbHRoPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJvYXJkIG9mIEhlYWx0aCAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01OWM4YTgyYy05ZjIzLTRhMWItYWNmMS1iZGUzMmRlMGM3ZDAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+TW9uZGF5LCBEZWNlbWJlciAwMiwgMjAyNCBAIDU6MDAgUE08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQ2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uJz5DaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDU5YzhhODJjLTlmMjMtNGExYi1hY2YxLWJkZTMyZGUwYzdkMCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIERlY2VtYmVyIDAyLCAyMDI0IEAgNTowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ0X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgRGVjZW1iZXIgMDIsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBEZWNlbWJlciAwMiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01OWM4YTgyYy05ZjIzLTRhMWItYWNmMS1iZGUzMmRlMGM3ZDAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0NF9JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBEZWNlbWJlciAwMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQm9hcmQgb2YgSGVhbHRoIE1vbmRheSwgRGVjZW1iZXIgMDIsIDIwMjQgQCA1OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NTljOGE4MmMtOWYyMy00YTFiLWFjZjEtYmRlMzJkZTBjN2QwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDRfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEJvYXJkIG9mIEhlYWx0aCBNb25kYXksIERlY2VtYmVyIDAyLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBEZWNlbWJlciAwMiwgMjAyNCBAIDU6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTU5YzhhODJjLTlmMjMtNGExYi1hY2YxLWJkZTMyZGUwYzdkMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ0X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCb2FyZCBvZiBIZWFsdGggTW9uZGF5LCBEZWNlbWJlciAwMiwgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEJvYXJkIG9mIEhlYWx0aCAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01OWM4YTgyYy05ZjIzLTRhMWItYWNmMS1iZGUzMmRlMGM3ZDAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTktMTI5Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0nPkZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD02NDk3ZDI1MC1jNzk4LTQ2YWYtYTk1ZS03OTcwNGU3NTRkMTQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0Q2NDk3ZDI1MC1jNzk4LTQ2YWYtYTk1ZS03OTcwNGU3NTRkMTQnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIERlY2VtYmVyIDAzLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ1X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlB1YmxpY0NvbW1lbnRBY2l0dmUgbGluayBkLW5vbmUiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEZpbmFuY2UgYW5kIENvcnBvcmF0ZSBTZXJ2aWNlcyBDb21taXR0ZWUgVHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA5OjMwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NjQ5N2QyNTAtYzc5OC00NmFmLWE5NWUtNzk3MDRlNzU0ZDE0Jmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDVfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD02NDk3ZDI1MC1jNzk4LTQ2YWYtYTk1ZS03OTcwNGU3NTRkMTQmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0NV9JbWFnZTgiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlJlcXVlc3QgdG8gU3BlYWsiIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciAgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTY0OTdkMjUwLWM3OTgtNDZhZi1hOTVlLTc5NzA0ZTc1NGQxNCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ1X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlIFR1ZXNkYXksIERlY2VtYmVyIDAzLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9EZWxlZ2F0aW9uUmVxdWVzdHMtaWNvbi5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbmFycm93VmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSAxMSBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD02NDk3ZDI1MC1jNzk4LTQ2YWYtYTk1ZS03OTcwNGU3NTRkMTQnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEyLTcyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy10aXRsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtZWV0aW5nLXRpdGxlLWhlYWRpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0YWJJbmRleD0nMCcgYXJpYS1sYWJlbD0nT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIERlY2VtYmVyIDAzLCAyMDI0IEAgNTowMCBQTSc+T3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3B1bGwtcmlnaHQgd2lkZVZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xMDcwMGRhOC1kYjFmLTQ3NjEtOTE2MC1iYjJjZmVlZmIwNjMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0ZS10aXRsZSI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctZGF0ZSI+VHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA1OjAwIFBNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0NoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+Q2hhbXBsYWluIFJvb20sIDExMCBMYXVyaWVyIEF2ZW51ZSBXZXN0LCBhbmQgYnkgZWxlY3Ryb25pYyBwYXJ0aWNpcGF0aW9uPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWljb25zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0c2hhcmUgc2hhcmluZyBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2hhcmluZ0ljb24iIHRpdGxlPSJTaGFyZSIgaHJlZj0nU2hhcmluZy5hc3B4P3U9aHR0cHMlM0ElMkYlMkZwdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb20lMkZNZWV0aW5nJTNGSWQlM0QxMDcwMGRhOC1kYjFmLTQ3NjEtOTE2MC1iYjJjZmVlZmIwNjMnIGFyaWEtaGlkZGVuPSd0cnVlJyBhcmlhLWxhYmVsPSdTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA1OjAwIFBNJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDZfSW1hZ2UyIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJTaGFyZSIgdGl0bGU9IlNoYXJlIiBhcmlhLWxhYmVsPSJTaGFyZSBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA1OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA1OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTA3MDBkYTgtZGIxZi00NzYxLTkxNjAtYmIyY2ZlZWZiMDYzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDZfSW1hZ2U1IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJPcGVuIGZvciBDb21tZW50cyIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIERlY2VtYmVyIDAzLCAyMDI0IEAgNTowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvY29tbWVudC1hbHQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIGQtbm9uZSIgIHRpdGxlPSJSZXF1ZXN0IHRvIFNwZWFrIiBhcmlhLWxhYmVsPSJSZXF1ZXN0IHRvIHNwZWFrIGZvciBPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQgVHVlc2RheSwgRGVjZW1iZXIgMDMsIDIwMjQgQCA1OjAwIFBNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9MTA3MDBkYTgtZGIxZi00NzYxLTkxNjAtYmIyY2ZlZWZiMDYzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDZfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImQtbm9uZSBEZWxlZ2F0aW9uUmVxdWVzdCBsaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiBhcmlhLWxhYmVsPSJEZWxnYXRpb24gcmVxdWVzdCBmb3IgT3R0YXdhIFB1YmxpYyBMaWJyYXJ5IEJvYXJkIFR1ZXNkYXksIERlY2VtYmVyIDAzLCAyMDI0IEAgNTowMCBQTSIgaHJlZj0nLi9EZWxlZ2F0aW9uUmVxdWVzdC5hc3B4P1BvcnRhbElkPTMxY2M3ZWUwLTBjNjktNDRhZi1iOGYyLWYwZjgwZTk2MDZjMyZNZWV0aW5nSWQ9MTA3MDBkYTgtZGIxZi00NzYxLTkxNjAtYmIyY2ZlZWZiMDYzJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDZfaW1nRGVsZWdhdGlvbjIiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IkRlbGVnYXRpb24gUmVxdWVzdCIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCBUdWVzZGF5LCBEZWNlbWJlciAwMywgMjAyNCBAIDU6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIE90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCAxMyBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD0xMDcwMGRhOC1kYjFmLTQ3NjEtOTE2MC1iYjJjZmVlZmIwNjMnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEtNjEiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIERlY2VtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0nPkFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NWQ5Nzg2MGQtMTE0MS00ZjFiLWFlNTQtMWJjZDFmNzUzMDMwJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlRodXJzZGF5LCBEZWNlbWJlciAwNSwgMjAyNCBAIDEwOjAwIEFNPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJ3b3JkLWJyZWFrOiBicmVhay13b3JkOyIgY2xhc3M9InN0YXJ0TG9jYXRpb24gTG9jYXRpb24tVG9vbHRpcCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIGRhdGEtaHRtbD0idHJ1ZSIgZGF0YS1jb250YWluZXI9ImJvZHkiIGRhdGEtb3JpZ2luYWwtdGl0bGU9J0JlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkJlbiBGcmFua2xpbiBQbGFjZSwgVGhlIENoYW1iZXIsIE1haW4gRmxvb3IsIDEwMSBDZW50cmVwb2ludGUgRHJpdmUsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb248L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlYXR1cmUtaWNvbnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRzaGFyZSBzaGFyaW5nIGQtbm9uZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaGFyaW5nSWNvbiIgdGl0bGU9IlNoYXJlIiBocmVmPSdTaGFyaW5nLmFzcHg/dT1odHRwcyUzQSUyRiUyRnB1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbSUyRk1lZXRpbmclM0ZJZCUzRDVkOTc4NjBkLTExNDEtNGYxYi1hZTU0LTFiY2QxZjc1MzAzMCcgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9J1NoYXJlIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgRGVjZW1iZXIgMDUsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ3X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBEZWNlbWJlciAwNSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9zaGFyZS1hbHQuc3ZnIiBoZWlnaHQ9IjE3IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJQdWJsaWNDb21tZW50QWNpdHZlIGxpbmsgZC1ub25lIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIERlY2VtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9J01lZXRpbmcuYXNweD9JZD01ZDk3ODYwZC0xMTQxLTRmMWItYWU1NC0xYmNkMWY3NTMwMzAmbGFuZz1FbmdsaXNoJyB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlVwY29taW5nTWVldGluZ0xpc3RfY3RybDE0N19JbWFnZTUiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIGFyaWEtbGFiZWw9IlB1YmxpYyBDb21tZW50IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIERlY2VtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMgQ29tbWl0dGVlIFRodXJzZGF5LCBEZWNlbWJlciAwNSwgMjAyNCBAIDEwOjAwIEFNIiBocmVmPSdNZWV0aW5nLmFzcHg/SWQ9NWQ5Nzg2MGQtMTE0MS00ZjFiLWFlNTQtMWJjZDFmNzUzMDMwJmxhbmc9RW5nbGlzaCcgdGFyZ2V0PSJfYmxhbmsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZVcGNvbWluZ01lZXRpbmdMaXN0X2N0cmwxNDdfSW1hZ2U4IiBjbGFzcz0iaW1naWNvbiIgYWx0PSJSZXF1ZXN0IHRvIFNwZWFrIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSBUaHVyc2RheSwgRGVjZW1iZXIgMDUsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvbWljcm9waG9uZS1zb2xpZC5zdmciIGhlaWdodD0iMjYiIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZC1ub25lIERlbGVnYXRpb25SZXF1ZXN0IGxpbmsiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIERlY2VtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTVkOTc4NjBkLTExNDEtNGYxYi1hZTU0LTFiY2QxZjc1MzAzMCZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ3X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUgVGh1cnNkYXksIERlY2VtYmVyIDA1LCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J25hcnJvd1ZpZGVvIGQtbm9uZSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9J2xpbmsnIGFyaWEtbGFiZWw9J1ZpZXcgTGl2ZSBTdHJlYW0gRm9yIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSAxMiBEZWNlbWJlciAyMDIzJyBocmVmPSdWaWRlb1N0cmVhbS5hc3B4P01lZXRpbmdJZD01ZDk3ODYwZC0xMTQxLTRmMWItYWU1NC0xYmNkMWY3NTMwMzAnIHRhcmdldD0nX2JsYW5rJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0ibGFzIGxhLXZpZGVvIGxhLWxnIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmlldyBMaXZlIFN0cmVhbTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtUmVzb3VyY2VzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZC1ub25lIHJlc291cmNlLWxpc3QiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDA7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvYWRNb3JlQXR0YWNobWVudHMiIHRhYmluZGV4PSIwIj5TZWUgbW9yZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS1saXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InJlc291cmNlLWxpc3QgIiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhY2thZ2VUeXBlIGQtbm9uZSIgc3R5bGU9InBhZGRpbmctbGVmdDogMC41ZW07Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iaW5saW5lLXBhY2thZ2UtY29sbGVjdGlvbiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGNvbWluZy1tZWV0aW5nLWNvbnRhaW5lciI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pdGVtIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFya2VyIG10LTEwLTEzMCI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J0J1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAxMCwgMjAyNCBAIDk6MzAgQU0nPkJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZTwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gzPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdwdWxsLXJpZ2h0IHdpZGVWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZmUwNGM3NjctOWE3OC00OGEzLThmNGQtYWVlMGU2ODJlMWRlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctY29udGVudCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGUtdGl0bGUiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWRhdGUiPlR1ZXNkYXksIERlY2VtYmVyIDEwLCAyMDI0IEAgOTozMCBBTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdDaGFtcGxhaW4gUm9vbSwgMTEwIExhdXJpZXIgQXZlbnVlIFdlc3QsIGFuZCBieSBlbGVjdHJvbmljIHBhcnRpY2lwYXRpb24nPkNoYW1wbGFpbiBSb29tLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEZmUwNGM3NjctOWE3OC00OGEzLThmNGQtYWVlMGU2ODJlMWRlJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIERlY2VtYmVyIDEwLCAyMDI0IEAgOTozMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ4X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIERlY2VtYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIERlY2VtYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWZlMDRjNzY3LTlhNzgtNDhhMy04ZjRkLWFlZTBlNjgyZTFkZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ4X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAxMCwgMjAyNCBAIDk6MzAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQnVpbHQgSGVyaXRhZ2UgQ29tbWl0dGVlIFR1ZXNkYXksIERlY2VtYmVyIDEwLCAyMDI0IEAgOTozMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWZlMDRjNzY3LTlhNzgtNDhhMy04ZjRkLWFlZTBlNjgyZTFkZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ4X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgRGVjZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIEJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSBUdWVzZGF5LCBEZWNlbWJlciAxMCwgMjAyNCBAIDk6MzAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWZlMDRjNzY3LTlhNzgtNDhhMy04ZjRkLWFlZTBlNjgyZTFkZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ4X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgVHVlc2RheSwgRGVjZW1iZXIgMTAsIDIwMjQgQCA5OjMwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUgMTIgRGVjZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9ZmUwNGM3NjctOWE3OC00OGEzLThmNGQtYWVlMGU2ODJlMWRlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC01LTUiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLXRpdGxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1lZXRpbmctdGl0bGUtaGVhZGluZyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRhYkluZGV4PScwJyBhcmlhLWxhYmVsPSdDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBEZWNlbWJlciAxMSwgMjAyNCBAIDEwOjAwIEFNJz5DaXR5IENvdW5jaWw8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgQ2l0eSBDb3VuY2lsIDE2IE5vdmVtYmVyIDIwMjMnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPTVhOTMwODFmLWY0MzItNGIxOS1iZjNkLTZmMWMzMzc1MGMzMScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5XZWRuZXNkYXksIERlY2VtYmVyIDExLCAyMDI0IEAgMTA6MDAgQU08L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9IndvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7IiBjbGFzcz0ic3RhcnRMb2NhdGlvbiBMb2NhdGlvbi1Ub29sdGlwIiBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgZGF0YS1odG1sPSJ0cnVlIiBkYXRhLWNvbnRhaW5lcj0iYm9keSIgZGF0YS1vcmlnaW5hbC10aXRsZT0nQW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbic+QW5kcmV3IFMuIEhheWRvbiBIYWxsLCAxMTAgTGF1cmllciBBdmVudWUgV2VzdCwgYW5kIGJ5IGVsZWN0cm9uaWMgcGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNENWE5MzA4MWYtZjQzMi00YjE5LWJmM2QtNmYxYzMzNzUwYzMxJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRGVjZW1iZXIgMTEsIDIwMjQgQCAxMDowMCBBTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ5X0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRGVjZW1iZXIgMTEsIDIwMjQgQCAxMDowMCBBTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRGVjZW1iZXIgMTEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTVhOTMwODFmLWY0MzItNGIxOS1iZjNkLTZmMWMzMzc1MGMzMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ5X0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIERlY2VtYmVyIDExLCAyMDI0IEAgMTA6MDAgQU0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgQ2l0eSBDb3VuY2lsIFdlZG5lc2RheSwgRGVjZW1iZXIgMTEsIDIwMjQgQCAxMDowMCBBTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPTVhOTMwODFmLWY0MzItNGIxOS1iZjNkLTZmMWMzMzc1MGMzMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ5X0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBEZWNlbWJlciAxMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIENpdHkgQ291bmNpbCBXZWRuZXNkYXksIERlY2VtYmVyIDExLCAyMDI0IEAgMTA6MDAgQU0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPTVhOTMwODFmLWY0MzItNGIxOS1iZjNkLTZmMWMzMzc1MGMzMSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTQ5X2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBDaXR5IENvdW5jaWwgV2VkbmVzZGF5LCBEZWNlbWJlciAxMSwgMjAyNCBAIDEwOjAwIEFNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBDaXR5IENvdW5jaWwgMTYgTm92ZW1iZXIgMjAyMycgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9NWE5MzA4MWYtZjQzMi00YjE5LWJmM2QtNmYxYzMzNzUwYzMxJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBjb21pbmctbWVldGluZy1jb250YWluZXIiPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItaXRlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hcmtlciBtdC0yMi0yMiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctaGVhZGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZXRpbmctdGl0bGUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0ibWVldGluZy10aXRsZS1oZWFkaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGFiSW5kZXg9JzAnIGFyaWEtbGFiZWw9J090dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBEZWNlbWJlciAxNiwgMjAyNCBAIDQ6MDAgUE0nPk90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQ8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncHVsbC1yaWdodCB3aWRlVmlkZW8gZC1ub25lJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0nbGluaycgYXJpYS1sYWJlbD0nVmlldyBMaXZlIFN0cmVhbSBGb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCAwMyBKYW51YXJ5IDIwMjQnIGhyZWY9J1ZpZGVvU3RyZWFtLmFzcHg/TWVldGluZ0lkPWE2MDg4NmIyLThjNjUtNDhhNS1iMzg0LTQ5YjI2Zjc5OGUwZScgdGFyZ2V0PSdfYmxhbmsnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJsYXMgbGEtdmlkZW8iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IExpdmUgU3RyZWFtDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWV0aW5nLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLXRpdGxlIj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVldGluZy1kYXRlIj5Nb25kYXksIERlY2VtYmVyIDE2LCAyMDI0IEAgNDowMCBQTTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id29yZC1icmVhazogYnJlYWstd29yZDsiIGNsYXNzPSJzdGFydExvY2F0aW9uIExvY2F0aW9uLVRvb2x0aXAiIGRhdGEtdG9nZ2xlPSJ0b29sdGlwIiBkYXRhLWh0bWw9InRydWUiIGRhdGEtY29udGFpbmVyPSJib2R5IiBkYXRhLW9yaWdpbmFsLXRpdGxlPSdFbGVjdHJvbmljIFBhcnRpY2lwYXRpb24nPkVsZWN0cm9uaWMgUGFydGljaXBhdGlvbjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVhdHVyZS1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHNoYXJlIHNoYXJpbmcgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNoYXJpbmdJY29uIiB0aXRsZT0iU2hhcmUiIGhyZWY9J1NoYXJpbmcuYXNweD91PWh0dHBzJTNBJTJGJTJGcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tJTJGTWVldGluZyUzRklkJTNEYTYwODg2YjItOGM2NS00OGE1LWIzODQtNDliMjZmNzk4ZTBlJyBhcmlhLWhpZGRlbj0ndHJ1ZScgYXJpYS1sYWJlbD0nU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIERlY2VtYmVyIDE2LCAyMDI0IEAgNDowMCBQTSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTUwX0ltYWdlMiIgY2xhc3M9ImltZ2ljb24iIGFsdD0iU2hhcmUiIHRpdGxlPSJTaGFyZSIgYXJpYS1sYWJlbD0iU2hhcmUgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIERlY2VtYmVyIDE2LCAyMDI0IEAgNDowMCBQTSIgc3JjPSJDb250ZW50L2ltZy9zdmcvc2hhcmUtYWx0LnN2ZyIgaGVpZ2h0PSIxNyIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iUHVibGljQ29tbWVudEFjaXR2ZSBsaW5rIGQtbm9uZSIgdGl0bGU9Ik9wZW4gZm9yIENvbW1lbnRzIiBhcmlhLWxhYmVsPSJQdWJsaWMgQ29tbWVudCBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIERlY2VtYmVyIDE2LCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWE2MDg4NmIyLThjNjUtNDhhNS1iMzg0LTQ5YjI2Zjc5OGUwZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTUwX0ltYWdlNSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iT3BlbiBmb3IgQ29tbWVudHMiIHRpdGxlPSJPcGVuIGZvciBDb21tZW50cyIgYXJpYS1sYWJlbD0iUHVibGljIENvbW1lbnQgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBEZWNlbWJlciAxNiwgMjAyNCBAIDQ6MDAgUE0iIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJSVFNBY2l0dmUgbGluayBkLW5vbmUiICB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgYXJpYS1sYWJlbD0iUmVxdWVzdCB0byBzcGVhayBmb3IgT3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCBNb25kYXksIERlY2VtYmVyIDE2LCAyMDI0IEAgNDowMCBQTSIgaHJlZj0nTWVldGluZy5hc3B4P0lkPWE2MDg4NmIyLThjNjUtNDhhNS1iMzg0LTQ5YjI2Zjc5OGUwZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTUwX0ltYWdlOCIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIGFyaWEtbGFiZWw9IlJlcXVlc3QgdG8gc3BlYWsgZm9yICBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgRGVjZW1iZXIgMTYsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL3N2Zy9taWNyb3Bob25lLXNvbGlkLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkLW5vbmUgRGVsZWdhdGlvblJlcXVlc3QgbGluayIgdGl0bGU9IkRlbGVnYXRpb24gUmVxdWVzdCIgYXJpYS1sYWJlbD0iRGVsZ2F0aW9uIHJlcXVlc3QgZm9yIE90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgTW9uZGF5LCBEZWNlbWJlciAxNiwgMjAyNCBAIDQ6MDAgUE0iIGhyZWY9Jy4vRGVsZWdhdGlvblJlcXVlc3QuYXNweD9Qb3J0YWxJZD0zMWNjN2VlMC0wYzY5LTQ0YWYtYjhmMi1mMGY4MGU5NjA2YzMmTWVldGluZ0lkPWE2MDg4NmIyLThjNjUtNDhhNS1iMzg0LTQ5YjI2Zjc5OGUwZSZsYW5nPUVuZ2xpc2gnIHRhcmdldD0iX2JsYW5rIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2VXBjb21pbmdNZWV0aW5nTGlzdF9jdHJsMTUwX2ltZ0RlbGVnYXRpb24yIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIGFyaWEtbGFiZWw9IkRlbGdhdGlvbiByZXF1ZXN0IGZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIE1vbmRheSwgRGVjZW1iZXIgMTYsIDIwMjQgQCA0OjAwIFBNIiBzcmM9IkNvbnRlbnQvaW1nL0RlbGVnYXRpb25SZXF1ZXN0cy1pY29uLnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXJyb3dWaWRlbyBkLW5vbmUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSdsaW5rJyBhcmlhLWxhYmVsPSdWaWV3IExpdmUgU3RyZWFtIEZvciBPdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIDAzIEphbnVhcnkgMjAyNCcgaHJlZj0nVmlkZW9TdHJlYW0uYXNweD9NZWV0aW5nSWQ9YTYwODg2YjItOGM2NS00OGE1LWIzODQtNDliMjZmNzk4ZTBlJyB0YXJnZXQ9J19ibGFuayc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImxhcyBsYS12aWRlbyBsYS1sZyI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgTGl2ZSBTdHJlYW08L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbVJlc291cmNlcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LWxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImQtbm9uZSByZXNvdXJjZS1saXN0IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAwOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2FkTW9yZUF0dGFjaG1lbnRzIiB0YWJpbmRleD0iMCI+U2VlIG1vcmU8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtbGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJyZXNvdXJjZS1saXN0ICIgc3R5bGU9InBhZGRpbmctbGVmdDogMDsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWNrYWdlVHlwZSBkLW5vbmUiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6IDAuNWVtOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlubGluZS1wYWNrYWdlLWNvbGxlY3Rpb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJsYXp5TG9hZENvbnRhaW5lciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0ibG9hZE1vcmVNZWV0aW5ncyIgdGFiaW5kZXg9IjAiPkNsaWNrIGhlcmUgdG8gc2VlIG1vcmUgbWVldGluZ3M8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhc3QtbWVldGluZ3MtcmVnaW9uIiByb2xlPSJyZWdpb24iIGFyaWEtbGFiZWw9Ikxpc3Qgb2YgUGFzdCBNZWV0aW5ncyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIHh0cmEtbGlzdHMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBpZD0iUGFzdE1lZXRpbmdUaXRsZSIgY2xhc3M9InB1bGwtbGVmdCI+UGFzdCBNZWV0aW5nczwvaDI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcyA9InB1bGwtcmlnaHQiIHN0eWxlPSJtYXJnaW4tYm90dG9tOiAxLjVlbSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9IlllYXJGaWx0ZXJPcHRpb24iIGFyaWEtbGFiZWw9IlNlbGVjdCBZZWFyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkYXRhLXllYXI9JzAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsJm5ic3A7KDI1MjMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS15ZWFyPScyMDI0Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjAyNCZuYnNwOygyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkYXRhLXllYXI9JzIwMjMnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDIzJm5ic3A7KDI5NikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS15ZWFyPScyMDIyJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjAyMiZuYnNwOygyOTIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGRhdGEteWVhcj0nMjAyMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwMjEmbmJzcDsoMjYxKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkYXRhLXllYXI9JzIwMjAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDIwJm5ic3A7KDIyNCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS15ZWFyPScyMDE5Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjAxOSZuYnNwOygyNTUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGRhdGEteWVhcj0nMjAxOCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwMTgmbmJzcDsoMjEyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkYXRhLXllYXI9JzIwMTcnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDE3Jm5ic3A7KDIzMCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS15ZWFyPScyMDE2Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjAxNiZuYnNwOygyMzMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGRhdGEteWVhcj0nMjAxNSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwMTUmbmJzcDsoMTY5KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBkYXRhLXllYXI9JzIwMTQnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMDE0Jm5ic3A7KDEyMikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gZGF0YS15ZWFyPScyMDEzJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjAxMyZuYnNwOygxNTgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGRhdGEteWVhcj0nMjAxMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIwMTImbmJzcDsoNjkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFzdC1tZWV0aW5ncyIgaWQ9IlBhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QwJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPUFjY2Vzc2liaWxpdHkrQWR2aXNvcnkrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwwX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5BY2Nlc3NpYmlsaXR5IEFkdmlzb3J5IENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz42Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNCc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+Nzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+Nzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+Nzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+OTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwwX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QwIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwwX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkFjY2Vzc2liaWxpdHkgQWR2aXNvcnkgQ29tbWl0dGVlIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDEnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9QWdyaWN1bHR1cmUrYW5kK1J1cmFsK0FmZmFpcnMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5BZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTE4PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEyJz42PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz4xMTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNCc+ODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+MTE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz45PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjExPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xNDwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QxIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QyJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPUFydHMlMmMrQ3VsdHVyZSthbmQrUmVjcmVhdGlvbitBZHZpc29yeStDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDJfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkFydHMsIEN1bHR1cmUgYW5kIFJlY3JlYXRpb24gQWR2aXNvcnkgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjE1PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz40PC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDJfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UyIiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDIiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDJfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iQXJ0cywgQ3VsdHVyZSBhbmQgUmVjcmVhdGlvbiBBZHZpc29yeSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0Myc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1BcnRzJTJjK0N1bHR1cmUlMmMrSGVyaXRhZ2UrYW5kK1JlY3JlYXRpb24rQWR2aXNvcnkrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5BcnRzLCBDdWx0dXJlLCBIZXJpdGFnZSBhbmQgUmVjcmVhdGlvbiBBZHZpc29yeSBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTcnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjI8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsM19NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTMiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MyIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsM19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJBcnRzLCBDdWx0dXJlLCBIZXJpdGFnZSBhbmQgUmVjcmVhdGlvbiBBZHZpc29yeSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1BdWRpdCtDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDRfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkF1ZGl0IENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4zNzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+NDwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q0IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkF1ZGl0IENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q1Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPUF1ZGl0K1N1Yi1Db21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDVfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkF1ZGl0IFN1Yi1Db21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNCc+Mjwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q1IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkF1ZGl0IFN1Yi1Db21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0Nic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1BdWRpdG9yK0dlbmVyYWwrSGlyaW5nK1BhbmVsIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5BdWRpdG9yIEdlbmVyYWwgSGlyaW5nIFBhbmVsJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjY8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNl9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTYiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNl9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJBdWRpdG9yIEdlbmVyYWwgSGlyaW5nIFBhbmVsIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDcnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9Qm9hcmQrb2YrSGVhbHRoIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw3X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Cb2FyZCBvZiBIZWFsdGgmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+NjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTcnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjMnPjc8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsN19NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTciIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NyIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsN19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJCb2FyZCBvZiBIZWFsdGgiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0OCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1CdWlsdCtIZXJpdGFnZStDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDhfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlOCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkJ1aWx0IEhlcml0YWdlIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xNTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTU8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsOF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTgiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0OCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsOF9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJCdWlsdCBIZXJpdGFnZSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0OSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1CdWlsdCtIZXJpdGFnZStTdWItQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw5X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5CdWlsdCBIZXJpdGFnZSBTdWItQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjk5PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNCc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+ODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+ODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjEyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4xNTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw5X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlOSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q5IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlOSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw5X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkJ1aWx0IEhlcml0YWdlIFN1Yi1Db21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MTAnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9Q2l0eStDb3VuY2lsIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxMF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UxMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkNpdHkgQ291bmNpbCZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4yNDg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTInPjExPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz4yMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNCc+MTg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjIxPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4yMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+MTk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjE5PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz4yMTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+MjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjIxPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4yOTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+Mjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjQnPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTBfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UxMCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QxMCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTEwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDEwX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkNpdHkgQ291bmNpbCI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1DaXR5K01hbmFnZXIrSGlyaW5nK1BhbmVsIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxMV9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UxMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkNpdHkgTWFuYWdlciBIaXJpbmcgUGFuZWwmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+Mjwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxMV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTExIiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDExIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMTEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTFfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iQ2l0eSBNYW5hZ2VyIEhpcmluZyBQYW5lbCI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db21taXR0ZWUrb2YrQWRqdXN0bWVudCIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTJfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Db21taXR0ZWUgb2YgQWRqdXN0bWVudCZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDEyX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMTIiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MTIiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UxMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxMl9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJDb21taXR0ZWUgb2YgQWRqdXN0bWVudCI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxMyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db21taXR0ZWUrb2YrQWRqdXN0bWVudCstK1BhbmVsKzEiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDEzX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTEzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Q29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAxJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjE3Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+MjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTcnPjIyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4yMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+MjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjE4PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4yMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+MjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjMnPjIyPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDEzX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMTMiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MTMiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UxMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxM19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJDb21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDEiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MTQnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9Q29tbWl0dGVlK29mK0FkanVzdG1lbnQrLStQYW5lbCsyIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxNF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UxNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkNvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMiZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xNzY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjIyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz4yMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+MjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjIyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz4xODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+MjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjI1PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4yMjwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxNF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTE0IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDE0IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTRfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iQ29tbWl0dGVlIG9mIEFkanVzdG1lbnQgLSBQYW5lbCAyIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDE1Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPUNvbW1pdHRlZStvZitBZGp1c3RtZW50Ky0rUGFuZWwrMyIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTVfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMTUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Db21taXR0ZWUgb2YgQWRqdXN0bWVudCAtIFBhbmVsIDMmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTc2PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4yMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+MjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjIxPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz4yMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+MTg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjIyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4yNzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MjI8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTVfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UxNSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QxNSIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTE1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDE1X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkNvbW1pdHRlZSBvZiBBZGp1c3RtZW50IC0gUGFuZWwgMyI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxNic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db21taXR0ZWUrb2YrUmV2aXNpb24iIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDE2X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Q29tbWl0dGVlIG9mIFJldmlzaW9uJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjM8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTZfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UxNiIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QxNiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTE2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDE2X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkNvbW1pdHRlZSBvZiBSZXZpc2lvbiI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxNyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db21tdW5pdHkrYW5kK1Byb3RlY3RpdmUrU2VydmljZXMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxN19FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UxNyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkNvbW11bml0eSBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+ODY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTInPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjExPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE0Jz42PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE1Jz45PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4xMTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+Nzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+ODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+Njwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxN19NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTE3IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDE3IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMTciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTdfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iQ29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxOCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db21tdW5pdHkrU2VydmljZStBZHZpc29yeStDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDE4X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTE4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Q29tbXVuaXR5IFNlcnZpY2UgQWR2aXNvcnkgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjM8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMThfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UxOCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QxOCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTE4Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDE4X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkNvbW11bml0eSBTZXJ2aWNlIEFkdmlzb3J5IENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QxOSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db21tdW5pdHkrU2VydmljZXMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxOV9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UxOSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkNvbW11bml0eSBTZXJ2aWNlcyBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+ODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+ODwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwxOV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTE5IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDE5IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMTlfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iQ29tbXVuaXR5IFNlcnZpY2VzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QyMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db3VuY2lsK0ZyYW5jb3Bob25lK0NhdWN1cyIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjBfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Db3VuY2lsIEZyYW5jb3Bob25lIENhdWN1cyZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDIwX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMjAiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MjAiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UyMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyMF9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJDb3VuY2lsIEZyYW5jb3Bob25lIENhdWN1cyI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QyMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Db3VydCtvZitSZXZpc2lvbiIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjFfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Db3VydCBvZiBSZXZpc2lvbiZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz45PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEyJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz42PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDIxX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMjEiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MjEiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UyMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyMV9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJDb3VydCBvZiBSZXZpc2lvbiI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QyMic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1EZWJlbnR1cmUrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyMl9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UyMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkRlYmVudHVyZSBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyMl9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTIyIiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDIyIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMjIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjJfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iRGViZW50dXJlIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QyMyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1FbGVjdGlvbitDb21wbGlhbmNlK0F1ZGl0K0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjNfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5FbGVjdGlvbiBDb21wbGlhbmNlIEF1ZGl0IENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xNzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+Nzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+Mzwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyM19NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTIzIiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDIzIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjNfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iRWxlY3Rpb24gQ29tcGxpYW5jZSBBdWRpdCBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MjQnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9RW1lcmdlbmN5K1ByZXBhcmVkbmVzcythbmQrUHJvdGVjdGl2ZStTZXJ2aWNlcytDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDI0X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTI0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+RW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+OTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyNF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTI0IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDI0IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMjQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjRfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iRW1lcmdlbmN5IFByZXBhcmVkbmVzcyBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MjUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9RW52aXJvbm1lbnQrYW5kK0NsaW1hdGUrQ2hhbmdlK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjVfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5FbnZpcm9ubWVudCBhbmQgQ2xpbWF0ZSBDaGFuZ2UgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjMnPjk8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjVfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UyNSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QyNSIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTI1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDI1X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkVudmlyb25tZW50IGFuZCBDbGltYXRlIENoYW5nZSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MjYnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9RW52aXJvbm1lbnQrYW5kK0NsaW1hdGUrUHJvdGVjdGlvbitDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDI2X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTI2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+RW52aXJvbm1lbnQgYW5kIENsaW1hdGUgUHJvdGVjdGlvbiBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTcnPjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjY8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjZfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UyNiIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QyNiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTI2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDI2X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkVudmlyb25tZW50IGFuZCBDbGltYXRlIFByb3RlY3Rpb24gQ29tbWl0dGVlIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDI3Jz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPUVudmlyb25tZW50K0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjdfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5FbnZpcm9ubWVudCBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+Mjk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTInPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjY8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjdfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UyNyIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QyNyIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTI3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDI3X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkVudmlyb25tZW50IENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QyOCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1FbnZpcm9ubWVudGFsK1N0ZXdhcmRzaGlwK0Fkdmlzb3J5K0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjhfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5FbnZpcm9ubWVudGFsIFN0ZXdhcmRzaGlwIEFkdmlzb3J5IENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4zNjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNCc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+NDwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyOF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTI4IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDI4IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMjgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjhfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iRW52aXJvbm1lbnRhbCBTdGV3YXJkc2hpcCBBZHZpc29yeSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MjknPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9RmluYW5jZSthbmQrQ29ycG9yYXRlK1NlcnZpY2VzK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjlfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMjkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5GaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xMDwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwyOV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTI5IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDI5IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMjkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMjlfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iRmluYW5jZSBhbmQgQ29ycG9yYXRlIFNlcnZpY2VzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzMCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1GaW5hbmNlK2FuZCtFY29ub21pYytEZXZlbG9wbWVudCtDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMwX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTMwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+RmluYW5jZSBhbmQgRWNvbm9taWMgRGV2ZWxvcG1lbnQgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjExMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+MTI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4xMzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjExPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz45PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4xNDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+MTE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzBfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UzMCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QzMCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTMwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMwX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzMSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1GcmVuY2grTGFuZ3VhZ2UrU2VydmljZXMrQWR2aXNvcnkrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzMV9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UzMSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MzY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTcnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjMnPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzFfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UzMSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QzMSIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTMxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMxX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkZyZW5jaCBMYW5ndWFnZSBTZXJ2aWNlcyBBZHZpc29yeSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MzInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9R2VuZXJhbCtNYW5hZ2VyK29mK1BsYW5uaW5nJTJjK1JlYWwrRXN0YXRlK2FuZCtFY29ub21pYytEZXZlbG9wbWVudCtIaXJpbmcrUGFuZWwiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMyX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTMyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+R2VuZXJhbCBNYW5hZ2VyIG9mIFBsYW5uaW5nLCBSZWFsIEVzdGF0ZSBhbmQgRWNvbm9taWMgRGV2ZWxvcG1lbnQgSGlyaW5nIFBhbmVsJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjMnPjI8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzJfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UzMiIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QzMiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTMyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMyX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkdlbmVyYWwgTWFuYWdlciBvZiBQbGFubmluZywgUmVhbCBFc3RhdGUgYW5kIEVjb25vbWljIERldmVsb3BtZW50IEhpcmluZyBQYW5lbCI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzMyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1JbmZvcm1hdGlvbitUZWNobm9sb2d5K1N1Yi1Db21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMzX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTMzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+SW5mb3JtYXRpb24gVGVjaG5vbG9neSBTdWItQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjMzPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEyJz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz41PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE0Jz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE1Jz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4yPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDMzX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMzMiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MzMiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UzMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzM19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJJbmZvcm1hdGlvbiBUZWNobm9sb2d5IFN1Yi1Db21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MzQnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9Sm9pbnQrQXVkaXQrQ29tbWl0dGVlK2FuZCtUcmFuc2l0K0NvbW1pc3Npb24iIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDM0X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTM0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Sm9pbnQgQXVkaXQgQ29tbWl0dGVlIGFuZCBUcmFuc2l0IENvbW1pc3Npb24mbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzNF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTM0IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDM0IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMzQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzRfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iSm9pbnQgQXVkaXQgQ29tbWl0dGVlIGFuZCBUcmFuc2l0IENvbW1pc3Npb24iPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0MzUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9Sm9pbnQrRW52aXJvbm1lbnQlMmMrV2F0ZXIrYW5kK1dhc3RlK01hbmFnZW1lbnQrYW5kK0FncmljdWx0dXJlK2FuZCtSdXJhbCtBZmZhaXJzIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzNV9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UzNSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkpvaW50IEVudmlyb25tZW50LCBXYXRlciBhbmQgV2FzdGUgTWFuYWdlbWVudCBhbmQgQWdyaWN1bHR1cmUgYW5kIFJ1cmFsIEFmZmFpcnMmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+MTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzNV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTM1IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDM1IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMzUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzVfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iSm9pbnQgRW52aXJvbm1lbnQsIFdhdGVyIGFuZCBXYXN0ZSBNYW5hZ2VtZW50IGFuZCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzNic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtGaW5hbmNlK2FuZCtDb3Jwb3JhdGUrU2VydmljZXMrYW5kK1BsYW5uaW5nK2FuZCtIb3VzaW5nK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzZfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMzYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgYW5kIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDM2X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMzYiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MzYiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UzNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzNl9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBGaW5hbmNlIGFuZCBDb3Jwb3JhdGUgU2VydmljZXMgYW5kIFBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzNyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtGaW5hbmNlK2FuZCtFY29ub21pYytEZXZlbG9wbWVudCtDb21taXR0ZWUrYW5kK0F1ZGl0K1N1Yi1Db21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDM3X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTM3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Sm9pbnQgRmluYW5jZSBhbmQgRWNvbm9taWMgRGV2ZWxvcG1lbnQgQ29tbWl0dGVlIGFuZCBBdWRpdCBTdWItQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzdfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2UzNyIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3QzNyIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTM3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDM3X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkpvaW50IEZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZSBhbmQgQXVkaXQgU3ViLUNvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzOCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtGaW5hbmNlK2FuZCtFY29ub21pYytEZXZlbG9wbWVudCtDb21taXR0ZWUrYW5kK0dvdmVybmFuY2UrUmVuZXdhbCtTdWItQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzOF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2UzOCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkpvaW50IEZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZSBhbmQgR292ZXJuYW5jZSBSZW5ld2FsIFN1Yi1Db21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+MTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzOF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTM4IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDM4IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlMzgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzhfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iSm9pbnQgRmluYW5jZSBhbmQgRWNvbm9taWMgRGV2ZWxvcG1lbnQgQ29tbWl0dGVlIGFuZCBHb3Zlcm5hbmNlIFJlbmV3YWwgU3ViLUNvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3QzOSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtNZWV0aW5nK29mK0ZpbmFuY2UrYW5kK0Vjb25vbWljK0RldmVsb3BtZW50K0NvbW1pdHRlZSthbmQrQ29tbXVuaXR5K2FuZCtQcm90ZWN0aXZlK1NlcnZpY2VzK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsMzlfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlMzkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBNZWV0aW5nIG9mIEZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZSBhbmQgQ29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDM5X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlMzkiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0MzkiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2UzOSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmwzOV9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBNZWV0aW5nIG9mIEZpbmFuY2UgYW5kIEVjb25vbWljIERldmVsb3BtZW50IENvbW1pdHRlZSBhbmQgQ29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0MCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtNZWV0aW5nK29mK1BsYW5uaW5nK0NvbW1pdHRlZSthbmQrQWdyaWN1bHR1cmUrYW5kK1J1cmFsK0FmZmFpcnMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0MF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U0MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkpvaW50IE1lZXRpbmcgb2YgUGxhbm5pbmcgQ29tbWl0dGVlIGFuZCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+Mjwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0MF9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTQwIiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDQwIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlNDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDBfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iSm9pbnQgTWVldGluZyBvZiBQbGFubmluZyBDb21taXR0ZWUgYW5kIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0MSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCttZWV0aW5nK29mK1BsYW5uaW5nK0NvbW1pdHRlZSthbmQrQnVpbHQrSGVyaXRhZ2UrU3ViLWNvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDFfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNDEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBtZWV0aW5nIG9mIFBsYW5uaW5nIENvbW1pdHRlZSBhbmQgQnVpbHQgSGVyaXRhZ2UgU3ViLWNvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4yPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQxX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNDEiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NDEiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U0MSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0MV9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBtZWV0aW5nIG9mIFBsYW5uaW5nIENvbW1pdHRlZSBhbmQgQnVpbHQgSGVyaXRhZ2UgU3ViLWNvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0Mic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtNZWV0aW5nK29mK3RoZStBY2Nlc3NpYmlsaXR5K0Fkdmlzb3J5K0NvbW1pdHRlZSthbmQrdGhlK0ZyZW5jaCtMYW5ndWFnZStTZXJ2aWNlcytBZHZpc29yeStDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQyX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTQyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Sm9pbnQgTWVldGluZyBvZiB0aGUgQWNjZXNzaWJpbGl0eSBBZHZpc29yeSBDb21taXR0ZWUgYW5kIHRoZSBGcmVuY2ggTGFuZ3VhZ2UgU2VydmljZXMgQWR2aXNvcnkgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDJfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U0MiIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q0MiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTQyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQyX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkpvaW50IE1lZXRpbmcgb2YgdGhlIEFjY2Vzc2liaWxpdHkgQWR2aXNvcnkgQ29tbWl0dGVlIGFuZCB0aGUgRnJlbmNoIExhbmd1YWdlIFNlcnZpY2VzIEFkdmlzb3J5IENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0Myc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtNZWV0aW5nK29mK3RoZStGaW5hbmNlK2FuZCtFY29ub21pYytEZXZlbG9wbWVudCtDb21taXR0ZWUrYW5kK3RoZStOb21pbmF0aW5nK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDNfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNDMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBNZWV0aW5nIG9mIHRoZSBGaW5hbmNlIGFuZCBFY29ub21pYyBEZXZlbG9wbWVudCBDb21taXR0ZWUgYW5kIHRoZSBOb21pbmF0aW5nIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQzX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNDMiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NDMiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U0MyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0M19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBNZWV0aW5nIG9mIHRoZSBGaW5hbmNlIGFuZCBFY29ub21pYyBEZXZlbG9wbWVudCBDb21taXR0ZWUgYW5kIHRoZSBOb21pbmF0aW5nIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0NCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtNZWV0aW5nK29mK3RoZStQbGFubmluZytDb21taXR0ZWUrYW5kK0NvbW11bml0eSthbmQrUHJvdGVjdGl2ZStTZXJ2aWNlcytDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQ0X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTQ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+Sm9pbnQgTWVldGluZyBvZiB0aGUgUGxhbm5pbmcgQ29tbWl0dGVlIGFuZCBDb21tdW5pdHkgYW5kIFByb3RlY3RpdmUgU2VydmljZXMgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDRfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U0NCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q0NCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTQ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQ0X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IkpvaW50IE1lZXRpbmcgb2YgdGhlIFBsYW5uaW5nIENvbW1pdHRlZSBhbmQgQ29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0NSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtQbGFubmluZythbmQrSG91c2luZythbmQrQWdyaWN1bHR1cmUrYW5kK1J1cmFsK0FmZmFpcnMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0NV9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U0NSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPkpvaW50IFBsYW5uaW5nIGFuZCBIb3VzaW5nIGFuZCBBZ3JpY3VsdHVyZSBhbmQgUnVyYWwgQWZmYWlycyBDb21taXR0ZWUmbmJzcDs8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J01lZXRpbmdUeXBlTWVldGluZ0NvdW50IE1lZXRpbmdUeXBlTmFtZVRleHQnPig8c3BhbiBjbGFzcz0nWWVhciBZZWFyMCc+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0NV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTQ1IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDQ1IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlNDUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDVfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iSm9pbnQgUGxhbm5pbmcgYW5kIEhvdXNpbmcgYW5kIEFncmljdWx0dXJlIGFuZCBSdXJhbCBBZmZhaXJzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0Nic+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtQbGFubmluZythbmQrSG91c2luZythbmQrRW52aXJvbm1lbnQrYW5kK0NsaW1hdGUrQ2hhbmdlK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDZfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNDYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBQbGFubmluZyBhbmQgSG91c2luZyBhbmQgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4yPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQ2X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNDYiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NDYiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U0NiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0Nl9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBQbGFubmluZyBhbmQgSG91c2luZyBhbmQgRW52aXJvbm1lbnQgYW5kIENsaW1hdGUgQ2hhbmdlIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0Nyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtUcmFuc2l0K0NvbW1pc3Npb24rYW5kK0xpZ2h0K1JhaWwrU3ViLUNvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDdfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNDciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBUcmFuc2l0IENvbW1pc3Npb24gYW5kIExpZ2h0IFJhaWwgU3ViLUNvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQ3X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNDciIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NDciIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U0NyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0N19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBUcmFuc2l0IENvbW1pc3Npb24gYW5kIExpZ2h0IFJhaWwgU3ViLUNvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0OCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Kb2ludCtUcmFuc3BvcnRhdGlvbitDb21taXR0ZWUrYW5kK1RyYW5zaXQrQ29tbWlzc2lvbiIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDhfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNDgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Kb2ludCBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgYW5kIFRyYW5zaXQgQ29tbWlzc2lvbiZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQ4X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNDgiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NDgiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U0OCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0OF9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJKb2ludCBUcmFuc3BvcnRhdGlvbiBDb21taXR0ZWUgYW5kIFRyYW5zaXQgQ29tbWlzc2lvbiI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q0OSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1MaWdodCtSYWlsK1N1Yi1Db21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDQ5X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTQ5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+TGlnaHQgUmFpbCBTdWItQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xMDwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw0OV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTQ5IiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDQ5IiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlNDkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNDlfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iTGlnaHQgUmFpbCBTdWItQ29tbWl0dGVlIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDUwJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPU5vbWluYXRpbmcrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1MF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U1MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPk5vbWluYXRpbmcgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNTBfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U1MCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q1MCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTUwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDUwX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9Ik5vbWluYXRpbmcgQ29tbWl0dGVlIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDUxJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPU90dGF3YStCdWlsdCtIZXJpdGFnZStBZHZpc29yeStDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDUxX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTUxIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+T3R0YXdhIEJ1aWx0IEhlcml0YWdlIEFkdmlzb3J5IENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz43PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEyJz42PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDEzJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDUxX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNTEiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NTEiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U1MSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1MV9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJPdHRhd2EgQnVpbHQgSGVyaXRhZ2UgQWR2aXNvcnkgQ29tbWl0dGVlIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDUyJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPU90dGF3YStQb2xpY2UrU2VydmljZXMrQm9hcmQiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDUyX0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTUyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+T3R0YXdhIFBvbGljZSBTZXJ2aWNlcyBCb2FyZCZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xMzE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjEyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4xMjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+MTQ8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjExPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz4xNTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+MTU8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjEyPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4yMTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTk8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNTJfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U1MiIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q1MiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTUyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDUyX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9Ik90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NTMnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9T3R0YXdhK1BvbGljZStTZXJ2aWNlcytCb2FyZCstK1NwZWNpYWwrTWVldGluZyIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNTNfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5PdHRhd2EgUG9saWNlIFNlcnZpY2VzIEJvYXJkIC0gU3BlY2lhbCBNZWV0aW5nJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjI8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNTNfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U1MyIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q1MyIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTUzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDUzX01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9Ik90dGF3YSBQb2xpY2UgU2VydmljZXMgQm9hcmQgLSBTcGVjaWFsIE1lZXRpbmciPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NTQnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9T3R0YXdhK1B1YmxpYytMaWJyYXJ5K0JvYXJkIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1NF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U1NCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPk90dGF3YSBQdWJsaWMgTGlicmFyeSBCb2FyZCZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xMDY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjExPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE1Jz4xMTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+MTI8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTcnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjMnPjEyPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU0X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNTQiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NTQiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U1NCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1NF9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJPdHRhd2EgUHVibGljIExpYnJhcnkgQm9hcmQiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NTUnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9UGxhbm5pbmcrQWR2aXNvcnkrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1NV9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U1NSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPlBsYW5uaW5nIEFkdmlzb3J5IENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz45PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4yPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU1X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNTUiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NTUiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U1NSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1NV9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJQbGFubmluZyBBZHZpc29yeSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NTYnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9UGxhbm5pbmcrYW5kK0hvdXNpbmcrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1Nl9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U1NiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4yNDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MjM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjQnPjE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNTZfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U1NiIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q1NiIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTU2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU2X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IlBsYW5uaW5nIGFuZCBIb3VzaW5nIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q1Nyc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1QbGFubmluZytDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU3X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTU3Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+UGxhbm5pbmcgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjIwODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTMnPjIwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE0Jz4xNzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNSc+MTk8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTYnPjE4PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz4yMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+MTY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjE4PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz4xNTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+MjY8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjI5PC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU3X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNTciIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NTciIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U1NyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1N19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJQbGFubmluZyBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NTgnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9UG9saWNlK1NlcnZpY2VzK0JvYXJkK0NvbXBsYWludHMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1OF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U1OCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPlBvbGljZSBTZXJ2aWNlcyBCb2FyZCBDb21wbGFpbnRzIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz43PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU4X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNTgiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NTgiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U1OCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1OF9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJQb2xpY2UgU2VydmljZXMgQm9hcmQgQ29tcGxhaW50cyBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NTknPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9UG9saWNlK1NlcnZpY2VzK0JvYXJkK0ZpbmFuY2UrYW5kK0F1ZGl0K0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNTlfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNTkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Qb2xpY2UgU2VydmljZXMgQm9hcmQgRmluYW5jZSBhbmQgQXVkaXQgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjM1PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz41PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz43PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz41PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4yPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz41PC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDU5X01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNTkiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NTkiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U1OSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw1OV9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJQb2xpY2UgU2VydmljZXMgQm9hcmQgRmluYW5jZSBhbmQgQXVkaXQgQ29tbWl0dGVlIj4NCg0KPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Ik1lZXRpbmdUeXBlTGlzdCIgaWQ9J01lZXRpbmdUeXBlTGlzdDYwJz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vcHViLW90dGF3YS5lc2NyaWJlbWVldGluZ3MuY29tOjQ0My9tZWV0aW5nc2NhbGVuZGFydmlldy5hc3B4P0V4cGFuZGVkPVBvbGljZStTZXJ2aWNlcytCb2FyZCtIdW1hbitSZXNvdXJjZXMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2MF9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U2MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPlBvbGljZSBTZXJ2aWNlcyBCb2FyZCBIdW1hbiBSZXNvdXJjZXMgQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjI5PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE3Jz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE4Jz41PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE5Jz41PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIwJz40PC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIxJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4zPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIzJz40PC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDYwX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNjAiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NjAiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U2MCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2MF9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJQb2xpY2UgU2VydmljZXMgQm9hcmQgSHVtYW4gUmVzb3VyY2VzIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q2MSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1Qb2xpY2UrU2VydmljZXMrQm9hcmQrUG9saWN5K2FuZCtHb3Zlcm5hbmNlK0NvbW1pdHRlZSIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNjFfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNjEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5Qb2xpY2UgU2VydmljZXMgQm9hcmQgUG9saWN5IGFuZCBHb3Zlcm5hbmNlIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4yNDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNic+MTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+NDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+Mjwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMic+Mzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+NDwvc3Bhbj4pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2MV9NZWV0aW5nc1BhbmVsQ29udGFpbmVyIiBkYXRhLXBhcmVudD0iI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4iIGNsYXNzPSJjb2xsYXBzZSBjb2xsYXBzZTYxIiBhcmlhLWxhYmVsbGVkYnk9Ik1lZXRpbmdUeXBlTGlzdDYxIiBkYXRhLXRvZ2dsZS1pZD0iLmNvbGxhcHNlNjEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNjFfTWVldGluZ3NQYW5lbCIgY2xhc3M9InBhbmVsLWNvbnRlbnRzIE1lZXRpbmdUeXBlQ29udGFpbmVyIiBNZWV0aW5nVHlwZT0iUG9saWNlIFNlcnZpY2VzIEJvYXJkIFBvbGljeSBhbmQgR292ZXJuYW5jZSBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NjInPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9U3BlY2lhbCtKb2ludCtNZWV0aW5nK29mK3RoZStQbGFubmluZytDb21taXR0ZWUrYW5kK3RoZStDb21tdW5pdHkrYW5kK1Byb3RlY3RpdmUrU2VydmljZXMrQ29tbWl0dGVlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2Ml9FeHBhbmRDb2xsYXBzZUxpbmsiIGNsYXNzPSJQYXN0TWVldGluZ1R5cGVzTmFtZSBjb2xsYXBzZWQgYnRuIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIHJvbGU9ImJ1dHRvbiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGRhdGEtdGFyZ2V0PSIuY29sbGFwc2U2MiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Ik1lZXRpbmdUeXBlTmFtZVRleHQiPlNwZWNpYWwgSm9pbnQgTWVldGluZyBvZiB0aGUgUGxhbm5pbmcgQ29tbWl0dGVlIGFuZCB0aGUgQ29tbXVuaXR5IGFuZCBQcm90ZWN0aXZlIFNlcnZpY2VzIENvbW1pdHRlZSZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4xPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4xPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDYyX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNjIiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NjIiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U2MiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2Ml9NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJTcGVjaWFsIEpvaW50IE1lZXRpbmcgb2YgdGhlIFBsYW5uaW5nIENvbW1pdHRlZSBhbmQgdGhlIENvbW11bml0eSBhbmQgUHJvdGVjdGl2ZSBTZXJ2aWNlcyBDb21taXR0ZWUiPg0KDQo8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTWVldGluZ1R5cGVMaXN0IiBpZD0nTWVldGluZ1R5cGVMaXN0NjMnPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9wdWItb3R0YXdhLmVzY3JpYmVtZWV0aW5ncy5jb206NDQzL21lZXRpbmdzY2FsZW5kYXJ2aWV3LmFzcHg/RXhwYW5kZWQ9U3RhbmRpbmcrQ29tbWl0dGVlK29uK0Vudmlyb25tZW50YWwrUHJvdGVjdGlvbiUyYytXYXRlcithbmQrV2FzdGUrTWFuYWdlbWVudCIgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNjNfRXhwYW5kQ29sbGFwc2VMaW5rIiBjbGFzcz0iUGFzdE1lZXRpbmdUeXBlc05hbWUgY29sbGFwc2VkIGJ0biIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiByb2xlPSJidXR0b24iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBkYXRhLXRhcmdldD0iLmNvbGxhcHNlNjMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJNZWV0aW5nVHlwZU5hbWVUZXh0Ij5TdGFuZGluZyBDb21taXR0ZWUgb24gRW52aXJvbm1lbnRhbCBQcm90ZWN0aW9uLCBXYXRlciBhbmQgV2FzdGUgTWFuYWdlbWVudCZuYnNwOzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nTWVldGluZ1R5cGVNZWV0aW5nQ291bnQgTWVldGluZ1R5cGVOYW1lVGV4dCc+KDxzcGFuIGNsYXNzPSdZZWFyIFllYXIwJz4zNDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+ODwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMSc+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjInPjExPC9zcGFuPikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDYzX01lZXRpbmdzUGFuZWxDb250YWluZXIiIGRhdGEtcGFyZW50PSIjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbiIgY2xhc3M9ImNvbGxhcHNlIGNvbGxhcHNlNjMiIGFyaWEtbGFiZWxsZWRieT0iTWVldGluZ1R5cGVMaXN0NjMiIGRhdGEtdG9nZ2xlLWlkPSIuY29sbGFwc2U2MyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfbHZQYXN0TWVldGluZ1R5cGVzX2N0cmw2M19NZWV0aW5nc1BhbmVsIiBjbGFzcz0icGFuZWwtY29udGVudHMgTWVldGluZ1R5cGVDb250YWluZXIiIE1lZXRpbmdUeXBlPSJTdGFuZGluZyBDb21taXR0ZWUgb24gRW52aXJvbm1lbnRhbCBQcm90ZWN0aW9uLCBXYXRlciBhbmQgV2FzdGUgTWFuYWdlbWVudCI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q2NCc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1UcmFuc2l0K0NvbW1pc3Npb24iIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDY0X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTY0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+VHJhbnNpdCBDb21taXNzaW9uJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjEwOTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+Nzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+MTM8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+Njwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOCc+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxOSc+OTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMCc+MTE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTE8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNjRfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U2NCIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q2NCIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTY0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDY0X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IlRyYW5zaXQgQ29tbWlzc2lvbiI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJNZWV0aW5nVHlwZUxpc3QiIGlkPSdNZWV0aW5nVHlwZUxpc3Q2NSc+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3B1Yi1vdHRhd2EuZXNjcmliZW1lZXRpbmdzLmNvbTo0NDMvbWVldGluZ3NjYWxlbmRhcnZpZXcuYXNweD9FeHBhbmRlZD1UcmFuc3BvcnRhdGlvbitDb21taXR0ZWUiIGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDY1X0V4cGFuZENvbGxhcHNlTGluayIgY2xhc3M9IlBhc3RNZWV0aW5nVHlwZXNOYW1lIGNvbGxhcHNlZCBidG4iIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgcm9sZT0iYnV0dG9uIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgZGF0YS10YXJnZXQ9Ii5jb2xsYXBzZTY1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iTWVldGluZ1R5cGVOYW1lVGV4dCI+VHJhbnNwb3J0YXRpb24gQ29tbWl0dGVlJm5ic3A7PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdNZWV0aW5nVHlwZU1lZXRpbmdDb3VudCBNZWV0aW5nVHlwZU5hbWVUZXh0Jz4oPHNwYW4gY2xhc3M9J1llYXIgWWVhcjAnPjEwNzwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMic+NTwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxMyc+MTE8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTQnPjg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTUnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDE2Jz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAxNyc+MTA8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTgnPjU8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMTknPjg8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjAnPjc8L3NwYW4+PHNwYW4gY2xhc3M9J1llYXIgWWVhcjIwMjEnPjEwPC9zcGFuPjxzcGFuIGNsYXNzPSdZZWFyIFllYXIyMDIyJz4xMDwvc3Bhbj48c3BhbiBjbGFzcz0nWWVhciBZZWFyMjAyMyc+MTM8L3NwYW4+KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImN0bDAwX01haW5Db250ZW50X2x2UGFzdE1lZXRpbmdUeXBlc19jdHJsNjVfTWVldGluZ3NQYW5lbENvbnRhaW5lciIgZGF0YS1wYXJlbnQ9IiNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuIiBjbGFzcz0iY29sbGFwc2UgY29sbGFwc2U2NSIgYXJpYS1sYWJlbGxlZGJ5PSJNZWV0aW5nVHlwZUxpc3Q2NSIgZGF0YS10b2dnbGUtaWQ9Ii5jb2xsYXBzZTY1Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjdGwwMF9NYWluQ29udGVudF9sdlBhc3RNZWV0aW5nVHlwZXNfY3RybDY1X01lZXRpbmdzUGFuZWwiIGNsYXNzPSJwYW5lbC1jb250ZW50cyBNZWV0aW5nVHlwZUNvbnRhaW5lciIgTWVldGluZ1R5cGU9IlRyYW5zcG9ydGF0aW9uIENvbW1pdHRlZSI+DQoNCjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgICA8ZGl2IGlkPSJmdWxsQ2FsTW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIiBhcmlhLWxhYmVsPSJtZWV0aW5nIGRldGFpbHMgcG9wdXAiIHJvbGU9ImRpYWxvZyIgY2xhc3M9Im1vZGFsIGZhZGUiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtb2RlbEhlYWRlciIgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImNsb3NlQ2FsTW9kYWwiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+w5c8L3NwYW4+IDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5DbG9zZSBtZWV0aW5nIGRldGFpbHM8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWxCb2R5IiBjbGFzcz0ibW9kYWwtYm9keSI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBjYWxlbmRhci1yb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FsZW5kYXItZGV0YWlscyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgY2FsLWRhdGUtbG9jIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InN0YXJ0RGF0ZSIgY2xhc3M9InN0YXJ0LWRhdGUgbWVldGluZy1kYXRlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImRlc2MiIGNsYXNzPSJkZXNjLXRleHQiIHN0eWxlPSJ3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Ij48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWxlbmRhci1pY29ucyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJzaGFyZUNvbnRhaW5lciIgY2xhc3M9InNoYXJpbmciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGl0bGU9IlNoYXJlIiBpZD0ic2hhcmVMaW5rIiBkYXRhLWRpc21pc3M9Im1vZGFsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9JbWFnZTMiIGNsYXNzPSJpbWdpY29uIiBhbHQ9IlNoYXJlIiB0aXRsZT0iU2hhcmUiIHNyYz0iQ29udGVudC9pbWcvc3ZnL3NoYXJlLWFsdC5zdmciIGhlaWdodD0iMTciIHdpZHRoPSIyMyIgYm9yZGVyPSIwIiAvPg0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImNvbW1lbnRMaW5rIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIHRhcmdldD0iX2JsYW5rIiBzdHlsZT0iY29sb3I6IzQ1NDU0NTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGlkPSJjdGwwMF9NYWluQ29udGVudF9JbWFnZTYiIGNsYXNzPSJpbWdpY29uIiBhbHQ9Ik9wZW4gZm9yIENvbW1lbnRzIiB0aXRsZT0iT3BlbiBmb3IgQ29tbWVudHMiIHNyYz0iQ29udGVudC9pbWcvc3ZnL2NvbW1lbnQtYWx0LnN2ZyIgaGVpZ2h0PSIyNiIgd2lkdGg9IjIzIiBib3JkZXI9IjAiIC8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9IlJUU0FjaXR2ZSBsaW5rIiB0aXRsZT0iUmVxdWVzdCB0byBTcGVhayIgdGFyZ2V0PSJfYmxhbmsiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X0ltYWdlOSIgY2xhc3M9ImltZ2ljb24iIGFsdD0iUmVxdWVzdCB0byBTcGVhayIgdGl0bGU9IlJlcXVlc3QgdG8gU3BlYWsiIHNyYz0iQ29udGVudC9pbWcvc3ZnL21pY3JvcGhvbmUtc29saWQuc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iZGVsZWdhdGlvblJlcXVlc3RMaW5rIiB0aXRsZT0iRGVsZWdhdGlvbiBSZXF1ZXN0IiB0YXJnZXQ9Il9ibGFuayI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgaWQ9ImN0bDAwX01haW5Db250ZW50X2ltZ0RlbGVnYXRpb24zIiBjbGFzcz0iaW1naWNvbiIgYWx0PSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHRpdGxlPSJEZWxlZ2F0aW9uIFJlcXVlc3QiIHNyYz0iQ29udGVudC9pbWcvRGVsZWdhdGlvblJlcXVlc3RzLWljb24uc3ZnIiBoZWlnaHQ9IjI2IiB3aWR0aD0iMjMiIGJvcmRlcj0iMCIgLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tPGEgaWQ9ImV2ZW50TGluayIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdGFyZ2V0PSJfYmxhbmsiPjxzcGFuIGNsYXNzPSJsYSBsYS1pbmZvLWNpcmNsZSI+PC9zcGFuPiZuYnNwO1ZpZXcgTWVldGluZ3M8L2E+LS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0idmlkZW8tbGluayI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IiBpZD0iTWVldGluZ0RvY3VtZW50cyIgYXJpYS1sYWJlbD0iTWVldGluZyBkb2N1bWVudHMiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8ZGl2IGlkPSJjb25mbGljdHNEZXRhaWxzTW9kYWwiIGFyaWEtaGlkZGVuPSJ0cnVlIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWw9Ik1lbWJlciBpbiBDb25mbGljdCIgY2xhc3M9Im1vZGFsIGZhZGUiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0ibW9kZWxIZWFkZXJjb25mbGljdHMiIGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+w5c8L3NwYW4+IDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5jbG9zZTwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8dGFibGUgaWQ9InRhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3QiIGNsYXNzPSJ0YWJsZS1yZXNwb25zaXZlIiByb2xlPSJncmlkIiBzdHlsZT0id2lkdGg6IDEwMCU7IHdvcmQtd3JhcDogYnJlYWstd29yZDsgd29yZC1icmVhazogYnJlYWstd29yZDsgYm9yZGVyOiAwOyI+DQogICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciByb2xlPSJyb3ciIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPg0KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+PC90Ym9keT4NCiAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICAgIDxkaXYgaWQ9IkxlZ2lzbGF0aW9uRGV0YWlsc01vZGFsIiBhcmlhLWhpZGRlbj0idHJ1ZSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsPSJMZWdpc2xhdGl2ZSBIaXN0b3J5IiBjbGFzcz0ibW9kYWwgZmFkZSI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyAgTGVnaXNsYXRpb25EZXRhaWxzTW9kYWwiIHN0eWxlPSJ3aWR0aDogNjAlIj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibW9kYWwtdGl0bGUiPkRldGFpbHM8L2gyPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIj48c3BhbiBhcmlhLWhpZGRlbj0idHJ1ZSI+w5c8L3NwYW4+IDxzcGFuIGNsYXNzPSJzci1vbmx5Ij5jbG9zZTwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iaW5wdXR0YWJsZSIgc3R5bGU9IndpZHRoOiAxMDAlOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TnVtYmVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJMZWdpc2xhdGlvbk51bWJlckxhYmVsIj48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VHlwZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0iTGVnaXNsYXRpb25UeXBlTGFiZWwiPkxlZ2lzbGF0aW9uPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YWdlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJMZWdpc2xhdGlvblN0YWdlTGFiZWwiPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IkxlZ2lzbGF0aW9uU3RhdHVzTGFiZWwiPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXBhcnRtZW50PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJMZWdpc2xhdGlvbkRlcGFydG1lbnRMYWJlbCI+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkxlZ2lzbGF0aXZlIFRleHQ8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9IkxlZ2lzbGF0aW9uUmVjb21tZW5kYXRpb25MYWJlbCI+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogdG9wIj5BdHRhY2htZW50czwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9IkxlZ2lzbGF0aW9uRG9jdW1lbnRJY29uIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9IkxlZ2lzbGF0aW9uRG9jdW1lbnRMaW5rIj48L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9IkxlZ2lzbGF0aW9uU3VwcG9ydGluZ0RvY3VtZW50c0xpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgIDxoMz5IaXN0b3J5PC9oMz4NCiAgICAgICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBpZD0iTGVnaXNsYXRpb25IaXN0b3J5VGFibGUiIGNsYXNzPSJsaXN0IGRhdGFUYWJsZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1zdGFnZS10aCIgY2xhc3M9ImxlZy1uby1icmVhayB0YWJsZXBhZGRpbmciPlN0YWdlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LW1lZXRpbmd0eXBlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+TWVldGluZyBUeXBlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LW1lZXRpbmdkYXRlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+TWVldGluZyBEYXRlPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LW51bWJlci10aCIgY2xhc3M9ImxlZy1uby1icmVhayB0YWJsZXBhZGRpbmciPk51bWJlcjwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1zdGF0dXMtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5TdGF0dXM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGNsYXNzPSJoaXN0b3J5Ij48L3Rib2R5Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICANCg0KDQo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbW9tZW50LmpzLzIuMjIuMi9tb21lbnQubWluLmpzIj48L3NjcmlwdD4NCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vY2RuLmRhdGF0YWJsZXMubmV0LzEuMTEuNS9jc3MvanF1ZXJ5LmRhdGFUYWJsZXMubWluLmNzcyIgLz4gIA0KDQo8ZGl2IGlkPSJBZ2VuZGFJdGVtRGV0YWlsc01vZGFsIiBjbGFzcz0ibW9kYWwgZmFkZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIEFnZW5kYUl0ZW1EZXRhaWxzTW9kYWwiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+DQogICAgICAgICAgICAgICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSI+RGV0YWlsczwvaDM+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0ic3Itb25seSI+Y2xvc2U8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0Zm9ybSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGl0bGUNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJJdGVtVGl0bGUiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVzY3JpcHRpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXNjcmlwdGlvbiI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXRlZ29yeQ0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNhdGVnb3J5Ij48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkxlZ2lzbGF0aW9uTnVtYmVyTGFiZWwiPjwvZGl2Pg0KDQogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+U3RhZ2U8L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iTGVnaXNsYXRpb25TdGFnZUxhYmVsIj48L2Rpdj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcGFydG1lbnQNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMZWdpc2xhdGlvbkRlcGFydG1lbnRMYWJlbCI+PC9kaXY+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBzdHlsZT0idmVydGljYWwtYWxpZ246IHRvcCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXR0YWNobWVudHMNCiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJMZWdpc2xhdGlvbkRvY3VtZW50SWNvbiI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iTGVnaXNsYXRpb25Eb2N1bWVudExpbmsiPjwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJMZWdpc2xhdGlvblN1cHBvcnRpbmdEb2N1bWVudHNMaXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgICAgIDxoNCBzdHlsZT0ibWFyZ2luLXRvcDowLjVlbSI+SGlzdG9yeTwvaDQ+DQogICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGlkPSJMZWdpc2xhdGlvbkhpc3RvcnlUYWJsZSIgY2xhc3M9Imxpc3QgZGF0YVRhYmxlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LWluZGV4LXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGlkPSJsZWdpc2xhdGlvbmhpc3RvcnktbWVldGluZ3R5cGUtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5NZWV0aW5nIFR5cGU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1tZWV0aW5nZGF0ZS10aCIgY2xhc3M9ImxlZy1uby1icmVhayB0YWJsZXBhZGRpbmciPk1lZXRpbmcgRGF0ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBpZD0ibGVnaXNsYXRpb25oaXN0b3J5LXN0YWdlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+U3RhZ2U8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1zdGF0dXMtdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5TdGF0dXM8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS1udW1iZXItdGgiIGNsYXNzPSJsZWctbm8tYnJlYWsgdGFibGVwYWRkaW5nIj5OdW1iZXI8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggaWQ9ImxlZ2lzbGF0aW9uaGlzdG9yeS12b3RlLXRoIiBjbGFzcz0ibGVnLW5vLWJyZWFrIHRhYmxlcGFkZGluZyI+Vm90ZTwvdGg+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9Imhpc3RvcnkiPjwvdGJvZHk+DQogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQo8L2Rpdj4NCg0KPGRpdiBpZD0iVm90ZVJlc3VsdHNNb2RhbCIgY2xhc3M9Im1vZGFsIGZhZGUiPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBWb3RlUmVzdWx0c01vZGFsIiBzdHlsZT0id2lkdGg6IDYwJSI+DQogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9Im1vZGFsLXRpdGxlIj5Wb3RlIFJlc3VsdDwvaDM+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCI+PHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0ic3Itb25seSI+Y2xvc2U8L3NwYW4+PC9idXR0b24+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlRleHQiPjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkJhbm5lciI+PC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iVm90ZXMiPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGFUYWJsZXNfd3JhcHBlciIgc3R5bGU9Im1hcmdpbjphdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0YVRhYmxlc19wYWdpbmF0ZSBwYWdpbmdfc2ltcGxlX251bWJlcnMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBjdXJyZW50IiBhcmlhLWNvbnRyb2xzPSJ0YWJsZS1jb25mbGljdHMtZGV0YWlscy1saXN0IiBkYXRhLWR0LWlkeD0iMSIgdGFiaW5kZXg9IjAiPjE8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2PiANCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KIA0KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgIGZ1bmN0aW9uIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBpbmRleCkgew0KICAgICAgICB2YXIgZGlhbG9nID0gJCgiI1ZvdGVSZXN1bHRzTW9kYWwiKTsNCiAgICAgICAgdmFyIG1vdGlvbiA9IG1vdGlvbnNbaW5kZXhdOw0KDQogICAgICAgIC8vIHBhZ2luZyAvLw0KICAgICAgICB7DQogICAgICAgICAgICB2YXIgcGFnaW5nID0gZGlhbG9nLmZpbmQoIi5kYXRhVGFibGVzX3BhZ2luYXRlIikuZW1wdHkoKTsNCg0KICAgICAgICAgICAgLy8gYmFjayBsaW5rcyAvLw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIGZpcnN0IGxpbmsNCiAgICAgICAgICAgICAgICB2YXIgZmlyc3RsaW5rID0gJCgnPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBmaXJzdCI+Jmx0OyZsdDs8L2E+JykNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImlkIiwgIlZvdGVSZXN1bHRzTW9kYWwtRmlyc3QiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1jb250cm9scyIsICJWb3RlUmVzdWx0c01vZGFsIikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtbGFiZWwiLCAiTmF2aWdhdGUgdG8gRmlyc3QgVm90ZSIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIDApOw0KDQogICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgbGluayAvLw0KICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c2xpbmsgPSAkKCc8YSBjbGFzcz0icGFnaW5hdGVfYnV0dG9uIHByZXZpb3VzIiAiIj4mbHQ7PC9hPicpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJpZCIsICJWb3RlUmVzdWx0c01vZGFsLVByZXZpb3VzIikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtY29udHJvbHMiLCAiVm90ZVJlc3VsdHNNb2RhbCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIFByZXZpb3VzIFZvdGUiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigidGFiaW5kZXgiLCAwKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiZGF0YS1kdC1pZHgiLCAxKTsNCg0KDQogICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHsNCiAgICAgICAgICAgICAgICAgICAgZmlyc3RsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBmaXJzdGxpbmsuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIik7DQoNCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2xpbmsuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBmaXJzdGxpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBwcmV2aW91c2xpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIGluZGV4LTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChmaXJzdGxpbmspOw0KICAgICAgICAgICAgICAgIHBhZ2luZy5hcHBlbmQocHJldmlvdXNsaW5rKTsgICAgICAgICAgICAgICAgDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIHBhZ2VzIC8vDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgdmFyIHBhZ2VzID0gJCgiPHNwYW4+Iik7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPG1vdGlvbnMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1dHRvbmluZGV4ID0gaTsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgbGluayA9ICQoJzxhIGNsYXNzPSJwYWdpbmF0ZV9idXR0b24iPicpDQogICAgICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1jb250cm9scyIsICJWb3RlUmVzdWx0c01vZGFsIikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIGkrMikNCiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgICAgICAudGV4dChpKzEpDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBidXR0b25pbmRleCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9KQ0KDQogICAgICAgICAgICAgICAgICAgIGlmIChpID09IGluZGV4KSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmFkZENsYXNzKCJjdXJyZW50IikNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIHBhZ2VzLmFwcGVuZChsaW5rKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBwYWdpbmcuYXBwZW5kKHBhZ2VzKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gZm9yd2FyZCBsaW5rcyAvLw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIC8vIG5leHQgbGluayANCiAgICAgICAgICAgICAgICB2YXIgbmV4dGxpbmsgPSAkKCc8YSBjbGFzcz0icGFnaW5hdGVfYnV0dG9uIG5leHQiPiZndDs8L2E+JykNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImlkIiwgIlZvdGVSZXN1bHRzTW9kYWwtTmV4dCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWNvbnRyb2xzIiwgIlZvdGVSZXN1bHRzTW9kYWwiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiYXJpYS1sYWJlbCIsICJOYXZpZ2F0ZSB0byBOZXh0IFZvdGUiKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigidGFiaW5kZXgiLCAwKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiZGF0YS1kdC1pZHgiLCBtb3Rpb25zLmxlbmd0aCArIDIpOw0KDQogICAgICAgICAgICAgICAgLy8gbGFzdCBsaW5rDQogICAgICAgICAgICAgICAgdmFyIGxhc3RsaW5rID0gJCgnPGEgY2xhc3M9InBhZ2luYXRlX2J1dHRvbiBsYXN0Ij4mZ3Q7Jmd0OzwvYT4nKQ0KICAgICAgICAgICAgICAgICAgICAuYXR0cigiaWQiLCAiVm90ZVJlc3VsdHNNb2RhbC1MYXN0IikNCiAgICAgICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtY29udHJvbHMiLCAiVm90ZVJlc3VsdHNNb2RhbCIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIExhc3QgVm90ZSIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJ0YWJpbmRleCIsIDApDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJkYXRhLWR0LWlkeCIsIG1vdGlvbnMubGVuZ3RoICsgMyk7DQoNCg0KICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBtb3Rpb25zLmxlbmd0aCAtIDEpIHsNCiAgICAgICAgICAgICAgICAgICAgbmV4dGxpbmsuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7DQogICAgICAgICAgICAgICAgICAgIG5leHRsaW5rLmF0dHIoImFyaWEtZGlzYWJsZWQiLCAidHJ1ZSIpOw0KDQogICAgICAgICAgICAgICAgICAgIGxhc3RsaW5rLmFkZENsYXNzKCdkaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICBsYXN0bGluay5hdHRyKCJhcmlhLWRpc2FibGVkIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG5leHRsaW5rDQogICAgICAgICAgICAgICAgICAgICAgICAuY2xpY2soZnVuY3Rpb24oZSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxWb3RlUmVzdWx0c0RpYWxvZyhtb3Rpb25zLCBpbmRleCsxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgbGFzdGxpbmsNCiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGljayhmdW5jdGlvbihlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsbFZvdGVSZXN1bHRzRGlhbG9nKG1vdGlvbnMsIG1vdGlvbnMubGVuZ3RoLTEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChuZXh0bGluayk7DQogICAgICAgICAgICAgICAgcGFnaW5nLmFwcGVuZChsYXN0bGluayk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KDQogICAgICAgIA0KDQoNCiAgICAgICAgLy8gcmVuZGVyIG1vdGlvbiAvLw0KDQogICAgICAgIGRpYWxvZy5maW5kKCIuVGV4dCIpLnRleHQobW90aW9uLlRleHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICB2YXIgYmFubmVyID0gZGlhbG9nLmZpbmQoIi5CYW5uZXIiKTsNCiAgICAgICAgYmFubmVyLnRleHQobW90aW9uLkJhbm5lclRleHQpOw0KDQogICAgICAgIHN3aXRjaCAobW90aW9uLkJhbm5lckNvbG9yKSB7DQogICAgICAgICAgICBjYXNlICdncmVlbic6DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICcjMjFBRTUyJyk7DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiY29sb3IiLCAnd2hpdGUnKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgY2FzZSAncmVkJzoNCiAgICAgICAgICAgICAgICBiYW5uZXIuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwgJ3JlZCcpOw0KICAgICAgICAgICAgICAgIGJhbm5lci5jc3MoImNvbG9yIiwgJ2JsYWNrJyk7DQogICAgICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgYmFubmVyLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICcnKTsNCiAgICAgICAgICAgICAgICBiYW5uZXIuY3NzKCJjb2xvciIsICcnKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgZGlhbG9nLmZpbmQoIi5Wb3RlcyIpLmVtcHR5KCkNCg0KICAgICAgICAvLyBhZGQgdm90ZXMgdG8gZGlhbG9nIC8vDQogICAgICAgIHZhciB2b3RlcyA9IHt9Ow0KICAgICAgICB2YXIgdm90ZW9yZGVyID0gWyJZZXMiLCAiTm8iLCAiQWJzdGFpbiIsICJBYnNlbnQiXTsNCg0KICAgICAgICAkLmVhY2gobW90aW9uLlZvdGVzLCBmdW5jdGlvbihpbXYsIG1vdGlvbnZvdGUpIHsNCiAgICAgICAgICAgIGlmICghdm90ZXMuaGFzT3duUHJvcGVydHkobW90aW9udm90ZS5Wb3RlKSkgew0KICAgICAgICAgICAgICAgIHZvdGVzW21vdGlvbnZvdGUuVm90ZV0gPSBbXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHZvdGVvcmRlci5pbmRleE9mKG1vdGlvbnZvdGUuVm90ZSkgPT0gLTEpIHsNCiAgICAgICAgICAgICAgICB2b3Rlb3JkZXIucHVzaChtb3Rpb252b3RlLlZvdGUpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB2b3Rlc1ttb3Rpb252b3RlLlZvdGVdLnB1c2goDQogICAgICAgICAgICAgICAgJCgiPHNwYW4+IikudGV4dChtb3Rpb252b3RlLlVzZXJOYW1lKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJC5lYWNoKHZvdGVvcmRlciwgZnVuY3Rpb24oaXYsIHZvdGUpIHsNCiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAkKCIjVm90ZUNvbnRhaW5lclRlbXBsYXRlIikuY2xvbmUoKTsNCg0KICAgICAgICAgICAgaWYgKHZvdGVzLmhhc093blByb3BlcnR5KHZvdGUpKSB7DQogICAgICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoIi5Wb3RlSGVhZGVyIC5jb3VudCIpLnRleHQodm90ZXNbdm90ZV0ubGVuZ3RoKTsNCiAgICAgICAgICAgICAgICBjb250YWluZXIuZmluZCgiLlZvdGVycyIpLmFwcGVuZCguLi4odm90ZXNbdm90ZV0pKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgY29udGFpbmVyLmZpbmQoIi5Wb3RlSGVhZGVyIC5Wb3RlIikudGV4dCh2b3RlKTsNCiAgICAgICAgICAgIGRpYWxvZy5maW5kKCIuVm90ZXMiKS5hcHBlbmQoY29udGFpbmVyLmNoaWxkcmVuKCkpOw0KICAgICAgICB9KTsNCiAgICB9DQoNCiAgICAvLyBmaXggZm9yIG5lc3RlZCBtb3RhbHMgLy8NCiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7DQogICAgICAgICQoZG9jdW1lbnQpLm9uKHsNCiAgICAgICAgICAgICdzaG93LmJzLm1vZGFsJzogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIHZhciB6SW5kZXggPSAxMDQwICsgKDEwICogJCgnLm1vZGFsOnZpc2libGUnKS5sZW5ndGgpOw0KICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCd6LWluZGV4JywgekluZGV4KTsNCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgJCgnLm1vZGFsLWJhY2tkcm9wJykubm90KCcubW9kYWwtc3RhY2snKS5jc3MoJ3otaW5kZXgnLCB6SW5kZXggLSAxKS5hZGRDbGFzcygnbW9kYWwtc3RhY2snKTsgfSwgMCk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgJ2hpZGRlbi5icy5tb2RhbCc6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCgnLm1vZGFsOnZpc2libGUnKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgdGhlIG1vZGFsLW9wZW4gY2xhc3MgdG8gdGhlIGJvZHkgZWxlbWVudCwgc28gdGhhdCBzY3JvbGxpbmcgd29ya3MNCiAgICAgICAgICAgICAgICAgICAgLy8gcHJvcGVybHkgYWZ0ZXIgZGUtc3RhY2tpbmcgYSBtb2RhbC4NCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7ICQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKTsgfSwgMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9LCAnLm1vZGFsJyk7DQogICAgfSk7DQo8L3NjcmlwdD4NCg0KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4NCiAgICAvKiBmbGV4LWdyaWQgY2xhc3NlcyAqLw0KICAgIC5pbnB1dGZvcm0gew0KCSAgICBmb250LXNpemU6MWVtOw0KCSAgICBkaXNwbGF5OmdyaWQ7DQoJICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczowZnIgMWZyOw0KCSAgICBncmlkLWdhcDoxMHB4IDEwcHg7DQoJICAgIGFsaWduLWl0ZW1zOmJhc2VsaW5lOw0KICAgIH0NCgkJCQ0KICAgIEBtZWRpYSAobWF4LXdpZHRoOiA1NzVweCkgew0KICAgICAgICAuaW5wdXRmb3JtIHsNCiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyOw0KICAgICAgICAgICAgZ3JpZC1nYXA6MHB4Ow0KICAgICAgICB9DQoNCiAgICAgICAgLmlucHV0Zm9ybSA+IGxhYmVsLA0KICAgICAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGxhYmVsIHsNCiAgICAgICAgICAgIG1hcmdpbi10b3A6MjBweDsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC5pbnB1dGZvcm0gPiBsYWJlbCwNCiAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGxhYmVsIHsNCgkgICAgd2hpdGUtc3BhY2U6bm93cmFwOw0KCSAgICBmb250LXNpemU6MWVtOw0KCSAgICBmb250LXdlaWdodDpib2xkOw0KICAgIH0NCg0KICAgIC5pbnB1dGZvcm0gPiAucm93IHsNCgkgICAgZGlzcGxheTpjb250ZW50czsNCiAgICB9DQoJCQkNCiAgICAuaW5wdXRmb3JtID4gLnJvdyA+IGRpdiB7DQoJICAgIGdyaWQtY29sdW1uIDogMSAvIDM7DQogICAgfQ0KCQkJDQogICAgLmlucHV0Zm9ybSA+IC5yb3cgPiBsYWJlbCtkaXYgew0KCSAgICBncmlkLWNvbHVtbjogMiAvIDM7DQogICAgfQ0KDQogICAgLmlucHV0Zm9ybSBsYWJlbCtkaXYgPiBkaXYrZGl2IHsNCgkgICAgbWFyZ2luLXRvcDo0cHg7DQogICAgfQ0KDQogICAgLyogbW9kYWwgc3R5bGVzICovDQogICAgLm1vZGFsLWRpYWxvZy5BZ2VuZGFJdGVtRGV0YWlsc01vZGFsIHsNCiAgICAgICAgbWF4LXdpZHRoOiAxMDAwcHg7DQogICAgfQ0KDQogICAgLkFnZW5kYUl0ZW1EZXRhaWxzTW9kYWwgLm1vZGFsLWNvbnRlbnQgew0KICAgICAgICBtYXgtaGVpZ2h0Ojkwdmg7DQogICAgICAgIG92ZXJmbG93OmhpZGRlbjsNCiAgICB9DQoNCiAgICAuQWdlbmRhSXRlbURldGFpbHNNb2RhbCAubW9kYWwtY29udGVudCAubW9kYWwtYm9keSB7DQogICAgICAgIG92ZXJmbG93LXk6YXV0bzsNCiAgICB9DQoNCiAgICAuQWdlbmRhSXRlbURldGFpbHNNb2RhbCAuZGVzY3JpcHRpb24gew0KICAgICAgICBtYXgtaGVpZ2h0OjEwZW07DQogICAgICAgIG92ZXJmbG93LXk6YXV0bzsNCiAgICB9DQoNCiAgICAuVm90ZVJlc3VsdHNNb2RhbCAuVGV4dCB7DQogICAgICAgIHBhZGRpbmc6IDJweCAwIDE4cHg7DQogICAgfQ0KDQogICAgLlZvdGVSZXN1bHRzTW9kYWwgLkJhbm5lciB7DQogICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7DQogICAgICAgIHBhZGRpbmc6NXB4Ow0KICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgfQ0KDQogICAgLlZvdGVzIC5Wb3RlSGVhZGVyIHsNCiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7DQogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICAgICAgcGFkZGluZzogMTBweDsNCiAgICB9DQoNCiAgICAuVm90ZXMgLlZvdGVycyB7DQogICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzMlIG1pbm1heCgwLCAzNCUpIDMzJTsNCiAgICAgICAgZ3JpZC1nYXA6IDEwcHg7DQogICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTsNCiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZjdmN2Y3Ow0KICAgIH0NCg0KICAgIGgzLm1vZGFsLXRpdGxlIHsNCiAgICAgICAgZm9udC1zaXplOjE3cHg7DQogICAgfQ0KDQogICAgI0xlZ2lzbGF0aW9uU3VwcG9ydGluZ0RvY3VtZW50c0xpc3QgPiBkaXYgew0KICAgICAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdGQgew0KICAgICAgICBjdXJzb3I6cG9pbnRlcjsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdHIuc2VsZWN0ZWQgdGQgew0KICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgYmxhY2s7DQogICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBibGFjazsNCiAgICB9DQoNCiAgICAjTGVnaXNsYXRpb25IaXN0b3J5VGFibGUgdHIuc2VsZWN0ZWQgPiA6Zmlyc3QtY2hpbGQgew0KICAgICAgICBib3JkZXItbGVmdDoxcHggc29saWQgYmxhY2s7DQogICAgfQ0KDQogICAgI0xlZ2lzbGF0aW9uSGlzdG9yeVRhYmxlIHRyLnNlbGVjdGVkID4gOmxhc3QtY2hpbGQgew0KICAgICAgICBib3JkZXItcmlnaHQ6MXB4IHNvbGlkIGJsYWNrOw0KICAgIH0NCjwvc3R5bGU+DQoNCjxkaXYgaWQ9IlZvdGVDb250YWluZXJUZW1wbGF0ZSIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+DQogICAgPGRpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iVm90ZUhlYWRlciI+PHNwYW4gY2xhc3M9IlZvdGUiPjwvc3Bhbj4gKCA8c3BhbiBjbGFzcz0iY291bnQiPjA8L3NwYW4+ICk8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0iVm90ZXJzIj48L2Rpdj4NCiAgICA8L2Rpdj4NCjwvZGl2Pg0KDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgdmFyIEFnZW5kYUl0ZW1zd2l0aEhpc3RvcnkgPSBbXTsNCg0KICAgICQoImRvY3VtZW50IikucmVhZHkoZnVuY3Rpb24oKSB7DQogICAgICAgIC8vIGFkZCBhZ2VuZGEgaXRlbSBoaXN0b3J5IGxpbmtzIGR5bmFtaWNhbGx5IHRvIHRoZSBhZ2VuZGEgLy8NCiAgICAgICAgJC5lYWNoKEFnZW5kYUl0ZW1zd2l0aEhpc3RvcnksIGZ1bmN0aW9uKGksIHYpIHsNCiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgaWNvbiAvLw0KICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW0iICsgdiArICIgLkFnZW5kYUl0ZW1JY29ucyIpLmZpbmQoIi5BZ2VuZGFJdGVtSGlzdG9yeUxpbmsiKS5yZW1vdmUoKTsNCg0KICAgICAgICAgICAgLy8gYWRkIGljb24gLy8NCiAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtIiArIHYgKyAiIC5BZ2VuZGFJdGVtSWNvbnMiKS5hcHBlbmQoDQogICAgICAgICAgICAgICAgJCgnPGEgaHJlZj0iIj4nKQ0KICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoIkFnZW5kYUl0ZW1IaXN0b3J5TGluayIpDQogICAgICAgICAgICAgICAgICAgIC5hdHRyKCJpdGVtaWQiLCB2KQ0KICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCc8aSBjbGFzcz0ibGFzIGxhLWhpc3RvcnkiPjwvaT4nKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJCgiLkFnZW5kYUl0ZW1IaXN0b3J5TGluayIpLmNsaWNrKGZ1bmN0aW9uKGUpew0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICBBZ2VuZGFJdGVtSGlzdG9yeS5EaWFsb2cuT3BlbignJywgJCh0aGlzKS5hdHRyKCJpdGVtaWQiKSk7DQogICAgICAgIH0pOw0KICAgIH0pOw0KPC9zY3JpcHQ+DQoNCg0KDQogICAgPCEtLSBCb290c3RyYXAgTW9kYWwgLS0+DQogICAgPGRpdiBpZD0nYm9vdHN0cmFwTW9kYWwnIGNsYXNzPSdtb2RhbCBmYWRlIGluJyByb2xlPSJkaWFsb2ciIGFyaWEtaGlkZGVuPSJ0cnVlIiBzdHlsZT0nZGlzcGxheTogbm9uZTsnPg0KICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLXNjcm9sbGFibGUnPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0nbW9kYWwtY29udGVudCc+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbW9kYWwtaGVhZGVyJz4NCiAgICAgICAgICAgICAgICAgICAgPGgyIGlkPSdib290c3RyYXBNb2RhbFRpdGxlJyBjbGFzcz0nbW9kYWwtdGl0bGUnIHN0eWxlPSdmb250LXNpemU6IDE3cHgnPlRpdGxlPC9oMj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSdjbG9zZScgZGF0YS1kaXNtaXNzPSdtb2RhbCc+PHNwYW4gYXJpYS1oaWRkZW49J3RydWUnPsOXPC9zcGFuPiA8c3BhbiBjbGFzcz0nc3Itb25seSc+Y2xvc2Ugc2hhcmUgbWVldGluZyBwb3B1cDwvc3Bhbj48L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSdib290c3RyYXBNb2RhbEJvZHknIGNsYXNzPSdtb2RhbC1ib2R5JyBzdHlsZT0icGFkZGluZzogMHB4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nZW1iZWQtcmVzcG9uc2l2ZSB6LWRlcHRoLTEtaGFsZicgaWQ9Im1vZGFsSWZyYW1lRGl2Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxpZnJhbWUgaWQ9Im1vZGFsSWZyYW1lIiB0aXRsZT0iU2hhcmUgQ29udGVudCBPcHRpb25zIiBjbGFzcz0nZW1iZWQtcmVzcG9uc2l2ZS1pdGVtJyBzcmM9JycgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInIGlkPSJib290c3RyYXBNb2RhbEZvb3RlciIgc3R5bGU9J21hcmdpbi10b3A6IDA7Jz4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiIGZvcm09ImFzcG5ldEZvcm0iIHZhbHVlPSJTdWJtaXQiPlN1Ym1pdDwvYnV0dG9uPg0KICAgIDwvbWFpbj4NCg0KICAgIDwvZGl2Pg0KDQogICAgPCEtLTxzY3JpcHQgdHlwZT0ndGV4dC9qYXZhc2NyaXB0JyBzcmM9J1NjcmlwdHNcZnVsbGNhbGVuZGFyXGxpYlxtYWluLmpzJz48L3NjcmlwdD4tLT4NCiAgICANCiAgICA8c2NyaXB0Pg0KDQogICAgICAgIHZhciBtaW5jb3VudCA9IDIwOw0KICAgICAgICB2YXIgbWF4Y291bnQgPSA0MDsNCiAgICAgICAgdmFyIGxhc3RTY3JvbGxUb3AgPSAwOw0KICAgICAgICB2YXIgaXNSZWFjaE1heFJlY29yZCA9IGZhbHNlOw0KICAgICAgICAvL2NvbW1lbnQgb3V0IGZha2UgbGF6eSBsb2FkaW5nIGNvZGUNCiAgICAgICAgLy8kKCIubWVldGluZ0RldGFpbHMiKS5zbGljZSg0MCkuaGlkZSgpOw0KDQogICAgICAgIC8vIElzTGlzdFZpZXcuQ2xpZW50SWQgdmFsdWVzIC8vDQogICAgICAgIHZhciBWaWV3ID0gew0KICAgICAgICAgICAgc2V0IEN1cnJlbnQoaWQpIHsNCiAgICAgICAgICAgICAgICAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfSXNMaXN0VmlldycpLnZhbChpZCk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgZ2V0IEN1cnJlbnQoKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuICQoJyNjdGwwMF9NYWluQ29udGVudF9Jc0xpc3RWaWV3JykudmFsKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgVmlld3MgPSB7DQogICAgICAgICAgICAiQ2FsZW5kYXIiIDogIjAiLA0KICAgICAgICAgICAgIkxpc3QiIDogIjEiLA0KICAgICAgICAgICAgIkNvbmZsaWN0cyIgOiAiMiIsDQogICAgICAgICAgICAiTWVyZ2VkIiA6ICIzIiwNCiAgICAgICAgICAgICJMZWdpc2xhdGlvbiIgOiAiNCIsDQogICAgICAgICAgICAiQWdlbmRhSXRlbUhpc3RvcnkiIDogIjUiDQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBpZnJhbWVMb2FkZWQoaWZyYW1lSGVpZ2h0KSB7DQogICAgICAgICAgICB2YXIgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpOw0KDQogICAgICAgICAgICBpZiAoaWZyYW1lSGVpZ2h0ID4gd2luZG93SGVpZ2h0KSB7DQogICAgICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9ICh3aW5kb3dIZWlnaHQgLSAxODUpICsgInB4IjsNCiAgICAgICAgICAgICAgICAkKCcjbW9kYWxJZnJhbWVEaXYnKS5oZWlnaHQobmV3SGVpZ2h0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIHZhciBuZXdIZWlnaHQgPSBpZnJhbWVIZWlnaHQgKyAicHgiOw0KICAgICAgICAgICAgICAgICQoJyNtb2RhbElmcmFtZURpdicpLmhlaWdodChuZXdIZWlnaHQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBzdGlja3lIZWFkZXIoKTsNCg0KICAgICAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSArIHdpbmRvdy5pbm5lckhlaWdodCA+PSAkKGRvY3VtZW50KS5oZWlnaHQoKSAtIDUwKSB7DQogICAgICAgICAgICAgICAgaWYgKCQoJyNidG5MaXN0VmlldycpLmhhc0NsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKSkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgYnRuU2hvd01vcmVJZCA9ICdjdGwwMF9NYWluQ29udGVudF9idG5TaG93TW9yZSc7DQogICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKHNjcm9sbFRvcCA+IGxhc3RTY3JvbGxUb3AgJiAhaXNSZWFjaE1heFJlY29yZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnI21hc3RlclBhZ2VIZWFkZXInKS5jc3MoIm92ZXJmbG93LXkiLCAiaGlkZGVuIik7DQogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChidG5TaG93TW9yZUlkKS5jbGljaygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy9jb21tZW50IG91dCBmYWtlIGxhenkgbG9hZGluZyBjb2RlDQogICAgICAgICAgICAgICAgICAgICAgICAvLyQoIi5tZWV0aW5nRGV0YWlscyIpLnNsaWNlKG1pbmNvdW50LCBtYXhjb3VudCkuZmFkZUluKDEwMDApOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy9taW5jb3VudCA9IG1pbmNvdW50ICsgMjA7DQogICAgICAgICAgICAgICAgICAgICAgICAvL21heGNvdW50ID0gbWF4Y291bnQgKyAyMDsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsVG9wID0gc2Nyb2xsVG9wIDw9IDAgPyAwIDogc2Nyb2xsVG9wOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdmFyIHBhcmVudHdpZHRoID0gJCgiLnBhcmVudCIpLndpZHRoKCk7DQogICAgICAgICAgICAkKCIuY2hpbGQiKS53aWR0aChwYXJlbnR3aWR0aCk7DQogICAgICAgIH0pOw0KDQogICAgICAgIHZhciBjYWNoZWRNZWV0aW5nc0J5VHlwZSA9IHt9Ow0KICAgICAgICB2YXIgU2VsZWN0ZWRZZWFyID0gMDsNCiAgICAgICAgdmFyIHRleHQgPSB7DQogICAgICAgICAgICBWaWV3OiAnVmlldycsDQogICAgICAgICAgICBDYW5jZWxsZWQ6ICdNZWV0aW5nIENhbmNlbGxlZCcNCiAgICAgICAgfTsNCg0KICAgICAgICAkKCcuc2tpcC10by1jb250ZW50LWxpbmsnKS5jbGljayhmdW5jdGlvbihldmVudCl7DQogICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24uaHJlZiArICIjbWFpbmNvbnRlbnQiOw0KICAgICAgICAgICAgbGV0IGdldElEID0gd2luZG93LmxvY2F0aW9uLmhyZWY7DQogICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBnZXRJRC5yZXBsYWNlKCcjbWFpbmNvbnRlbnQnLCAnJykpOw0KICAgICAgICB9KTsNCg0KICAgICAgICBmdW5jdGlvbiBTZWxlY3RZZWFyT3B0aW9uICgpIHsNCiAgICAgICAgICAgIHZhciBvcHRpb25TZWxlY3RlZCA9ICQoIm9wdGlvbjpzZWxlY3RlZCIsIHRoaXMpOw0KICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhvcHRpb25TZWxlY3RlZFswXS5nZXRBdHRyaWJ1dGUoImRhdGEteWVhciIpKTsNCiAgICAgICAgICAgIGlmKG9wdGlvblNlbGVjdGVkLmxlbmd0aCA+IDApew0KICAgICAgICAgICAgICAgIHZhciBTZWxlY3RlZFllYXJJdGVtID0gb3B0aW9uU2VsZWN0ZWRbMF0uZ2V0QXR0cmlidXRlKCJkYXRhLXllYXIiKTsNCiAgICAgICAgICAgICAgICBTZWxlY3RlZFllYXIgPSBTZWxlY3RlZFllYXJJdGVtOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCJvcHRpb25bZGF0YS15ZWFyPSIgKyBTZWxlY3RlZFllYXIgKyAiXSIpLnByb3AoInNlbGVjdGVkIiwgdHJ1ZSk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBlbXB0eVllYXIgPSB0cnVlOw0KICAgICAgICAgICAgJC5lYWNoKCQoIi5NZWV0aW5nVHlwZUxpc3QiKSwgZnVuY3Rpb24gKGksIHYpIHsNCiAgICAgICAgICAgICAgICBlbXB0eVllYXIgPSAoJCh0aGlzKS5maW5kKCIuWWVhciIgKyBTZWxlY3RlZFllYXIpLnRleHQoKSAhPSAnMCcgPyBmYWxzZSA6IGVtcHR5WWVhcik7DQogICAgICAgICAgICAgICAgaWYoIWVtcHR5WWVhcil7IHJldHVybiBmYWxzZTsgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGlmIChlbXB0eVllYXIpew0KICAgICAgICAgICAgICAgIFNlbGVjdGVkWWVhciA9ICIwIjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJCgiLlllYXIsIC5ZZWFyMCIpLmhpZGUoKTsNCg0KICAgICAgICAgICAgJCgiLlllYXIiICsgU2VsZWN0ZWRZZWFyKS5zaG93KCk7DQogICAgICAgICAgICAvKg0KICAgICAgICAgICAgaWYgKFNlbGVjdGVkWWVhckl0ZW0gPT0gbnVsbCB8fCBTZWxlY3RlZFllYXJJdGVtLmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgICAgICAgJCgiLlNlbGVjdGVkWWVhciIpLmh0bWwoU2VsZWN0ZWRZZWFyICsgIiZuYnNwOygwKSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgJCgiLlNlbGVjdGVkWWVhciIpLmh0bWwoU2VsZWN0ZWRZZWFySXRlbS50ZXh0KCkpOw0KICAgICAgICAgICAgfSovDQoNCiAgICAgICAgICAgICQuZWFjaCgkKCIuTWVldGluZ1R5cGVMaXN0IiksIGZ1bmN0aW9uIChpLCB2KSB7DQogICAgICAgICAgICAgICAgdmFyIG10ID0gJCh0aGlzKTsNCiAgICAgICAgICAgICAgICB2YXIgaGVhZCA9IG10LmZpbmQoIi5ZZWFyIiArIFNlbGVjdGVkWWVhcik7DQoNCiAgICAgICAgICAgICAgICBpZiAoaGVhZCA9PSBudWxsIHx8IGhlYWQubGVuZ3RoID09IDAgfHwgaGVhZC50ZXh0KCkgPT0gIjAiKSB7DQogICAgICAgICAgICAgICAgICAgIG10LmhpZGUoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIG10LnNob3coKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOw0KICAgICAgICAgICAgaWYgKFNlbGVjdGVkWWVhciA9PSBudWxsIHx8IFNlbGVjdGVkWWVhciA9PSAwKSB7DQogICAgICAgICAgICAgICAgdXJsID0gVXBkYXRlUXVlcnkoIlllYXIiLCAnJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICB1cmwgPSBVcGRhdGVRdWVyeSgiWWVhciIsIFNlbGVjdGVkWWVhcik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiAhPSB1cmwpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsICcnLCB1cmwpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJCgiI1llYXJGaWx0ZXJMaXN0IikuaGlkZSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJCgiLlllYXJGaWx0ZXJPcHRpb24iKS5vbignY2hhbmdlJywgU2VsZWN0WWVhck9wdGlvbik7DQogICAgICAgICQoJyNQYXN0TWVldGluZ1R5cGVzQWNjb3JkaWFuJykub24oJ2hpZGRlbi5icy5jb2xsYXBzZScsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIFNpemVfQ2hhbmdlZCgpOw0KICAgICAgICAgICAgJCgnI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4gLmNvbGxhcHNlLnNob3cnKS5yZW1vdmVDbGFzcygic2hvdyIpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbicpLm9uKCdzaG93bi5icy5jb2xsYXBzZScsIGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICBTaXplX0NoYW5nZWQoKTsNCiAgICAgICAgICAgIHZhciBtdCA9ICQoZS50YXJnZXQpLmZpbmQoIi5wYW5lbC1jb250ZW50cyIpLmF0dHIoIk1lZXRpbmdUeXBlIik7DQogICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsICcnLCBVcGRhdGVRdWVyeSgnRXhwYW5kZWQnLCBtdCkpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCcjUGFzdE1lZXRpbmdUeXBlc0FjY29yZGlhbicpLm9uKCdzaG93LmJzLmNvbGxhcHNlJywgZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgIHZhciBtdCA9ICQoZS50YXJnZXQpLmZpbmQoIi5wYW5lbC1jb250ZW50cyIpLmF0dHIoIk1lZXRpbmdUeXBlIik7DQogICAgICAgICAgICBMb2FkTWVldGluZ1R5cGUobXQsIHRydWUpOw0KICAgICAgICAgICAgJCgiI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4gLmNvbGxhcHNlLmluIikuY29sbGFwc2UoImhpZGUiKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJCgnI1Bhc3RNZWV0aW5nVHlwZXNBY2NvcmRpYW4nKS5vbignaGlkZS5icy5jb2xsYXBzZScsIGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsICcnLCBVcGRhdGVRdWVyeSgnRXhwYW5kZWQnLCAnJykpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCIuUGFzdE1lZXRpbmdUeXBlc05hbWUiKS5jbGljayhmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICB9KTsNCg0KICAgICAgICAkKCJbZGF0YS10b2dnbGUtaWRdIikub24oInNob3duLmJzLmNvbGxhcHNlIixmdW5jdGlvbigpew0KICAgICAgICAgICAgdGFyZ2V0PSQoIltkYXRhLXRhcmdldD0nIiArICQodGhpcykuYXR0cigiZGF0YS10b2dnbGUtaWQiKSArICInXSIpOw0KICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUNsYXNzKCJjb2xsYXBzZWQiKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgJCgiW2RhdGEtdG9nZ2xlLWlkXSIpLm9uKCJoaWRkZW4uYnMuY29sbGFwc2UiLGZ1bmN0aW9uKCl7DQogICAgICAgICAgICB0YXJnZXQ9JCgiW2RhdGEtdGFyZ2V0PSciICsgJCh0aGlzKS5hdHRyKCJkYXRhLXRvZ2dsZS1pZCIpICsgIiddIik7DQogICAgICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoImNvbGxhcHNlZCIpOw0KICAgICAgICB9KTsNCg0KICAgICAgICBmdW5jdGlvbiBTaG93RG93bkljb24oKQ0KICAgICAgICB7DQogICAgICAgICAgICAkKCIjUmlnaHRJY29uIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI0Rvd25JY29uIikuc2hvdygpOw0KDQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBTaG93UmlnaHRJY29uKCkNCiAgICAgICAgew0KICAgICAgICAgICAgJCgiI1JpZ2h0SWNvbiIpLnNob3coKTsNCiAgICAgICAgICAgICQoIiNEb3duSWNvbiIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNEb3duSWNvbiIpLmNzcygiZGlzcGxheSIsIGJsb2NrKTsNCiAgICAgICAgfQ0KDQoNCiAgICAgICAgZnVuY3Rpb24gTG9hZE1lZXRpbmdUeXBlKG10LCByZW5kZXIsIGNiKSB7DQogICAgICAgICAgICAvLyQoJyNjdGwwMF9NYWluQ29udGVudF9NZWV0aW5nTGlzdFVwZGF0ZVByb2dyZXNzJykuc2hvdygpOw0KICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9ICQoIltNZWV0aW5nVHlwZT0nIiArIG10LnJlcGxhY2UoLycvZywgJ1xcXCcnKSArICInXSIpOw0KDQogICAgICAgICAgICBpZiAoIWNvbnRhaW5lci5oYXNDbGFzcygiTG9hZGVkIiArIFNlbGVjdGVkWWVhcikgJiYgIWNvbnRhaW5lci5oYXNDbGFzcygiTG9hZGluZyIgKyBTZWxlY3RlZFllYXIpKSB7DQogICAgICAgICAgICAgICAgY29udGFpbmVyLmFkZENsYXNzKCJMb2FkaW5nIiArIFNlbGVjdGVkWWVhcik7DQoNCiAgICAgICAgICAgICAgICAkLmFqYXgoew0KICAgICAgICAgICAgICAgICAgICB0eXBlOiAiUE9TVCIsDQogICAgICAgICAgICAgICAgICAgIHVybDogIk1lZXRpbmdzQ2FsZW5kYXJWaWV3LmFzcHgvUGFzdE1lZXRpbmdzIiArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gsDQogICAgICAgICAgICAgICAgICAgIGRhdGE6ICJ7dHlwZTogJyIgKyBtdC5yZXBsYWNlKC8nL2csICdcXFwnJykgKyAiJ30iLA0KICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLTgiLA0KICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLA0KICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAobXNnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRNZWV0aW5nc0J5VHlwZVttdF0gPSBHZXRNZXJnZWRNZWV0aW5ncyhtc2cuZCwgY29udGFpbmVyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGNhY2hlZE1lZXRpbmdzQnlUeXBlW210XSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF6eUxvYWRBdHRhY2htZW50cygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0ZW5MaW5rTmFtZXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkQ2xhc3MoIlJlbmRlcmVkIiArIFNlbGVjdGVkWWVhcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0WWVhck9wdGlvbigpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkQ2xhc3MoIkxvYWRlZCIgKyBTZWxlY3RlZFllYXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNsYXNzKCJMb2FkaW5nIiArIFNlbGVjdGVkWWVhcik7DQogICAgICAgICAgICAgICAgICAgICAgICBMb2FkaW5nT3ZlcmxheS5IaWRlKGNvbnRhaW5lci5wYXJlbnQoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKHJlbmRlciAmJiAhY29udGFpbmVyLmhhc0NsYXNzKCJSZW5kZXJlZCIgKyBTZWxlY3RlZFllYXIpKSB7DQogICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChjYWNoZWRNZWV0aW5nc0J5VHlwZVttdF0pOw0KICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDbGFzcygiUmVuZGVyZWQiICsgU2VsZWN0ZWRZZWFyKTsNCiAgICAgICAgICAgICAgICBTZWxlY3RZZWFyT3B0aW9uKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZiAoY2IpIHsNCiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2IsIDEwMCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLy8kKCcjY3RsMDBfTWFpbkNvbnRlbnRfTWVldGluZ0xpc3RVcGRhdGVQcm9ncmVzcycpLmhpZGUoKTsNCiAgICAgICAgfQ0KICAgICAgICAkKHdpbmRvdykub24oInJlc2l6ZSIsIGZ1bmN0aW9uICgpIHtTaXplX0NoYW5nZWQoKTsgfSkNCg0KICAgICAgICBmdW5jdGlvbiBVcGRhdGVRdWVyeShwYXJhbWV0ZXIsIHZhbHVlKSB7DQogICAgICAgICAgICB2YXIgbG9jID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaDsNCg0KICAgICAgICAgICAgaWYgKGxvYy5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWYgKyAiPyIgKyBwYXJhbWV0ZXIgKyAiPSIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIGlmIChsb2NbMF0gPT0gJz8nKSB7DQogICAgICAgICAgICAgICAgICAgIGxvYyA9IGxvYy5zdWJzdHJpbmcoMSk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IGxvYy5zcGxpdCgnJicpOw0KDQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tpXS5zdGFydHNXaXRoKHBhcmFtZXRlciArICc9JykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUudG9TdHJpbmcoKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2ldID0gcGFyYW1ldGVyICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tpXSA9ICcnOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKGZvdW5kID09IGZhbHNlICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUudG9TdHJpbmcoKS5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtZXRlciArICc9JyArIHZhbHVlKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB2YXIgcXMgPSAnJzsNCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2ldLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxcy5sZW5ndGggPT0gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFzID0gIj8iICsgcGFyYW1zW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcXMgKz0gIiYiICsgcGFyYW1zW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKCI/IiArIGxvYywgcXMpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmOw0KICAgICAgICB9DQoNCiAgICAgICAgU2VsZWN0WWVhck9wdGlvbigpOw0KDQogICAgICAgIHZhciBMb2FkaW5nT3ZlcmxheSA9IHsNCiAgICAgICAgICAgIFNob3c6IGZ1bmN0aW9uIChFbGVtZW50KSB7DQogICAgICAgICAgICAgICAgdmFyIExvYWRpbmdEaXYgPSAkKCI8ZGl2Lz4iKS5hZGRDbGFzcygiTG9hZGluZ0Rpdk92ZXJsYXkiKTsNCiAgICAgICAgICAgICAgICB2YXIgTG9hZGluZ0RpdkltYWdlID0gJCgiPGltZyBzcmM9J19sYXlvdXRzL2ltYWdlcy9nZWFyc19hbnY0LmdpZicvPiIpLmFkZENsYXNzKCJMb2FkaW5nRGl2SW1hZ2UiKTsNCg0KICAgICAgICAgICAgICAgICQoRWxlbWVudCkuYXBwZW5kKExvYWRpbmdEaXYsIExvYWRpbmdEaXZJbWFnZSk7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgSGlkZTogZnVuY3Rpb24gKEVsZW1lbnQpIHsNCiAgICAgICAgICAgICAgICAkKEVsZW1lbnQpLmZpbmQoIi5Mb2FkaW5nRGl2T3ZlcmxheSwgLkxvYWRpbmdEaXZJbWFnZSIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KDQogICAgICAgIGZ1bmN0aW9uIExvYWRNZWV0aW5nVHlwZXMoY29udGFpbmVycykgew0KICAgICAgICAgICAgaWYgKGNvbnRhaW5lcnMubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgIHZhciBtdCA9ICQoY29udGFpbmVycy5zaGlmdCgpKS5hdHRyKCJNZWV0aW5nVHlwZSIpOw0KICAgICAgICAgICAgICAgIExvYWRNZWV0aW5nVHlwZShtdCwgZmFsc2UsIGZ1bmN0aW9uICgpIHsgTG9hZE1lZXRpbmdUeXBlcyhjb250YWluZXJzKTsgfSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvL3ZhciBtdHMgPSAkLm1ha2VBcnJheSgkKCJbTWVldGluZ1R5cGVdIikpOw0KICAgICAgICAvL0xvYWRNZWV0aW5nVHlwZXMobXRzKTsNCg0KICAgICAgICBmdW5jdGlvbiBzdGlja3lIZWFkZXIoKSB7DQogICAgICAgICAgICB2YXIgc3RpY2t5ID0gJCgiLmNoaWxkIilbMF0ub2Zmc2V0VG9wOw0KICAgICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA+IHN0aWNreSkgew0KICAgICAgICAgICAgICAgIHZhciBwYXJlbnR3aWR0aCA9ICQoIi5wYXJlbnQiKS53aWR0aCgpOw0KICAgICAgICAgICAgICAgICQoIi5jaGlsZCIpLndpZHRoKHBhcmVudHdpZHRoKTsNCiAgICAgICAgICAgICAgICAkKCIuY2hpbGQiKS5hZGRDbGFzcygiZml4ZWQiKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJCgiLmNoaWxkIikucmVtb3ZlQ2xhc3MoImZpeGVkIik7DQogICAgICAgICAgICAgICAgJCgiLmNoaWxkIikucmVtb3ZlQXR0cigic3R5bGUiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICQoJy5oYXMtY2xlYXIgaW5wdXRbdHlwZT0idGV4dCJdJykub24oJ2lucHV0IHByb3BlcnR5Y2hhbmdlJywgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTsNCiAgICAgICAgICAgIHZhciB2aXNpYmxlID0gQm9vbGVhbigkdGhpcy52YWwoKSk7DQogICAgICAgICAgICAkdGhpcy5zaWJsaW5ncygnLmZvcm0tY29udHJvbC1jbGVhcicpLnRvZ2dsZUNsYXNzKCdoaWRkZW4nLCAhdmlzaWJsZSk7DQogICAgICAgIH0pLnRyaWdnZXIoJ3Byb3BlcnR5Y2hhbmdlJyk7DQoNCiAgICAgICAgJCgnLmZvcm0tY29udHJvbC1jbGVhcicpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoJ2lucHV0W3R5cGU9InRleHQiXScpLnZhbCgnJykNCiAgICAgICAgICAgICAgLnRyaWdnZXIoJ3Byb3BlcnR5Y2hhbmdlJykuZm9jdXMoKTsNCiAgICAgICAgICAgICQoJyN0YWJsZS1jb25mbGljdHMtbGlzdCcpLkRhdGFUYWJsZSgpLnNlYXJjaCgkKHRoaXMpLnZhbCgpKS5kcmF3KCk7DQogICAgICAgIH0pOw0KDQogICAgICAgICQoJy5jb250cm9sLWNsZWFyJykuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgaWYgKCQodGhpcykuc2libGluZ3MoJ2lucHV0W3R5cGU9InRleHQiXScpWzBdLmlkID09ICdjdGwwMF9NYWluQ29udGVudF9GaWx0ZXJCeURhdGUnKSB7DQogICAgICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X0lzRGF0ZUZpbHRlciIpLnZhbCgiMCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKCQodGhpcykuc2libGluZ3MoJ2lucHV0W3R5cGU9InRleHQiXScpLnZhbCgpICE9ICIiKSB7DQogICAgICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X0lzQ2hhbmdlRmlsdGVyIikudmFsKCIxIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkKHRoaXMpLnNpYmxpbmdzKCdpbnB1dFt0eXBlPSJ0ZXh0Il0nKS52YWwoJycpOw0KICAgICAgICB9KTsNCg0KICAgICAgICBmdW5jdGlvbiBSZXNldEZpbHRlcnMoKSB7DQogICAgICAgICAgICBkZWxldGVDb29raWUoIkZpbHRlckRhdGUiKTsNCiAgICAgICAgICAgIGRlbGV0ZUNvb2tpZSgiTWVldGluZ1R5cGVGaWx0ZXIiKTsNCiAgICAgICAgICAgIGRlbGV0ZUNvb2tpZSgiS2V5d29yZCIpOw0KICAgICAgICAgICAgZGVsZXRlQ29va2llKCJDb25mbGljdE1lbWJlciIpOw0KICAgICAgICAgICAgZGVsZXRlQ29va2llKCJJdGVtSGlzdG9yeVN0YWdlIik7DQogICAgICAgICAgICBkZWxldGVDb29raWUoIkl0ZW1IaXN0b3J5U3RhdHVzIik7DQogICAgICAgICAgICBkZWxldGVDb29raWUoIkl0ZW1IaXN0b3J5RGVwYXJ0bWVudHMiKTsNCiAgICAgICAgICAgICQoJyNjdGwwMF9NYWluQ29udGVudF9NZWV0aW5nTGlzdFVwZGF0ZVByb2dyZXNzJykuc2hvdygpOw0KICAgICAgICAgICAgdmFyIHVybCA9ICIiOw0KICAgICAgICAgICAgaWYgKCFsb2NhdGlvbi5zZWFyY2ggfHwgbG9jYXRpb24uc2VhcmNoLmxlbmd0aCA8PSAwKXsNCiAgICAgICAgICAgICAgICB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdXJsID0gbG9jYXRpb24uc2VhcmNoOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsLCdfc2VsZicpOw0KICAgICAgICB9DQogICAgICAgIGZ1bmN0aW9uIENoYW5nZUZpbHRlckZsYWcoKSB7DQogICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNDaGFuZ2VGaWx0ZXIiKS52YWwoIjEiKTsNCiAgICAgICAgfQ0KICAgICAgICBmdW5jdGlvbiBBcHBseUZpbHRlckNoYW5nZXMoKSB7DQogICAgICAgICAgICB2YXIgc2VsZWN0ZWRUYWIgPSBnZXRDb29raWUoJ0N1cnJlbnRUYWInKTsNCg0KICAgICAgICAgICAgaWYgKCQoJyNjdGwwMF9NYWluQ29udGVudF90eHRTZWFyY2gnKS52YWwoKSAhPSAiIiAmJiBWaWV3LkN1cnJlbnQgIT0gIjIiKSB7DQogICAgICAgICAgICAgICAgJCgiI2J0bkZpbHRlclJlc3VsdHMiKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWRUYWIgPT0gImNvbmZsaWN0Iikgew0KICAgICAgICAgICAgICAgICQoIiNidG5GdW5uZWxGaWx0ZXJSZXN1bHRzIikuY2xpY2soKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdGVkVGFiID09ICdhZ2VuZGFJdGVtSGlzdG9yeScpIHsNCiAgICAgICAgICAgICAgICBsb2FkQWdlbmRhSXRlbUhpc3RvcnlEYXRhKHRydWUpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0ZpbHRlclJlc3VsdHMnKS5jbGljaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X0lzQ2hhbmdlRmlsdGVyIikudmFsKCIwIik7DQoNCiAgICAgICAgICAgIGxhenlMb2FkQXR0YWNobWVudHMoKTsNCiAgICAgICAgICAgIHNob3J0ZW5MaW5rTmFtZXMoKTsNCiAgICAgICAgfQ0KICAgIDwvc2NyaXB0Pg0KDQogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KICAgICAgICBmdW5jdGlvbiBwb3N0YmFja0J1dHRvbkNsaWNrKCkgew0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5RGF0ZSA9ICQoJyNjdGwwMF9NYWluQ29udGVudF9GaWx0ZXJCeURhdGUnKS52YWwoKTsNCiAgICAgICAgICAgIHZhciBmaWx0ZXJieU1lZXRpbmdUeXBlID0gJCgiI2N0bDAwX01haW5Db250ZW50X2xibE11bHRpU2VsZWN0IikudmFsKCk7DQogICAgICAgICAgICB2YXIgbWVldGluZ1R5cGUgPSBbXTsNCiAgICAgICAgICAgICQoIi5NZWV0aW5nVHlwZUxpc3Rib3ggKiAuc3MtdmFsdWUtdGV4dCIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICBtZWV0aW5nVHlwZS5wdXNoKCQodGhpcykudGV4dCgpKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBzZXRDb29raWUoIk1lZXRpbmdUeXBlRmlsdGVyIiwgbWVldGluZ1R5cGUuam9pbigifCIpKTsNCg0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5Q29uZmxpY3RNZW1iZXIgPSAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfbGJGaWx0ZXJCeUNvbmZsaWN0TWVtYmVyIikudmFsKCk7DQoNCiAgICAgICAgICAgIGlmICgoZmlsdGVyYnlNZWV0aW5nVHlwZSAhPSBudWxsICYmIGZpbHRlcmJ5TWVldGluZ1R5cGUubGVuZ3RoID4gMCkgfHwgKGZpbHRlckJ5Q29uZmxpY3RNZW1iZXIgIT0gbnVsbCAmJiBmaWx0ZXJCeUNvbmZsaWN0TWVtYmVyLmxlbmd0aCA+IDApIHx8IChmaWx0ZXJCeURhdGUgIT0gbnVsbCAmJiBmaWx0ZXJCeURhdGUgIT09ICIiKSl7DQogICAgICAgICAgICAgICAgJCgiI2J0bkZpbHRlciIpLmFwcGVuZCgiPHNwYW4gY2xhc3M9J2RvdCc+PC9zcGFuPiIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCIuZG90IikucmVtb3ZlKCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIA0KDQogICAgICAgICAgICBpZiAoZ2V0Q29va2llKCdDdXJyZW50VGFiJykgPT0gJ2NhbGVuZGFyJykgew0KICAgICAgICAgICAgICAgICQoIiNjYWxlbmRhciIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNhbGwtY29uZmxpY3RzLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1sZWdpc2xhdGlvbi1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNhbGwtbWVyZ2VkLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI3NlYXJjaHJlc3VsdHMiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2J0bk1lcmdlZExpc3RWaWV3IikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5MaXN0VmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuQ2FsZW5kYXJWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI21lcmdlZExpc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI3Bhc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiLkxlZ2lzbGF0aW9uSGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoZ2V0Q29va2llKCdDdXJyZW50VGFiJykgPT0gJ2xpc3QnKSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbGVuZGFyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxlZ2lzbGF0aW9uLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTGlzdFZpZXciKS5hZGRDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bk1lcmdlZExpc3RWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5QYXN0VmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuQ2FsZW5kYXJWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI21lcmdlZExpc3RIZWFkZXIiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI3Bhc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiLkxlZ2lzbGF0aW9uSGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoZ2V0Q29va2llKCdDdXJyZW50VGFiJykgPT0gJ21lcmdlZGxpc3QnKSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbGVuZGFyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxlZ2lzbGF0aW9uLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTWVyZ2VkTGlzdFZpZXciKS5hZGRDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bkxpc3RWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5QYXN0VmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuQ2FsZW5kYXJWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI21lcmdlZExpc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI3Bhc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiLkxlZ2lzbGF0aW9uSGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoZ2V0Q29va2llKCdDdXJyZW50VGFiJykgPT0gJ3Bhc3QnKSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbGVuZGFyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxlZ2lzbGF0aW9uLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjbWVyZ2VkLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI3NlYXJjaHJlc3VsdHMiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2J0bkNvbmZsaWN0c1ZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bkNhbGVuZGFyVmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTGlzdFZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bkxlZ2lzbGF0aW9uVmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTWVyZ2VkTGlzdFZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0blBhc3RWaWV3IikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI21lcmdlZExpc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI3Bhc3RIZWFkZXIiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiLnh0cmEtbGlzdHMiKS5jc3MoIm1hcmdpbi10b3AiLCAidW5zZXQiKTsNCiAgICAgICAgICAgICAgICAkKCIjUGFzdE1lZXRpbmdUaXRsZSIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIuTGVnaXNsYXRpb25IZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnZXRDb29raWUoJ0N1cnJlbnRUYWInKSA9PSAnY29uZmxpY3QnKSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbGVuZGFyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxlZ2lzbGF0aW9uLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuQ29uZmxpY3RzVmlldyIpLmFkZENsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuQ2FsZW5kYXJWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5MaXN0VmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTGVnaXNsYXRpb25WaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5NZXJnZWRMaXN0VmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfTW9udGhNZW51IikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNtZXJnZWRMaXN0SGVhZGVyIikuaGlkZSgpOw0KDQogICAgICAgICAgICAgICAgbG9hZENvbmZsaWN0RGF0YSh0cnVlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGdldENvb2tpZSgnQ3VycmVudFRhYicpID09ICdsZWdpc2xhdGlvbicpIHsNCiAgICAgICAgICAgICAgICBOYXZpZ2F0aW9uVGFiX0NsaWNrKCQoIiNidG5MZWdpc2xhdGlvblZpZXciKSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChnZXRDb29raWUoJ0N1cnJlbnRUYWInKSA9PSAnYWdlbmRhSXRlbUhpc3RvcnknKSB7DQogICAgICAgICAgICAgICAgTmF2aWdhdGlvblRhYl9DbGljaygkKCIjQWdlbmRhSXRlbUhpc3RvcnlWaWV3QnV0dG9uIikpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNDaGFuZ2VGaWx0ZXIiKS52YWwoIjAiKTsNCg0KICAgICAgICAgICAgJCgiI2J0bkxpc3RWaWV3IikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgJCgiI2J0bk1lcmdlZExpc3RWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgJCgiI2J0blBhc3RWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgJCgiI2J0bkNhbGVuZGFyVmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCg0KICAgICAgICAgICAgbGF6eUxvYWRBdHRhY2htZW50cygpOw0KICAgICAgICAgICAgc2hvcnRlbkxpbmtOYW1lcygpOw0KDQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHBvc3RiYWNrVGFiQ2xpY2soVmlldykgew0KDQogICAgICAgICAgICAkKCIuZmMtdG9vbGJhci1jaHVuayA+IC5mYy1idXR0b24sICNidG5MaXN0VmlldywgI2J0bkNhbGVuZGFyVmlldywgI2J0bkNvbmZsaWN0c1ZpZXcsICNidG5MZWdpc2xhdGlvblZpZXcsICNidG5NZXJnZWRMaXN0VmlldywgI0FnZW5kYUl0ZW1IaXN0b3J5Vmlld0J1dHRvbiwgI2J0blBhc3RWaWV3IikNCiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpDQogICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtcHJlc3NlZCIsICJmYWxzZSIpOw0KDQogICAgICAgICAgICAkKCIjY2FsZW5kYXIiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjYWxsLW1lcmdlZC1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNhbGwtbGVnaXNsYXRpb24tbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNhZ2VuZGFpdGVtaGlzdG9yeS1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI3NlYXJjaHJlc3VsdHMiKS5oaWRlKCk7DQoNCiAgICAgICAgICAgICQoIiNtZXJnZWRMaXN0SGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiLkxlZ2lzbGF0aW9uSGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW1IaXN0b3J5SGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI3Bhc3RIZWFkZXIiKS5oaWRlKCk7DQoNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeUtleXdvcmQiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjRmlsdGVyQnlDb25mbGljdE1lbWJlciIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeVN0YXR1cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeVN0YWdlIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI0ZpbHRlckJ5RGVwYXJ0bWVudCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5oaWRlKCk7DQoNCiAgICAgICAgICAgICQoIiNidG5GaWx0ZXIiKS5zaG93KCk7DQogICAgICAgICAgICBkZWxldGVDb29raWUoIk1lZXRpbmdUeXBlRmlsdGVyIik7DQoNCiAgICAgICAgICAgIGlmIChWaWV3ID09IFZpZXdzLkNhbGVuZGFyKSB7DQogICAgICAgICAgICAgICAgJCgiI2J0bkxpc3RWaWV3IikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5MaXN0VmlldyIpLmF0dHIoImFyaWEtcHJlc3NlZCIsICJ0cnVlIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChWaWV3ID09IFZpZXdzLkxpc3QpIHsNCiAgICAgICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNtZXJnZWRMaXN0SGVhZGVyIikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNidG5MaXN0VmlldyIpLmFkZENsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTGlzdFZpZXciKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAidHJ1ZSIpOw0KDQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIGlmIChWaWV3ID09IFZpZXdzLkNvbmZsaWN0cykgew0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWNvbmZsaWN0cy1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNGaWx0ZXJCeUNvbmZsaWN0TWVtYmVyIikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNGaWx0ZXJCeUtleXdvcmQiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2J0bkNvbmZsaWN0c1ZpZXciKS5hZGRDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bkNvbmZsaWN0c1ZpZXciKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoVmlldyA9PSBWaWV3cy5MZWdpc2xhdGlvbikgew0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuRmlsdGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNhbGwtbGVnaXNsYXRpb24tbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTGVnaXNsYXRpb25WaWV3IikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5MZWdpc2xhdGlvblZpZXciKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgICQoIi5MZWdpc2xhdGlvbkhlYWRlciIpLnNob3coKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYoVmlldyA9PSBWaWV3cy5BZ2VuZGFJdGVtSGlzdG9yeSkgew0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWdlbmRhaXRlbWhpc3RvcnktbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjQWdlbmRhSXRlbUhpc3RvcnlWaWV3QnV0dG9uIikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNBZ2VuZGFJdGVtSGlzdG9yeVZpZXdCdXR0b24iKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtSGlzdG9yeUhlYWRlciIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjRmlsdGVyQnlTdGF0dXMiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI0ZpbHRlckJ5U3RhZ2UiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI0ZpbHRlckJ5RGVwYXJ0bWVudCIpLnNob3coKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKFZpZXcgPT0gVmlld3MuTWVyZ2VkKSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbC1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNhbGwtbGlzdCIpLnNob3coKTsNCg0KICAgICAgICAgICAgICAgICQoIiNhbGwtbWVyZ2VkLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI21lcmdlZC1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNidG5NZXJnZWRMaXN0VmlldyIpLmFkZENsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTWVyZ2VkTGlzdFZpZXciKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNtZXJnZWRMaXN0SGVhZGVyIikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIiNQYXN0TWVldGluZ1RpdGxlIikuc2hvdygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSBpZiAoVmlldyA9PSBWaWV3cy5QYXN0KSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbGVuZGFyIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNjYWwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxlZ2lzbGF0aW9uLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjbWVyZ2VkLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI3NlYXJjaHJlc3VsdHMiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2J0bkNvbmZsaWN0c1ZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bkNhbGVuZGFyVmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTGlzdFZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0bkxlZ2lzbGF0aW9uVmlldyIpLnJlbW92ZUNsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuTWVyZ2VkTGlzdFZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI2J0blBhc3RWaWV3IikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5QYXN0VmlldyIpLmF0dHIoImFyaWEtcHJlc3NlZCIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X01vbnRoTWVudSIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjbWVyZ2VkTGlzdEhlYWRlciIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjcGFzdEhlYWRlciIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIueHRyYS1saXN0cyIpLmNzcygibWFyZ2luLXRvcCIsICJ1bnNldCIpOw0KICAgICAgICAgICAgICAgICQoIiNQYXN0TWVldGluZ1RpdGxlIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIi5MZWdpc2xhdGlvbkhlYWRlciIpLmhpZGUoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKFZpZXcgPT0gVmlld3MuTGlzdCB8fCBWaWV3cy5NZXJnZWQgfHwgVmlld3MuUGFzdCl7DQogICAgICAgICAgICAgICAgJCgiI2J0bkZpbHRlciIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjRmlsdGVyQnlLZXl3b3JkIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNGaWx0ZXJCeUNvbmZsaWN0TWVtYmVyIikuaGlkZSgpOw0KDQogICAgICAgICAgICAgICAgdmFyIGZpbHRlckJ5RGF0ZSA9ICQoJyNjdGwwMF9NYWluQ29udGVudF9GaWx0ZXJCeURhdGUnKS52YWwoKTsNCiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyYnlNZWV0aW5nVHlwZSA9ICQoIiNjdGwwMF9NYWluQ29udGVudF9sYmxNdWx0aVNlbGVjdCIpLnZhbCgpOw0KDQogICAgICAgICAgICAgICAgaWYgKChmaWx0ZXJieU1lZXRpbmdUeXBlICE9IG51bGwgJiYgZmlsdGVyYnlNZWV0aW5nVHlwZS5sZW5ndGggPiAwKSB8fCAoZmlsdGVyQnlEYXRlICE9IG51bGwgJiYgZmlsdGVyQnlEYXRlICE9PSAiIikpew0KICAgICAgICAgICAgICAgICAgICAkKCIjYnRuRmlsdGVyIikuYXBwZW5kKCI8c3BhbiBjbGFzcz0nZG90Jz48L3NwYW4+Iik7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJCgiLmRvdCIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNDaGFuZ2VGaWx0ZXIiKS52YWwoIjAiKTsNCg0KICAgICAgICBzaG9ydGVuTGlua05hbWVzKCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNlYXJjaEVudGVyKGV2ZW50KSB7DQogICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAxMyAmJiAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfdHh0U2VhcmNoJykudmFsKCkgIT0gJycpIHsNCiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgIHNlYXJjaERhdGEoKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQua2V5Q29kZSAhPSAxMzsNCiAgICAgICAgfQ0KDQogICAgZnVuY3Rpb24gc2V0Q29va2llKGNuYW1lLCBjdmFsdWUpIHsNCiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY25hbWUgKyAiPSIgKyBjdmFsdWUgKyAiO1NhbWVTaXRlPU5vbmU7IFNlY3VyZSI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gc2V0TG9uZ0Nvb2tpZShjbmFtZSwgY3ZhbHVlKSB7DQogICAgICAgIHZhciBkID0gbmV3IERhdGUoKTsNCiAgICAgICAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgKDM2MDAgKiAxMDAwICogMjQgKiAzNjUgKiAxMCkpOw0KICAgICAgICB2YXIgZXhwaXJlcyA9ICJleHBpcmVzPSIgKyBkLnRvVVRDU3RyaW5nKCk7DQogICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lICsgIj0iICsgY3ZhbHVlICsgIjsiICsgZXhwaXJlcyArICI7cGF0aD0vO1NhbWVTaXRlPU5vbmU7IFNlY3VyZSI7DQogICAgfQ0KICAgIGZ1bmN0aW9uIGdldENvb2tpZShjbmFtZSkgew0KICAgICAgICB2YXIgbmFtZSA9IGNuYW1lICsgIj0iOw0KICAgICAgICB2YXIgY2EgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYS5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgdmFyIGMgPSBjYVtpXTsNCiAgICAgICAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIHsNCiAgICAgICAgICAgICAgICBjID0gYy5zdWJzdHJpbmcoMSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWUpID09IDApIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gYy5zdWJzdHJpbmcobmFtZS5sZW5ndGgsIGMubGVuZ3RoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gIiI7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZGVsZXRlQ29va2llKG5hbWUpIHsNCiAgICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArJz07IFBhdGg9LzsgRXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAxIEdNVDsnOw0KICAgIH0NCiAgICA8L3NjcmlwdD4NCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIC8vIElmIG5vIGNvb2tpZSBmb3IgQ3VycmVudFRhYiwgc2V0IGl0IHRvIERlZmF1bHRUYWIuIElmIERlZmF1bHRUYWIgaXMgbm90IGF2YWlsYWJsZSwgdGhlbiBkZWZhdWx0IHRhYiB3aWxsIGJlIGNhbGVuZGFyDQogICAgICAgICAgICB2YXIgY29va2llID0gZ2V0Q29va2llKCdDdXJyZW50VGFiJykudHJpbSgpLnRvTG93ZXJDYXNlKCk7DQoNCiAgICAgICAgICAgIHZhciBleHBhbmRlZCA9IGdldFBhcmFtZXRlckJ5TmFtZSgiRXhwYW5kZWQiKTsNCg0KICAgICAgICAgICAgaWYgKGV4cGFuZGVkKSB7DQogICAgICAgICAgICAgICAgJCgiLk1lZXRpbmdUeXBlTmFtZVRleHQiKS5lYWNoKGZ1bmN0aW9uKGksdil7DQogICAgICAgICAgICAgICAgICAgIGlmIChleHBhbmRlZCA9PSB2LmlubmVyVGV4dC50cmltKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHYuY2xpY2soKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoY29va2llID09ICIiKSB7DQogICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRUYWIgPSAnbWVyZ2VkbGlzdCc7DQogICAgICAgICAgICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoOw0KICAgICAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcpOw0KDQogICAgICAgICAgICAgICAgaWYgKHVybFBhcmFtcy5nZXQoIkN1cnJlbnRUYWIiKSA9PSBudWxsKSB7Ly90aGlzIGlzIGEgYmFja3VwIGZvciB3aGVuIGNvb2tpZXMgZG9uJ3Qgd29yayBmb3IgYSBjbGllbnQNCiAgICAgICAgICAgICAgICAgICAgY29va2llID0gZGVmYXVsdFRhYi50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGNvb2tpZSA9IHVybFBhcmFtcy5nZXQoIkN1cnJlbnRUYWIiKTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBzZXRDb29raWUoJ0N1cnJlbnRUYWInLCBkZWZhdWx0VGFiKTsNCg0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBzd2l0Y2goY29va2llKSB7DQogICAgICAgICAgICAgICAgY2FzZSAibGlzdCI6DQogICAgICAgICAgICAgICAgICAgIHBvc3RiYWNrVGFiQ2xpY2soVmlld3MuTGlzdCk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgImNvbmZsaWN0IjoNCiAgICAgICAgICAgICAgICAgICAgbG9hZENvbmZsaWN0RGF0YSh0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgcG9zdGJhY2tUYWJDbGljayhWaWV3cy5Db25mbGljdHMpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJsZWdpc2xhdGlvbiI6DQogICAgICAgICAgICAgICAgICAgIGxvYWRMZWdpc2xhdGlvbkRhdGEoZmFsc2UpOw0KICAgICAgICAgICAgICAgICAgICBwb3N0YmFja1RhYkNsaWNrKFZpZXdzLkxlZ2lzbGF0aW9uKTsNCg0KICAgICAgICAgICAgICAgICAgICAvLyBsZWdpc2xhdGlvbiBmaWx0ZXIgZmllbGQgLy8NCiAgICAgICAgICAgICAgICAgICAgJCgiLkxlZ2lzbGF0aW9uTGlicmFyeVNlYXJjaEZpZWxkIGlucHV0Iikua2V5dXAoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKExlZ2lzbGF0aW9uLkRhdGFUYWJsZSAhPSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVnaXNsYXRpb24uRGF0YVRhYmxlLnNlYXJjaCgkKCIuTGVnaXNsYXRpb25MaWJyYXJ5U2VhcmNoRmllbGQgaW5wdXQiKS52YWwoKSkuZHJhdygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgY2FzZSAiYWdlbmRhaXRlbWhpc3RvcnkiOg0KICAgICAgICAgICAgICAgICAgICBsb2FkQWdlbmRhSXRlbUhpc3RvcnlEYXRhKGZhbHNlKTsNCiAgICAgICAgICAgICAgICAgICAgcG9zdGJhY2tUYWJDbGljayhWaWV3cy5BZ2VuZGFJdGVtSGlzdG9yeSk7DQoNCiAgICAgICAgICAgICAgICAgICAgLy8gYWdlbmRhIGl0ZW0gaGlzdG9yeSBmaWx0ZXIgZmllbGQgLy8NCiAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW1IaXN0b3J5U2VhcmNoRmllbGQgaW5wdXQiKS5rZXl1cChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQWdlbmRhSXRlbUhpc3RvcnkuRGF0YVRhYmxlICE9IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBZ2VuZGFJdGVtSGlzdG9yeS5EYXRhVGFibGUuc2VhcmNoKCQoIi5BZ2VuZGFJdGVtSGlzdG9yeVNlYXJjaEZpZWxkIGlucHV0IikudmFsKCkpLmRyYXcoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgIm1lcmdlZGxpc3QiOg0KICAgICAgICAgICAgICAgICAgICBwb3N0YmFja1RhYkNsaWNrKFZpZXdzLk1lcmdlZCk7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgInBhc3QiOg0KICAgICAgICAgICAgICAgICAgICBwb3N0YmFja1RhYkNsaWNrKFZpZXdzLlBhc3QpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICJjYWxlbmRhciI6DQogICAgICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICAgICAgLy8gY2FsZW5kYXIgdmlldywgZGVmYXVsdA0KICAgICAgICAgICAgICAgICAgICBsb2FkQ2FsZW5kYXJNZWV0aW5ncygpOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgU2l6ZV9DaGFuZ2VkKCk7DQoNCiAgICAgICAgICAgIGlmKGdldENvb2tpZSgnQ3VycmVudFRhYicpLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09ICJtZXJnZWRsaXN0Iil7DQogICAgICAgICAgICAgICAgbG9hZEFkZGl0aW9uYWxJdGVtcyg1LCAiLnVwY29taW5nLW1lZXRpbmdzIiwgIiNsb2FkTW9yZU1lZXRpbmdzIiwgIi5tZWV0aW5nLXRpdGxlID4gKiIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCcjbGF6eUxvYWRDb250YWluZXInKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgnI2xvYWRNb3JlTWVldGluZ3MnKS5oaWRlKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBSZXRyaWV2ZUZpbHRlck9wdGlvbnMoKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgZnVuY3Rpb24gZ2V0UGFyYW1ldGVyQnlOYW1lKG5hbWUpIHsNCiAgICAgICAgICAgIHZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZg0KICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xbXF1dL2csICdcXCQmJyk7DQogICAgICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdbPyZdJyArIG5hbWUgKyAnKD0oW14mI10qKXwmfCN8JCknKSwNCiAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpOw0KICAgICAgICAgICAgaWYgKCFyZXN1bHRzKSByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgIGlmICghcmVzdWx0c1syXSkgcmV0dXJuICcnOw0KICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1wrL2csICcgJykpOw0KICAgICAgICB9DQoNCg0KICAgICAgICBmdW5jdGlvbiBsb2FkTGVnaXNsYXRpb25EYXRhKGZpbHRlcmVkKSB7DQogICAgICAgICAgICBsYW5ndWFnZSA9IHsNCiAgICAgICAgICAgICAgICAic0VtcHR5VGFibGUiOiAiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGUiLA0KICAgICAgICAgICAgICAgICJzSW5mbyI6ICJTaG93aW5nIF9TVEFSVF8gdG8gX0VORF8gb2YgX1RPVEFMXyBlbnRyaWVzIiwNCiAgICAgICAgICAgICAgICAic0luZm9FbXB0eSI6ICJTaG93aW5nIDAgdG8gMCBvZiAwIGVudHJpZXMiLA0KICAgICAgICAgICAgICAgICJzSW5mb0ZpbHRlcmVkIjogIihmaWx0ZXJlZCBmcm9tIF9NQVhfIHRvdGFsIGVudHJpZXMpIiwNCiAgICAgICAgICAgICAgICAic1plcm9SZWNvcmRzIjogIk5vIG1hdGNoaW5nIHJlY29yZHMgZm91bmQiLA0KICAgICAgICAgICAgICAgIHBhZ2luYXRlOiB7DQogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiAnPCcsDQogICAgICAgICAgICAgICAgICAgIG5leHQ6ICc+JywNCiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICc8PCcsDQogICAgICAgICAgICAgICAgICAgIGxhc3Q6ICc+PicNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHByb2Nlc3Npbmc6ICc8ZGl2IGNsYXNzPSJsb2FkZXJQb3NpdGlvbiI+PHNwYW4gY2xhc3M9ImxhIGxhLXNwaW5uZXIgbGEtc3BpbiBsb2FkZXJEZXNpZ24iPjwvc3Bhbj48L2Rpdj4nDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBMZWdpc2xhdGlvbi5Mb2FkTGVnaXNsYXRpb25EYXRhKGZpbHRlcmVkLCBsYW5ndWFnZSk7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBsb2FkQWdlbmRhSXRlbUhpc3RvcnlEYXRhKGZpbHRlcmVkKSB7DQogICAgICAgICAgICBsYW5ndWFnZSA9IHsNCiAgICAgICAgICAgICAgICAic0VtcHR5VGFibGUiOiAiTm8gZGF0YSBhdmFpbGFibGUgaW4gdGFibGUiLA0KICAgICAgICAgICAgICAgICJzSW5mbyI6ICJTaG93aW5nIF9TVEFSVF8gdG8gX0VORF8gb2YgX1RPVEFMXyBlbnRyaWVzIiwNCiAgICAgICAgICAgICAgICAic0luZm9FbXB0eSI6ICJTaG93aW5nIDAgdG8gMCBvZiAwIGVudHJpZXMiLA0KICAgICAgICAgICAgICAgICJzSW5mb0ZpbHRlcmVkIjogIihmaWx0ZXJlZCBmcm9tIF9NQVhfIHRvdGFsIGVudHJpZXMpIiwNCiAgICAgICAgICAgICAgICAic1plcm9SZWNvcmRzIjogIk5vIG1hdGNoaW5nIHJlY29yZHMgZm91bmQiLA0KICAgICAgICAgICAgICAgIHBhZ2luYXRlOiB7DQogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiAnPCcsDQogICAgICAgICAgICAgICAgICAgIG5leHQ6ICc+JywNCiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICc8PCcsDQogICAgICAgICAgICAgICAgICAgIGxhc3Q6ICc+PicNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHByb2Nlc3Npbmc6ICc8ZGl2IGNsYXNzPSJsb2FkZXJQb3NpdGlvbiI+PGkgY2xhc3M9ImxhIGxhLXNwaW5uZXIgbGEtc3BpbiBsb2FkZXJEZXNpZ24iPjwvaT48L2Rpdj4nDQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICB2YXIgZmlsdGVyQnlEYXRlID0gJCgnI2N0bDAwX01haW5Db250ZW50X0ZpbHRlckJ5RGF0ZScpLnZhbCgpOw0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGUgPSAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfbGJsTXVsdGlTZWxlY3QiKS52YWwoKTsNCiAgICAgICAgICAgIHZhciBmaWx0ZXJieU1lZXRpbmdUeXBlSWRzID0gIiI7DQogICAgICAgICAgICBpZiAoZmlsdGVyYnlNZWV0aW5nVHlwZSkgew0KICAgICAgICAgICAgICAgIGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgPSBmaWx0ZXJieU1lZXRpbmdUeXBlLmpvaW4oJywnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyA9ICIiOw0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lID0gJCgiW2lkKj1sYmxNdWx0aVNlbGVjdF0gb3B0aW9uOnNlbGVjdGVkIik7DQogICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZXMgKz0gJCh0aGlzKS5odG1sKCkrICIsIjsNCiAgICAgICAgICAgIH0pDQoNCiAgICAgICAgICAgIHZhciBmaWx0ZXJCeVN0YWdlID0gIiI7IC8vbGJGaWx0ZXJCeVN0YWdlDQogICAgICAgICAgICBpZiAoJCgiI2N0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlTdGFnZSIpLnZhbCgpKSB7DQogICAgICAgICAgICAgICAgZmlsdGVyQnlTdGFnZSA9ICQoIiNjdGwwMF9NYWluQ29udGVudF9sYkZpbHRlckJ5U3RhZ2UiKS52YWwoKS5qb2luKCcsJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciBmaWx0ZXJCeVN0YXR1cyA9ICIiOyAvL2xiRmlsdGVyQnlTdGF0dXMNCiAgICAgICAgICAgIGlmICgkKCIjY3RsMDBfTWFpbkNvbnRlbnRfbGJGaWx0ZXJCeVN0YXR1cyIpLnZhbCgpKSB7DQogICAgICAgICAgICAgICAgZmlsdGVyQnlTdGF0dXMgPSAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfbGJGaWx0ZXJCeVN0YXR1cyIpLnZhbCgpLmpvaW4oJywnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5RGVwYXJ0bWVudE5hbWVzID0gIiI7IC8vbGJGaWx0ZXJCeURlcGFydG1lbnQNCiAgICAgICAgICAgIGlmICgkKCIjY3RsMDBfTWFpbkNvbnRlbnRfbGJGaWx0ZXJCeURlcGFydG1lbnQiKS52YWwoKSkgew0KICAgICAgICAgICAgICAgIGZpbHRlckJ5RGVwYXJ0bWVudE5hbWVzID0gJCgiI2N0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlEZXBhcnRtZW50IikudmFsKCkuam9pbignLCcpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoZmlsdGVyQnlEYXRlIHx8IGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgfHwgZmlsdGVyQnlTdGFnZSB8fCBmaWx0ZXJCeVN0YXR1cyB8fCBmaWx0ZXJCeURlcGFydG1lbnROYW1lcyl7DQogICAgICAgICAgICAgICAgJCgiI2J0bkZpbHRlciIpLmFwcGVuZCgiPHNwYW4gY2xhc3M9J2RvdCc+PC9zcGFuPiIpOw0KICAgICAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUgaScpLmFkZENsYXNzKCdmaWx0ZXJlZCcpOw0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Jc0NoYW5nZUZpbHRlciIpLnZhbCgiMCIpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCIuZG90IikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgJCgnLmRyb3Bkb3duLXRvZ2dsZSBpJykucmVtb3ZlQ2xhc3MoJ2ZpbHRlcmVkJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUnKS5uZXh0KCkuY3NzKCJkaXNwbGF5IiwgIm5vbmUiKTsNCg0KICAgICAgICAgICAgQWdlbmRhSXRlbUhpc3RvcnkuQWdlbmRhSXRlbUhpc3RvcnlWaWV3KGZpbHRlcmVkLCBsYW5ndWFnZSwgZmlsdGVyQnlEYXRlLCBmaWx0ZXJieU1lZXRpbmdUeXBlSWRzLCBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZXMsIGZpbHRlckJ5U3RhZ2UsIGZpbHRlckJ5U3RhdHVzLCBmaWx0ZXJCeURlcGFydG1lbnROYW1lcyk7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBsb2FkQ2FsZW5kYXJNZWV0aW5ncygpIHsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeUtleXdvcmQiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjRmlsdGVyQnlDb25mbGljdE1lbWJlciIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeVN0YXR1cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeVN0YWdlIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI0ZpbHRlckJ5RGVwYXJ0bWVudCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtSGlzdG9yeUhlYWRlciIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiN0YWJsZS1hZ2VuZGFpdGVtaGlzdG9yeS1saXN0IikuaGlkZSgpOw0KDQogICAgICAgICAgICB2YXIgY3VycmVudE1vblN0YXJ0ID0gIiI7DQogICAgICAgICAgICB2YXIgY3VycmVudE1vbkVuZCA9ICIiOw0KICAgICAgICAgICAgdmFyIGNhbGVuZGFyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FsZW5kYXInKQ0KICAgICAgICAgICAgdmFyIGNhbEJ1dHRvbnMgPSAnbW9udGggbWVyZ2VkTGlzdFZpZXdCdXR0b24gJw0KICAgICAgICAgICAgdmFyIGNhbGVuZGFyID0gbmV3IEZ1bGxDYWxlbmRhci5DYWxlbmRhcihjYWxlbmRhckVsLCB7DQogICAgICAgICAgICAgICAgZXZlbnREaXNwbGF5OiAnYmxvY2snLA0KICAgICAgICAgICAgICAgIHNob3dOb25DdXJyZW50RGF0ZXM6IGZhbHNlLA0KICAgICAgICAgICAgICAgIGZpeGVkV2Vla0NvdW50OiBmYWxzZSwNCiAgICAgICAgICAgICAgICBsb2NhbGU6ICdlbicsDQogICAgICAgICAgICAgICAgY3VzdG9tQnV0dG9uczogew0KICAgICAgICAgICAgICAgICAgICBtb250aDogew0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0NhbGVuZGFyJw0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICBteUN1c3RvbUJ1dHRvbjogew0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1VwY29taW5nJw0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICBteUN1c3RvbUNvbmZsaWN0c0J1dHRvbjogew0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ0NvbmZsaWN0cyBSZWdpc3RyeScNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgbXlDdXN0b21BZ2VuZGFJdGVtSGlzdG9yeUJ1dHRvbjogew0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogIkFnZW5kYSBJdGVtIEhpc3RvcnkiDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIG1lcmdlZExpc3RWaWV3QnV0dG9uOiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTGlzdCcNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgcGFzdFZpZXdCdXR0b246IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICdQYXN0Jw0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICBteUN1c3RvbUxlZ2lzbGF0aW9uQnV0dG9uOiB7DQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnTGVnaXNsYXRpb24nDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGhlYWRlclRvb2xiYXI6IHsNCiAgICAgICAgICAgICAgICAgICAgbGVmdDogJ3ByZXYsdGl0bGUsbmV4dCcsDQogICAgICAgICAgICAgICAgICAgIGNlbnRlcjogJycsDQogICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBjYWxCdXR0b25zLnRyaW1FbmQoKQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZGF5SGVhZGVyRm9ybWF0OiB7IHdlZWtkYXk6ICdsb25nJ30sDQogICAgICAgICAgICAgICAgaW5pdGlhbFZpZXc6ICdkYXlHcmlkTW9udGgnLA0KICAgICAgICAgICAgICAgIGRheU1heEV2ZW50Um93czogNCwNCiAgICAgICAgICAgICAgICBtb3JlTGlua0NvbnRlbnQ6IGZ1bmN0aW9uKGFyZ3Mpe3JldHVybiAod2luZG93LmxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygiZnJlbmNoIikgPyAiQ2xpcXVleiBwb3VyIGFncmFuZGlyICgiICsgYXJncy5udW0gKyAiIHBsdXMpIjogIkNsaWNrIHRvIGV4cGFuZCAoIiArIGFyZ3MubnVtICsgIiBtb3JlKSIpO30sDQogICAgICAgICAgICAgICAgbW9yZUxpbmtEaWRNb3VudDogZnVuY3Rpb24oYXJncyl7DQogICAgICAgICAgICAgICAgICAgICQoYXJncy5lbCkuYXR0cigidGFiSW5kZXgiLCAiMCIpOw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgY29udGVudEhlaWdodDo4MDAsDQogICAgICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOnRydWUsDQogICAgICAgICAgICAgICAgZGF0ZXNTZXQ6IGZ1bmN0aW9uIChkYXRlSW5mbykgew0KICAgICAgICAgICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5hdHRyKCJhcmlhLWxhYmVsIiwgIlByZXZpb3VzIE1vbnRoIik7DQogICAgICAgICAgICAgICAgICAgICQoIi5mYy1uZXh0LWJ1dHRvbiIpLmF0dHIoImFyaWEtbGFiZWwiLCAiTmV4dCBNb250aCIpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICgkKCcjY3RsMDBfTWFpbkNvbnRlbnRfU3RhcnRNb250aERhdGUnKS52YWwoKSAhPSAiIiAmJiAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfRW5kTW9udGhEYXRlJykudmFsKCkgIT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaW5EYXRlID0gbW9tZW50KCQoJyNjdGwwMF9NYWluQ29udGVudF9TdGFydE1vbnRoRGF0ZScpLnZhbCgpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhEYXRlID0gbW9tZW50KCQoJyNjdGwwMF9NYWluQ29udGVudF9FbmRNb250aERhdGUnKS52YWwoKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5EYXRlID49IGRhdGVJbmZvLnZpZXcuc3RhcnQgJiYgbWluRGF0ZSA8PSBkYXRlSW5mby52aWV3LmVuZCAmJiAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfSXNGaWx0ZXJMaXN0JykudmFsKCkgPT0gIjEiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmZjLXByZXYtYnV0dG9uIikucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5hZGRDbGFzcygnZmMtc3RhdGUtZGlzYWJsZWQnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5jc3MoImN1cnNvciIsICJkZWZhdWx0Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5yZW1vdmVDbGFzcygnZmMtc3RhdGUtZGlzYWJsZWQnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5jc3MoImN1cnNvciIsICJwb2ludGVyIik7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXhEYXRlID49IGRhdGVJbmZvLnZpZXcuc3RhcnQgJiYgbWF4RGF0ZSA8PSBkYXRlSW5mby52aWV3LmVuZCAmJiAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfSXNGaWx0ZXJMaXN0JykudmFsKCkgPT0gIjEiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmZjLW5leHQtYnV0dG9uIikucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtbmV4dC1idXR0b24iKS5hZGRDbGFzcygnZmMtc3RhdGUtZGlzYWJsZWQnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtbmV4dC1idXR0b24iKS5jc3MoImN1cnNvciIsICJkZWZhdWx0Iik7DQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5mYy1uZXh0LWJ1dHRvbiIpLnJlbW92ZUNsYXNzKCdmYy1zdGF0ZS1kaXNhYmxlZCcpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5mYy1uZXh0LWJ1dHRvbiIpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5mYy1uZXh0LWJ1dHRvbiIpLmNzcygiY3Vyc29yIiwgInBvaW50ZXIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZXZlbnRzOiBmdW5jdGlvbiAoaW5mbywgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHsNCiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAiYXBwbGljYXRpb24vanNvbiIsDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAieydjYWxlbmRhclN0YXJ0RGF0ZSc6JyIgKyBpbmZvLnN0YXJ0U3RyICsgIicsJ2NhbGVuZGFyRW5kRGF0ZSc6JyIgKyBpbmZvLmVuZFN0ciArICInfSIsDQogICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICIvTWVldGluZ3NDYWxlbmRhclZpZXcuYXNweC9HZXRBbGxNZWV0aW5ncyIgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoLA0KICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IFtdOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQubWFwKGRhdGEuZCwgZnVuY3Rpb24gKGl0ZW0sIGkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IE9iamVjdCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5pZCA9IGl0ZW0uSUQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmFsbGRheSA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdGFydCA9IG5ldyBEYXRlKGl0ZW0uU3RhcnREYXRlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZW5kID0gbmV3IERhdGUoaXRlbS5FbmREYXRlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGl0bGUgPSBkZWNvZGVIVE1MKGl0ZW0uTWVldGluZ05hbWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC51cmwxID0gaXRlbS5Vcmw7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmRlc2NyaXB0aW9uID0gaXRlbS5EZXNjcmlwdGlvbjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQubG9jYXRpb24gPSBpdGVtLkxvY2F0aW9uOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zaGFyZVVybCA9IGl0ZW0uU2hhcmVVcmw7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lm1lZXRpbmdUeXBlID0gaXRlbS5NZWV0aW5nVHlwZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2xhc3NOYW1lID0gaXRlbS5DbGFzc05hbWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lmxhbmd1YWdlTmFtZSA9IGl0ZW0uTGFuZ3VhZ2VOYW1lOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zaGFyaW5nID0gaXRlbS5TaGFyaW5nOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5oYXNBZ2VuZGEgPSBpdGVtLkhhc0FnZW5kYTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuTWVldGluZ0RvY3VtZW50TGluayA9IGl0ZW0uTWVldGluZ0RvY3VtZW50TGluazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucG9ydGFsSWQgPSBpdGVtLlBvcnRhbElkOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5IYXNMaXZlVmlkZW8gPSBpdGVtLkhhc0xpdmVWaWRlbzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuSGFzVmlkZW8gPSBpdGVtLkhhc1ZpZGVvOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5MaXZlVmlkZW9TdGFuZEFsb25lTGluayA9IGl0ZW0uTGl2ZVZpZGVvU3RhbmRBbG9uZUxpbms7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lkhhc1ZpZGVvTGl2ZVBhc3NlZCA9IGl0ZW0uSGFzVmlkZW9MaXZlUGFzc2VkOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5EZWxlZ2F0aW9uUmVxdWVzdExpbmsgPSBpdGVtLkRlbGVnYXRpb25SZXF1ZXN0TGluazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuTWVldGluZ1Bhc3NlZCA9IGl0ZW0uTWVldGluZ1Bhc3NlZDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuQWxsb3dQdWJsaWNDb21tZW50cyA9IGl0ZW0uQWxsb3dQdWJsaWNDb21tZW50czsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuRm9ybWF0dGVkU3RhcnQgPSBpdGVtLkZvcm1hdHRlZFN0YXJ0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5UaW1lT3ZlcnJpZGUgPSBpdGVtLlRpbWVPdmVycmlkZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuVGltZU92ZXJyaWRlRlIgPSBpdGVtLlRpbWVPdmVycmlkZUZSOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5Jc01QMyA9IGl0ZW0uSXNNUDM7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cy5wdXNoKGV2ZW50KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmZjLWRheWdyaWQtbW9yZS1saW5rIikuZWFjaChmdW5jdGlvbihpLHYpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodikua2V5cHJlc3MoZnVuY3Rpb24oZSl7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGUud2hpY2ggPT0gMTMgfHwgZS53aGljaCA9PSAzMil7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtZGF5Z3JpZC1tb3JlLWxpbmsiKVtpXS5jbGljaygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkluZGV4TG9vcChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIuZmMtbW9yZS1wb3BvdmVyIikgLHRydWUsICQodikpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuZmMtbW9yZS1wb3BvdmVyIikuZmlyc3QoKS5maW5kKCIuZmMtZGF5Z3JpZC1ldmVudCIpLmZpcnN0KCkuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzNTApOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrICYmIHN1Y2Nlc3NDYWxsYmFjayhldmVudHMpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZXZlbnRDbGljazogZnVuY3Rpb24gKGV2ZW50Q2xpY2tJbmZvKSB7DQogICAgICAgICAgICAgICAgICAgIHNob3dDYWxFdmVudChldmVudENsaWNrSW5mby5ldmVudCwgZXZlbnRDbGlja0luZm8uZWwpOw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZXZlbnREaWRNb3VudDogZnVuY3Rpb24gKGFyZ3MpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVTZWxlY3RvciA9ICQoYXJncy5lbCkuY2hpbGRyZW4oIi5mYy1ldmVudC1tYWluIikuY2hpbGRyZW4oIi5mYy1ldmVudC1tYWluLWZyYW1lIikuY2hpbGRyZW4oIi5mYy1ldmVudC10aW1lIik7DQogICAgICAgICAgICAgICAgICAgICQoYXJncy5lbCkucG9wb3Zlcih7DQogICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYXJncy5ldmVudC50aXRsZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGFyZ3MuZXZlbnQuZXh0ZW5kZWRQcm9wcy5Gb3JtYXR0ZWRTdGFydCwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdob3ZlcicsDQogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6ICd0b3AnLA0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiAnYm9keScsDQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAkKGFyZ3MuZWwpLmF0dHIoInRhYkluZGV4IiwgIjAiKTsNCiAgICAgICAgICAgICAgICAgICAgJChhcmdzLmVsKS5hdHRyKCJhcmlhLWxhYmVsIiwgYXJncy5ldmVudC5leHRlbmRlZFByb3BzLkZvcm1hdHRlZFN0YXJ0ICsgIiAiICsgYXJncy5ldmVudC50aXRsZSk7DQogICAgICAgICAgICAgICAgICAgICQoYXJncy5lbCkuYXR0cigicm9sZSIsICJidXR0b24iKTsNCiAgICAgICAgICAgICAgICAgICAgJChhcmdzLmVsKS5maW5kKCIuZmMtZXZlbnQtdGltZSIpLmF0dHIoImFyaWEtaGlkZGVuIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICAgICAgJChhcmdzLmVsKS5maW5kKCIuZmMtZXZlbnQtdGl0bGUiKS5hdHRyKCJhcmlhLWhpZGRlbiIsICJ0cnVlIik7DQogICAgICAgICAgICAgICAgICAgICQoYXJncy5lbCkua2V5cHJlc3MoZnVuY3Rpb24oZSl7DQogICAgICAgICAgICAgICAgICAgICAgICBpZihlLndoaWNoID09IDEzIHx8IGUud2hpY2ggPT0gMzIpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYWxFdmVudChhcmdzLmV2ZW50LCBhcmdzLmVsKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50VGltZSA9IHRpbWVTZWxlY3Rvci50ZXh0KCk7DQogICAgICAgICAgICAgICAgICAgIHRpbWVTZWxlY3Rvci50ZXh0KGV2ZW50VGltZS5zdWJzdHIoMCwgZXZlbnRUaW1lLmxlbmd0aCAtIDIpICsgIiAiICsgZXZlbnRUaW1lLnN1YnN0cihldmVudFRpbWUubGVuZ3RoIC0gMikudG9VcHBlckNhc2UoKSk7DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBldmVudFRpbWVGb3JtYXQ6IHsNCiAgICAgICAgICAgICAgICAgICAgaG91cjEyOiAnVHJ1ZScsDQogICAgICAgICAgICAgICAgICAgIGhvdXI6ICdudW1lcmljJywNCiAgICAgICAgICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsDQogICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtOiAnc2hvcnQnDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBsb2FkaW5nOiBmdW5jdGlvbiAoYm9vbCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0Q29va2llKCdDdXJyZW50VGFiJykgPT0gJ2xpc3QnKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCgnI2FsbC1saXN0JykudGV4dCgpLmluZGV4T2YoJ1RoZXJlIGFyZSBubyBtZWV0aW5ncycpID4gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfTWVldGluZ0xpc3RVcGRhdGVQcm9ncmVzcycpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2N0bDAwX01haW5Db250ZW50X01lZXRpbmdMaXN0VXBkYXRlUHJvZ3Jlc3MnKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9vbCkgJCgnI2N0bDAwX01haW5Db250ZW50X01lZXRpbmdMaXN0VXBkYXRlUHJvZ3Jlc3MnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlICQoJyNjdGwwMF9NYWluQ29udGVudF9NZWV0aW5nTGlzdFVwZGF0ZVByb2dyZXNzJykuaGlkZSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGNhbGVuZGFyLnJlbmRlcigpOw0KICAgICAgICAgICAgJCgnI2NhbGVuZGFyJykucHJlcGVuZCgiPGgxIGNsYXNzPSd2aXN1YWxseWhpZGRlbic+Q2FsZW5kYXIgVmlldzwvaDE+Iik7DQogICAgICAgICAgICAkKCIuZmMtZGF5R3JpZE1vbnRoLXZpZXcgPiB0YWJsZSIpLnByZXBlbmQoIjxjYXB0aW9uIGNsYXNzPSd2aXN1YWxseWhpZGRlbic+Q2FsZW5kYXIgY29udGFpbmluZyBtZWV0aW5nczwvY2FwdGlvbj4iKTsNCiAgICAgICAgICAgICQoIi5mYy10b29sYmFyLWNodW5rIikuZmlyc3QoKS5hdHRyKCJhcmlhLWxpdmUiLCAicG9saXRlIik7DQogICAgICAgICAgICAkKCIuZmMtdG9vbGJhci1jaHVuayIpLmxhc3QoKS5hdHRyKCJyb2xlIiwgImdyb3VwIik7DQogICAgICAgICAgICAkKCIuZmMtdG9vbGJhci1jaHVuayIpLmxhc3QoKS5hdHRyKCJhcmlhLWxhYmVsIiwgImV2ZW50IHZpZXdzIik7DQogICAgICAgICAgICAkKCcjY2FsZW5kYXInKS5zaG93KCk7DQogICAgICAgICAgICAkKCIjRmlsdGVyQnlLZXl3b3JkIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI0ZpbHRlckJ5Q29uZmxpY3RNZW1iZXIiKS5oaWRlKCk7DQoNCiAgICAgICAgICAgICQoIiNjYWxlbmRhciA+IC5mYy10b29sYmFyID4gLmZjLWxlZnQgPiBoMiIpLmF0dHIoImFyaWEtaGlkZGVuIiwgInRydWUiKTsNCiAgICAgICAgICAgICQoIiNjYWxlbmRhciA+IC5mYy10b29sYmFyID4gLmZjLWxlZnQgPiBoMiIpLmNzcygiZGlzcGxheSIsICJub25lIik7DQogICAgICAgICAgICAkKCIjY2FsZW5kYXIgPiAuZmMtdG9vbGJhciA+IC5mYy1sZWZ0ID4gaDIiKS5iZWZvcmUoIjxoMT4iICsgJCgiI2NhbGVuZGFyID4gLmZjLXRvb2xiYXIgPiAuZmMtbGVmdCA+IGgyIikudGV4dCgpICsiPC9oMT4iKTsNCiAgICAgICAgICAgICQoIi5mYy1idXR0b24tcHJpbWFyeSIpLmVhY2goZnVuY3Rpb24oaSx2KXsNCiAgICAgICAgICAgICAgICAkKHYpLnJlbW92ZUNsYXNzKCJmYy1idXR0b24tcHJpbWFyeSIpOw0KICAgICAgICAgICAgICAgICQodikuYWRkQ2xhc3MoImZjLXN0YXRlLWRlZmF1bHQiKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCIuZmMtbW9udGgtYnV0dG9uIikuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgJCgiLmZjLW1vbnRoLWJ1dHRvbiIpLmF0dHIoImFyaWEtcHJlc3NlZCIsICJ0cnVlIik7DQoNCiAgICAgICAgICAgICQoIi5mYy1tZXJnZWRMaXN0Vmlld0J1dHRvbi1idXR0b24iKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAiZmFsc2UiKTsNCiAgICAgICAgICAgICQoIi5mYy1teUN1c3RvbUJ1dHRvbi1idXR0b24iKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAiZmFsc2UiKTsNCiAgICAgICAgICAgICQoIi5mYy1wYXN0Vmlld0J1dHRvbi1idXR0b24iKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAiZmFsc2UiKTsNCiAgICAgICAgICAgICQoIi5mYy1teUN1c3RvbUNvbmZsaWN0c0J1dHRvbi1idXR0b24iKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAiZmFsc2UiKTsNCiAgICAgICAgICAgICQoIi5mYy1teUN1c3RvbUFnZW5kYUl0ZW1IaXN0b3J5QnV0dG9uIikuYXR0cigiYXJpYS1wcmVzc2VkIiwgImZhbHNlIik7DQogICAgICAgICAgICAkKCIuZmMtbXlDdXN0b21MZWdpc2xhdGlvbkJ1dHRvbiIpLmF0dHIoImFyaWEtcHJlc3NlZCIsICJmYWxzZSIpOw0KDQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBzaG93Q2FsRXZlbnQoZXZlbnQsIGNhbEVudHJ5KXsNCiAgICAgICAgICAgIHZhciBzdGFydERhdGUgPSBuZXcgRGF0ZShldmVudC5zdGFydCk7DQogICAgICAgICAgICB2YXIgbW9kYWxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIubW9kYWwtZGlhbG9nIik7DQogICAgICAgICAgICB2YXIgZXZlbnRBcmlhID0gZXZlbnQudGl0bGUgKyAiICIgKyBldmVudC5leHRlbmRlZFByb3BzLkZvcm1hdHRlZFN0YXJ0Ow0KICAgICAgICAgICAgc3RhcnREYXRlID0gc3RhcnREYXRlLmZvcm1hdCgiZGRkLCBNTU1NIGRkLCB5eXl5IEAgaDptbSB0dCIpOw0KICAgICAgICAgICAgaWYoJCgnI21vZGVsSGVhZGVyJyA+ICIgaDI6aGFzKCcjbW9kYWxUaXRsZScpIikubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICQoJyNtb2RhbFRpdGxlJykucmVtb3ZlKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkKCcjbW9kZWxIZWFkZXInKS5wcmVwZW5kKCI8aDIgaWQ9J21vZGFsVGl0bGUnIHRhYkluZGV4PScwJyBzdHlsZT0nZm9udC1zaXplOiAxN3B4Jz48L2gyPiIpOw0KICAgICAgICAgICAgJCgnI21vZGFsVGl0bGUnKS5odG1sKGV2ZW50LnRpdGxlKTsNCiAgICAgICAgICAgICQoIiNjbG9zZUNhbE1vZGFsIikub24oImNsaWNrIiwgZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICBjYWxFbnRyeS5mb2N1cygpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAkKGRvY3VtZW50KS5rZXlkb3duKGZ1bmN0aW9uKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMjcpIHsNCiAgICAgICAgICAgICAgICAgICAgY2FsRW50cnkuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICQoJyNzdGFydERhdGUnKS50ZXh0KGV2ZW50LmV4dGVuZGVkUHJvcHMuRm9ybWF0dGVkU3RhcnQpOw0KICAgICAgICAgICAgJCgnI2Rlc2MnKS5odG1sKGV2ZW50LmV4dGVuZGVkUHJvcHMuZGVzY3JpcHRpb24pOw0KICAgICAgICAgICAgaWYgKGV2ZW50LmV4dGVuZGVkUHJvcHMuaGFzQWdlbmRhICYmIGV2ZW50LmV4dGVuZGVkUHJvcHMuc2hhcmluZykgew0KICAgICAgICAgICAgICAgICQoJyNldmVudExpbmsnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgnI2V2ZW50TGluaycpLmF0dHIoJ2hyZWYnLCBocmVmID0gJ01lZXRpbmcuYXNweD9JZD0nICsgZXZlbnQuaWQgKyAnJmxhbmc9JyArIGV2ZW50LmV4dGVuZGVkUHJvcHMubGFuZ3VhZ2VOYW1lKTsNCiAgICAgICAgICAgICAgICB2YXIgc2hhcmVBcmlhID0gIlNoYXJlICIgKyBldmVudEFyaWE7DQogICAgICAgICAgICAgICAgJCgnI3NoYXJlQ29udGFpbmVyJykuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoJyNzaGFyZUxpbmsnKS5hdHRyKCdocmVmJywgZXZlbnQuZXh0ZW5kZWRQcm9wcy5zaGFyZVVybCk7DQogICAgICAgICAgICAgICAgJCgnI3NoYXJlTGluaycpLmF0dHIoJ2FyaWEtbGFiZWwnLCBzaGFyZUFyaWEpOw0KICAgICAgICAgICAgICAgICQoJyNzaGFyZUxpbmsgPiBpbWcnKS5hdHRyKCdhcmlhLWxhYmVsJywgc2hhcmVBcmlhKTsNCiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZXh0ZW5kZWRQcm9wcy5BbGxvd1B1YmxpY0NvbW1lbnRzKXsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnRBcmlhID0gIkNvbW1lbnQgb24gIiArIGV2ZW50QXJpYSArICIuIE9wZW5zIGluIGEgbmV3IHRhYi93aW5kb3ciOw0KICAgICAgICAgICAgICAgICAgICAkKCcjY29tbWVudExpbmsnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICQoJyNjb21tZW50TGluaycpLmF0dHIoJ2hyZWYnLCBocmVmID0gJ01lZXRpbmcuYXNweD9JZD0nICsgZXZlbnQuaWQgKyAnJmxhbmc9JyArIGV2ZW50LmV4dGVuZGVkUHJvcHMubGFuZ3VhZ2VOYW1lKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2NvbW1lbnRMaW5rJykuYXR0cignYXJpYS1sYWJlbCcsIGNvbW1lbnRBcmlhKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2NvbW1lbnRMaW5rID4gaW1nJykuYXR0cignYXJpYS1sYWJlbCcsIGNvbW1lbnRBcmlhKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkKCcjY29tbWVudExpbmsnKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgJCgnI2V2ZW50TGluaycpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCcjc2hhcmVDb250YWluZXInKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgnI3NoYXJlTGluaycpLnJlbW92ZUF0dHIoImhyZWYiKTsNCiAgICAgICAgICAgICAgICAkKCcjY29tbWVudExpbmsnKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgnI2NvbW1lbnRMaW5rJykucmVtb3ZlQXR0cigiaHJlZiIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgJCgnI21lZXRpbmctdHlwZScpLnRleHQoZXZlbnQuZXh0ZW5kZWRQcm9wcy5tZWV0aW5nVHlwZSk7DQoNCiAgICAgICAgICAgIGlmIChldmVudC5leHRlbmRlZFByb3BzLk1lZXRpbmdEb2N1bWVudExpbmsubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgIHZhciBsYW5nID0gd2luZG93LmxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygiZnJlbmNoIik7DQogICAgICAgICAgICAgICAgdmFyIG1lZXRpbmdEb2N1bWVudHMgPSAoZXZlbnQgIT0gdW5kZWZpbmVkICYmIGV2ZW50ICE9IG51bGwgPyBHZXRDYXRlZ29yaXplZE1lZXRpbmdMaW5rcyhldmVudCwgbGFuZywgZXZlbnQuZXh0ZW5kZWRQcm9wcy5NZWV0aW5nRG9jdW1lbnRMaW5rLCBmYWxzZSkgOiAiIik7DQogICAgICAgICAgICAgICAgJCgnI01lZXRpbmdEb2N1bWVudHMnKS5odG1sKG1lZXRpbmdEb2N1bWVudHMpOw0KICAgICAgICAgICAgICAgICQoJyNNZWV0aW5nRG9jdW1lbnRzJykuc2hvdygpOw0KICAgICAgICAgICAgICAgIHNob3J0ZW5MaW5rTmFtZXMoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICQoJyNNZWV0aW5nRG9jdW1lbnRzJykuaHRtbCgiIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZihldmVudC5leHRlbmRlZFByb3BzLkhhc0xpdmVWaWRlbyAmJiAhZXZlbnQuZXh0ZW5kZWRQcm9wcy5NZWV0aW5nUGFzc2VkICYmICFldmVudC5leHRlbmRlZFByb3BzLklzTVAzKXsNCiAgICAgICAgICAgICAgICB2YXIgbWVldGluZ0RvY3VtZW50cyA9IGV2ZW50LmV4dGVuZGVkUHJvcHMuTGl2ZVZpZGVvU3RhbmRBbG9uZUxpbmsgKyAiPGkgY2xhc3M9J2xhcyBsYS12aWRlbyBsYS1sZyc+PC9pPiIgICsgIiAgVmlldyBMaXZlIFN0cmVhbSIgKyAiPC9hPiI7DQogICAgICAgICAgICAgICAgJCgnI3ZpZGVvLWxpbmsnKS5odG1sKG1lZXRpbmdEb2N1bWVudHMpOw0KICAgICAgICAgICAgICAgICQoJyN2aWRlby1saW5rJykuc2hvdygpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCcjdmlkZW8tbGluaycpLmhpZGUoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGV2ZW50LmV4dGVuZGVkUHJvcHMuRGVsZWdhdGlvblJlcXVlc3RMaW5rICE9ICIiKSB7DQogICAgICAgICAgICAgICAgdmFyIGRlbGVnYXRpb25BcmlhID0gIkRlbGVnYXRpb24gcmVxdWVzdCBmb3IgIiArIGV2ZW50QXJpYSArICIuIE9wZW5zIGluIGEgbmV3IHRhYi93aW5kb3ciOw0KICAgICAgICAgICAgICAgICQoJyNkZWxlZ2F0aW9uUmVxdWVzdExpbmsnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgnI2RlbGVnYXRpb25SZXF1ZXN0TGluaycpLmF0dHIoJ2hyZWYnLCBldmVudC5leHRlbmRlZFByb3BzLkRlbGVnYXRpb25SZXF1ZXN0TGluayk7DQogICAgICAgICAgICAgICAgJCgnI2RlbGVnYXRpb25SZXF1ZXN0TGluaycpLmF0dHIoJ2FyaWEtbGFiZWwnLCBkZWxlZ2F0aW9uQXJpYSk7DQogICAgICAgICAgICAgICAgJCgnI2RlbGVnYXRpb25SZXF1ZXN0TGluayA+IGltZycpLmF0dHIoJ2FyaWEtbGFiZWwnLCBkZWxlZ2F0aW9uQXJpYSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCcjZGVsZWdhdGlvblJlcXVlc3RMaW5rJykuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoJyNkZWxlZ2F0aW9uUmVxdWVzdExpbmsnKS5yZW1vdmVBdHRyKCJocmVmIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkKCcjZnVsbENhbE1vZGFsJykubW9kYWwoJ3Nob3cnKTsNCiAgICAgICAgICAgICQoJyNmdWxsQ2FsTW9kYWwnKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7DQogICAgICAgICAgICB0YWJJbmRleExvb3AobW9kYWxDb250YWluZXIsIGZhbHNlLCBudWxsKTsNCiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICQoIiNjbG9zZUNhbE1vZGFsIikuZm9jdXMoKTsNCiAgICAgICAgICAgIH0sIDM1MCk7DQogICAgICAgIH0NCg0KICAgICAgICAkKCIuUGFzdE1lZXRpbmdUeXBlc05hbWUiKS5lYWNoKGZ1bmN0aW9uKGksdil7DQogICAgICAgICAgICAkKHYpLmtleWRvd24oZnVuY3Rpb24oZSl7DQogICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGUgfHwgZS53aGljaDsNCiAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PSAzOCl7DQogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICAgICAgJCh2KS5wYXJlbnQoKS5wcmV2QWxsKCI6dmlzaWJsZTpmaXJzdCIpLmNoaWxkcmVuKCI6Zmlyc3QiKS5mb2N1cygpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZSA9PSA0MCl7DQogICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgICAgICAgICAgJCh2KS5wYXJlbnQoKS5uZXh0QWxsKCI6dmlzaWJsZTpmaXJzdCIpLmNoaWxkcmVuKCI6Zmlyc3QiKS5mb2N1cygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXlDb2RlID09IDMyKXsNCiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgICAgICAgICAgICAkKHYpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KDQogICAgICAgIGxhenlMb2FkQXR0YWNobWVudHMoKTsNCg0KICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7DQogICAgICAgICAgICAkKCcjc2VhcmNoTWVldGluZ1R5cGUnKS5hdHRyKCJwbGFjZWhvbGRlciIsICJPcHRpb25hbCBGaWx0ZXIgYnkgTWVldGluZyBUeXBlIHNlYXJjaCBmaWVsZCIpOw0KICAgICAgICAgICAgLy8kKCcjc2VhcmNoTWVldGluZ1R5cGUnKS5yZW1vdmVBdHRyKCJhcmlhLWxhYmVsbGVkYnkiKTsNCiAgICAgICAgICAgICQoJyNzZWFyY2hNZWV0aW5nVHlwZScpLmtleWRvd24oZnVuY3Rpb24oZSl7DQogICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGUgfHwgZS53aGljaDsNCiAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PSAzOCB8fCBrZXlDb2RlID09IDQwKXsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3NlYXJjaE1lZXRpbmdUeXBlJykudmFsKCQoIi5zcy1oaWdobGlnaHRlZCIpLnRleHQoKSk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0sIDEwMDApOw0KDQogICAgICAgIGZ1bmN0aW9uIGxhenlMb2FkQXR0YWNobWVudHMoKXsNCiAgICAgICAgICAgICQoIi5hZGRpdGlvbmFsLWRvYy1saXN0IikuZWFjaChmdW5jdGlvbihpLHYpew0KICAgICAgICAgICAgICAgIGlmICgkKCQodikuY2hpbGRyZW4oKSkubGVuZ3RoID4gMTEgKXsNCiAgICAgICAgICAgICAgICAgICAgbG9hZEFkZGl0aW9uYWxJdGVtcygxMCwgdiwgJCh2KS5maW5kKCIubG9hZE1vcmVBdHRhY2htZW50cyIpLCAiLnRlYXNlckxpbmsiKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkKHYpLmZpbmQoIi5sb2FkTW9yZUF0dGFjaG1lbnRzIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICAgIGZ1bmN0aW9uIHNob3J0ZW5MaW5rTmFtZXMoKXsNCiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICAkKCIudGVhc2VyIikuZWFjaChmdW5jdGlvbihpLHYpew0KICAgICAgICAgICAgICAgICAgICB2YXIgbWluID0gMTI7DQogICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRXaWR0aCA9ICQodikucGFyZW50cygnZGl2Jykud2lkdGgoKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gMDsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFdpZHRoID4gMCl7DQogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdCA9ICQodikucGFyZW50cygnZGl2Jykud2lkdGgoKS8xMTsNCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0ID0gJCgiLmF0dGFjaG1lbnQtbGlzdCIpLmZpcnN0KCkud2lkdGgoKS8xMTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIGxpbWl0ID0gKGxpbWl0ID49IG1pbiA/IGxpbWl0IDogbWluKTsNCiAgICAgICAgICAgICAgICAgICAgdGVhc2VyTGluayh2LCBsaW1pdCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9LDE1MCk7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiB0ZWFzZXJMaW5rKHYsIG1heGxlbil7DQogICAgICAgICAgICB2YXIgdHh0PSQodikudGV4dCgpLnJlcGxhY2UoIi4uLiIsICIiKTsNCiAgICAgICAgICAgIGlmKHR4dC5sZW5ndGg+bWF4bGVuKXsNCiAgICAgICAgICAgICAgICB2YXIgc2hvcnRUZXh0PXR4dC5zdWJzdHJpbmcoMCwgbWF4bGVuKSsNCiAgICAgICAgICAgICAgICAiPHNwYW4gb25jbGljaz0nJCh0aGlzKS5oaWRlKCk7JCh0aGlzKS5uZXh0KCkudG9nZ2xlKCk7Jz4iKw0KICAgICAgICAgICAgICAgICAgICAiLi4uIisNCiAgICAgICAgICAgICAgICAiPC9zcGFuPiIrDQogICAgICAgICAgICAgICAgIjxzcGFuICBzdHlsZT0nZGlzcGxheTpub25lJz4iKw0KICAgICAgICAgICAgICAgICAgICB0eHQuc3Vic3RyaW5nKG1heGxlbiwgdHh0Lmxlbmd0aCkrDQogICAgICAgICAgICAgICAgIjwvc3Bhbj4iOw0KDQogICAgICAgICAgICAgICAgJCh2KS5odG1sKHNob3J0VGV4dCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBsb2FkQWRkaXRpb25hbEl0ZW1zKGl0ZW1zVG9Mb2FkLCBjb250YWluZXIsIHRyaWdnZXIsIHBvc3RGb2N1cyl7DQogICAgICAgICAgICAkKHRyaWdnZXIpLmhpZGUoKTsNCiAgICAgICAgICAgIHZhciBzaXplX2NvbnQgPSAkKCQoY29udGFpbmVyKS5jaGlsZHJlbigpKS5sZW5ndGg7DQogICAgICAgICAgICBpZiAoc2l6ZV9jb250ID4gaXRlbXNUb0xvYWQpew0KICAgICAgICAgICAgICAgICQoY29udGFpbmVyKS5jaGlsZHJlbigpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKHRyaWdnZXIpLnNob3coKTsNCiAgICAgICAgICAgICAgICB2YXIgaW5jcmVtZW50ID0gaXRlbXNUb0xvYWQ7DQogICAgICAgICAgICAgICAgJChjb250YWluZXIpLmNoaWxkcmVuKCkuc2xpY2UoMCxpdGVtc1RvTG9hZCkuc2hvdygpOw0KICAgICAgICAgICAgICAgICQodHJpZ2dlcikua2V5cHJlc3MoZnVuY3Rpb24oZSl7DQogICAgICAgICAgICAgICAgICAgIGlmKGUud2hpY2ggPT0gMTMpew0KICAgICAgICAgICAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5jbGljaygpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIGl0ZW1zVG9Mb2FkICs9IGluY3JlbWVudDsNCiAgICAgICAgICAgICAgICAgICAgJChjb250YWluZXIpLmNoaWxkcmVuKCkuc2xpY2UoMCxpdGVtc1RvTG9hZCkuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICBpZihwb3N0Rm9jdXMpew0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoY29udGFpbmVyKS5jaGlsZHJlbigpLmVxKGl0ZW1zVG9Mb2FkIC0gaW5jcmVtZW50KS5maW5kKHBvc3RGb2N1cykuZm9jdXMoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zVG9Mb2FkPj1zaXplX2NvbnQpew0KICAgICAgICAgICAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKHRyaWdnZXIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gbG9hZENvbmZsaWN0RGF0YShpc0ZpbHRlcmVkKSB7DQogICAgICAgICAgICBpZiAoJC5mbi5EYXRhVGFibGUuaXNEYXRhVGFibGUoJyN0YWJsZS1jb25mbGljdHMtbGlzdCcpKSB7DQogICAgICAgICAgICAgICAgJCgnI3RhYmxlLWNvbmZsaWN0cy1saXN0JykuZGF0YVRhYmxlKCkuZm5DbGVhclRhYmxlKCk7DQogICAgICAgICAgICAgICAgJCgnI3RhYmxlLWNvbmZsaWN0cy1saXN0JykuZGF0YVRhYmxlKCkuZm5EZXN0cm95KCk7DQogICAgICAgICAgICAgICAgJCgnI3RhYmxlLWNvbmZsaWN0cy1saXN0IHRib2R5JykucmVtb3ZlKCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICB2YXIgc2VhcmNoVGV4dCA9ICQoIiNjdGwwMF9NYWluQ29udGVudF90eHRGaWx0ZXJCeUtleXdvcmQiKS52YWwoKS50cmltKCk7DQoNCiAgICAgICAgICAgIHZhciBmaWx0ZXJCeURhdGUgPSAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfRmlsdGVyQnlEYXRlJykudmFsKCk7DQogICAgICAgICAgICB2YXIgZmlsdGVyYnlNZWV0aW5nVHlwZSA9ICQoIiNjdGwwMF9NYWluQ29udGVudF9sYmxNdWx0aVNlbGVjdCIpLnZhbCgpOw0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgPSAiIjsNCiAgICAgICAgICAgIGlmIChmaWx0ZXJieU1lZXRpbmdUeXBlICE9IG51bGwgJiYgZmlsdGVyYnlNZWV0aW5nVHlwZSAhPSAiIikgew0KICAgICAgICAgICAgICAgIGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgPSBmaWx0ZXJieU1lZXRpbmdUeXBlLmpvaW4oJywnKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHZhciBmaWx0ZXJCeUNvbmZsaWN0TWVtYmVyID0gJCgiI2N0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlDb25mbGljdE1lbWJlciIpLnZhbCgpOw0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5Q29uZmxpY3RNZW1iZXJJZHMgPSAiIjsNCiAgICAgICAgICAgIGlmIChmaWx0ZXJCeUNvbmZsaWN0TWVtYmVyICE9IG51bGwgJiYgZmlsdGVyQnlDb25mbGljdE1lbWJlciAhPSAiIikgew0KICAgICAgICAgICAgICAgIGZpbHRlckJ5Q29uZmxpY3RNZW1iZXJJZHMgPSBmaWx0ZXJCeUNvbmZsaWN0TWVtYmVyLmpvaW4oJywnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKChmaWx0ZXJieU1lZXRpbmdUeXBlICE9IG51bGwgJiYgZmlsdGVyYnlNZWV0aW5nVHlwZS5sZW5ndGggPiAwKSB8fCAoZmlsdGVyQnlDb25mbGljdE1lbWJlciAhPSBudWxsICYmIGZpbHRlckJ5Q29uZmxpY3RNZW1iZXIubGVuZ3RoID4gMCkgfHwgKGZpbHRlckJ5RGF0ZSAhPSBudWxsICYmIGZpbHRlckJ5RGF0ZSAhPT0gIiIpKXsNCiAgICAgICAgICAgICAgICAkKCIjYnRuRmlsdGVyIikuYXBwZW5kKCI8c3BhbiBjbGFzcz0nZG90Jz48L3NwYW4+Iik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICQoIi5kb3QiKS5yZW1vdmUoKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyA9ICIiOw0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lID0gJCgiW2lkKj1sYmxNdWx0aVNlbGVjdF0gb3B0aW9uOnNlbGVjdGVkIik7DQogICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZXMgKz0gJCh0aGlzKS5odG1sKCkrICIsIjsNCiAgICAgICAgICAgIH0pDQoNCiAgICAgICAgICAgIHZhciBjb25mbGljdHNUYWJsZSA9ICQoJyN0YWJsZS1jb25mbGljdHMtbGlzdCcpLkRhdGFUYWJsZSh7DQogICAgICAgICAgICAgICAgImZuRHJhd0NhbGxiYWNrIjogZnVuY3Rpb24oIG9TZXR0aW5ncyApIHsNCiAgICAgICAgICAgICAgICAgICAgJCgnI3ZpZXdSZWdDb25mbGljdCcpLmF0dHIoImFyaWEtbGFiZWwiLCAiTWVtYmVyIGluIENvbmZsaWN0Iik7DQogICAgICAgICAgICAgICAgICAgICQoJy5kYXRhVGFibGVzX2VtcHR5JykucmVtb3ZlQXR0cigidmFsaWduIik7DQogICAgICAgICAgICAgICAgICAgICQoJy5kYXRhVGFibGVzX2VtcHR5JykuY3NzKCJ2ZXJ0aWNhbC1hbGlnbiIsICJ0b3AiKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2luYXRlX2J1dHRvbjpub3QoLmN1cnJlbnQpJykucmVtb3ZlQXR0cignYXJpYS1jdXJyZW50Jyk7DQogICAgICAgICAgICAgICAgICAgICQoJy5wYWdpbmF0ZV9idXR0b24uY3VycmVudCcpLmF0dHIoImFyaWEtY3VycmVudCIsICJwYWdlIik7DQogICAgICAgICAgICAgICAgICAgICQoJy5kYXRhVGFibGVzX3BhZ2luYXRlJykuYXR0cigncm9sZScsICdyZWdpb24nKS5hdHRyKCdhcmlhLWxhYmVsJywgJ3BhZ2luYXRpb24nKTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJkb20iOiAncnRpcCcsDQogICAgICAgICAgICAgICAgImJQcm9jZXNzaW5nIjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAic3RhdGVTYXZlIjogZmFsc2UsDQogICAgICAgICAgICAgICAgImJTZXJ2ZXJTaWRlIjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAiYXV0b1dpZHRoIjogZmFsc2UsDQogICAgICAgICAgICAgICAgInBhZ2luZ1R5cGUiOiAiZnVsbF9udW1iZXJzIiwNCiAgICAgICAgICAgICAgICAic0FqYXhTb3VyY2UiOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luKyIvR2V0U2VhcmNoRGF0YS5hc214L0dldENvbmZsaWN0c0RhdGEiICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCwNCiAgICAgICAgICAgICAgICAiZm5TZXJ2ZXJQYXJhbXMiOiBmdW5jdGlvbiAoYW9EYXRhKSB7DQogICAgICAgICAgICAgICAgICAgIGFvRGF0YS5wdXNoKHsgIm5hbWUiOiAic2VhcmNoVGV4dCIsICJ2YWx1ZSI6IHNlYXJjaFRleHQgfSk7DQogICAgICAgICAgICAgICAgICAgIGFvRGF0YS5wdXNoKHsgIm5hbWUiOiAiZmlsdGVyYnlNZWV0aW5nVHlwZUlkcyIsICJ2YWx1ZSI6IGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgfSk7DQogICAgICAgICAgICAgICAgICAgIGFvRGF0YS5wdXNoKHsgIm5hbWUiOiAiZmlsdGVyQnlEYXRlIiwgInZhbHVlIjogZmlsdGVyQnlEYXRlIH0pOw0KICAgICAgICAgICAgICAgICAgICBhb0RhdGEucHVzaCh7ICJuYW1lIjogImZpbHRlckJ5Q29uZmxpY3RNZW1iZXJJZHMiLCAidmFsdWUiOiBmaWx0ZXJCeUNvbmZsaWN0TWVtYmVySWRzIH0pOw0KICAgICAgICAgICAgICAgICAgICBhb0RhdGEucHVzaCh7ICJuYW1lIjogImZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyIsICJ2YWx1ZSI6IGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyB9KTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJjb2x1bW5zIjogWw0KICAgICAgICAgICAgICAgICAgICB7ICJkYXRhIjogIkNvbmZsaWN0TWVtYmVyIiwgIm9yZGVyYWJsZSI6IHRydWUgfSwNCiAgICAgICAgICAgICAgICAgICAgeyAiZGF0YSI6ICJNZWV0aW5nVHlwZU5hbWUiLCAib3JkZXJhYmxlIjogdHJ1ZSB9LA0KICAgICAgICAgICAgICAgICAgICB7ICJkYXRhIjogIk1lZXRpbmdTdGFydCIsICJvcmRlcmFibGUiOiB0cnVlIH0sDQogICAgICAgICAgICAgICAgICAgIHsgImRhdGEiOiAiQWdlbmRhSXRlbSIsICJvcmRlcmFibGUiOiB0cnVlIH0sDQogICAgICAgICAgICAgICAgICAgIHsgImRhdGEiOiAnRmlsZUljb24nLCAib3JkZXJhYmxlIjogZmFsc2UgfQ0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgIm9yZGVyIjogW1swLCAiYXNjIl1dLA0KICAgICAgICAgICAgICAgICJjb2x1bW5EZWZzIjogWw0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAidGFyZ2V0cyI6IDAsDQogICAgICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZENlbGwnOiAgZnVuY3Rpb24gKHRkLCBjZWxsRGF0YSwgcm93RGF0YSwgcm93LCBjb2wpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRkKS5hdHRyKCdoZWFkZXJzJywgJ2NvbmZsaWN0Jyk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJ0YXJnZXRzIjogMSwNCiAgICAgICAgICAgICAgICAgICAgICAgICdjcmVhdGVkQ2VsbCc6ICBmdW5jdGlvbiAodGQsIGNlbGxEYXRhLCByb3dEYXRhLCByb3csIGNvbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGQpLmF0dHIoJ2hlYWRlcnMnLCAnbWVldGluZ1R5cGUnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgInRhcmdldHMiOiAyLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWRDZWxsJzogIGZ1bmN0aW9uICh0ZCwgY2VsbERhdGEsIHJvd0RhdGEsIHJvdywgY29sKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0ZCkuYXR0cignaGVhZGVycycsICdtZWV0aW5nRGF0ZScpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAidGFyZ2V0cyI6IDMsDQogICAgICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZENlbGwnOiAgZnVuY3Rpb24gKHRkLCBjZWxsRGF0YSwgcm93RGF0YSwgcm93LCBjb2wpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRkKS5hdHRyKCdoZWFkZXJzJywgJ2FnZW5kYUl0ZW0nKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgInRhcmdldHMiOiA0LA0KICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWRDZWxsJzogIGZ1bmN0aW9uICh0ZCwgY2VsbERhdGEsIHJvd0RhdGEsIHJvdywgY29sKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0ZCkuYXR0cignaGVhZGVycycsICd2aWV3UmVnQ29uZmxpY3QnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIF0sDQogICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IHsNCiAgICAgICAgICAgICAgICAgICAgInNFbXB0eVRhYmxlIjogIk5vIGRhdGEgYXZhaWxhYmxlIGluIHRhYmxlIiwNCiAgICAgICAgICAgICAgICAgICAgInNJbmZvIjogIlNob3dpbmcgX1NUQVJUXyB0byBfRU5EXyBvZiBfVE9UQUxfIGVudHJpZXMiLA0KICAgICAgICAgICAgICAgICAgICAic0luZm9FbXB0eSI6ICJTaG93aW5nIDAgdG8gMCBvZiAwIGVudHJpZXMiLA0KICAgICAgICAgICAgICAgICAgICAic0luZm9GaWx0ZXJlZCI6ICIoZmlsdGVyZWQgZnJvbSBfTUFYXyB0b3RhbCBlbnRyaWVzKSIsDQogICAgICAgICAgICAgICAgICAgICJzWmVyb1JlY29yZHMiOiAiTm8gbWF0Y2hpbmcgcmVjb3JkcyBmb3VuZCIsDQogICAgICAgICAgICAgICAgICAgIHBhZ2luYXRlOiB7DQogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogJzwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogJz4nLA0KICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICc8PCcsDQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0OiAnPj4nDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIGFyaWE6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2luYXRlOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXM6ICdwcmV2aW91cyBwYWdlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiAnbmV4dCBwYWdlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdDogJ2ZpcnN0IHBhZ2UnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Q6ICdsYXN0IHBhZ2UnDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npbmc6ICc8ZGl2IGNsYXNzPSJsb2FkZXJQb3NpdGlvbiI+PHNwYW4gY2xhc3M9ImxhIGxhLXNwaW5uZXIgbGEtc3BpbiBsb2FkZXJEZXNpZ24iPjwvc3Bhbj48L2Rpdj4nDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoJyN2aWV3UmVnQ29uZmxpY3QnKS5hdHRyKCJhcmlhLWxhYmVsIiwgIlZpZXcgYWxsIHJlZ2lzdGVyZWQgY29uZmxpY3RzIGZvciB0aGUgYWdlbmRhIGl0ZW0iKTsNCg0KICAgICAgICAgICAgaWYgKHNlYXJjaFRleHQgIT0gIiIgfHwgZmlsdGVyQnlEYXRlICE9ICIiIHx8IGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgIT0gIiIgfHwgZmlsdGVyQnlDb25mbGljdE1lbWJlcklkcyAhPSAiIikgew0KICAgICAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUgaScpLmFkZENsYXNzKCdmaWx0ZXJlZCcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgJCgnLmRyb3Bkb3duLXRvZ2dsZSBpJykucmVtb3ZlQ2xhc3MoJ2ZpbHRlcmVkJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkKCcuZHJvcGRvd24tdG9nZ2xlJykubmV4dCgpLmNzcygiZGlzcGxheSIsICJub25lIik7DQogICAgICAgICAgICBpZiAoaXNGaWx0ZXJlZCAmJiBnZXRDb29raWUoJ0N1cnJlbnRUYWInKSA9PSAnbGlzdCcpIHsNCiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnRmlsdGVyUmVzdWx0cycpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X0lzQ2hhbmdlRmlsdGVyIikudmFsKCIwIik7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbigpeyBzaG9ydGVuTGlua05hbWVzKCk7IH0pOw0KICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCl7IHNob3J0ZW5MaW5rTmFtZXMoKTsgfSk7DQogICAgPC9zY3JpcHQ+DQoNCiAgICANCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogICAgICAgICQoIi5EZWxlZ2F0aW9uUmVxdWVzdCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQoNCiAgICAgICAgICAgIHZhciBhID0gJCh0aGlzKTsNCiAgICAgICAgICAgIHZhciB3aWR0aCA9IDUwMDsNCiAgICAgICAgICAgIHZhciBoZWlnaHQgPSA2MDA7DQogICAgICAgICAgICB2YXIgbGVmdCA9IChzY3JlZW4ud2lkdGggLSB3aWR0aCkgLyAyOw0KICAgICAgICAgICAgdmFyIHRvcCA9IChzY3JlZW4uaGVpZ2h0IC0gaGVpZ2h0KSAvIDI7DQogICAgICAgICAgICB3aW5kb3cub3BlbihhLmF0dHIoImhyZWYiKSwgJycsICdzY3JvbGxiYXJzPXllcyxtZW51YmFyPW5vLHdpZHRoPScgKyB3aWR0aCArICcsaGVpZ2h0PScgKyBoZWlnaHQgKyAnLHJlc2l6YWJsZT15ZXMsdG9vbGJhcj1ubyxsb2NhdGlvbj1ubyxzdGF0dXM9bm8sdG9wPScgKyB0b3AgKyAnLCBsZWZ0PScgKyBsZWZ0KTsNCiAgICAgICAgfSk7DQogICAgICAgIGZ1bmN0aW9uIGNsb3NlRGF0ZVJhbmdlRmlsdGVyKCkNCiAgICAgICAgew0KICAgICAgICAgICAgZmlsdGVyYnlEZXBhcnRtZW50U2VsZWN0LmNsb3NlKCkNCiAgICAgICAgICAgIGZpbHRlcmJ5U3RhdHVzU2VsZWN0LmNsb3NlKCkNCiAgICAgICAgICAgIGZpbHRlcmJ5U3RhZ2VTZWxlY3QuY2xvc2UoKQ0KICAgICAgICAgICAgZmlsdGVyYnlDb25mbGljdE1lbWJlclNlbGVjdC5jbG9zZSgpDQogICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlU2VsZWN0LmNsb3NlKCkNCiAgICAgICAgfQ0KICAgICAgICAvL3N0b3AgY2FsZW5lciB0byBtaXNiZWhhdmUgaW4gSUUgYnJvd3Nlcg0KICAgICAgICAkKCIjZGl2RGF0ZVJhbmdlRmlsdGVyUG9wdXAiKS5jbGljayhmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsNCiAgICAgICAgICAgIGNsb3NlRGF0ZVJhbmdlRmlsdGVyKCk7DQogICAgICAgIH0pOw0KDQoNCiAgICA8L3NjcmlwdD4NCiAgICA8c2NyaXB0Pg0KICAgICAgICBmdW5jdGlvbiBOYXZpZ2F0aW9uVGFiX0NsaWNrKCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coIk5hdmlnYXRpb25UYWJfQ2xpY2soKSIpOw0KDQogICAgICAgICAgICAkKCIjYnRuQ2FsZW5kYXJWaWV3LCAjYnRuTGlzdFZpZXcsICNidG5Db25mbGljdHNWaWV3LCAjYnRuTGVnaXNsYXRpb25WaWV3LCAjYnRuTWVyZ2VkTGlzdFZpZXcsIC5mYy1teUN1c3RvbUxlZ2lzbGF0aW9uQnV0dG9uLWJ1dHRvbiwgLmZjLW15Q3VzdG9tQWdlbmRhSXRlbUhpc3RvcnlCdXR0b24tYnV0dG9uIikNCiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpDQogICAgICAgICAgICAgICAgLmF0dHIoImFyaWEtcHJlc3NlZCIsICJmYWxzZSIpOw0KDQogICAgICAgICAgICAkKCIjY2FsZW5kYXIiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjYWxsLWNvbmZsaWN0cy1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNhbGwtbGVnaXNsYXRpb24tbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNhZ2VuZGFpdGVtaGlzdG9yeS1saXN0IikuaGlkZSgpOw0KDQogICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNkb3dubG9hZEljb25Db25mbGljdHNMaXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI21lcmdlZExpc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfTW9udGhNZW51IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiLmZjLWxlZnQiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeUtleXdvcmQiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjRmlsdGVyUmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNGaWx0ZXJCeUNvbmZsaWN0TWVtYmVyIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2Rvd25sb2FkSWNvbkNvbmZsaWN0c0xpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjRmlsdGVyUmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNidG5GdW5uZWxGaWx0ZXJSZXN1bHRzIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X01vbnRoTWVudSIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNtZXJnZWRMaXN0SGVhZGVyIikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2ZpbHRlckljb24iKS5zaG93KCk7DQogICAgICAgICAgICAkKCIuTGVnaXNsYXRpb25IZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIuQWdlbmRhSXRlbUhpc3RvcnlIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICB2YXIgdGFiID0gJCh0aGlzKTsNCg0KDQogICAgICAgICAgICBzd2l0Y2ggKHRhYi50ZXh0KCkudHJpbSgpKSB7DQogICAgICAgICAgICAgICAgY2FzZSAiQWdlbmRhIEl0ZW0gSGlzdG9yeSI6DQogICAgICAgICAgICAgICAgICAgIHNldENvb2tpZSgnQ3VycmVudFRhYicsICdhZ2VuZGFJdGVtSGlzdG9yeScpOw0KICAgICAgICAgICAgICAgICAgICBWaWV3LkN1cnJlbnQgPSBWaWV3cy5BZ2VuZGFJdGVtSGlzdG9yeTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCIjQWdlbmRhSXRlbUhpc3RvcnlWaWV3QnV0dG9uLCAuZmMtbXlDdXN0b21BZ2VuZGFJdGVtSGlzdG9yeUJ1dHRvbi1idXR0b24iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCJmYy1zdGF0ZS1hY3RpdmUiKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCIjQWdlbmRhSXRlbUhpc3RvcnlWaWV3QnV0dG9uIikuYXR0cigiYXJpYS1wcmVzc2VkIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiI2NhbC1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjYWdlbmRhaXRlbWhpc3RvcnktbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiLkFnZW5kYUl0ZW1IaXN0b3J5SGVhZGVyIikuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjRmlsdGVyQnlLZXl3b3JkIikuc2hvdygpOw0KDQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIGNhc2UgIkxlZ2lzbGF0aW9uIjoNCiAgICAgICAgICAgICAgICAgICAgc2V0Q29va2llKCdDdXJyZW50VGFiJywgJ2xlZ2lzbGF0aW9uJyk7DQogICAgICAgICAgICAgICAgICAgIFZpZXcuQ3VycmVudCA9IFZpZXdzLkxlZ2lzbGF0aW9uOw0KDQogICAgICAgICAgICAgICAgICAgICQoIiNidG5MZWdpc2xhdGlvblZpZXcsIC5mYy1teUN1c3RvbUxlZ2lzbGF0aW9uQnV0dG9uLWJ1dHRvbiIpDQogICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KDQogICAgICAgICAgICAgICAgICAgICQoIiNidG5MZWdpc2xhdGlvblZpZXciKS5hdHRyKCJhcmlhLXByZXNzZWQiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgIC8vJCgiI2FsbC1sZWdpc2xhdGlvbi1saXN0Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjYWdlbmRhaXRlbWhpc3RvcnktbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiI0ZpbHRlckJ5S2V5d29yZCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgLy8kKCIuTGVnaXNsYXRpb25IZWFkZXIiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICQoIi5BZ2VuZGFJdGVtSGlzdG9yeUhlYWRlciIpLnNob3coKTsNCg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCg0KICAgICAgICAgICAgICAgIGNhc2UgJ1VwY29taW5nJzoNCiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBsaXN0IHRhYiBlbGVtZW50cyAvLw0KICAgICAgICAgICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICQoIiNhbGwtbGlzdCIpLnNob3coKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCIjYnRuTGlzdFZpZXciKS5hZGRDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgICAgICQoIiNidG5MaXN0VmlldyIpLmF0dHIoImFyaWEtcHJlc3NlZCIsICJ0cnVlIikNCiAgICAgICAgICAgICAgICAgICAgJCgiI2NhbC1saXN0Iikuc2hvdygpOw0KDQogICAgICAgICAgICAgICAgICAgIFZpZXcuQ3VycmVudCA9IFZpZXdzLkxpc3Q7DQogICAgICAgICAgICAgICAgICAgIHNldENvb2tpZSgnQ3VycmVudFRhYicsICdsaXN0Jyk7DQogICAgICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgIGlmICgkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNNb250aENoYW5nZSIpLnZhbCgpID09ICIxIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiI2N0bDAwX01haW5Db250ZW50X0lzTW9udGhDaGFuZ2UiKS52YWwoIjAiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdGaWx0ZXJSZXN1bHRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICQoIiNmaWx0ZXJJY29uIikuc2hvdygpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjRmlsdGVyUmVzdWx0cyIpLnNob3coKTsNCg0KICAgICAgICAgICAgICAgICAgICAvL1NldCBmb2N1cyBvbiB0aGUgc2VhcmNoIGJhciAtIG5vIGxvbmdlciBuZWVkIHdpdGggbmV3IGFjY2Vzc2liaWxpdHkgZ3VpZGUNCiAgICAgICAgICAgICAgICAgICAgLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3RsMDBfTWFpbkNvbnRlbnRfdHh0U2VhcmNoJykuZm9jdXMoKTsNCg0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAkKCIjZmlsdGVySWNvbiIpLnNob3coKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICQoIi5GaWx0ZXJCeURhdGUiKS5rZXlkb3duKGZ1bmN0aW9uIChlKSB7DQogICAgICAgICAgICBpZiAoZS53aGljaCAhPSA5KXsNCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCl7DQoNCiAgICAgICAgICAgIHZhciBkYXRlUGlja2VyTWVzc2FnZSA9ICh3aW5kb3cubG9jYXRpb24uaHJlZi50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCJmcmVuY2giKSA/ICJBcHB1eWV6IHN1ciBsJ2VzcGFjZSBwb3VyIG91dnJpci4gVmV1aWxsZXogc8OpbGVjdGlvbm5lciB1bmUgZGF0ZSBkZSBkw6lidXQgZXQgZGUgZmluLiBSZXRvdXIgYXJyacOocmUgcG91ciBlZmZhY2VyIiA6ICJQcmVzcyBzcGFjZSB0byBvcGVuLiBQbGVhc2Ugc2VsZWN0IGEgc3RhcnQgYW5kIGVuZCBkYXRlLiBCYWNrc3BhY2UgdG8gY2xlYXIiKTsNCiAgICAgICAgICAgIHZhciBkYXRlcmFuZ2VwaWNrZXIgPSBuZXcgZWouY2FsZW5kYXJzLkRhdGVSYW5nZVBpY2tlcih7DQogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGRhdGVQaWNrZXJNZXNzYWdlLA0KICAgICAgICAgICAgICAgIGRheUhlYWRlckZvcm1hdDogIkFiYnJldmlhdGVkIiwNCiAgICAgICAgICAgICAgICBrZXlDb25maWdzOnsNCiAgICAgICAgICAgICAgICAgICAgYWx0RG93bkFycm93OiAic3BhY2UiDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBmb3JtYXQ6ICdNL2QveXl5eScsDQogICAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcuZHJvcGRvd24tdG9nZ2xlJykubmV4dCgpLnRvZ2dsZSgpOw0KICAgICAgICAgICAgICAgICAgICB9LCA1MCk7DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmUtbGVmdC1jYWxlbmRhciA+IC5lLWNvbnRlbnQgPiB0YWJsZScpLnByZXBlbmQoJzxjYXB0aW9uIGNsYXNzPSJzci1vbmx5Ij4gU2VsZWN0IHlvdXIgc3RhcnQgZGF0ZSA8L2NhcHRpb24+Jyk7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcuZS1yaWdodC1jYWxlbmRhciA+IC5lLWNvbnRlbnQgPiB0YWJsZScpLnByZXBlbmQoJzxjYXB0aW9uIGNsYXNzPSJzci1vbmx5Ij4gU2VsZWN0IHlvdXIgZW5kIGRhdGUgPC9jYXB0aW9uPicpOw0KICAgICAgICAgICAgICAgICAgICB9LCA1MCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoIHdpbmRvdyApLnJlc2l6ZShmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPj0gNDk5KSB7DQogICAgICAgICAgICAgICAgICAgIGRhdGVyYW5nZXBpY2tlci5pc01vYmlsZSA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRhdGVyYW5nZXBpY2tlci5pc01vYmlsZSA9IHRydWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGRhdGVyYW5nZXBpY2tlci5hcHBlbmRUbygnaW5wdXRbaWQ9ImN0bDAwX01haW5Db250ZW50X0ZpbHRlckJ5RGF0ZSJdJyk7DQoNCiAgICAgICAgICAgICQoIi5kYXRlcmFuZ2VwaWNrZXIiKS5jbGljayhmdW5jdGlvbihldmVudCl7DQogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7DQogICAgICAgICAgICAgICAgJCgiLmUtaW5wdXQtZ3JvdXAtaWNvbi5lLXJhbmdlLWljb24uZS1pY29ucyIpLmF0dHIoInRhYkluZGV4IiwgIjAiKTsNCiAgICAgICAgICAgICAgICAkKCIuZS1pbnB1dC1ncm91cC1pY29uLmUtcmFuZ2UtaWNvbi5lLWljb25zIikuYXR0cigiYXJpYS1sYWJlbCIsICJGaWx0ZXIgYnkgZGF0ZSBidXR0b24iKTsNCiAgICAgICAgICAgICAgICAkKCIuZS1pbnB1dC1ncm91cC1pY29uLmUtcmFuZ2UtaWNvbi5lLWljb25zIikua2V5ZG93bihmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PSAxMyB8fCBlLndoaWNoID09IDMyKXsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVyYW5nZXBpY2tlci5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09IDI3KXsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUnKS5uZXh0KCkudG9nZ2xlKCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB2YXIgc3luY0Z1c2lvbkZvcm1MYWJlbCA9ICJEYXRlIHBpY2tlciBpY29uIg0KICAgICAgICAgICAgICAgICQoIi5lLWRhdGVyYW5nZS1oaWRkZW4iKS5lYWNoKGZ1bmN0aW9uKGksdil7DQogICAgICAgICAgICAgICAgICAgICQodikuYXR0cigiaWQiLCAiZGF0ZVBpY2tlckljb24iICsgaSk7DQogICAgICAgICAgICAgICAgICAgICQodikuYWZ0ZXIoJzxsYWJlbCBmb3I9ImRhdGVQaWNrZXJJY29uJyArIGkgKyAnIiBjbGFzcz0idmlzdWFsbHloaWRkZW4iPicgKyBzeW5jRnVzaW9uRm9ybUxhYmVsICsgJyAnICsgaSArICc8L2xhYmVsPicpOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfSwgMzAwKTsNCg0KICAgICAgICAgICAgJCgiLkZpbHRlckJ5RGF0ZSIpLmtleWRvd24oZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PSA4KXsNCiAgICAgICAgICAgICAgICAgICAgJCgiLkZpbHRlckJ5RGF0ZSIpLnZhbCgiIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAkKCdpbnB1dFtpZD0iY3RsMDBfTWFpbkNvbnRlbnRfRmlsdGVyQnlEYXRlIl0nKS5rZXlkb3duKGZ1bmN0aW9uKGUpew0KICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpew0KICAgICAgICAgICAgICAgICAgICAkKCcuZHJvcGRvd24tdG9nZ2xlJykubmV4dCgpLnRvZ2dsZSgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgJCgiYm9keSIpLnRvb2x0aXAoeyBwbGFjZW1lbnQ6ICd0b3AnLCBzZWxlY3RvcjogIi5Mb2NhdGlvbi1Ub29sdGlwIiB9KTsNCiAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkgew0KICAgICAgICAgICAgICAgICQodGhpcykubmV4dCgpLnRvZ2dsZSgpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAkKCJib2R5IikuY2xpY2soZnVuY3Rpb24gKGUpIHsNCg0KICAgICAgICAgICAgICAgIGlmICghJChlLnRhcmdldCkuY2xvc2VzdCgiLmRyb3Bkb3duLXRvZ2dsZSwgLmRyb3Bkb3duLXRvZ2dsZSBpLC5kcm9wZG93bi1tZW51LCAuZGF0ZXJhbmdlcGlja2VyLCAucHJldiwgLm5leHQiKS5sZW5ndGggPiAwICYmICEkKCdbaWRePWN0bDAwX01haW5Db250ZW50X0ZpbHRlckJ5RGF0ZV9wb3B1cF0nKS5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgJCgnLmRyb3Bkb3duLXRvZ2dsZScpLm5leHQoKS5jc3MoImRpc3BsYXkiLCAibm9uZSIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoJCgiI2N0bDAwX01haW5Db250ZW50X0lzQ2hhbmdlRmlsdGVyIikudmFsKCkgPT0gIjEiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBBcHBseUZpbHRlckNoYW5nZXMoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBmdW5jdGlvbiBnZXRUYWIoKSB7DQogICAgICAgICAgICAgICB2YXIgY29va2llID0gZ2V0Q29va2llKCdDdXJyZW50VGFiJyk7DQogICAgICAgICAgICAgICBpZiAoY29va2llID09ICIiKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VGFiID0gJ21lcmdlZGxpc3QnOw0KICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWVyeVN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlTdHJpbmcpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmICh1cmxQYXJhbXMuZ2V0KCJDdXJyZW50VGFiIikgPT0gbnVsbCkgey8vdGhpcyBpcyBhIGJhY2t1cCBmb3Igd2hlbiBjb29raWVzIGRvbid0IHdvcmsgZm9yIGEgY2xpZW50DQogICAgICAgICAgICAgICAgICAgICAgICBjb29raWUgPSBkZWZhdWx0VGFiLnRvTG93ZXJDYXNlKCk7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb29raWUgPSB1cmxQYXJhbXMuZ2V0KCJDdXJyZW50VGFiIik7DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiBjb29raWU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHZhciB0YWJDb29raWUgPSBnZXRUYWIoKTsNCg0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICQoIiNGaWx0ZXJSZXN1bHRzIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNidG5GaWx0ZXJSZXN1bHRzIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNidG5GdW5uZWxGaWx0ZXJSZXN1bHRzIikuaGlkZSgpOw0KDQogICAgICAgICAgICAgICAgaWYgKCQoJyNjdGwwMF9NYWluQ29udGVudF90eHRTZWFyY2gnKS52YWwoKSAhPSAiIiAmJiB0YWJDb29raWUgIT0gImNvbmZsaWN0Iikgew0KICAgICAgICAgICAgICAgICAgICAkKCIjYnRuRmlsdGVyUmVzdWx0cyIpLnNob3coKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSBpZiAodGFiQ29va2llID09ICJjb25mbGljdCIgfHwgdGFiQ29va2llID09ICJhZ2VuZGFJdGVtSGlzdG9yeSIpIHsNCiAgICAgICAgICAgICAgICAgICAgJCgiI2J0bkZ1bm5lbEZpbHRlclJlc3VsdHMiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICQoIiNidG5GdW5uZWxGaWx0ZXJSZXN1bHRzIikub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYodGFiQ29va2llID09ICJhZ2VuZGFJdGVtSGlzdG9yeSIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkQWdlbmRhSXRlbUhpc3RvcnlEYXRhKHRydWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZENvbmZsaWN0RGF0YSh0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoIiNGaWx0ZXJSZXN1bHRzIikuc2hvdygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJCgnI2N0bDAwX01haW5Db250ZW50X3R4dFNlYXJjaCcpLm9uKCdpbnB1dCBwcm9wZXJ0eWNoYW5nZScsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgY29va2llID0gZ2V0VGFiKCk7DQoNCiAgICAgICAgICAgICAgICAkKCIjRmlsdGVyUmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuRmlsdGVyUmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYnRuRnVubmVsRmlsdGVyUmVzdWx0cyIpLmhpZGUoKTsNCg0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnZhbCgpICE9ICIiICYmIGNvb2tpZSAhPSAiY29uZmxpY3QiKSB7DQogICAgICAgICAgICAgICAgICAgICQoIiNidG5GaWx0ZXJSZXN1bHRzIikuc2hvdygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIGlmIChjb29raWUgPT0gImNvbmZsaWN0Iikgew0KICAgICAgICAgICAgICAgICAgICAkKCIjYnRuRnVubmVsRmlsdGVyUmVzdWx0cyIpLnNob3coKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoIiNGaWx0ZXJSZXN1bHRzIikuc2hvdygpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfdHh0RmlsdGVyQnlLZXl3b3JkJykub24oJ2lucHV0IHByb3BlcnR5Y2hhbmdlJywgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Jc0NoYW5nZUZpbHRlciIpLnZhbCgiMSIpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgIGlmKCQoIi5zcy1zZWFyY2giKS5sZW5ndGggPiAwKXsNCiAgICAgICAgICAgICAgICAkKCIuc3Mtc2VhcmNoID4gaW5wdXQiKS5maXJzdCgpLmF0dHIoImlkIiwic2VhcmNoTWVldGluZ1R5cGUiKS5hdHRyKCJhcmlhLWxhYmVsbGVkYnkiLCJzZWFyY2hNZWV0aW5nVHlwZSIpOw0KICAgICAgICAgICAgICAgICQoIi5zcy1zZWFyY2giKS5maXJzdCgpLnByZXBlbmQoIjxsYWJlbCBmb3I9J3NlYXJjaE1lZXRpbmdUeXBlJyBjbGFzcz0nc3Itb25seSc+T3B0aW9uYWwgZmlsdGVyIGJ5IE1lZXRpbmcgVHlwZSBTZWFyY2g8L2xhYmVsPiIpOw0KDQogICAgICAgICAgICAgICAgJCgiLnNzLXNlYXJjaCA+IGlucHV0IikubGFzdCgpLmF0dHIoImlkIiwic2VhcmNoQ29uZmxpY3RNZW1iZXIiKS5hdHRyKCJhcmlhLWxhYmVsbGVkYnkiLCJzZWFyY2hDb25mbGljdE1lbWJlciIpOw0KICAgICAgICAgICAgICAgICQoIi5zcy1zZWFyY2giKS5sYXN0KCkucHJlcGVuZCgiPGxhYmVsIGZvcj0nc2VhcmNoQ29uZmxpY3RNZW1iZXInIGhpZGRlbj5TZWFyY2ggPC9sYWJlbD4iKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy9mb3IgZW5hYmxlZCBzZWFyY2hpbmcgdGhlIGZvY3VzIC0gbm8gbG9uZ2VyIG5lZWQgd2l0aCBuZXcgYWNjZXNzaWJpbGl0eSBndWlkZQ0KICAgICAgICAgICAgLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3RsMDBfTWFpbkNvbnRlbnRfdHh0U2VhcmNoJykuZm9jdXMoKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLy9MaXN0IEZ1bmN0aW9ucw0KICAgICAgICAvLyQoIiNidG5MaXN0VmlldyIpLmNsaWNrKE5hdmlnYXRpb25UYWJfQ2xpY2spOw0KDQoNCiAgICAgICAgJCgiI2FsbC1saXN0IC5mYy1teUN1c3RvbUJ1dHRvbi1idXR0b24iKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAvLyQoIiNjYWwtbGlzdCAuZmMtbW9udGgtYnV0dG9uIikuY2xpY2soKTsNCiAgICAgICAgICAgIC8vJCgiI2NhbGVuZGFyIC5mYy1teUN1c3RvbUJ1dHRvbi1idXR0b24iKS5jbGljaygpOw0KICAgICAgICB9KTsNCiAgICAgICAgLyoNCiAgICAgICAgJCgiI2NhbGVuZGFyIC5mdGh0ZmhmdGYiKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBOYXZpZ2F0aW9uVGFiX0NsaWNrKCk7DQoNCiAgICAgICAgICAgICQoIiNhbGwtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICQoIiNhbGwtY29uZmxpY3RzLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAkKCIjYWxsLWxlZ2lzbGF0aW9uLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjYWxsLW1lcmdlZC1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiLmZjLWxlZnQiKS5zaG93KCk7DQogICAgICAgIH0pOyovDQoNCiAgICAgICAgLy8kKCIuZmMtbXlDdXN0b21MZWdpc2xhdGlvbkJ1dHRvbi1idXR0b24iKS5jbGljayhOYXZpZ2F0aW9uVGFiX0NsaWNrKTsNCiAgICAgICAgLyoNCiAgICAgICAgJCgiI2NhbGVuZGFyIC55aDQ1NTRoNDVoNDVoIikuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgTmF2aWdhdGlvblRhYl9DbGljaygpOw0KDQogICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAkKCIjYWxsLWNvbmZsaWN0cy1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2FsbC1sZWdpc2xhdGlvbi1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgJCgiI2FsbC1tZXJnZWQtbGlzdCIpLnNob3coKTsNCiAgICAgICAgICAgICQoIi5mYy1sZWZ0Iikuc2hvdygpOw0KICAgICAgICB9KTsqLw0KDQoNCiAgICAgICAgLy8vLyQoIiNhbGwtbGlzdCAuZmMtbXlDdXN0b21CdXR0b24tYnV0dG9uIikuY2xpY2soZnVuY3Rpb24gKCkgew0KICAgICAgICAvLy8vICAgIE5hdmlnYXRpb25UYWJfQ2xpY2soKTsNCg0KICAgICAgICAvLy8vICAgICQoIiNhbGwtbGlzdCIpLnNob3coKTsNCiAgICAgICAgLy8vLyAgICAkKCIjYWxsLWNvbmZsaWN0cy1saXN0IikuaGlkZSgpOw0KICAgICAgICAvLy8vICAgICQoIiNhbGwtbGVnaXNsYXRpb24tbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgLy8vLyAgICAkKCIjYWxsLW1lcmdlZC1saXN0IikuaGlkZSgpOw0KICAgICAgICAvLy8vICAgICQoIiNzZWFyY2hyZXN1bHRzIikuaGlkZSgpOw0KICAgICAgICAvLy8vfSk7DQoNCiAgICAgICAgZnVuY3Rpb24gc2VhcmNoRGF0YSgpIHsNCiAgICAgICAgICAgIFNhdmVGaWx0ZXJPcHRpb25zKCk7DQogICAgICAgICAgICAkKCIjc2VhcmNoVGFibGVUZW1wIikuaGlkZSgpOw0KICAgICAgICAgICAgdmFyIHNlYXJjaFRleHQgPSAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfdHh0U2VhcmNoJykudmFsKCk7DQogICAgICAgICAgICB2YXIgZmlsdGVyYnlNZWV0aW5nVHlwZSA9ICQoIiNjdGwwMF9NYWluQ29udGVudF9sYmxNdWx0aVNlbGVjdCIpLnZhbCgpOw0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5RGF0ZSA9ICQoJyNjdGwwMF9NYWluQ29udGVudF9GaWx0ZXJCeURhdGUnKS52YWwoKTsNCiAgICAgICAgICAgIHZhciBmaWx0ZXJieU1lZXRpbmdUeXBlSWRzID0gIiI7DQogICAgICAgICAgICBpZiAoKGZpbHRlcmJ5TWVldGluZ1R5cGUgIT0gbnVsbCAmJiBmaWx0ZXJieU1lZXRpbmdUeXBlICE9IG51bGwpIHx8IChmaWx0ZXJCeURhdGUgIT0gbnVsbCAmJiBmaWx0ZXJCeURhdGUgIT09ICIiICkpIHsNCiAgICAgICAgICAgICAgICAkKCIjYnRuRmlsdGVyIikuYXBwZW5kKCI8c3BhbiBjbGFzcz0nZG90Jz48L3NwYW4+Iik7DQogICAgICAgICAgICAgICAgZmlsdGVyYnlNZWV0aW5nVHlwZUlkcyA9IGZpbHRlcmJ5TWVldGluZ1R5cGUuam9pbignLCcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyA9ICIiOw0KICAgICAgICAgICAgdmFyIGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lID0gJCgiW2lkKj1sYmxNdWx0aVNlbGVjdF0gb3B0aW9uOnNlbGVjdGVkIik7DQogICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICBmaWx0ZXJieU1lZXRpbmdUeXBlTmFtZXMgKz0gJCh0aGlzKS5odG1sKCkrICIsIjsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICB2YXIgZmlsdGVyQnlNZWV0aW5nRG9jdW1lbnRUeXBlcyA9ICIiOw0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5RXh0ZW5zaW9ucyA9ICIiOw0KICAgICAgICAgICAgdmFyIGZpbHRlckJ5TGFuZ3VhZ2UgPSAiIjsNCiAgICAgICAgICAgICQoIi5jaGtNZWV0aW5nRG9jdW1lbnRzIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoIjpjaGVja2VkIikpIHsNCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyQnlNZWV0aW5nRG9jdW1lbnRUeXBlcyArPSAkKHRoaXMpLnZhbCgpICsgIiwiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCIuY2hrRG9jdW1lbnRUeXBlcyIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCI6Y2hlY2tlZCIpKSB7DQogICAgICAgICAgICAgICAgICAgIGZpbHRlckJ5RXh0ZW5zaW9ucyArPSAkKHRoaXMpLnZhbCgpICsgIiwiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBpZiAoJCgiI2hkbklzTGFuZ3VhZ2VGaWx0ZXJPbiIpLnZhbCgpID09ICJ0cnVlIikgew0KICAgICAgICAgICAgICAgICQoIiNsYW5ndWFnZUZpbHRlckR2Iikuc2hvdygpOw0KICAgICAgICAgICAgICAgICQoIi5jaGtMYW5ndWFnZSIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5pcygiOmNoZWNrZWQiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyQnlMYW5ndWFnZSArPSAkKHRoaXMpLnZhbCgpICsgIiwiOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCIjbGFuZ3VhZ2VGaWx0ZXJEdiIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIuY2hrTGFuZ3VhZ2UiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyQnlMYW5ndWFnZSArPSAkKHRoaXMpLnZhbCgpICsgIiwiOw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoc2VhcmNoVGV4dC50cmltKCkgIT0gIiIpIHsNCiAgICAgICAgICAgICAgICBOYXZpZ2F0aW9uVGFiX0NsaWNrKCk7DQogICAgICAgICAgICAgICAgJCgiI3NlYXJjaFRhYmxlID4gdGhlYWQgPiB0ciIpLmFwcGVuZCgiPHRoPjwvdGg+Iik7DQoNCiAgICAgICAgICAgICAgICBpZiAoJC5mbi5EYXRhVGFibGUuaXNEYXRhVGFibGUoJyNzZWFyY2hUYWJsZScpKSB7DQogICAgICAgICAgICAgICAgICAgICQoJyNzZWFyY2hUYWJsZScpLmRhdGFUYWJsZSgpLmZuQ2xlYXJUYWJsZSgpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjc2VhcmNoVGFibGUnKS5kYXRhVGFibGUoKS5mbkRlc3Ryb3koKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiI3NlYXJjaFRhYmxlIHRib2R5IikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgdmFyIHNlYXJjaFRhYmxlID0gICQoJyNzZWFyY2hUYWJsZScpLmRhdGFUYWJsZSh7DQogICAgICAgICAgICAgICAgICAgICJkb20iOiAnPCJ0b3AiaT5ydDwiYm90dG9tInA+PCJjbGVhciI+JywNCiAgICAgICAgICAgICAgICAgICAgInBhZ2luZ1R5cGUiOiAiZnVsbF9udW1iZXJzIiwNCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoaW5nOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgImJQcm9jZXNzaW5nIjogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgImJTb3J0IjogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgICJkcmF3Q2FsbGJhY2siOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNzZWFyY2hUYWJsZSB0aGVhZCIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3NlYXJjaFRhYmxlVGVtcCIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNzZWFyY2hUYWJsZV9pbmZvIikuY2xvc2VzdCgiI3NlYXJjaFRhYmxlX3dyYXBwZXIiKS5maW5kKCIjc2VhcmNoVGFibGVUZW1wIikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCIjc2VhcmNoVGFibGVfaW5mbyIpLnBhcmVudCgpLmFmdGVyKCQoIiNzZWFyY2hUYWJsZVRlbXAiKVswXS5vdXRlckhUTUwpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3NlYXJjaFRhYmxlVGVtcCIpLmhpZGUoKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkKCIjZmlsdGVyLW9wdGlvbnMiKS5pcygiOnZpc2libGUiKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiNmaWx0ZXItb3B0aW9ucyIpLnNob3coKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgJCgiI2ZpbHRlci1tZWV0aW5nLWNvbGxhcHNlIikuY2xpY2soKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmVkIGNvbmRpdGlvbiBmb3IgZmlsdGVyIGRlZmF1bHQgYmVoYXZpb3VyDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAkKCIuc3JjaC1ncnAtdGFibGU6bGFzdCIpLmNzcygiYm9yZGVyLWJvdHRvbSIsICIxcHggc29saWQgZGFya2dyYXkiKTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQoIiNzZWFyY2hUYWJsZSB0ciB0ZDpmaXJzdCIpLmhhc0NsYXNzKCJkYXRhVGFibGVzX2VtcHR5IikpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjc2VhcmNoVGFibGVfd3JhcHBlciAjc2VhcmNoVGFibGVUZW1wIikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAiYlNlcnZlclNpZGUiOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAic0FqYXhTb3VyY2UiOiAgIi9HZXRTZWFyY2hEYXRhLmFzbXgvR2V0U2VhcmNoTWVldGluZ0RhdGEiICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCwNCiAgICAgICAgICAgICAgICAgICAgImZuU2VydmVyUGFyYW1zIjogZnVuY3Rpb24gKGFvRGF0YSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYW9EYXRhLnB1c2goeyAibmFtZSI6ICJzZWFyY2hUZXh0IiwgInZhbHVlIjogc2VhcmNoVGV4dCB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFvRGF0YS5wdXNoKHsgIm5hbWUiOiAiZmlsdGVyYnlNZWV0aW5nVHlwZUlkcyIsICJ2YWx1ZSI6IGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICBhb0RhdGEucHVzaCh7ICJuYW1lIjogImZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyIsICJ2YWx1ZSI6IGZpbHRlcmJ5TWVldGluZ1R5cGVOYW1lcyB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFvRGF0YS5wdXNoKHsgIm5hbWUiOiAiZmlsdGVyQnlEYXRlIiwgInZhbHVlIjogZmlsdGVyQnlEYXRlIH0pOw0KDQogICAgICAgICAgICAgICAgICAgICAgICBhb0RhdGEucHVzaCh7ICJuYW1lIjogImZpbHRlckJ5TWVldGluZ0RvY3VtZW50VHlwZXMiLCAidmFsdWUiOiBmaWx0ZXJCeU1lZXRpbmdEb2N1bWVudFR5cGVzIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgYW9EYXRhLnB1c2goeyAibmFtZSI6ICJmaWx0ZXJCeUV4dGVuc2lvbnMiLCAidmFsdWUiOiBmaWx0ZXJCeUV4dGVuc2lvbnMgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICBhb0RhdGEucHVzaCh7ICJuYW1lIjogImZpbHRlckJ5TGFuZ3VhZ2UiLCAidmFsdWUiOiBmaWx0ZXJCeUxhbmd1YWdlIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgYW9EYXRhLnB1c2goeyAibmFtZSI6ICJpbmNsdWRlQ29uZmxpY3RzIiwgInZhbHVlIjogJCgiI2Noa0NvbmZsaWN0cyIpLnByb3AoImNoZWNrZWQiKSB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGFvRGF0YS5wdXNoKHsgIm5hbWUiOiAiaW5jbHVkZUNvbW1lbnRzIiwgInZhbHVlIjogJCgiI2Noa0NvbW1lbnRzIikucHJvcCgiY2hlY2tlZCIpIH0pOw0KICAgICAgICAgICAgICAgICAgICB9LA0KDQogICAgICAgICAgICAgICAgICAgICJzU2VydmVyTWV0aG9kIjogInBvc3QiLA0KICAgICAgICAgICAgICAgICAgICAiYW9Db2x1bW5zIjogW3sgbURhdGE6IHt9IH1dLA0KICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogew0KICAgICAgICAgICAgICAgICAgICAgICAgInNFbXB0eVRhYmxlIjogIk5vIGRhdGEgYXZhaWxhYmxlIGluIHRhYmxlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICJzSW5mbyI6ICJTaG93aW5nIF9TVEFSVF8gdG8gX0VORF8gb2YgX1RPVEFMXyBlbnRyaWVzIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICJzSW5mb0VtcHR5IjogIlNob3dpbmcgMCB0byAwIG9mIDAgZW50cmllcyIsDQogICAgICAgICAgICAgICAgICAgICAgICAic0luZm9GaWx0ZXJlZCI6ICIoZmlsdGVyZWQgZnJvbSBfTUFYXyB0b3RhbCBlbnRyaWVzKSIsDQogICAgICAgICAgICAgICAgICAgICAgICAic1plcm9SZWNvcmRzIjogIk5vIG1hdGNoaW5nIHJlY29yZHMgZm91bmQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0OiAnPicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICc8Jw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npbmc6ICc8ZGl2IGNsYXNzPSJsb2FkZXJQb3NpdGlvbiI+PHNwYW4gY2xhc3M9ImxhIGxhLXNwaW5uZXIgbGEtc3BpbiBsb2FkZXJEZXNpZ24iPjwvc3Bhbj48L2Rpdj4nDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICQoIiNjYWxlbmRhciIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLWxpc3QiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2FsbC1jb25mbGljdHMtbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjYWxsLW1lcmdlZC1saXN0IikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoIiNhbGwtbGVnaXNsYXRpb24tbGlzdCIpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAkKCIjY2FsLWxpc3QiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgiI2J0bkxpc3RWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5Db25mbGljdHNWaWV3IikucmVtb3ZlQ2xhc3MoImZjLXN0YXRlLWFjdGl2ZSIpOw0KICAgICAgICAgICAgICAgICQoIiNidG5MZWdpc2xhdGlvblZpZXciKS5yZW1vdmVDbGFzcygiZmMtc3RhdGUtYWN0aXZlIik7DQogICAgICAgICAgICAgICAgJCgiI3NlYXJjaHJlc3VsdHMiKS5zaG93KCk7DQogICAgICAgICAgICAgICAgaWYgKGZpbHRlcmJ5TWVldGluZ1R5cGVJZHMgIT0gIiIgfHwgZmlsdGVyQnlEYXRlICE9ICIiKSB7DQogICAgICAgICAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUgaScpLmFkZENsYXNzKCdmaWx0ZXJlZCcpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNGaWx0ZXIiKS52YWwoJzEnKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUgaScpLnJlbW92ZUNsYXNzKCdmaWx0ZXJlZCcpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNGaWx0ZXIiKS52YWwoJzAnKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJCgnLmRyb3Bkb3duLXRvZ2dsZScpLm5leHQoKS5jc3MoImRpc3BsYXkiLCAibm9uZSIpOw0KICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Nb250aE1lbnUiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI21lcmdlZExpc3RIZWFkZXIiKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgJCgiI2ZpbHRlckljb24iKS5zaG93KCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCIjc2VhcmNocmVzdWx0cyIpLmhpZGUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Jc0NoYW5nZUZpbHRlciIpLnZhbCgiMCIpOw0KDQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICAkKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIFN5cy5XZWJGb3Jtcy5QYWdlUmVxdWVzdE1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5hZGRfZW5kUmVxdWVzdChiaW5kRGF0YVRhYmxlKTsgLy8gYmluZCBkYXRhIHRhYmxlIG9uIGV2ZXJ5IFVwZGF0ZVBhbmVsIHJlZnJlc2gNCiAgICAgICAgfSk7DQoNCiAgICAgICAgLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjk0MTEwNC9yZW1vdmUtYS1wYXJhbWV0ZXItdG8tdGhlLXVybC13aXRoLWphdmFzY3JpcHQNCiAgICAgICAgZnVuY3Rpb24gUmVtb3ZlUGFyYW0oa2V5LCBzb3VyY2VVUkwpIHsNCiAgICAgICAgICAgIHZhciByZXR1cm5VUkwgPSBzb3VyY2VVUkwuc3BsaXQoIj8iKVswXSwNCiAgICAgICAgICAgICAgICBwYXJhbXNfYXJyID0gW10sDQogICAgICAgICAgICAgICAgcXVlcnlTdHJpbmcgPSAoc291cmNlVVJMLmluZGV4T2YoIj8iKSAhPT0gLTEpID8gc291cmNlVVJMLnNwbGl0KCI/IilbMV0gOiAiIjsNCiAgICAgICAgICAgIGlmIChxdWVyeVN0cmluZykgew0KICAgICAgICAgICAgICAgIHBhcmFtc19hcnIgPSBxdWVyeVN0cmluZy5zcGxpdCgiJiIpOw0KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBwYXJhbXNfYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc19hcnJbaV0uc3BsaXQoIj0iKVswXTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtID09PSBrZXkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc19hcnIuc3BsaWNlKGksIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKHBhcmFtc19hcnIubGVuZ3RoKSByZXR1cm5VUkwgPSByZXR1cm5VUkwgKyAiPyIgKyBwYXJhbXNfYXJyLmpvaW4oIiYiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIHJldHVybiByZXR1cm5VUkw7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBVcGRhdGVRdWVyeVN0cmluZyhrZXksIHZhbHVlLCB1cmwpIHsNCiAgICAgICAgICAgIGlmICghdXJsKSB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsNCiAgICAgICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoIihbPyZdKSIgKyBrZXkgKyAiPS4qPygmfCN8JCkoLiopIiwgImdpIiksDQogICAgICAgICAgICAgICAgaGFzaDsNCg0KICAgICAgICAgICAgaWYgKHJlLnRlc3QodXJsKSkgew0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmwucmVwbGFjZShyZSwgJyQxJyArIGtleSArICI9IiArIHZhbHVlICsgJyQyJDMnKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGhhc2ggPSB1cmwuc3BsaXQoJyMnKTsNCiAgICAgICAgICAgICAgICAgICAgdXJsID0gaGFzaFswXS5yZXBsYWNlKHJlLCAnJDEkMycpLnJlcGxhY2UoLygmfFw/KSQvLCAnJyk7DQogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFzaFsxXSAhPT0gJ3VuZGVmaW5lZCcgJiYgaGFzaFsxXSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9ICcjJyArIGhhc2hbMV07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gdXJsLmluZGV4T2YoJz8nKSAhPT0gLTEgPyAnJicgOiAnPyc7DQogICAgICAgICAgICAgICAgICAgIGhhc2ggPSB1cmwuc3BsaXQoJyMnKTsNCiAgICAgICAgICAgICAgICAgICAgdXJsID0gaGFzaFswXSArIHNlcGFyYXRvciArIGtleSArICc9JyArIHZhbHVlOw0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhc2hbMV0gIT09ICd1bmRlZmluZWQnICYmIGhhc2hbMV0gIT09IG51bGwpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHVybCArPSAnIycgKyBoYXNoWzFdOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmw7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICQoICIuZmMtbW9udGgtYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKGpRdWVyeSgnYm9keScpLmhlaWdodCgpICsgNSwgIioiKTsNCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtbXlDdXN0b21CdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKGpRdWVyeSgnYm9keScpLmhlaWdodCgpICsgNSwgIioiKTsNCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtbXlDdXN0b21Db25mbGljdHNCdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKGpRdWVyeSgnYm9keScpLmhlaWdodCgpICsgNSwgIioiKTsNCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtbWVyZ2VkTGlzdFZpZXdCdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKGpRdWVyeSgnYm9keScpLmhlaWdodCgpICsgNSwgIioiKTsNCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtcGFzdFZpZXdCdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKGpRdWVyeSgnYm9keScpLmhlaWdodCgpICsgNSwgIioiKTsNCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtbXlDdXN0b21MZWdpc2xhdGlvbkJ1dHRvbi1idXR0b24iICkub24oICJjbGljayIsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoalF1ZXJ5KCdib2R5JykuaGVpZ2h0KCkgKyA1LCAiKiIpOw0KDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCggIi5mYy1teUN1c3RvbUFnZW5kYUl0ZW1IaXN0b3J5QnV0dG9uLWJ1dHRvbiIgKS5vbiggImNsaWNrIiwgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZShqUXVlcnkoJ2JvZHknKS5oZWlnaHQoKSArIDUsICIqIik7DQoNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCJidXR0b25bZGF0YS1kaXNtaXNzPSdtb2RhbCddIikub24oICJjbGljayIsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgICQoJyNib290c3RyYXBNb2RhbCcpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsNCiAgICAgICAgICAgICAgICAkKCcjZnVsbENhbE1vZGFsJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpOw0KICAgICAgICAgICAgICAgICQoIiNjb25mbGljdHNEZXRhaWxzTW9kYWwiKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7DQogICAgICAgICAgICAgICAgJCgnI0xlZ2lzbGF0aW9uRGV0YWlsc01vZGFsJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpOw0KICAgICAgICAgICAgICAgICQoJyNNZWV0aW5nVHlwZU5hbWUnKS5yZW1vdmUoKTsNCiAgICAgICAgICAgICAgICAkKCcjbW9kYWxUaXRsZScpLnJlbW92ZSgpOw0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoZG9jdW1lbnQpLmtleWRvd24oZnVuY3Rpb24oZXZlbnQpIHsNCiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAyNykgew0KICAgICAgICAgICAgICAgICAgICAkKCcjYm9vdHN0cmFwTW9kYWwnKS5tb2RhbCgnaGlkZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2Z1bGxDYWxNb2RhbCcpLm1vZGFsKCdoaWRlJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjY29uZmxpY3RzRGV0YWlsc01vZGFsJykubW9kYWwoJ2hpZGUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7DQogICAgICAgICAgICAgICAgICAgICQoJyNMZWdpc2xhdGlvbkRldGFpbHNNb2RhbCcpLm1vZGFsKCdoaWRlJykuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjTWVldGluZ1R5cGVOYW1lJykucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgICQoJyNtb2RhbFRpdGxlJykucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHsNCiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gdG8gZml4IHRoZSBpc3N1ZSBvY2N1cmluZyBvbiBzZWxlY3QvdW5zZWxlY3QgY2hlY2tib3ggYW5kIGhpdGluZyBlbnRlciB3aWxsIHJlZnJlc2ggdGhlIHBhZ2Uoc2l0ZSkNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCggIi5mYy1tb250aC1idXR0b24iICkub24oICJjbGljayIsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHNldENvb2tpZSgnQ3VycmVudFRhYicsICdjYWxlbmRhcicpOw0KICAgICAgICAgICAgICAgIHZhciBjbGVhblVSTCA9IFJlbW92ZVBhcmFtKCJFeHBhbmRlZCIsd2luZG93LmxvY2F0aW9uLmhyZWYpOw0KICAgICAgICAgICAgICAgIGlmIChnZXRDb29raWUoIkN1cnJlbnRUYWIiKSA9PSAiIikgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gVXBkYXRlUXVlcnlTdHJpbmcoIkN1cnJlbnRUYWIiLCAiY2FsZW5kYXIiLCBjbGVhblVSTCk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IGNsZWFuVVJMOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtbXlDdXN0b21CdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBzZXRDb29raWUoJ0N1cnJlbnRUYWInLCAnbGlzdCcpOw0KICAgICAgICAgICAgICAgIHZhciBjbGVhblVSTCA9IFJlbW92ZVBhcmFtKCJFeHBhbmRlZCIsd2luZG93LmxvY2F0aW9uLmhyZWYpOw0KICAgICAgICAgICAgICAgIGlmIChnZXRDb29raWUoIkN1cnJlbnRUYWIiKSA9PSAiIikgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gVXBkYXRlUXVlcnlTdHJpbmcoIkN1cnJlbnRUYWIiLCAibGlzdCIsIGNsZWFuVVJMKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gY2xlYW5VUkw7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCggIi5mYy1teUN1c3RvbUNvbmZsaWN0c0J1dHRvbi1idXR0b24iICkub24oICJjbGljayIsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHNldENvb2tpZSgnQ3VycmVudFRhYicsICdjb25mbGljdCcpOw0KICAgICAgICAgICAgICAgIHZhciBjbGVhblVSTCA9IFJlbW92ZVBhcmFtKCJFeHBhbmRlZCIsd2luZG93LmxvY2F0aW9uLmhyZWYpOw0KICAgICAgICAgICAgICAgIGlmIChnZXRDb29raWUoIkN1cnJlbnRUYWIiKSA9PSAiIikgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gVXBkYXRlUXVlcnlTdHJpbmcoIkN1cnJlbnRUYWIiLCAiY29uZmxpY3QiLCBjbGVhblVSTCk7DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IGNsZWFuVVJMOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoICIuZmMtbWVyZ2VkTGlzdFZpZXdCdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBzZXRDb29raWUoJ0N1cnJlbnRUYWInLCAnbWVyZ2VkbGlzdCcpOw0KICAgICAgICAgICAgICAgIHZhciBjbGVhblVSTCA9IFJlbW92ZVBhcmFtKCJFeHBhbmRlZCIsd2luZG93LmxvY2F0aW9uLmhyZWYpOw0KICAgICAgICAgICAgICAgIGlmIChnZXRDb29raWUoIkN1cnJlbnRUYWIiKSA9PSAiIikgew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gVXBkYXRlUXVlcnlTdHJpbmcoIkN1cnJlbnRUYWIiLCAibWVyZ2VkbGlzdCIsIGNsZWFuVVJMKTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5ocmVmID0gY2xlYW5VUkw7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCggIi5mYy1wYXN0Vmlld0J1dHRvbi1idXR0b24iICkub24oICJjbGljayIsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHNldENvb2tpZSgnQ3VycmVudFRhYicsICdwYXN0Jyk7DQogICAgICAgICAgICAgICAgdmFyIGNsZWFuVVJMID0gUmVtb3ZlUGFyYW0oIkV4cGFuZGVkIix3aW5kb3cubG9jYXRpb24uaHJlZik7DQogICAgICAgICAgICAgICAgaWYgKGdldENvb2tpZSgiQ3VycmVudFRhYiIpID09ICIiKSB7DQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBVcGRhdGVRdWVyeVN0cmluZygiQ3VycmVudFRhYiIsICJwYXN0IiwgY2xlYW5VUkwpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBjbGVhblVSTDsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCAiLmZjLW15Q3VzdG9tTGVnaXNsYXRpb25CdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBzZXRDb29raWUoJ0N1cnJlbnRUYWInLCAnbGVnaXNsYXRpb24nKTsNCiAgICAgICAgICAgICAgICB2YXIgY2xlYW5VUkwgPSBSZW1vdmVQYXJhbSgiRXhwYW5kZWQiLHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsNCiAgICAgICAgICAgICAgICBpZiAoZ2V0Q29va2llKCJDdXJyZW50VGFiIikgPT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFVwZGF0ZVF1ZXJ5U3RyaW5nKCJDdXJyZW50VGFiIiwgImxlZ2lzbGF0aW9uIiwgY2xlYW5VUkwpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBjbGVhblVSTDsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCAiLmZjLW15Q3VzdG9tQWdlbmRhSXRlbUhpc3RvcnlCdXR0b24tYnV0dG9uIiApLm9uKCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgICAgICBzZXRDb29raWUoJ0N1cnJlbnRUYWInLCAnYWdlbmRhSXRlbUhpc3RvcnknKTsNCiAgICAgICAgICAgICAgICB2YXIgY2xlYW5VUkwgPSBSZW1vdmVQYXJhbSgiRXhwYW5kZWQiLHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsNCiAgICAgICAgICAgICAgICBpZiAoZ2V0Q29va2llKCJDdXJyZW50VGFiIikgPT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24uaHJlZiA9IFVwZGF0ZVF1ZXJ5U3RyaW5nKCJDdXJyZW50VGFiIiwgImFnZW5kYUl0ZW1IaXN0b3J5IiwgY2xlYW5VUkwpOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBjbGVhblVSTDsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICBiaW5kRGF0YVRhYmxlKCk7IC8vIGJpbmQgZGF0YSB0YWJsZSBvbiBmaXJzdCBwYWdlIGxvYWQNCg0KICAgICAgICAgICAgJCgiYVt0YXJnZXQ9J19ibGFuayddIikuZWFjaChmdW5jdGlvbihpLHYpew0KICAgICAgICAgICAgICAgICQodikuYXBwZW5kKCI8aSBjbGFzcz0nbGFzIGxhLWV4dGVybmFsLWxpbmstYWx0Jz48L2k+Iik7DQogICAgICAgICAgICAgICAgJCh2KS5hdHRyKCJhcmlhLWxhYmVsIiwgZnVuY3Rpb24oaW5kZXgsIHZhbCkgew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsICsgJy4gT3BlbnMgaW4gYSBuZXcgdGFiL3dpbmRvdyc7IC8vaSA9PSBpbmRleCwgdmFsID09IG9yaWdpbmFsIGF0dHJpYnV0ZSwgdGhlIGlkDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KQ0KICAgICAgICB9KTsNCg0KICAgICAgICBmdW5jdGlvbiBvbkZpbHRlck1lZXRpbmdEb2N1bWVudChlbGUpIHsNCiAgICAgICAgICAgIGlmICgkKCIjZmlsdGVyLW1lZXRpbmctZG9jbWVudCIpLmhhc0NsYXNzKCJzaG93IikpIHsNCiAgICAgICAgICAgICAgICAkKCIjZmlsdGVyLW1lZXRpbmctY29sbGFwc2UiKS5yZW1vdmVDbGFzcygiZmEgZmEtY2FyZXQtZG93biIpOw0KICAgICAgICAgICAgICAgICQoIiNmaWx0ZXItbWVldGluZy1jb2xsYXBzZSIpLmFkZENsYXNzKCJmYSBmYS1jYXJldC1yaWdodCIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQoNCiAgICAgICAgICAgICAgICAkKCIjZmlsdGVyLW1lZXRpbmctY29sbGFwc2UiKS5yZW1vdmVDbGFzcygiZmEgZmEtY2FyZXQtcmlnaHQiKTsNCiAgICAgICAgICAgICAgICAkKCIjZmlsdGVyLW1lZXRpbmctY29sbGFwc2UiKS5hZGRDbGFzcygiZmEgZmEtY2FyZXQtZG93biIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgZnVuY3Rpb24gU2F2ZUZpbHRlck9wdGlvbnMoKSB7DQogICAgICAgICAgICB2YXIgZmlsdGVyQnlNZWV0aW5nRG9jdW1lbnQgPSAiIjsNCiAgICAgICAgICAgIHZhciBmaWx0ZXJCeUV4dGVuc2lvbnMgPSAiIjsNCiAgICAgICAgICAgIHZhciBmaWx0ZXJCeUxhbmd1YWdlID0gIiI7DQogICAgICAgICAgICAkKCIuY29tbW9uLWZpbHRlciIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCI6Y2hlY2tlZCIpKSB7DQogICAgICAgICAgICAgICAgICAgIGZpbHRlckJ5TWVldGluZ0RvY3VtZW50ICs9ICQodGhpcykudmFsKCkgKyAiLCI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoIi5jaGtMYW5ndWFnZSIpLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCI6Y2hlY2tlZCIpKSB7DQogICAgICAgICAgICAgICAgICAgIGZpbHRlckJ5TGFuZ3VhZ2UgKz0gJCh0aGlzKS52YWwoKS5yZXBsYWNlKCIuIiwgIiIpICsgIiwiOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICB2YXIgZmlsdGVyQ3JpdGVyaWEgPSB7IGZpbHRlckJ5TWVldGluZ0RvY3VtZW50LCBmaWx0ZXJCeUxhbmd1YWdlIH07DQogICAgICAgICAgICBkZWxldGVDb29raWUoIk1lZXRpbmdGaWx0ZXJPcHRpb25zIik7DQogICAgICAgICAgICBzZXRDb29raWUoIk1lZXRpbmdGaWx0ZXJPcHRpb25zIiwgSlNPTi5zdHJpbmdpZnkoZmlsdGVyQ3JpdGVyaWEpKTsNCiAgICAgICAgICAgIC8vc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgiTWVldGluZ0ZpbHRlck9wdGlvbnMiKTsNCiAgICAgICAgICAgIC8vc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgiTWVldGluZ0ZpbHRlck9wdGlvbnMiLCBKU09OLnN0cmluZ2lmeShmaWx0ZXJDcml0ZXJpYSkpOw0KICAgICAgICAgICAgJCgiI2R2U3VjY2Vzc01lc3NhZ2UiKS5zaG93KCk7DQogICAgICAgICAgICAkKCIjZHZTdWNjZXNzTWVzc2FnZSIpLmZhZGVPdXQoMzAwMCk7DQogICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBSZXRyaWV2ZUZpbHRlck9wdGlvbnMoKSB7DQogICAgICAgICAgICB2YXIgYWxsRmlsdGVyT3B0aW9ucyA9IGdldENvb2tpZSgiTWVldGluZ0ZpbHRlck9wdGlvbnMiKTsNCiAgICAgICAgICAgIC8vdmFyIGFsbEZpbHRlck9wdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCJNZWV0aW5nRmlsdGVyT3B0aW9ucyIpOw0KICAgICAgICAgICAgaWYgKHR5cGVvZiBhbGxGaWx0ZXJPcHRpb25zICE9ICJ1bmRlZmluZWQiICYmIGFsbEZpbHRlck9wdGlvbnMgIT0gbnVsbCAmJiBhbGxGaWx0ZXJPcHRpb25zICE9ICIiKSB7DQogICAgICAgICAgICAgICAgYWxsRmlsdGVyT3B0aW9ucyA9IEpTT04ucGFyc2UoYWxsRmlsdGVyT3B0aW9ucykNCiAgICAgICAgICAgICAgICB2YXIgbWVldGluZ0RvY3VtZW50RmlsdGVyID0gYWxsRmlsdGVyT3B0aW9ucy5maWx0ZXJCeU1lZXRpbmdEb2N1bWVudDsNCiAgICAgICAgICAgICAgICBtZWV0aW5nRG9jdW1lbnRGaWx0ZXIgPSBtZWV0aW5nRG9jdW1lbnRGaWx0ZXIuc3BsaXQoJywnKTsNCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lZXRpbmdEb2N1bWVudEZpbHRlci5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVldGluZ0RvY3VtZW50T3B0aW9uVmFsdWUgPSBtZWV0aW5nRG9jdW1lbnRGaWx0ZXJbaV07DQogICAgICAgICAgICAgICAgICAgICQoIi5jb21tb24tZmlsdGVyIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS52YWwoKS50b0xvd2VyQ2FzZSgpID09IG1lZXRpbmdEb2N1bWVudE9wdGlvblZhbHVlLnRvTG93ZXJDYXNlKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZUZpbHRlciA9IGFsbEZpbHRlck9wdGlvbnMuZmlsdGVyQnlMYW5ndWFnZTsNCiAgICAgICAgICAgICAgICBsYW5ndWFnZUZpbHRlciA9IGxhbmd1YWdlRmlsdGVyLnNwbGl0KCcsJyk7DQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYW5ndWFnZUZpbHRlci5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2VPcHRpb25WYWx1ZSA9IGxhbmd1YWdlRmlsdGVyW2ldOw0KICAgICAgICAgICAgICAgICAgICAkKCIuY2hrTGFuZ3VhZ2UiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnZhbCgpLnJlcGxhY2UoIjAsIiwgIiIpID09IGxhbmd1YWdlT3B0aW9uVmFsdWUpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgaWYgKCQoIiNoZG5NZWV0aW5nRG9jdW1lbnRGaWx0ZXIiKS52YWwoKSAhPSAiIikgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVldGluZ0RvY3VtZW50RmlsdGVyID0gJCgiI2hkbk1lZXRpbmdEb2N1bWVudEZpbHRlciIpLnZhbCgpOw0KICAgICAgICAgICAgICAgICAgICBtZWV0aW5nRG9jdW1lbnRGaWx0ZXIgPSBtZWV0aW5nRG9jdW1lbnRGaWx0ZXIuc3BsaXQoJywnKTsNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWV0aW5nRG9jdW1lbnRGaWx0ZXIubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZWV0aW5nRG9jdW1lbnRPcHRpb25WYWx1ZSA9IG1lZXRpbmdEb2N1bWVudEZpbHRlcltpXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZWV0aW5nRG9jdW1lbnRPcHRpb25WYWx1ZSAhPSAiIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIi5jb21tb24tZmlsdGVyIikuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLnZhbCgpLnRvTG93ZXJDYXNlKCkgPT0gbWVldGluZ0RvY3VtZW50T3B0aW9uVmFsdWUudG9Mb3dlckNhc2UoKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoJCgiI2hkbkRvY3VtZW50VHlwZUZpbHRlciIpLnZhbCgpICE9ICIiKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudFR5cGVGaWx0ZXIgPSAkKCIjaGRuRG9jdW1lbnRUeXBlRmlsdGVyIikudmFsKCk7DQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50VHlwZUZpbHRlciA9IGRvY3VtZW50VHlwZUZpbHRlci5zcGxpdCgnLCcpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50VHlwZUZpbHRlci5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRvY3VtZW50VHlwZU9wdGlvblZhbHVlID0gZG9jdW1lbnRUeXBlRmlsdGVyW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50VHlwZU9wdGlvblZhbHVlICE9ICIiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLmNoa0RvY3VtZW50VHlwZXMiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoa1ZhbHVlID0gJCh0aGlzKS52YWwoKS50b0xvd2VyQ2FzZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGtWYWx1ZSA9IGNoa1ZhbHVlLnJlcGxhY2UoIi4iLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGtWYWx1ZSA9PSBkb2N1bWVudFR5cGVPcHRpb25WYWx1ZS50b0xvd2VyQ2FzZSgpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnByb3AoImNoZWNrZWQiLCB0cnVlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICgkKCIjaGRuTGFuZ3VhZ2VGaWx0ZXIiKS52YWwoKSAhPSAiIikgew0KICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2VGaWx0ZXIgPSAkKCIjaGRuTGFuZ3VhZ2VGaWx0ZXIiKS52YWwoKTsNCiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VGaWx0ZXIgPSBsYW5ndWFnZUZpbHRlci5zcGxpdCgnLCcpOw0KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhbmd1YWdlRmlsdGVyLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2VPcHRpb25WYWx1ZSA9IGxhbmd1YWdlRmlsdGVyW2ldOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhbmd1YWdlT3B0aW9uVmFsdWUgIT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIuY2hrTGFuZ3VhZ2UiKS5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoa1ZhbHVlID0gJCh0aGlzKS52YWwoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hrVmFsdWUgPSBjaGtWYWx1ZS5yZXBsYWNlKCIuIiwgIiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hrVmFsdWUuaW5kZXhPZihsYW5ndWFnZU9wdGlvblZhbHVlKSAhPSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wcm9wKCJjaGVja2VkIiwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIGJpbmREYXRhVGFibGUoKSB7DQogICAgICAgICAgICB7DQoNCiAgICAgICAgICAgICAgICBpZiAoJCgnI2FsbC1saXN0IHRib2R5IHRyJykubGVuZ3RoID4gMSkgew0KICAgICAgICAgICAgICAgICAgICAkKCIjdGFibGUtbGlzdCA+IHRoZWFkID4gdHIiKS5hcHBlbmQoIjx0aCBzY29wZT0nY29sJz48L3RoPiIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoJC5mbi5EYXRhVGFibGUuaXNEYXRhVGFibGUoJyN0YWJsZS1saXN0JykpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN0YWJsZS1saXN0JykuZGF0YVRhYmxlKCkuZm5DbGVhclRhYmxlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjdGFibGUtbGlzdCcpLmRhdGFUYWJsZSgpLmZuRGVzdHJveSgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIHZhciBtZWV0aW5nc1RhYmxlID0gJCgnI3RhYmxlLWxpc3QnKS5EYXRhVGFibGUoew0KICAgICAgICAgICAgICAgICAgICAgICAgImRyYXdDYWxsYmFjayI6IGZ1bmN0aW9uIChzZXR0aW5ncykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiN0YWJsZS1saXN0IHRoZWFkIikucmVtb3ZlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImRvbSI6ICc8ImNsZWFyIj4nLA0KICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgJCgiI21lZXRpbmdMaXN0IC5kYXRhVGFibGVzX2VtcHR5IikuaGlkZSgpOw0KICAgICAgICAgICAgICAgICAgICAkKCIjbWVldGluZ0xpc3QgLmRhdGFUYWJsZXNfZW1wdHkiKS5yZW1vdmVBdHRyKCJ2YWxpZ24iKTsNCiAgICAgICAgICAgICAgICAgICAgJCgiI21lZXRpbmdMaXN0IC5kYXRhVGFibGVzX2VtcHR5IikuY3NzKCJ2ZXJ0aWNhbC1hbGlnbiIsICJ0b3AiKTsNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBpZiAoJCgiI2N0bDAwX01haW5Db250ZW50X0lzRmlsdGVyIikudmFsKCkgPT0gIjEiKSB7DQogICAgICAgICAgICAgICAgJCgnLmRyb3Bkb3duLXRvZ2dsZSBpJykuYWRkQ2xhc3MoJ2ZpbHRlcmVkJyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAkKCcuZHJvcGRvd24tdG9nZ2xlIGknKS5yZW1vdmVDbGFzcygnZmlsdGVyZWQnKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICQoJy5kcm9wZG93bi10b2dnbGUnKS5uZXh0KCkuY3NzKCJkaXNwbGF5IiwgIm5vbmUiKTsNCg0KICAgICAgICAgICAgaWYgKCQoJyNjdGwwMF9NYWluQ29udGVudF9DdXJyZW50TW9udGgnKS52YWwoKSA9PSAnJykgew0KICAgICAgICAgICAgICAgICQoJyNidG5QcmV2aW91c01vbnRoJykuaGlkZSgpOw0KICAgICAgICAgICAgICAgICQoJyNidG5OZXh0TW9udGgnKS5oaWRlKCk7DQogICAgICAgICAgICAgICAgLy8kKCcjbW9udGhUZXh0JykuY3NzKCdtYXJnaW4nLCAnMCcpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgJCgnI2J0blByZXZpb3VzTW9udGgnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgJCgnI2J0bk5leHRNb250aCcpLnNob3coKTsNCiAgICAgICAgICAgICAgICAkKCcjYnRuUHJldmlvdXNNb250aCcpLmNzcygnbWFyZ2luJywgJzAnKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJCgiI2J0blByZXZpb3VzTW9udGgiKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgdmFyIEN1cnJlbnREYXRlID0gbmV3IERhdGUoJCgnI2N0bDAwX01haW5Db250ZW50X0N1cnJlbnRNb250aCcpLnZhbCgpKTsNCiAgICAgICAgICAgICAgICBDdXJyZW50RGF0ZS5zZXREYXRlKDEpOw0KICAgICAgICAgICAgICAgIEN1cnJlbnREYXRlLnNldE1vbnRoKEN1cnJlbnREYXRlLmdldE1vbnRoKCkgLSAxKTsNCiAgICAgICAgICAgICAgICB2YXIgZmlyc3REYXkgPSBuZXcgRGF0ZShDdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpLCBDdXJyZW50RGF0ZS5nZXRNb250aCgpLCAxKTsNCiAgICAgICAgICAgICAgICB2YXIgbGFzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCkgKyAxLCAwKTsNCiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGZpcnN0RGF5LmZvcm1hdCgiTU0vZGQveXl5eSIpICsgIiAtICIgKyBsYXN0RGF5LmZvcm1hdCgiTU0vZGQveXl5eSIpKTsNCg0KICAgICAgICAgICAgICAgICQoIiNidG5GdW5uZWxGaWx0ZXJSZXN1bHRzIikuY2xpY2soKTsNCiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnRmlsdGVyUmVzdWx0cycpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgJCgnI2N0bDAwX01haW5Db250ZW50X0xhc3REYXknKS52YWwobGFzdERheSk7DQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgJCgiI2J0bk5leHRNb250aCIpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICB2YXIgQ3VycmVudERhdGUgPSBuZXcgRGF0ZSgkKCcjY3RsMDBfTWFpbkNvbnRlbnRfQ3VycmVudE1vbnRoJykudmFsKCkpOw0KICAgICAgICAgICAgICAgIEN1cnJlbnREYXRlLnNldERhdGUoMSk7DQogICAgICAgICAgICAgICAgQ3VycmVudERhdGUuc2V0TW9udGgoQ3VycmVudERhdGUuZ2V0TW9udGgoKSArIDEpOw0KICAgICAgICAgICAgICAgIHZhciBmaXJzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCksIDEpOw0KICAgICAgICAgICAgICAgIHZhciBsYXN0RGF5ID0gbmV3IERhdGUoQ3VycmVudERhdGUuZ2V0RnVsbFllYXIoKSwgQ3VycmVudERhdGUuZ2V0TW9udGgoKSArIDEsIDApOw0KDQogICAgICAgICAgICAgICAgJCgiI2J0bkZ1bm5lbEZpbHRlclJlc3VsdHMiKS5jbGljaygpOw0KICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdGaWx0ZXJSZXN1bHRzJykuY2xpY2soKTsNCiAgICAgICAgICAgICAgICAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfTGFzdERheScpLnZhbChsYXN0RGF5KTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAkKCIuZmMtcHJldi1idXR0b24iKS5jbGljayhmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgJCgiI2NhbGVuZGFyID4gLmZjLXRvb2xiYXIgPiAuZmMtbGVmdCA+IGgxIikudGV4dCgkKCIjY2FsZW5kYXIgPiAuZmMtdG9vbGJhciA+IC5mYy1sZWZ0ID4gaDIiKS50ZXh0KCkpOw0KICAgICAgICAgICAgICAgIGlmICgkKCIjY3RsMDBfTWFpbkNvbnRlbnRfQ3VycmVudE1vbnRoIikudmFsKCkgIT0gIiIpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIEN1cnJlbnREYXRlID0gbmV3IERhdGUoJCgiI2NhbGVuZGFyIikuZnVsbENhbGVuZGFyKCdnZXREYXRlJykuZm9ybWF0KCkpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3REYXkgPSBuZXcgRGF0ZShDdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpLCBDdXJyZW50RGF0ZS5nZXRNb250aCgpLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3REYXkgPSBuZXcgRGF0ZShDdXJyZW50RGF0ZS5nZXRGdWxsWWVhcigpLCBDdXJyZW50RGF0ZS5nZXRNb250aCgpICsgMSwgMCk7DQogICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZmlyc3REYXkuZm9ybWF0KCJNTS9kZC95eXl5IikgKyAiIC0gIiArIGxhc3REYXkuZm9ybWF0KCJNTS9kZC95eXl5IikpOw0KDQogICAgICAgICAgICAgICAgICAgICQoIiNjdGwwMF9NYWluQ29udGVudF9Jc01vbnRoQ2hhbmdlIikudmFsKCIxIik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQoNCiAgICAgICAgICAgICQoIi5mYy1uZXh0LWJ1dHRvbiIpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAkKCIjY2FsZW5kYXIgPiAuZmMtdG9vbGJhciA+IC5mYy1sZWZ0ID4gaDEiKS50ZXh0KCQoIiNjYWxlbmRhciA+IC5mYy10b29sYmFyID4gLmZjLWxlZnQgPiBoMiIpLnRleHQoKSk7DQogICAgICAgICAgICAgICAgaWYgKCQoIiNjdGwwMF9NYWluQ29udGVudF9DdXJyZW50TW9udGgiKS52YWwoKSAhPSAiIikgew0KICAgICAgICAgICAgICAgICAgICB2YXIgQ3VycmVudERhdGUgPSBuZXcgRGF0ZSgkKCIjY2FsZW5kYXIiKS5mdWxsQ2FsZW5kYXIoJ2dldERhdGUnKS5mb3JtYXQoKSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCksIDEpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCkgKyAxLCAwKTsNCg0KICAgICAgICAgICAgICAgICAgICAkKCIjY3RsMDBfTWFpbkNvbnRlbnRfSXNNb250aENoYW5nZSIpLnZhbCgiMSIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICAgIHZhciBwcm0gPSBTeXMuV2ViRm9ybXMuUGFnZVJlcXVlc3RNYW5hZ2VyLmdldEluc3RhbmNlKCk7DQogICAgICAgIGlmIChwcm0gIT0gbnVsbCkgew0KICAgICAgICAgICAgcHJtLmFkZF9lbmRSZXF1ZXN0KGZ1bmN0aW9uIChzZW5kZXIsIGUpIHsNCg0KDQogICAgICAgICAgICAgICAgJCgiLkRlbGVnYXRpb25SZXF1ZXN0IikuY2xpY2soZnVuY3Rpb24gKGUpIHsNCiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KDQogICAgICAgICAgICAgICAgICAgIHZhciBhID0gJCh0aGlzKTsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gNTAwOw0KICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gNjAwOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdCA9IChzY3JlZW4ud2lkdGggLSB3aWR0aCkgLyAyOw0KICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gKHNjcmVlbi5oZWlnaHQgLSBoZWlnaHQpIC8gMjsNCiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oYS5hdHRyKCJocmVmIiksICcnLCAnc2Nyb2xsYmFycz15ZXMsbWVudWJhcj1ubyx3aWR0aD0nICsgd2lkdGggKyAnLGhlaWdodD0nICsgaGVpZ2h0ICsgJyxyZXNpemFibGU9eWVzLHRvb2xiYXI9bm8sbG9jYXRpb249bm8sc3RhdHVzPW5vLHRvcD0nICsgdG9wICsgJywgbGVmdD0nICsgbGVmdCk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgaWYgKCQoJyNhbGwtbGlzdCB0Ym9keSB0cicpLmxlbmd0aCA+IDEpIHsNCiAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWxpc3QgPiB0aGVhZCA+IHRyIikuYXBwZW5kKCI8dGggc2NvcGU9J2NvbCc+PC90aD4iKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCQuZm4uRGF0YVRhYmxlLmlzRGF0YVRhYmxlKCcjdGFibGUtbGlzdCcpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkKCcjdGFibGUtbGlzdCcpLmRhdGFUYWJsZSgpLmZuQ2xlYXJUYWJsZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3RhYmxlLWxpc3QnKS5kYXRhVGFibGUoKS5mbkRlc3Ryb3koKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVldGluZ3NUYWJsZSA9ICQoJyN0YWJsZS1saXN0JykuRGF0YVRhYmxlKHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJkcmF3Q2FsbGJhY2siOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjdGFibGUtbGlzdCB0aGVhZCIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJkb20iOiAnPCJjbGVhciI+JywNCiAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICQoIiNtZWV0aW5nTGlzdCAuZGF0YVRhYmxlc19lbXB0eSIpLmhpZGUoKQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB2YXIgbWluY291bnQgPSAyMDsNCiAgICAgICAgICAgICAgICB2YXIgbWF4Y291bnQgPSA0MDsNCiAgICAgICAgICAgICAgICAvL2NvbW1lbnQgb3V0IGZha2UgbGF6eSBsb2FkaW5nIGNvZGUNCiAgICAgICAgICAgICAgIC8vICQoIi5tZWV0aW5nRGV0YWlscyIpLnNsaWNlKDQwKS5oaWRlKCk7DQoNCiAgICAgICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgc3RpY2t5SGVhZGVyKCk7DQogICAgICAgICAgICAgICAgICAgIGlmICgkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyB3aW5kb3cuaW5uZXJIZWlnaHQgPj0gJChkb2N1bWVudCkuaGVpZ2h0KCkgLSA1MCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFZpZXcuQ3VycmVudCA9PSBWaWV3cy5MaXN0ICkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29tbWVudCBvdXQgZmFrZSBsYXp5IGxvYWRpbmcgY29kZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJCgiLm1lZXRpbmdEZXRhaWxzIikuc2xpY2UobWluY291bnQsIG1heGNvdW50KS5mYWRlSW4oMTAwMCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9taW5jb3VudCA9IG1pbmNvdW50ICsgMjA7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYXhjb3VudCA9IG1heGNvdW50ICsgMjA7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICBpZiAoJCgiI2N0bDAwX01haW5Db250ZW50X0lzRGF0ZUZpbHRlciIpLnZhbCgpID09ICIwIikgew0KDQogICAgICAgICAgICAgICAgICAgIC8vJCgiI2N0bDAwX01haW5Db250ZW50X0ZpbHRlckJ5RGF0ZSIpLnZhbCgiIik7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKCQoJyNjdGwwMF9NYWluQ29udGVudF9DdXJyZW50TW9udGgnKS52YWwoKSA9PSAnJykgew0KICAgICAgICAgICAgICAgICAgICAkKCcjYnRuUHJldmlvdXNNb250aCcpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2J0bk5leHRNb250aCcpLmhpZGUoKTsNCiAgICAgICAgICAgICAgICAgICAgLy8kKCcjbW9udGhUZXh0JykuY3NzKCdtYXJnaW4nLCAnMCcpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgJCgnI2J0blByZXZpb3VzTW9udGgnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICQoJyNidG5OZXh0TW9udGgnKS5zaG93KCk7DQogICAgICAgICAgICAgICAgICAgICQoJyNidG5QcmV2aW91c01vbnRoJykuY3NzKCdtYXJnaW4nLCAnMCcpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkKCIjYnRuUHJldmlvdXNNb250aCIpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgQ3VycmVudERhdGUgPSBuZXcgRGF0ZSgkKCcjY3RsMDBfTWFpbkNvbnRlbnRfQ3VycmVudE1vbnRoJykudmFsKCkpOw0KICAgICAgICAgICAgICAgICAgICBDdXJyZW50RGF0ZS5zZXREYXRlKDEpOw0KICAgICAgICAgICAgICAgICAgICBDdXJyZW50RGF0ZS5zZXRNb250aChDdXJyZW50RGF0ZS5nZXRNb250aCgpIC0gMSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCksIDEpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCkgKyAxLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhmaXJzdERheS5mb3JtYXQoIk1NL2RkL3l5eXkiKSArICIgLSAiICsgbGFzdERheS5mb3JtYXQoIk1NL2RkL3l5eXkiKSk7DQoNCiAgICAgICAgICAgICAgICAgICAgJCgiI2J0bkZ1bm5lbEZpbHRlclJlc3VsdHMiKS5jbGljaygpOw0KICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnRmlsdGVyUmVzdWx0cycpLmNsaWNrKCk7DQogICAgICAgICAgICAgICAgICAgICQoJyNjdGwwMF9NYWluQ29udGVudF9MYXN0RGF5JykudmFsKGxhc3REYXkpOw0KICAgICAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAgICAgJCgiI2J0bk5leHRNb250aCIpLmNsaWNrKGZ1bmN0aW9uICgpIHsNCg0KICAgICAgICAgICAgICAgICAgICB2YXIgQ3VycmVudERhdGUgPSBuZXcgRGF0ZSgkKCcjY3RsMDBfTWFpbkNvbnRlbnRfQ3VycmVudE1vbnRoJykudmFsKCkpOw0KICAgICAgICAgICAgICAgICAgICBDdXJyZW50RGF0ZS5zZXREYXRlKDEpOw0KICAgICAgICAgICAgICAgICAgICBDdXJyZW50RGF0ZS5zZXRNb250aChDdXJyZW50RGF0ZS5nZXRNb250aCgpICsgMSk7DQogICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCksIDEpOw0KICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdERheSA9IG5ldyBEYXRlKEN1cnJlbnREYXRlLmdldEZ1bGxZZWFyKCksIEN1cnJlbnREYXRlLmdldE1vbnRoKCkgKyAxLCAwKTsNCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZmlyc3REYXkuZm9ybWF0KCJNTS9kZC95eXl5IikgKyAiIC0gIiArIGxhc3REYXkuZm9ybWF0KCJNTS9kZC95eXl5IikpOw0KDQogICAgICAgICAgICAgICAgICAgICQoIiNidG5GdW5uZWxGaWx0ZXJSZXN1bHRzIikuY2xpY2soKTsNCiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ0ZpbHRlclJlc3VsdHMnKS5jbGljaygpOw0KICAgICAgICAgICAgICAgICAgICAkKCcjY3RsMDBfTWFpbkNvbnRlbnRfTGFzdERheScpLnZhbChsYXN0RGF5KTsNCiAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9Ow0KICAgICAgICB2YXIgZmlsdGVyYnlNZWV0aW5nVHlwZVNlbGVjdCA9DQogICAgICAgIG5ldyBTbGltU2VsZWN0KHsNCiAgICAgICAgICAgIHNlbGVjdDogJyNjdGwwMF9NYWluQ29udGVudF9sYmxNdWx0aVNlbGVjdCcsDQogICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBEYXRhJw0KICAgICAgICB9KTsNCiAgICAgICAgdmFyIGZpbHRlcmJ5Q29uZmxpY3RNZW1iZXJTZWxlY3QgPQ0KICAgICAgICBuZXcgU2xpbVNlbGVjdCh7DQogICAgICAgICAgICBzZWxlY3Q6ICcjY3RsMDBfTWFpbkNvbnRlbnRfbGJGaWx0ZXJCeUNvbmZsaWN0TWVtYmVyJywNCiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGEnDQogICAgICAgIH0pOw0KICAgICAgICB2YXIgZmlsdGVyYnlTdGFnZVNlbGVjdCA9DQogICAgICAgIG5ldyBTbGltU2VsZWN0KHsNCiAgICAgICAgICAgIHNlbGVjdDogJyNjdGwwMF9NYWluQ29udGVudF9sYkZpbHRlckJ5U3RhZ2UnLA0KICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgRGF0YScNCiAgICAgICAgfSk7DQogICAgICAgIHZhciBmaWx0ZXJieVN0YXR1c1NlbGVjdCA9DQogICAgICAgIG5ldyBTbGltU2VsZWN0KHsNCiAgICAgICAgICAgIHNlbGVjdDogJyNjdGwwMF9NYWluQ29udGVudF9sYkZpbHRlckJ5U3RhdHVzJywNCiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGEnDQogICAgICAgIH0pOw0KICAgICAgICB2YXIgZmlsdGVyYnlEZXBhcnRtZW50U2VsZWN0ID0NCiAgICAgICAgbmV3IFNsaW1TZWxlY3Qoew0KICAgICAgICAgICAgc2VsZWN0OiAnI2N0bDAwX01haW5Db250ZW50X2xiRmlsdGVyQnlEZXBhcnRtZW50JywNCiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGEnDQogICAgICAgIH0pOw0KDQogICAgICAgIGZ1bmN0aW9uIG9wZW5Db25mbGljdERldGFpbHMoYWdlbmRhSXRlbUlkLCBtZWV0aW5nSWQsIG1lZXRpbmdUeXBlTmFtZSkgew0KICAgICAgICAgICAgJCgiI21vZGVsSGVhZGVyY29uZmxpY3RzIikucHJlcGVuZCgiPGgyIGlkPSdNZWV0aW5nVHlwZU5hbWUnIHRhYkluZGV4PScwJyBjbGFzcz0nbW9kYWwtdGl0bGUnIGFyaWEtaGlkZGVuPSd0cnVlJyBzdHlsZT0nZm9udC1zaXplOiAxN3B4Jz48L2gyPiIpDQogICAgICAgICAgICAkKCIjTWVldGluZ1R5cGVOYW1lIikuaHRtbChtZWV0aW5nVHlwZU5hbWUpOw0KDQogICAgICAgICAgICAkLmFqYXgoew0KICAgICAgICAgICAgICAgIHR5cGU6ICJQT1NUIiwNCiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb24iLA0KICAgICAgICAgICAgICAgIGRhdGE6ICJ7J0FnZW5kYUl0ZW1JZCc6JyIgKyBhZ2VuZGFJdGVtSWQgKyAiJywnTWVldGluZ0lkJzonIiArIG1lZXRpbmdJZCArICInfSIsDQogICAgICAgICAgICAgICAgdXJsOiAiL01lZXRpbmdzQ2FsZW5kYXJWaWV3LmFzcHgvQWdlbmRhSXRlbUNvbmZsaWN0c0dldEFsbCIsDQogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwNCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5kICE9IG51bGwgJiYgZGF0YS5kICE9IHVuZGVmaW5lZCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3QgPiB0aGVhZCA+IHRyIikuYXBwZW5kKCI8dGggc2NvcGU9J2NvbCc+PC90aD4iKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmZuLkRhdGFUYWJsZS5pc0RhdGFUYWJsZSgnI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3QnKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyN0YWJsZS1jb25mbGljdHMtZGV0YWlscy1saXN0JykuZGF0YVRhYmxlKCkuZm5DbGVhclRhYmxlKCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3QnKS5kYXRhVGFibGUoKS5mbkRlc3Ryb3koKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbmZsaWN0RGV0YWlsc1RhYmxlID0gJCgnI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3QnKS5EYXRhVGFibGUoew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkb20iOiAnPCJtb2RhbC1ib2R5InQ+PCJtb2RhbC1mb290ZXIicD4nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYWdpbmdUeXBlIjogInNpbXBsZV9udW1iZXJzIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicGFnZUxlbmd0aCI6IDEsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm9yZGVyaW5nIjogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRyYXdDYWxsYmFjayI6IGZ1bmN0aW9uIChzZXR0aW5ncykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCIjdGFibGUtY29uZmxpY3RzLWRldGFpbHMtbGlzdCB0aGVhZCIpLnJlbW92ZSgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcucGFnaW5hdGVfYnV0dG9uOm5vdCguY3VycmVudCknKS5yZW1vdmVBdHRyKCdhcmlhLWN1cnJlbnQnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLnBhZ2luYXRlX2J1dHRvbi5jdXJyZW50JykuYXR0cigiYXJpYS1jdXJyZW50IiwgInBhZ2UiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmRhdGFUYWJsZXNfcGFnaW5hdGUnKS5hdHRyKCdyb2xlJywgJ3JlZ2lvbicpLmF0dHIoJ2FyaWEtbGFiZWwnLCAncGFnaW5hdGlvbicpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGU6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiAnPCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiAnPicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2luZzogJzxkaXYgY2xhc3M9ImxvYWRlclBvc2l0aW9uIj48c3BhbiBjbGFzcz0ibGEgbGEtc3Bpbm5lciBsYS1zcGluIGxvYWRlckRlc2lnbiI+PC9zcGFuPjwvZGl2PicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YmxSb3cgPSAiIjsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5kLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkYXRhLmRbaV07DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGJsUm93ID0gJzx0YWJsZSBpZD0iQWdlbmRhSXRlbUNvbmZsaWN0cyI+PHRyPjx0ZCBzdHlsZT0id2lkdGg6MjUlOyI+PHN0cm9uZz5BZ2VuZGEgSXRlbTo8L3N0cm9uZz4gPC90ZD48dGQgc3R5bGU9IndpZHRoOjc1JTsiPicgKyBlbGVtZW50Lkl0ZW1UaXRsZSArICc8L3RkPjwvdHI+PHRyPjx0ZD48c3Ryb25nPk1lbWJlciBpbiBDb25mbGljdDo8L3N0cm9uZz4gPC90ZD48dGQ+JyArIGVsZW1lbnQuQ29uZmxpY3RNZW1iZXIgKyAnPC90ZD48L3RyPjx0cj48dGQgc3R5bGU9InZlcnRpY2FsLWFsaWduOiB0b3A7Ij48c3Ryb25nPlJlYXNvbjo8L3N0cm9uZz4gPC90ZD48dGQ+JyArIGVsZW1lbnQuUmVhc29uICsgJzwvdGQ+PC90cj48L3RhYmxlPic7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmxpY3REZXRhaWxzVGFibGUucm93LmFkZChbdGJsUm93XSkuZHJhdygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAkKCIjY29uZmxpY3RzRGV0YWlsc01vZGFsIikubW9kYWwoJ3Nob3cnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNjb25mbGljdHNEZXRhaWxzTW9kYWwiKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3RfcHJldmlvdXMiKS5hdHRyKCJhcmlhLWxhYmVsIiwgIk5hdmlnYXRlIHRvIFByZXZpb3VzIENvbmZsaWN0Iik7DQogICAgICAgICAgICAgICAgICAgICAgICBpZigkKCIjdGFibGUtY29uZmxpY3RzLWRldGFpbHMtbGlzdF9wcmV2aW91cyIpLmhhc0NsYXNzKCJkaXNhYmxlZCIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3RfcHJldmlvdXMiKS5hdHRyKCJhcmlhLWRpc2FibGVkIiwgInRydWUiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiN0YWJsZS1jb25mbGljdHMtZGV0YWlscy1saXN0X3ByZXZpb3VzIikuYXR0cigiYXJpYS1kaXNhYmxlZCIsICJmYWxzZSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3RfbmV4dCIpLmF0dHIoImFyaWEtbGFiZWwiLCAiTmF2aWdhdGUgdG8gTmV4dCBDb25mbGljdCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYoJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3RfbmV4dCIpLmhhc0NsYXNzKCJkaXNhYmxlZCIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3RfbmV4dCIpLmF0dHIoImFyaWEtZGlzYWJsZWQiLCAidHJ1ZSIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiI3RhYmxlLWNvbmZsaWN0cy1kZXRhaWxzLWxpc3RfbmV4dCIpLmF0dHIoImFyaWEtZGlzYWJsZWQiLCAiZmFsc2UiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB0YWJJbmRleExvb3AoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2NvbmZsaWN0c0RldGFpbHNNb2RhbCIpLCBmYWxzZSwgbnVsbCk7DQogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsNCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNtb2RlbEhlYWRlcmNvbmZsaWN0cyA+IGJ1dHRvbiIpLmZvY3VzKCk7DQogICAgICAgICAgICAgICAgICAgIH0sIDM1MCk7DQoNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoWE1MSHR0cFJlcXVlc3QsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH0NCiAgICA8L3NjcmlwdD4NCiAgICANCg0KICAgIA0KDQogICAgPHN0eWxlPg0KICAgICAgICAuc2hhcmluZyB7DQogICAgICAgICAgICBkaXNwbGF5Om5vbmU7Ow0KICAgICAgICAgICAgZmxvYXQ6IG5vbmUgIWltcG9ydGFudDsNCiAgICAgICAgfQ0KDQogICAgICAgIC5jb25mbGljdHMgew0KICAgICAgICAgICAgLypuZWVkIHRvIHVzZSAhaW1wb3J0YW50IGhlcmUuIFNpbmNlLCB0aGUgbW9iaWxlIHZpZXcgZnJvbSBAbWVkaWEgb3ZlcnJpZGUgdGhpcyBzdHlsZSBmb3IgdGhlIGJ1dHRvbiovDQogICAgICAgICAgICBkaXNwbGF5Om5vbmUgIWltcG9ydGFudDs7DQogICAgICAgIH0NCg0KICAgICAgICAubGlzdFZpZXcgew0KCQkJZGlzcGxheTpub25lICFpbXBvcnRhbnQ7Ow0KICAgICAgICB9DQoNCiAgICAgICAgLm1lcmdlZExpc3RWaWV3IHsNCiAgICAgICAgICAgIC8qbmVlZCB0byB1c2UgIWltcG9ydGFudCBoZXJlLiBTaW5jZSwgdGhlIG1vYmlsZSB2aWV3IGZyb20gQG1lZGlhIG92ZXJyaWRlIHRoaXMgc3R5bGUgZm9yIHRoZSBidXR0b24qLw0KICAgICAgICAgICAgOw0KICAgICAgICB9DQoNCiAgICAgICAgLmNhbGVuZGFyVmlldyB7DQogICAgICAgICAgICA7DQogICAgICAgIH0NCg0KICAgICAgICAucGFzdFZpZXcgew0KICAgICAgICAgICAgZGlzcGxheTpub25lICFpbXBvcnRhbnQ7Ow0KICAgICAgICB9DQogICAgPC9zdHlsZT4NCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRJc0xpc3RWaWV3IiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfSXNMaXN0VmlldyIgdmFsdWU9IjAiIC8+DQogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkSXNEYXRlRmlsdGVyIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfSXNEYXRlRmlsdGVyIiB2YWx1ZT0iMCIgLz4NCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRJc0NvbmZsaWN0cyIgaWQ9ImN0bDAwX01haW5Db250ZW50X0lzQ29uZmxpY3RzIiB2YWx1ZT0iMCIgLz4NCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjdGwwMCRNYWluQ29udGVudCRJc01vbnRoQ2hhbmdlIiBpZD0iY3RsMDBfTWFpbkNvbnRlbnRfSXNNb250aENoYW5nZSIgdmFsdWU9IjAiIC8+DQogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkSXNDaGFuZ2VGaWx0ZXIiIGlkPSJjdGwwMF9NYWluQ29udGVudF9Jc0NoYW5nZUZpbHRlciIgdmFsdWU9IjAiIC8+DQogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iY3RsMDAkTWFpbkNvbnRlbnQkaGRuTWVldGluZ0RvY3VtZW50RmlsdGVyIiBpZD0iaGRuTWVldGluZ0RvY3VtZW50RmlsdGVyIiB2YWx1ZT0iYWdlbmRhLEFnZW5kYUNvdmVyLEFkZGVuZHVtLE1lcmdlZCxQb3N0QWdlbmRhLFBvc3RNaW51dGVzLEFkZGl0aW9uYWxEb2N1bWVudHMsTWVyZ2VkQ292ZXIsUHVibGljQ29tbWVudHMsQ29uZmxpY3RzLFB1YmxpY0NvbW1lbnRzIiAvPg0KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JGhkbkRvY3VtZW50VHlwZUZpbHRlciIgaWQ9ImhkbkRvY3VtZW50VHlwZUZpbHRlciIgdmFsdWU9Imh0bWwscGRmIiAvPg0KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JGhkbkxhbmd1YWdlRmlsdGVyIiBpZD0iaGRuTGFuZ3VhZ2VGaWx0ZXIiIHZhbHVlPSI5LDEyIiAvPg0KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImN0bDAwJE1haW5Db250ZW50JGhkbklzTGFuZ3VhZ2VGaWx0ZXJPbiIgaWQ9ImhkbklzTGFuZ3VhZ2VGaWx0ZXJPbiIgdmFsdWU9InRydWUiIC8+DQogICAgPHNjcmlwdD4NCiAgICAgICAgZnVuY3Rpb24gU2l6ZV9DaGFuZ2VkKCkgew0KICAgICAgICAgICAgQ3VycmVudEhlaWdodF9TZW5kKCk7DQogICAgICAgIH0NCg0KICAgICAgICBmdW5jdGlvbiBDdXJyZW50SGVpZ2h0X1NlbmQoKSB7DQogICAgICAgICAgICBpZiAod2luZG93LnBhcmVudCAhPT0gd2luZG93LnNlbGYpIHsNCiAgICAgICAgICAgICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKCQoJ2JvZHknKS5oZWlnaHQoKSwgIioiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIE1lc3NhZ2VfUmVjaWV2ZWQoZXZlbnQpIHsNCiAgICAgICAgICAgIEN1cnJlbnRIZWlnaHRfU2VuZCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgLy8gU2V0dXAgdGhlIGxpc3RlbmVyLg0KICAgICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHsNCiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBNZXNzYWdlX1JlY2lldmVkLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgZWxzZSB7DQogICAgICAgICAgICBhdHRhY2hFdmVudCgib25tZXNzYWdlIiwgTWVzc2FnZV9SZWNpZXZlZCk7DQogICAgICAgIH0NCiAgICA8L3NjcmlwdD4NCg0KICAgICAgICAgICAgPGZvb3RlciBpZD0iZm9vdGVyIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCI+ZVNDUklCRSBWZXJzaW9uIDogNTAzMDE3MDA8L2Rpdj4NCiAgICAgICAgICAgIDwvZm9vdGVyPg0KICAgICAgICA8L2Rpdj4NCiAgICA8L2Zvcm0+DQo8L2JvZHk+DQo8L2h0bWw+DQo=
  recorded_at: Sun, 14 Jan 2024 14:53:16 GMT
recorded_with: VCR 6.1.0
