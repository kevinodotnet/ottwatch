---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jan 2024 03:16:34 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=ztlvrvkhipmsk0r1m3up3znw; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 845af58539d73773-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=AVpWBphpdxyAs8EnVqIgfGPcIy964yCGHE8PBR5W7yY1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=uTDadAVN2kXgv_IlKa38IoLBJEDhJyqBD_0SO6hOWTg1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="qsU+IZw0TF40J/q+mKvcINy9+0A00DxzYwC18x0wBUIIGAQ+Geoh9wEGk/suvzo9Xhlj2stTEbbXAqrjFC9KCgHRb5wFzPjPXajMQZ/FBkSw4a5wvgdDPdt2ikN8GB4Z29ZRQXjinJ/r8J3QvRvAJ94ht5Yy3pDDJESnOaXWRsjM9Sum750Z4M4ElYuU087iXLxYXjDnKAM1EHHDB+t7RpP1Lm2AQvwQI1MZmgBRwEZF349dACC7IMLE+hAVIOrBRCuHIIlvxxog3r24h+qnqOFCqVVW5mofqyg54vvKszGIWtHAJkYXP3McaLBWUduTpGQ4R9u/IlCcUU5S9vWd5cUrzEiFdlaHzbT+V/OmX1IfsHWTII7h16lW1pYBWJNjK8FIZMLASDVMmSA1H8gcLYUVJ3V3sWZE6XRlOjmTmc+pweoO3cJAKC7v4Tic2sHCGoWun4pSJhR85dmNLnDhco+nUbBw4ifG2ZNGPKdRynaG9qC69AcFATI8SQM2LJNWIv6rhS1FBr+fgUhQpAaKpoZJX9597MySWZEUn6YnbOVmmta2ettIa9x9h71k377G19oIZDhdgDub92kUCc38KVDzNBAmS+g+RXRnkzU38ENDgQ7RoJhfgmwjdS+wV0l8a5OfW1RQnUeDnekiUz4s22R7+B6ZWBV1QmGIJ3TVrsCRBazi4tKbCoWQVYEZaa2QGG52R7tPK/WqabO31uiItbmly63NFQcXEC7uZi1uZh/bGnXkhu+S9IBdFRPV7EK6Q4ohx2aMzZvsgv2ragtQPlrLOfMOVU8oNWoDd2xBSY0EcjTaw37sJJ3kycbdzIg5PYpkMcW2ScomC/q+R6QBMWIW5x8Ymh/J6348g9CNINLUTOPFvgR+1oUfB0wyEdu4aBClBDN6kg1VwFNQOdAsoc7AQJeRYrjgjZs9yMWrQ/b8TXN59JwRBITSa7LF3dCda4fbMswYgLLAlyo4lMlJVFC5/wKDFhg0bnjoYkCTdkn0BqCHVrKYFN/o3KoDi9L+CMfSKHsMCrnwo5HX7e6EawWiv9OxgQ/UXAxxiir4qKz4LtAkSPGcqiY589KiWWtB6IKDWJUui7PYGlLUT7f2ehl9M5kZXOaUhyWv/HKWsfQTnBD405132Q8uMZT4Y6bfdNUysrKU09EFlHVoXTK1yY4jBFS7lWQ1OKmjGUShcLn3t4vUPAoIpV729iQBaps8/37YY0WGDWicVv6d+lxwfM+O+IrFOaXm6Ht7ggB071EkgxjYOlWlM/L9uw8aCGyMEs1hOErmYRT9tRX93az7vHhWEl3McDCra7TIl36cytxv3N8uvXaMoU3S7em6EJXCyKo96NULYferwo88sgRBCf8CqV+QmnFbodq80z63ypYoqLvt7yQiAh6IS+lhtxxAl+VLqDBsi2LHOkJuJdh32QadmLzSdhaW5gZW7hNNqNAkaYxA4svoO9Pb+VCm9um+XTnLGiEJdeniUTTrB355JprM/AGNyxQavIYG6sB8CvWL79Ywf0ZPDzzoIXgOymCfSq3lyIiSNq0P4yp3j37eyVKeWRXqVNLxIuy0Sk3NgLKysdLjBHZqIDHb4pIImW4ZGCJe6OgkprvMrthm4VoWAzStrBRbD1XlgMjXnxMIVdeOAgMtIVZmgY98+RrvR0L6SNOv/qE737P6W3B374kNbP7VnjSd9RBCPeD/bBtxm2Y0mjjH2z4vj5TCOuijFyzclsaldIwomNB2JD5D9pJRe4STlw045TAN8H4E0wjmzXi/m6hXNhoKvrM+KbU7kw64Crm8aA/+dwWre26vTt+lsg4Qgp/62K6JHC5fGh1KsVWY5L7U4j7DNWSgEjaWN+tRtB156Zs9dTZxXTWdCQo6sKzABFY1GAyM48lCkUmvpzvVbxYCvo79//M0R3UDRWqpDnuQWx1sC2ByLW9H65s3efdg+JQuRfzU6amJhw7SYdlWI71lPcrKZ6vAMyshCGQ8" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" />
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden;
           overflow-x: hidden;
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="3*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-3*ef58236b-fce9-45cc-becf-c31c7a95d20f">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Board of Health</option>
	<option value="130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-10-130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Built Heritage Committee</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-16-136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">City Manager Hiring Panel</option>
	<option value="14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Committee of Adjustment</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="55*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-25-55*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-11-131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Community Services Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="23*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-23*ef58236b-fce9-45cc-becf-c31c7a95d20f">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-12-132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Emergency Preparedness and Protective Services Committee</option>
	<option value="133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-13-133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Environment and Climate Change Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-9-129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Finance and Corporate Services Committee</option>
	<option value="28*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-28-28*ef58236b-fce9-45cc-becf-c31c7a95d20f">Finance and Economic Development Committee</option>
	<option value="32*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-32*ef58236b-fce9-45cc-becf-c31c7a95d20f">French Language Services Advisory Committee</option>
	<option value="137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-17-137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">General Manager of Planning, Real Estate and Economic Development Hiring Panel</option>
	<option value="33*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-33*ef58236b-fce9-45cc-becf-c31c7a95d20f">Information Technology Sub-Committee</option>
	<option value="146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-26-146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Audit Committee and Transit Commission</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-29-149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Finance and Corporate Services and Planning and Housing Committee</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="35*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-35*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Agriculture and Rural Affairs Committee</option>
	<option value="150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-30-150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Environment and Climate Change Committee</option>
	<option value="151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-1-151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Transit Commission and Light Rail Sub-Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-15-135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Light Rail Sub-Committee</option>
	<option value="39*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-39*ef58236b-fce9-45cc-becf-c31c7a95d20f">Nominating Committee</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="42*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-42*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board</option>
	<option value="132*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-132*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board - Special Meeting</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Planning and Housing Committee</option>
	<option value="45*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-45*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Committee</option>
	<option value="129*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-129*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="118*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-28-118*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="127*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-127*ef58236b-fce9-45cc-becf-c31c7a95d20f">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee</option>
	<option value="52*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-52*ef58236b-fce9-45cc-becf-c31c7a95d20f">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>

    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                             <div id="filter-options" style="display:none;">
                                <span id="filter-meeting-collapse" class="fa fa-caret-right" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();" style="float:left !important; line-height:1.5;" ></span>
                                <span style="cursor:pointer;" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();"><b>  Filter Options: </b></span>
                                <div id="filter-meeting-docment" class="collapse col-lg-12" style="left: 15px">
                                    <div class="row">
                                        <div class="col-lg-4">
                                            <div class="row">
                                                <div class="col-lg-5">
                                                    <span><b> Meeting Documents: </b></span>
                                                </div>
                                                <div class="col-lg-7">
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="AgendaCover" class="chkMeetingDocuments common-filter" />
                                                        <span>Agenda Cover Page</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Agenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Addendum" class="chkMeetingDocuments common-filter"/>
                                                        <span>Addendum</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Merged" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostAgenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Post Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostMinutes" class="chkMeetingDocuments common-filter"/>
                                                        <span>Minutes</span>
                                                    </div>
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" value="AdditionalDocuments" class="chkMeetingDocuments common-filter"/>
                                                        <span>Additional Documents</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="MergedCover" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda Cover Page</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-lg-8">
                                            <div class="row">
                                                 <div class="col-lg-2">
                                                     <span><b>Also search in: </b></span>
                                                </div>
                                                <div class="col-lg-10">
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" id="chkConflicts" value="Conflicts" class="common-filter"/>
                                                        <span>Conflicts</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" id="chkComments" value="PublicComments" class=" common-filter"/>
                                                        <span>Public Comments</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                        <div class="col-lg-2">
                                            <span><b>Document Types:</b></span>
                                        </div>
                                        <div class="col-lg-4">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value=".html" class="chkDocumentTypes common-filter" />
                                                <span>HTML</span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value=".pdf" class="chkDocumentTypes common-filter"/>
                                                <span>PDF</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;" id="languageFilterDv">
                                        <div class="col-lg-2">
                                            <span><b>Language: </b></span>
                                        </div>
                                        <div class="col-lg-2">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value="0,9" class="chkLanguage"/>
                                                <span>English </span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value="0,12" class="chkLanguage"/>
                                                <span>French </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                          <div class="col-lg-2">
                                            <button type="button" class="fc-button fc-state-default fc-corner-left fc-corner-right" id="btnSaveFilterCriteria" onclick="return searchData();" >
                                                Save Filter
                                            </button>
                                          </div>
                                          
                                    </div>
                                </div>

                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                         <table id="searchTableTemp" style="background-color:dimgrey; color:white; border: none; width: 100%; word-wrap: break-word; word-break: break-word; display:none;">
                                            <thead>
                                                <tr>
                                                   <th style="float:left; padding-left: 5px;">Name</th>
                                                    <th>Date</th>
                                                    <th>Document Type</th>
                                                </tr>
                                            </thead>
                                        </table>
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                     .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }

                                    .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8c647e01-2ebd-4d31-8107-0da6d1ebffc4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162608' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D699ccb01-0f7d-4629-95ba-d122cdad4fcb' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162132' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Built Heritage Committee 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Built Heritage Committee 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Built Heritage Committee 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8093dd45-3d05-4cc8-8b7c-ff31ed028923' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162741' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-122"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>Accessibility Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Accessibility Advisory Committee 03 January 2024' href='VideoStream.aspx?MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 6:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db481ec2a-7fe4-49c2-babc-3edab4c5a047' aria-hidden='true' aria-label='Share Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='Meeting.aspx?Id=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='Meeting.aspx?Id=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Accessibility Advisory Committee 03 January 2024' href='VideoStream.aspx?MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162335' title="Cancellation French - AAC 16 janvier 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - AAC 16 janvier 2024.pdf Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - AAC 16 janvier 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162336' title="Cancellation English - AAC January 16, 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - AAC January 16, 2024.pdf Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - AAC January 16, 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D788fff63-2ffc-4b60-b862-8efe1c1c8394' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Planning and Housing Committee 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162264' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Planning and Housing Committee 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Planning and Housing Committee 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D43704983-1cbf-4e90-a405-8c04401b0ce4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162367' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D101ee98f-e083-4ef5-adad-e6c8613c4b84' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162265' title="Cancellation English - EPPSC 18 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - EPPSC 18 Jan 2024.pdf Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - EPPSC 18 Jan 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162266' title="Cancellation French - EPPSC 18 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - EPPSC 18 Jan 2024.pdf Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - EPPSC 18 Jan 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, January 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc952cd54-c94d-4efb-9a03-a08d1b947f6e' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, January 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D752109c0-f20e-47f7-9b65-158e58be9383' aria-hidden='true' aria-label='Share City Council Wednesday, January 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D47bf172f-ac10-493b-a67a-092f1c31e415' aria-hidden='true' aria-label='Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162235' title="Cancellation English - TRC 25 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - TRC 25 Jan 2024.pdf Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - TRC 25 Jan 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162236' title="Cancellation French - TRC 25 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - TRC 25 Jan 2024.pdf Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - TRC 25 Jan 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 31, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df26cd378-b12c-47dd-8775-3a3b0666f996' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 06, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0d1c82b0-368e-417e-8ee7-dd3eba9705fd' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' aria-hidden='true' aria-label='Share City Council Wednesday, February 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' aria-hidden='true' aria-label='Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Def28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, February 12, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadcd00c7-7a9e-4e35-b906-38b3e1da4728' aria-hidden='true' aria-label='Share Board of Health Monday, February 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da4ebb9eb-98bf-49fb-a643-1090b681436f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc281fabc-edb5-455e-9ec5-ff0101120cc1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4ef2cdcc-33b2-4eed-8634-f997b73fe93a' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De003fc3e-e8af-400c-83a5-48805aff3e1f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52764a30-cabd-4441-ae93-20f0fa702d5e' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc2ca2ca1-0f18-4133-af9c-5c7f135f1486' aria-hidden='true' aria-label='Share City Council Wednesday, February 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da38ab5e6-e639-43ad-94ee-dd23e7b24a40' aria-hidden='true' aria-label='Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-152"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>Planning Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Colonel By Room, 110 Laurier Avenue West, and by electronic participation'>Colonel By Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db4ca0617-81f9-4f2f-b7d8-bcbed3449324' aria-hidden='true' aria-label='Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 26, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De05ce412-c8dd-4fe8-a4df-2bd509fdc778' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='Meeting.aspx?Id=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='Meeting.aspx?Id=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 29, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' aria-hidden='true' aria-label='Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162307' title="Notice of Date Change BIL - Audit Committee.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Notice of Date Change BIL - Audit Committee.pdf Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Notice of Date Change BIL - Audit Committee</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df4de9172-b75f-4619-a786-b38398cbdf23' aria-hidden='true' aria-label='Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D75c92485-bf8d-4475-b76b-6fadf3b5417f' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 06, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8b81219e-148a-4414-a02e-72b1bbbc05eb' aria-hidden='true' aria-label='Share City Council Wednesday, March 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Friday, March 08, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 09 January 2024' href='VideoStream.aspx?MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Friday, March 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c65e15e-0d82-4cea-8c6b-5d38d39398fd' aria-hidden='true' aria-label='Share Audit Committee Friday, March 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 09 January 2024' href='VideoStream.aspx?MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8019a378-0e7b-4cf4-9dca-47d907b0ef96' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D58cb7118-858e-49e3-905a-796ab6fe98ca' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, March 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9d2c673d-5283-4469-8b9d-7ddebbb6d318' aria-hidden='true' aria-label='Share Transit Commission Monday, March 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5e838400-5511-4a4d-99be-47c4b155f48d' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 20, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 20, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046630df-5ab0-4fcc-820b-53e82cc2027a' aria-hidden='true' aria-label='Share City Council Wednesday, March 20, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd11c4a8a-b1bc-4b53-b87d-241aa5e0683d' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 25, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D664bd9cb-9171-4171-ab84-3c21476b6495' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db203ac6d-5c2a-4752-9b2d-019f2584198a' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da3954153-cab7-4b0a-bea8-deacdbd8c7a1' aria-hidden='true' aria-label='Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D93d69530-d017-48af-a75d-5244692670cc' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 03, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3abc02b-9f54-4127-a5f2-84db8252dbfe' aria-hidden='true' aria-label='Share City Council Wednesday, April 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Ded31ac61-39c9-4ae3-8d70-f63d35c4d91d' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd8790ca-ed41-4466-9766-60c56c2fbee6' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8752a132-2255-4e6b-a6a0-c244fd81cd34' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D281cf799-d75c-498c-b582-911b96809fa9' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' aria-hidden='true' aria-label='Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, April 15, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 15, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D95b18589-2549-427e-823e-6df486e1106c' aria-hidden='true' aria-label='Share Board of Health Monday, April 15, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D31eafba8-15fd-4327-a237-7917c789ddf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 17, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 17, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' aria-hidden='true' aria-label='Share City Council Wednesday, April 17, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=810197f9-4ba1-4196-a975-1afec1e53021' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D810197f9-4ba1-4196-a975-1afec1e53021' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=810197f9-4ba1-4196-a975-1afec1e53021' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D256cb79c-c8ca-4889-b016-665c3ae5d576' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bc57fb6-cd27-400e-b06b-ed6051a2e40e' aria-hidden='true' aria-label='Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 01, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' aria-hidden='true' aria-label='Share City Council Wednesday, May 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 02, 2024 @ 10:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7654692c-e3a3-42db-bfed-52e922dc8acc' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 07, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da514d875-4c32-4650-9830-89a7a9a770e2' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd34f5519-5ad0-4c24-8096-118234a877f8' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D057eafda-178d-43a4-beb8-5f3b0b03b3de' aria-hidden='true' aria-label='Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52da8377-369d-48f1-b54a-b45b5f0ea020' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D235f67b2-ff2b-4112-bf74-3b4b36261ee7' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 15, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 15, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf60e77a-6a82-49b7-a765-6f6240ee2c8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 15, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2c226df6-bdfb-4475-8031-a0401dd0308f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7852ab33-7954-497c-b6ea-a24772f08cf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42654a53-0d23-4db6-814c-f6d9df0f5b27' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd0d9ed5-0d37-484f-8f52-8cffc1389856' aria-hidden='true' aria-label='Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4c900e-8f1e-49c8-857e-d2cdb1758f94' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 29, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 29, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd222c97-c027-4c36-8b09-8a66e9dd4d8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 29, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D821ddb60-febf-47a6-b6af-364553b1bec5' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1237110e-b0f6-4b5a-85e7-c586e01804b0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D485b6664-5f06-4a27-8006-6b5ec05fc052' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, June 10, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' aria-hidden='true' aria-label='Share Audit Committee Monday, June 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bac4135-8dfe-4d05-9f59-95e083a8cd88' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1637c236-791e-4e9e-85f9-a2802a5067ef' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 12, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 12, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Daf49c3ed-8099-408c-8f62-6d99ae315dad' aria-hidden='true' aria-label='Share City Council Wednesday, June 12, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b84f262-1915-4249-8573-4edae7898e71' aria-hidden='true' aria-label='Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, June 17, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 17, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dee6d6fc3-62ec-4d7e-8a01-406f0a654467' aria-hidden='true' aria-label='Share Board of Health Monday, June 17, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D282286b9-da22-4dd9-8ae2-83e9ebbc10f2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D90e989c4-5ede-4192-a813-3a71049a7c77' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3df51c0-4904-43a7-9699-0960a1084be9' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=265ea823-10ee-4428-b01b-729bdef706ce' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 24, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D265ea823-10ee-4428-b01b-729bdef706ce' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='Meeting.aspx?Id=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='Meeting.aspx?Id=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=265ea823-10ee-4428-b01b-729bdef706ce' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b518b58-f70e-415e-a90a-8b7f614372c2' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 26, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 26, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcc5202bd-d5dd-45e5-ad73-e40e21f14454' aria-hidden='true' aria-label='Share City Council Wednesday, June 26, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' aria-hidden='true' aria-label='Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7c9439-2578-4899-8b3e-d10d430f7ece' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, July 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc4a530ca-196a-44cc-8a34-8bb6f94473d4' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4bebdf-6117-4ad6-9175-7c62114e62f8' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D67587d56-e263-480c-a232-c4e8d1c8b7f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 10, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 10, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df7927e1b-535a-42d1-9583-6e1fdfacddba' aria-hidden='true' aria-label='Share City Council Wednesday, July 10, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, July 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8287fdc8-e07a-401e-8e8d-78bee2ad7c53' aria-hidden='true' aria-label='Share City Council Wednesday, July 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19b5ae68-597b-4b2e-9a1d-711b572c8a14' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D314c2a45-8edf-4abb-8db7-a73d69cb5726' aria-hidden='true' aria-label='Share City Council Wednesday, August 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10ae6291-009f-4e0e-97ea-d206beda8a4d' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da527e923-da92-4d20-9300-d4f2a947e332' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dae15d54b-7c98-4cbf-8906-3894fce74f8e' aria-hidden='true' aria-label='Share City Council Wednesday, August 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5565084e-50ec-4216-ae75-d3c1cf8c5149' aria-hidden='true' aria-label='Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9258226c-36fd-4cb7-b855-ecda307f6c20' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 04, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' aria-hidden='true' aria-label='Share City Council Wednesday, September 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8209cf9f-eba7-42ad-914f-6d9673b994df' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D15045d75-9820-4cf0-b265-cad62c7f5b3f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De0ce2087-2dd2-407a-8f3b-3253bc2aa944' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D60f32882-0e46-4dd5-9fe2-6fd9b88547c5' aria-hidden='true' aria-label='Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc7507766-a2c6-4a6b-8c5a-00b9b098d90c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, September 16, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 16, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D55f50adf-c3f7-4676-a708-62710a1aceae' aria-hidden='true' aria-label='Share Board of Health Monday, September 16, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db0b7668a-64e1-4271-a607-991a68855dc5' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 18, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 18, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3145eb2-e6de-4ae5-946f-637a1c291bc3' aria-hidden='true' aria-label='Share City Council Wednesday, September 18, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 23, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd5e36f83-54fa-4b25-a5a8-57d7c4c45650' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='Meeting.aspx?Id=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='Meeting.aspx?Id=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D40af4304-2061-472b-a4e5-3de677482ea8' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D77c4478f-0aff-4184-8da5-1e1a67ddade3' aria-hidden='true' aria-label='Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 01, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df8995ccf-86ce-4b30-964c-257ab9f4bb8c' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 02, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 02, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D534308ac-8f54-4e99-a7ed-5e14200e10e5' aria-hidden='true' aria-label='Share City Council Wednesday, October 02, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcb1815a8-edbc-4a26-a4be-51fada9d064b' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D020b7719-a8d7-44ef-9eb0-fa383e8a5db3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D29630604-1862-400a-ab4c-8dee737a21ad' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' aria-hidden='true' aria-label='Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1710403d-4622-4fd1-b04f-647e4a5a0a06' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 16, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 16, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da2eae498-343f-4085-b829-727d4a885c21' aria-hidden='true' aria-label='Share City Council Wednesday, October 16, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D054f0e31-0ee9-4046-8a7d-02848de2cc35' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dec8b1035-e9cc-46c7-b857-8b28f48834ef' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df14ed038-8584-4af2-8e3f-3255bb3fe92d' aria-hidden='true' aria-label='Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, October 28, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10d833d0-cf46-4a65-9ae1-a74d415894e2' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='Meeting.aspx?Id=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='Meeting.aspx?Id=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 30, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 30, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3efcc478-d9c4-4d92-a0f7-b92814759074' aria-hidden='true' aria-label='Share City Council Wednesday, October 30, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, November 04, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 04, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd0371028-c1e9-42c4-ba4b-53a489506757' aria-hidden='true' aria-label='Share Board of Health Monday, November 04, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4fbd6684-cad1-4207-a703-82cb54eb0fb9' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D102002dd-3a94-4e58-bdbb-9dd4453b9121' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbea244bd-87e5-4161-85d1-29f070625be3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 13, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 13, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8199af2b-2ef9-46e1-8f61-7b494c88c680' aria-hidden='true' aria-label='Share City Council Wednesday, November 13, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 14, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D674b9885-cbf4-442c-b6fd-d4fb6b91623c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, November 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8e3dd510-587d-48f4-b958-9eb35d3df1b0' aria-hidden='true' aria-label='Share Transit Commission Monday, November 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4b7a582f-5455-4a32-b810-67fa2e98d0a2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West'>Champlain Room, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19a67ea4-2205-4413-83c6-cb5fd95e8ca3' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, November 25, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046bf135-3af9-4226-9f0e-16d643f95bcf' aria-hidden='true' aria-label='Share Audit Committee Monday, November 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D25bc0c93-b53b-4219-8b8d-ee904dd72b14' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c32fa41-8130-4b47-97bc-92a96925e65d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 27, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 27, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D20b160a8-7484-4d2d-ad5b-d9b941c66d48' aria-hidden='true' aria-label='Share City Council Wednesday, November 27, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D681c0a84-aab5-4449-8f5a-c974713190ca' aria-hidden='true' aria-label='Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, December 02, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 02, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' aria-hidden='true' aria-label='Share Board of Health Monday, December 02, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D6497d250-c798-46af-a95e-79704e754d14' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10700da8-db1f-4761-9160-bb2cfeefb063' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, December 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5d97860d-1141-4f1b-ae54-1bcd1f753030' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dfe04c767-9a78-48a3-8f4d-aee0e682e1de' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, December 11, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, December 11, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5a93081f-f432-4b19-bf3d-6f1c33750c31' aria-hidden='true' aria-label='Share City Council Wednesday, December 11, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 16, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da60886b2-8c65-48a5-b384-49b26f798e0e' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='Meeting.aspx?Id=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='Meeting.aspx?Id=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>

                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2523)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2024'>
                                                            
                                                            2024&nbsp;(2)
                                                        </option>
                                                    
                                                        <option data-year='2023'>
                                                            
                                                            2023&nbsp;(296)
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(292)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(261)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(212)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(233)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(169)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>63</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>7</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>118</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>11</span><span class='Year Year2023'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>37</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>62</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>9</span><span class='Year Year2023'>7</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2023'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>99</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>248</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>29</span><span class='Year Year2023'>27</span><span class='Year Year2024'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Manager+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">City Manager Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Manager Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>26</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>25</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>27</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>86</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Community Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2023'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>17</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span><span class='Year Year2023'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Emergency+Preparedness+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">Emergency Preparedness and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Emergency Preparedness and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Corporate+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Finance and Corporate Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Corporate Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>112</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=General+Manager+of+Planning%2c+Real+Estate+and+Economic+Development+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">General Manager of Planning, Real Estate and Economic Development Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="General Manager of Planning, Real Estate and Economic Development Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Audit+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Audit Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Audit Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Corporate+Services+and+Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Finance and Corporate Services and Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Corporate Services and Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transit+Commission+and+Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Joint Transit Commission and Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transit Commission and Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>131</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>21</span><span class='Year Year2023'>19</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList53'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board+-+Special+Meeting" id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse53">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board - Special Meeting&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2015'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse53" aria-labelledby="MeetingTypeList53" data-toggle-id=".collapse53">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board - Special Meeting">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList54'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse54">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>106</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>12</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse54" aria-labelledby="MeetingTypeList54" data-toggle-id=".collapse54">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList55'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse55">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse55" aria-labelledby="MeetingTypeList55" data-toggle-id=".collapse55">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList56'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse56">
                                                    <span class="MeetingTypeNameText">Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2023'>23</span><span class='Year Year2024'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse56" aria-labelledby="MeetingTypeList56" data-toggle-id=".collapse56">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList57'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse57">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>208</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>29</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse57" aria-labelledby="MeetingTypeList57" data-toggle-id=".collapse57">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList58'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse58">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2017'>1</span><span class='Year Year2018'>2</span><span class='Year Year2019'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse58" aria-labelledby="MeetingTypeList58" data-toggle-id=".collapse58">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList59'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse59">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span><span class='Year Year2023'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse59" aria-labelledby="MeetingTypeList59" data-toggle-id=".collapse59">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList60'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse60">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2016'>4</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse60" aria-labelledby="MeetingTypeList60" data-toggle-id=".collapse60">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList61'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse61">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2016'>1</span><span class='Year Year2017'>4</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse61" aria-labelledby="MeetingTypeList61" data-toggle-id=".collapse61">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList62'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Special+Joint+Meeting+of+the+Planning+Committee+and+the+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse62">
                                                    <span class="MeetingTypeNameText">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse62" aria-labelledby="MeetingTypeList62" data-toggle-id=".collapse62">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList63'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse63">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse63" aria-labelledby="MeetingTypeList63" data-toggle-id=".collapse63">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList64'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse64">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>109</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse64" aria-labelledby="MeetingTypeList64" data-toggle-id=".collapse64">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList65'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse65">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>107</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>13</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse65" aria-labelledby="MeetingTypeList65" data-toggle-id=".collapse65">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>

    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>

        var mincount = 20;
        var maxcount = 40;
        var lastScrollTop = 0;
        var isReachMaxRecord = false;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();

            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    var scrollTop = $(window).scrollTop();

                    if (scrollTop > lastScrollTop & !isReachMaxRecord) {
                        $('#masterPageHeader').css("overflow-y", "hidden");
                        document.getElementById(btnShowMoreId).click();
                        //comment out fake lazy loading code
                        //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                        //mincount = mincount + 20;
                        //maxcount = maxcount + 20;
                    }
                    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }

            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();
                }
                else {
                    mt.show();
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded" + SelectedYear) && !container.hasClass("Loading" + SelectedYear)) {
                container.addClass("Loading" + SelectedYear);

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered" + SelectedYear);
                            SelectYearOption();
                        }

                        container.addClass("Loaded" + SelectedYear);
                        container.removeClass("Loading" + SelectedYear);
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered" + SelectedYear)) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered" + SelectedYear);
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });

        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = window.location.href;
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">
        function postbackButtonClick() {
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var meetingType = [];
            $(".MeetingTypeListbox * .ss-value-text").each(function () {
                 meetingType.push($(this).text());
            });

            setCookie("MeetingTypeFilter", meetingType.join("|"));

            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            

            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();

            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();

            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();

                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }

    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            var expanded = getParameterByName("Expanded");

            if (expanded) {
                $(".MeetingTypeNameText").each(function(i,v){
                    if (expanded == v.innerText.trim()) {
                        v.click();
                    }
                });
            }

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);

            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }

            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
            RetrieveFilterOptions();
        });

        function getParameterByName(name) {
            var url = window.location.href
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'
            };

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }

        function loadCalendarMeetings() {
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();

            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: {
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    }
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");

                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300);
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });

                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");

        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);

            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();

        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }

                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus();
                        }, 100);
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict');
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType');
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate');
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem');
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict');
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });

            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });
        function closeDateRangeFilter()
        {
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();
            closeDateRangeFilter();
        });


    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();

                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }

                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){

            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {

                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }

               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();

                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);


        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/


        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();

        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            SaveFilterOptions();
            $("#searchTableTemp").hide();
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            var filterByMeetingDocumentTypes = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".chkMeetingDocuments").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocumentTypes += $(this).val() + ",";
                }
            });

            $(".chkDocumentTypes").each(function () {
                if ($(this).is(":checked")) {
                    filterByExtensions += $(this).val() + ",";
                }
            });

            if ($("#hdnIsLanguageFilterOn").val() == "true") {
                $("#languageFilterDv").show();
                $(".chkLanguage").each(function () {
                    if ($(this).is(":checked")) {
                        filterByLanguage += $(this).val() + ",";
                    }
                });
            }
            else {
                $("#languageFilterDv").hide();
                $(".chkLanguage").each(function () {
                    filterByLanguage += $(this).val() + ",";
                });
            }

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "bSort": false,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                        $("#searchTableTemp").show();
                        $("#searchTable_info").closest("#searchTable_wrapper").find("#searchTableTemp").remove();
                        $("#searchTable_info").parent().after($("#searchTableTemp")[0].outerHTML);
                        $("#searchTableTemp").hide();

                        if (!$("#filter-options").is(":visible")) {
                            $("#filter-options").show();
                            //  $("#filter-meeting-collapse").click();
                            // removed condition for filter default behaviour
                        }
                        $(".srch-grp-table:last").css("border-bottom", "1px solid darkgray");

                        if ($("#searchTable tr td:first").hasClass("dataTables_empty")) {
                            $("#searchTable_wrapper #searchTableTemp").hide();
                        }
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });

                        aoData.push({ "name": "filterByMeetingDocumentTypes", "value": filterByMeetingDocumentTypes });
                        aoData.push({ "name": "filterByExtensions", "value": filterByExtensions });
                        aoData.push({ "name": "filterByLanguage", "value": filterByLanguage });
                        aoData.push({ "name": "includeConflicts", "value": $("#chkConflicts").prop("checked") });
                        aoData.push({ "name": "includeComments", "value": $("#chkComments").prop("checked") });
                    },

                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            return false;
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                }
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
                else if (event.keyCode == 13) {
                    event.preventDefault(); // to fix the issue occuring on select/unselect checkbox and hiting enter will refresh the page(site)
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });

        function onFilterMeetingDocument(ele) {
            if ($("#filter-meeting-docment").hasClass("show")) {
                $("#filter-meeting-collapse").removeClass("fa fa-caret-down");
                $("#filter-meeting-collapse").addClass("fa fa-caret-right");
            }
            else {

                $("#filter-meeting-collapse").removeClass("fa fa-caret-right");
                $("#filter-meeting-collapse").addClass("fa fa-caret-down");
            }
        }

        function SaveFilterOptions() {
            var filterByMeetingDocument = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".common-filter").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocument += $(this).val() + ",";
                }
            });

            $(".chkLanguage").each(function () {
                if ($(this).is(":checked")) {
                    filterByLanguage += $(this).val().replace(".", "") + ",";
                }
            });

            var filterCriteria = { filterByMeetingDocument, filterByLanguage };
            deleteCookie("MeetingFilterOptions");
            setCookie("MeetingFilterOptions", JSON.stringify(filterCriteria));
            //sessionStorage.removeItem("MeetingFilterOptions");
            //sessionStorage.setItem("MeetingFilterOptions", JSON.stringify(filterCriteria));
            $("#dvSuccessMessage").show();
            $("#dvSuccessMessage").fadeOut(3000);
            return false;
        }

        function RetrieveFilterOptions() {
            var allFilterOptions = getCookie("MeetingFilterOptions");
            //var allFilterOptions = sessionStorage.getItem("MeetingFilterOptions");
            if (typeof allFilterOptions != "undefined" && allFilterOptions != null && allFilterOptions != "") {
                allFilterOptions = JSON.parse(allFilterOptions)
                var meetingDocumentFilter = allFilterOptions.filterByMeetingDocument;
                meetingDocumentFilter = meetingDocumentFilter.split(',');
                for (var i = 0; i < meetingDocumentFilter.length; i++) {
                    var meetingDocumentOptionValue = meetingDocumentFilter[i];
                    $(".common-filter").each(function () {
                        if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });

                }
                var languageFilter = allFilterOptions.filterByLanguage;
                languageFilter = languageFilter.split(',');
                for (var i = 0; i < languageFilter.length; i++) {
                    var languageOptionValue = languageFilter[i];
                    $(".chkLanguage").each(function () {
                        if ($(this).val().replace("0,", "") == languageOptionValue) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });
                }

            }
            else {
                if ($("#hdnMeetingDocumentFilter").val() != "") {
                    var meetingDocumentFilter = $("#hdnMeetingDocumentFilter").val();
                    meetingDocumentFilter = meetingDocumentFilter.split(',');
                    for (var i = 0; i < meetingDocumentFilter.length; i++) {
                        var meetingDocumentOptionValue = meetingDocumentFilter[i];
                        if (meetingDocumentOptionValue != "") {
                            $(".common-filter").each(function () {
                                if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnDocumentTypeFilter").val() != "") {
                    var documentTypeFilter = $("#hdnDocumentTypeFilter").val();
                    documentTypeFilter = documentTypeFilter.split(',');
                    for (var i = 0; i < documentTypeFilter.length; i++) {
                        var documentTypeOptionValue = documentTypeFilter[i];
                        if (documentTypeOptionValue != "") {
                            $(".chkDocumentTypes").each(function () {
                                var chkValue = $(this).val().toLowerCase();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue == documentTypeOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnLanguageFilter").val() != "") {
                    var languageFilter = $("#hdnLanguageFilter").val();
                    languageFilter = languageFilter.split(',');
                    for (var i = 0; i < languageFilter.length; i++) {
                        var languageOptionValue = languageFilter[i];
                        if (languageOptionValue != "") {
                            $(".chkLanguage").each(function () {
                                var chkValue = $(this).val();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue.indexOf(languageOptionValue) != -1) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
            }
        }

        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });

            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {


                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {

                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });

                $("#btnNextMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }

                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$hdnMeetingDocumentFilter" id="hdnMeetingDocumentFilter" value="agenda,AgendaCover,Addendum,Merged,PostAgenda,PostMinutes,AdditionalDocuments,MergedCover,PublicComments,Conflicts,PublicComments" />
    <input type="hidden" name="ctl00$MainContent$hdnDocumentTypeFilter" id="hdnDocumentTypeFilter" value="html,pdf" />
    <input type="hidden" name="ctl00$MainContent$hdnLanguageFilter" id="hdnLanguageFilter" value="9,12" />
    <input type="hidden" name="ctl00$MainContent$hdnIsLanguageFilterOn" id="hdnIsLanguageFilterOn" value="true" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50301700</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Mon, 15 Jan 2024 03:16:34 GMT
recorded_with: VCR 6.1.0
