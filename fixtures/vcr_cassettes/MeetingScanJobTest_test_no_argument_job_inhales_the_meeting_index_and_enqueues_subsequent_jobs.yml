---
http_interactions:
- request:
    method: get
    uri: https://pub-ottawa.escribemeetings.com/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - pub-ottawa.escribemeetings.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 15 Jan 2024 03:34:45 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cache-Control:
      - private
      Vary:
      - Accept-Encoding
      Set-Cookie:
      - ASP.NET_SessionId=gzwzbhdeknewuk43dws3pv0g; path=/; HttpOnly; SameSite=Lax
      Strict-Transport-Security:
      - max-age=31536000
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 845b10381dc336a9-YYZ
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>


<html id="masterPageHeader" xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge;chrome=1" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>
	eSCRIBE Published Meetings
</title>
    
    <!-- Syncfusion datepicker https://ej2.syncfusion.com/javascript/documentation/daterangepicker/accessibility/ -->
    <link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-base/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-buttons/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-popups/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/ej2-lists/styles/material.css" rel="stylesheet" /><link href="//cdn.syncfusion.com/ej2/20.1.58/ej2-calendars/styles/material.css" rel="stylesheet" />
    <script src="https://cdn.syncfusion.com/ej2/20.1.58/dist/ej2.min.js" type="text/javascript"></script>

    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.0.1/fullcalendar.min.css" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" />
    <script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>    
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous" /><link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome.min.css" /><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" /><script src="/bundles/modernizr?v=inCVuEFe6J4Q07A0AcRsbJic_UE5MwpRMNGcOtk94TE1"></script>
<script src="/bundles/Meeting?v=AVpWBphpdxyAs8EnVqIgfGPcIy964yCGHE8PBR5W7yY1"></script>


    <script type="text/javascript">
        $(document).ready(function () {
            // Registering Syncfusion license key
            ej.base.registerLicense('ORg4AjUWIQA/Gnt2VVhhQlFac1dJXGFWfVJpTGpQdk5xdV9DaVZUTWY/P1ZhSXxRdkNjWn5ec3NVQGVYVUU=');

            $("#masterPageHeader").attr("lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
            $("#masterPageHeader").attr("xml:lang", function () {
                return (window.location.href.toLowerCase().includes("french") ? "fr" : "en");
            });
                $("body").on("show.bs.dropdown", "*", function (e) {
                    e.stopPropagation();

                    var button = $(this);
                    var dropdown = button.parent();
                    var menu = dropdown.find("ul");
                    var container = dropdown.closest("main, html, window");

                    dropdown.removeClass("dropup");

                    var containertop = container.offset().top;
                    var containerheight = container.height(); 
                    var buttontop = button.offset().top - containertop;
                    var buttonbottom = buttontop + button.outerHeight(true); // - containertop;

                    menu.css("max-height", "")

                    var menuheight = menu.outerHeight(true);
                    var menubottom = buttonbottom + menuheight;

                    if (menubottom > containerheight) {
                        // bottom of the menu off of the page //

                        if (menuheight < buttontop) {
                            // enough space to open menu in up direction //
                            dropdown.addClass("dropup");
                        }
                        else {
                            // not enough space, limit height of menu //
                            if (buttontop > (containerheight - buttonbottom)) {
                                // more space above //
                                dropdown.addClass("dropup");
                                menu.css("max-height", (buttontop - 5) + "px");
                            }
                            else {
                                // more space below //
                                menu.css("max-height", (containerheight - buttonbottom - 5) + "px");
                            }
                        }
                    }
                });
            });
    </script>

    <link href="/Content/css?v=uTDadAVN2kXgv_IlKa38IoLBJEDhJyqBD_0SO6hOWTg1" rel="stylesheet"/>
<link rel="stylesheet" href="Content/Customizations.css" /><link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" /><link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link href="/Content/base/css?v=oCcL4rnES8adxKB9fiU4F5ioECU5LeuE9IMbfR7Y_k81" rel="stylesheet"/>

    <script src="/bundles/MeetingList?v=e4Ptuni7g8Q8v8c3RRk44Y6R6z_V_2NH3cMLZjoVIUU1"></script>



    <style>

        #footer .copyright {
            text-align: center;
            font-size: 12px;
            color: #999;
        }
    </style>

    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> </head>
<body>
    <!-- This file must exist, otherwise we'll get server side error -->
    <!-- eSCRIBE Global site tag (gtag.js) - Google Analytics --> 

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-178411397-49"></script> 

<script> 

  window.dataLayer = window.dataLayer || []; 

  function gtag(){dataLayer.push(arguments);} 

  gtag('js', new Date()); 

  

  gtag('config', 'UA-178411397-49'); 

</script> <form name="aspnetForm" method="post" action="./" id="aspnetForm">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="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" />


<script src="/bundles/MsAjaxJs?v=D6VN0fHlwFSIWjbVzi6mZyE9Ls-4LNrSSYVGRU46XF81" type="text/javascript"></script>
<script src="Scripts/respond.min.js" type="text/javascript"></script>
<script src="/bundles/WebFormsJs?v=N8tymL9KraMLGAMFuPycfH3pXe6uUlRXdhtYv8A_jUU1" type="text/javascript"></script>
<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="8F06231E" />
<input type="hidden" name="__VIEWSTATEENCRYPTED" id="__VIEWSTATEENCRYPTED" value="" />
<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="wUOZr+L/SDe7BOT/XmWfueE1x5rL/MSSKuB+Fb/FpUyBjlEQuCxKd0ZjiJWQlvXnQTLlJphT7sgtgUl6C7N+Xc6VokNGRYX1gQ3BUQveI7RvyKqmaFDyc2oe0i1zIqE2GUi54BzVpTydah9+Zoe/Nc9id4peyWCVslXxvgWeikcnBjE8yg/UqMJRGly0MGlMOX/O8Uu3I5bhHXXxBFynGUhoT4LfUHC3yELjbO+b20tVFHf9yOQyzhxcZ6JPJf5RU1Qs0kNiRO6axyVkgRHuQOO5zfyQTBIPWC24t49UAG3JkuKxTzv/3IAXd87qRSONAiwOLDD9WimtN2j+mwH7RqvOUMxAK3Gy+QTraWH+afEzsnOOMK/joUfDloah/a2EG2bXD4sGqtOC1J4EioN2IXCTkGbJEnKR1mticLNe8T42I0lTVoq10A+8aZ7vVhJelZb+XbNZpcfM0PQLymJi9ib9xnfAvFzUjzJIE+ocsVsFe8fVGA5AkhMt2FbSBzrvaWIvmRypdpN1ESQwHe1UFoybhkxloHvADhv2qWYCKksLIIVYyo9nSb0Ock2Oqs6M6A28EgtxJqkfja6mTqVCDI3DqqxqNayU0SypUpGI2wJbKsHvuUr+3+Is2mRFYzgUBkg6T1WLpbn7b1mtTFqLKipX6A+XS/00z1dEz/udLVhLk1i0uXV6wkrQHCCFxd3w9tYJ6fPGbKPkP9a+sOhJu4Mk78IBFu9+uFKYIX+ulmJw46/tIbIuKJ7HH43QPAEXIWEak2NaxdkN4HKj2VovjoxMVFUi+ONV8LBs/5yDBXDUXoPjolvFjI7iqkj5lUPEhcKLAByG7WBn9p67J/AFb6jIF9vPRclztqFUmZaLeouixB0X0ioNqL2h+5vV/qnFKFNVtO3seGrlquLKPAHuBAZw1IiN1yZmt0F9j33B7hePwX12ZOQwiNEb02coGCyuTY7ZKEOqpAxOGb51eqOv9fFsOfwFvGYNTCugoRoTPc97i3XYLVxSfwcPRoA7NFla1DRJ1xUzrA8RWnQeMYznpnLBDjgsm0gRcMYKdgY3yu2UOefBH0gWk58usISNY/j900PENUV9PGQioAF9Ag8f7FDjDaMmePnBKLELqanOktIOetV6tcJ2FHRVIZK9Pjw+U2ZDJs/oCWjWNRVZf1xhaatyVxGjFO7Q4MFCJiwHu8U46brIPgC0lqFwtDtlEhpxETqyyQSfmB9x4hcXdG10xRNbm6/shPoD4UfLOkopB63cEopt9IXP306Ut7OjsjMkIMeo+5hCmOP5IXtcGVLjgIfWD60Tu7HzbUfS7miwchqDnhwWjkFElOAMENyiB82uVTFFXEE1Y+yEDP+qx5kIscsleRoNjqlrprGMfByj8De2DR1rKkV1tp9YzGI6KiJZjNsC7nzaA0VzSyxVsXmmmb3g/wJFNg3jRZpzrouZHOepozYoz1+rgO3F+Lr2d0AWH4kSREO2vD2hInQd+yiFARF5YAV5p92v+1zQUWoCz4laO665zgJYZsy+pRvKKtyFZ1GWu/zBuJshXR4jsCYLYgRtNWfq+A6VW9LUqiJPD8KN3FfRGo1y6N3Su4k4zKItnjFNRe2Z4ITauFfUlWWPrbeRbnlK6dVfOLzAoD1PzA1CcIGJjtD+6rpCNIzY9Dx0AoWaLqRzWEq+bVagldmXBibZ0kwaimhbKmY2afXIB0pNVHqQGjBsQhiiVl/CoGP9t1ve8uU7z0d7ayxzqIGPPiK0fYUc2zatyqqT2040v+QDFVVhd5agZB2yTgIoDLTUu8J7fTs5qHSCEHxp6a2W+NqUjem1OYDmAl1NflrzroohAlhR4TgV3LNh9grebaK600KvsEi5Zp4V7REmfPPB3r/vcfWANbqTXvY9OiY6ZbYiTt91hm2vdDGENlH67N2VBcnWjwvzHJiwHDIPReBbvwYuRdDSQ6rDU5w93nirEmhTt6SoXOoXQ0z3RhHF15rC" />
        

        
        

        <div class="container-fluid" id="containerclass">
            
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
    

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/slim-select/1.15.1/slimselect.min.js"></script>
    <link rel="stylesheet" href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" />
    <div id="ctl00_MainContent_MeetingListUpdateProgress" style="display:none;">
	
            <div class="loaderPosition">
                <span class="la la-spinner la-spin loaderDesign"></span>
            </div>
        
</div>
    <style>
        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
                display: block;
                content: "";
        }

        .embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {
                /*position: absolute;*/
                top: 0;
                bottom: 0;
                left: 0;
                width: 100%;
                height: 100%;
                border: 0;
        }

       .ss-multi-selected {
           max-height:700px;
           overflow: scroll ;
           overflow-y: hidden;
           overflow-x: hidden;
       }
       .fc-day-grid-event .fc-content
       {
               white-space: nowrap;
               overflow: hidden
       }
         #calendar .fc-view-container{
           max-height:inherit;
           padding-bottom:30px;
           overflow:visible;
       }
        #divDateRangeFilterPopup .daterangepicker{min-width:490px;}

        @media only screen and (device-width: 768px) {
            #divDateRangeFilterPopup .daterangepicker {
                position: absolute;
                left: -200px !important;
                right: 900px !important;
                /*display: block !important;*/
                min-width: 490px;
            }

            .dropdown-menu dropdown-menu-right {
                display: block !important;
            }

            #PastMeetingTitle.pull-left {
                margin-left: 10px !important;
            }

            #PastMeetingFilterButton.btn-group {
                margin-right: 10px !important;
            }
        }

        .inputtable th {
            padding-right: 12px;
            vertical-align: top;
        }

        h1 {
            font-size: 2rem!important;
            font-weight: 700!important;
        }

        h2 {
            font-weight: 500!important;
        }
    </style>
    <div style="min-height: 100vh;">
    <header>
        <div class="row d-flex justify-content-center ">
            <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
                <div style="margin-left: 15px; margin-right: 15px;">
                    <div class="input-group">
                                            <div class="input-group-prepend  d-flex" id="adv-search">
                        <a class="skip-to-content-link" href="">
                            Skip to content
                        </a>
                        <div class='form-group has-feedback has-clear searchGroup ' style="flex-basis: 100%;">
                            <label class="sr-only" for="ctl00_MainContent_txtSearch"><span>Search</span></label>
                            <input name="ctl00$MainContent$txtSearch" id="ctl00_MainContent_txtSearch" class="form-control" class="SearchText" onkeydown="return searchEnter(event);" placeholder="Search" aria-labelledby="ctl00_MainContent_txtSearch" type="search" style="max-width: none; border-right: 0;" />
                            <span class="form-control-clear glyphicon glyphicon-remove form-control-feedback hidden"> </span>
                        </div>

                        <button role="button" aria-label="search" id="searchBtnMain" class='input-group-append searchGroup ' style="border-bottom-right-radius: 4px !important; border-top-right-radius: 4px !important; cursor: pointer;" type="button" onclick="searchData();">
                            <span tabindex="0" class="input-group-text input-group-addon" onkeydown="return searchEnter(event);" aria-label="search button"><span class="fa fa-search fontIcon" aria-hidden="true"></span></span>
                        </button>
                        <div id="filterIcon" class='input-group-btn input-group-addon '>
                            <div class="btn-group" role="group" aria-label="Filter">
                                <div class="dropdown dropdown-lg" >
                                    <button type="button" id="btnFilter" class="btn filter-icon dropdown-toggle dropdown-toggle-off" data-toggle="dropdown" aria-label="Filter" aria-expanded="false" style="margin-left: .75em;"><span class="la la-filter"></span><span class="fa fa-caret-down"></span></button>
                                    <div id="divDateRangeFilterPopup" class="dropdown-menu dropdown-menu-right" role="menu">
                                        <div class="form-group filterlabel" role="menuitem">
                                            <label for="ctl00_MainContent_FilterByDate">
                                                Filter By Date</label><br />
                                            <div class="input-group-prepend srch-input-group">
                                                <input name="ctl00$MainContent$FilterByDate" type="text" id="ctl00_MainContent_FilterByDate" class="form-control FilterByDate" onpaste="return false;" style="max-width: none; background-color: #fff;" />
                                                <!--<span class="input-group-append control-clear">
                                                    <span class="input-group-text input-group-addon"><span class="fa fa-times fontIcon" aria-hidden="true"></span></span>
                                                </span>-->
                                            </div>
                                        </div>
                                        <div class="form-group" role="menuitem">
                                            <label for="ctl00_MainContent_lblMultiSelect">
                                                Filter By Meeting Type</label><br />
                                            <select size="4" name="ctl00$MainContent$lblMultiSelect" multiple="multiple" id="ctl00_MainContent_lblMultiSelect" class="MeetingTypeListbox" onchange="ChangeFilterFlag();">
	<option value="1*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-1-1*ef58236b-fce9-45cc-becf-c31c7a95d20f">Accessibility Advisory Committee</option>
	<option value="61*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-1-61*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Agriculture and Rural Affairs Committee</option>
	<option value="6*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-6*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture and Recreation Advisory Committee</option>
	<option value="7*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-7*ef58236b-fce9-45cc-becf-c31c7a95d20f">Arts, Culture, Heritage and Recreation Advisory Committee</option>
	<option value="9*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-9-9*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Committee</option>
	<option value="10*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-10*ef58236b-fce9-45cc-becf-c31c7a95d20f">Audit Sub-Committee</option>
	<option value="11*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-11*ef58236b-fce9-45cc-becf-c31c7a95d20f">Auditor General Hiring Panel</option>
	<option value="40*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-10-40*ef58236b-fce9-45cc-becf-c31c7a95d20f">Board of Health</option>
	<option value="130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-10-130*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Built Heritage Committee</option>
	<option value="12*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-12*ef58236b-fce9-45cc-becf-c31c7a95d20f">Built Heritage Sub-Committee</option>
	<option value="13*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-13*ef58236b-fce9-45cc-becf-c31c7a95d20f">City Council</option>
	<option value="136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-16-136*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">City Manager Hiring Panel</option>
	<option value="14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-14*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Committee of Adjustment</option>
	<option value="16*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-16*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 1</option>
	<option value="17*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-17*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 2</option>
	<option value="18*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-18*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Adjustment - Panel 3</option>
	<option value="19*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-19*ef58236b-fce9-45cc-becf-c31c7a95d20f">Committee of Revision</option>
	<option value="20*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-20*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community and Protective Services Committee</option>
	<option value="21*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-21*ef58236b-fce9-45cc-becf-c31c7a95d20f">Community Service Advisory Committee</option>
	<option value="131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-11-131*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Community Services Committee</option>
	<option value="15*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-15-15*ef58236b-fce9-45cc-becf-c31c7a95d20f">Council Francophone Caucus</option>
	<option value="22*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-22*ef58236b-fce9-45cc-becf-c31c7a95d20f">Court of Revision</option>
	<option value="23*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-23*ef58236b-fce9-45cc-becf-c31c7a95d20f">Debenture Committee</option>
	<option value="24*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-24-24*ef58236b-fce9-45cc-becf-c31c7a95d20f">Election Compliance Audit Committee</option>
	<option value="132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-12-132*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Emergency Preparedness and Protective Services Committee</option>
	<option value="133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-13-133*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Environment and Climate Change Committee</option>
	<option value="25*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-25-25*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment and Climate Protection Committee</option>
	<option value="26*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-26-26*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environment Committee</option>
	<option value="27*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-27-27*ef58236b-fce9-45cc-becf-c31c7a95d20f">Environmental Stewardship Advisory Committee</option>
	<option value="129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-9-129*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Finance and Corporate Services Committee</option>
	<option value="66*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-6-66*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Finance and Economic Development Committee</option>
	<option value="126*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-6-126*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">French Language Services Advisory Committee</option>
	<option value="137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-17-137*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">General Manager of Planning, Real Estate and Economic Development Hiring Panel</option>
	<option value="33*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-3-33*ef58236b-fce9-45cc-becf-c31c7a95d20f">Information Technology Sub-Committee</option>
	<option value="146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-26-146*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Audit Committee and Transit Commission</option>
	<option value="124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-4-124*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs</option>
	<option value="149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-29-149*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Finance and Corporate Services and Planning and Housing Committee</option>
	<option value="34*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-4-34*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Audit Sub-Committee</option>
	<option value="29*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-29-29*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee</option>
	<option value="49*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-19-49*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee</option>
	<option value="36*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-36*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee</option>
	<option value="126*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-6-126*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint meeting of Planning Committee and Built Heritage Sub-committee</option>
	<option value="50*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-20-50*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee</option>
	<option value="37*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-37*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee</option>
	<option value="51*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-21-51*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Meeting of the Planning Committee and Community and Protective Services Committee</option>
	<option value="142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-142*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Agriculture and Rural Affairs Committee</option>
	<option value="150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-30-150*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Planning and Housing and Environment and Climate Change Committee</option>
	<option value="151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-1-151*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Joint Transit Commission and Light Rail Sub-Committee</option>
	<option value="38*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-8-38*ef58236b-fce9-45cc-becf-c31c7a95d20f">Joint Transportation Committee and Transit Commission</option>
	<option value="135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-15-135*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Light Rail Sub-Committee</option>
	<option value="128*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-8-128*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Nominating Committee</option>
	<option value="41*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-11-41*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Built Heritage Advisory Committee</option>
	<option value="22*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-22-22*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Ottawa Police Services Board</option>
	<option value="132*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-12-132*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Police Services Board - Special Meeting</option>
	<option value="43*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-13-43*ef58236b-fce9-45cc-becf-c31c7a95d20f">Ottawa Public Library Board</option>
	<option value="44*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-14-44*ef58236b-fce9-45cc-becf-c31c7a95d20f">Planning Advisory Committee</option>
	<option value="134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-14-134*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Planning and Housing Committee</option>
	<option value="68*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3" data-id="mt-8-68*31cc7ee0-0c69-44af-b8f2-f0f80e9606c3">Planning Committee</option>
	<option value="46*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-16-46*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Complaints Committee</option>
	<option value="47*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-17-47*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Finance and Audit Committee</option>
	<option value="48*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-18-48*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Human Resources Committee</option>
	<option value="125*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-5-125*ef58236b-fce9-45cc-becf-c31c7a95d20f">Police Services Board Policy and Governance Committee</option>
	<option value="127*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-7-127*ef58236b-fce9-45cc-becf-c31c7a95d20f">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee</option>
	<option value="52*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-22-52*ef58236b-fce9-45cc-becf-c31c7a95d20f">Standing Committee on Environmental Protection, Water and Waste Management</option>
	<option value="53*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-23-53*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transit Commission</option>
	<option value="2*ef58236b-fce9-45cc-becf-c31c7a95d20f" data-id="mt-2-2*ef58236b-fce9-45cc-becf-c31c7a95d20f">Transportation Committee</option>

</select>
                                        </div>
                                        <div class="form-group" id="FilterByConflictMember" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByConflictMember">
                                                Filter By Conflict Member</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByConflictMember" multiple="multiple" id="ctl00_MainContent_lbFilterByConflictMember" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        
                                        <div class="form-group" id="FilterByStage" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStage">
                                                Filter By Stage</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStage" multiple="multiple" id="ctl00_MainContent_lbFilterByStage" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByStatus" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByStatus">
                                                Filter By Status</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByStatus" multiple="multiple" id="ctl00_MainContent_lbFilterByStatus" onchange="ChangeFilterFlag();">

</select>
                                        </div>
                                        <div class="form-group" id="FilterByDepartment" role="menuitem">
                                            <label for="ctl00_MainContent_lbFilterByDepartment">
                                                Filter By Department</label><br />
                                            <select size="4" name="ctl00$MainContent$lbFilterByDepartment" multiple="multiple" id="ctl00_MainContent_lbFilterByDepartment" onchange="ChangeFilterFlag();">

</select>
                                        </div>

                                        <div class="form-group" id="FilterByKeyword" role="menuitem">
                                            <label for="ctl00_MainContent_txtFilterByKeyword">
                                                Filter By Keyword</label><br />
                                            <div class="input-group srch-input-group">
                                                <input name="ctl00$MainContent$txtFilterByKeyword" type="text" id="ctl00_MainContent_txtFilterByKeyword" class="form-control" />
                                                <span class="input-group-addon control-clear">
                                                    <span class="glyphicon glyphicon-remove"></span>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-6 Modalbuttons">
                                                <button type="button" id="btnResetFilters" class="btn btn-reset" onclick="ResetFilters();">
                                                    Reset Filters</button>
                                            </div>
                                            <div class="col-md-6 Modalbuttons">
                                                <a onclick="return postbackButtonClick();" id="FilterResults" class="btn btn-primary btn-orange results" href="javascript:__doPostBack(&#39;ctl00$MainContent$FilterResults&#39;,&#39;&#39;)">Filter Results</a>
                                                <button type="button" id="btnFilterResults" class="btn-primary btn-orange" onclick="searchData();">
                                                    Filter Results</button>
                                                <button type="button" id="btnFunnelFilterResults" class="btn-primary btn-orange" >
                                                    Filter Results</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
    </header>

    <main id="maincontent" class="row d-flex justify-content-center">
        <div class="col-12 col-md-12 col-lg-12 col-lg-10 col-md-offset-1 col-xl-10 col-xl-offset-1 ">
            <div style="margin-left: 15px; margin-right: 15px;" class="child">
                <div>
                    <div id="calendar" class=''></div>
                    <div id="cal-list" class="fc" style="display: none;">
                        <div role="navigation" aria-label="other meetings options" class="fc-toolbar">
                            <div id="ctl00_MainContent_MonthMenu" class="fc-left">
	
                                    <input type="hidden" name="ctl00$MainContent$StartMonthDate" id="ctl00_MainContent_StartMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$EndMonthDate" id="ctl00_MainContent_EndMonthDate" />
                                    <input type="hidden" name="ctl00$MainContent$CurrentMonth" id="ctl00_MainContent_CurrentMonth" />
                                    <input type="hidden" name="ctl00$MainContent$LastDay" id="ctl00_MainContent_LastDay" />
                                    <input type="hidden" name="ctl00$MainContent$IsFilterList" id="ctl00_MainContent_IsFilterList" value="0" />
                                    <input type="hidden" name="ctl00$MainContent$IsChangeInMonth" id="ctl00_MainContent_IsChangeInMonth" value="0" />
                                    <button type="button" id="btnPreviousMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Previous Month"><span class="fc-icon fc-icon-left-single-arrow"></span></button>
                                    
                                    <!--<h1 style="display:none" aria-hidden="true" id="monthText">
                                        <span id="ctl00_MainContent_lblMonthText"></span>
                                    </h1>-->
                                    <button type="button" id="btnNextMonth" class="fc-button fc-state-default fc-corner-left fc-corner-right" aria-label="Next Month"><span class="fc-icon fc-icon-right-single-arrow"></span></button>
                                
</div>

                            <div id="mergedListHeader" class="fc-left">
                                <h1>Upcoming Meetings</h1>
                            </div>

                            <div id="pastHeader" class="fc-left">
                                <h1>Past Meetings</h1>
                            </div>
                            <div class="AgendaItemHistoryHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-historyitem" class="title-icons search-resourcelibrary AgendaItemHistorySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterAgendaItemHistoryLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="AgendaItemHistorySearchField" aria-labelledby="FilterAgendaItemHistryLabel">
                                    </div>
                                </span>
                            </div>

                            <div class="LegislationHeader fc-left col-lg-4 col-md-3" style="padding-left: 0px">
                                <span id="custom-searchbar-legislation" class="title-icons search-resourcelibrary LegislationLibrarySearchField" style="width: 100%">
                                    <div class="searchtable">
                                        <label id="FilterLegislationLabel" for="LegislationSearchField" class="sr-only">Filter Legislation</label>
                                        <input class="form-control" type="text" autocomplete="off" name="LegislationSearchField" placeholder="Filter" id="LegislationSearchField" aria-labelledby="FilterLegislationLabel">
                                    </div>
                                </span>
                            </div>

                            <div id="header-buttons" class="fc-right" role="group" aria-label="event views">
                                <button type="button" id="btnCalendarView" class="fc-month-button calendarView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Calendar</button>
                                <button type="button" id="btnMergedListView" class="fc-mergedListViewButton-button mergedListView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    
                                    List
                                </button>
                                <button type="button" id="btnListView" class="fc-myCustomButton-button listView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Upcoming</button>
                                <button type="button" id="btnPastView" class="fc-pastViewButton-button pastView fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Past
                                </button>
                                <button type="button" id="btnConflictsView" class="fc-myCustomConflictsButton-button conflicts fc-button fc-state-default fc-corner-left fc-corner-right">
                                    Conflicts Registry</button>
                                
                                
                            </div>
                             <div id="filter-options" style="display:none;">
                                <span id="filter-meeting-collapse" class="fa fa-caret-right" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();" style="float:left !important; line-height:1.5;" ></span>
                                <span style="cursor:pointer;" data-toggle="collapse" data-target="#filter-meeting-docment" onclick="onFilterMeetingDocument();"><b>  Filter Options: </b></span>
                                <div id="filter-meeting-docment" class="collapse col-lg-12" style="left: 15px">
                                    <div class="row">
                                        <div class="col-lg-4">
                                            <div class="row">
                                                <div class="col-lg-5">
                                                    <span><b> Meeting Documents: </b></span>
                                                </div>
                                                <div class="col-lg-7">
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="AgendaCover" class="chkMeetingDocuments common-filter" />
                                                        <span>Agenda Cover Page</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Agenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Addendum" class="chkMeetingDocuments common-filter"/>
                                                        <span>Addendum</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="Merged" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostAgenda" class="chkMeetingDocuments common-filter"/>
                                                        <span>Post Agenda</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="PostMinutes" class="chkMeetingDocuments common-filter"/>
                                                        <span>Minutes</span>
                                                    </div>
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" value="AdditionalDocuments" class="chkMeetingDocuments common-filter"/>
                                                        <span>Additional Documents</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" value="MergedCover" class="chkMeetingDocuments common-filter"/>
                                                        <span>Revised Agenda Cover Page</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-lg-8">
                                            <div class="row">
                                                 <div class="col-lg-2">
                                                     <span><b>Also search in: </b></span>
                                                </div>
                                                <div class="col-lg-10">
                                                     <div class="col-lg-12">
                                                        <input type="checkbox" id="chkConflicts" value="Conflicts" class="common-filter"/>
                                                        <span>Conflicts</span>
                                                    </div>
                                                    <div class="col-lg-12">
                                                        <input type="checkbox" id="chkComments" value="PublicComments" class=" common-filter"/>
                                                        <span>Public Comments</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                        <div class="col-lg-2">
                                            <span><b>Document Types:</b></span>
                                        </div>
                                        <div class="col-lg-4">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value=".html" class="chkDocumentTypes common-filter" />
                                                <span>HTML</span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value=".pdf" class="chkDocumentTypes common-filter"/>
                                                <span>PDF</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;" id="languageFilterDv">
                                        <div class="col-lg-2">
                                            <span><b>Language: </b></span>
                                        </div>
                                        <div class="col-lg-2">
                                            <div class="col-lg-12">
                                                <input type="checkbox" value="0,9" class="chkLanguage"/>
                                                <span>English </span>
                                            </div>
                                                <div class="col-lg-12">
                                                <input type="checkbox" value="0,12" class="chkLanguage"/>
                                                <span>French </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row col-lg-10" style="padding-top:10px;">
                                          <div class="col-lg-2">
                                            <button type="button" class="fc-button fc-state-default fc-corner-left fc-corner-right" id="btnSaveFilterCriteria" onclick="return searchData();" >
                                                Save Filter
                                            </button>
                                          </div>
                                          
                                    </div>
                                </div>

                            </div>
                            <div class="fc-center" style="display: none;"></div>
                            <div class="fc-clear" style="display: none;"></div>
                        </div>
                        <div class="row">
                            <div role="region" aria-label="Meetings list" id="all-list" class="col-md-12">
                                <div id="ctl00_MainContent_MeetingTypeList">
	
                                        <input type="hidden" name="ctl00$MainContent$IsFilter" id="ctl00_MainContent_IsFilter" value="0" />
                                        <input type="hidden" name="ctl00$MainContent$scrollIndexer" id="ctl00_MainContent_scrollIndexer" value="1" />
                                                    
                                                    <a id="ctl00_MainContent_btnShowMore" class="d-none" href="javascript:__doPostBack(&#39;ctl00$MainContent$btnShowMore&#39;,&#39;&#39;)">Show More</a>
                                                    <span id="ctl00_MainContent_meetingsPaging"></span>

                                    
</div>
                            </div>

                            <div role="region" aria-label="Search result" id="searchresults" class="col-md-12" style="display: none;">
                                <div class="ms-WPBody noindex" style="width: 100%">
                                    <div class="srch-results">
                                         <table id="searchTableTemp" style="background-color:dimgrey; color:white; border: none; width: 100%; word-wrap: break-word; word-break: break-word; display:none;">
                                            <thead>
                                                <tr>
                                                   <th style="float:left; padding-left: 5px;">Name</th>
                                                    <th>Date</th>
                                                    <th>Document Type</th>
                                                </tr>
                                            </thead>
                                        </table>
                                        <table id="searchTable" style="border: none; width: 100%; word-wrap: break-word; word-break: break-word;">
                                            <thead>
                                                <tr style="display: none;">
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div role="region" aria-label="Registered Conflicts" id="all-conflicts-list" class="col-md-12">
                                <table id="table-conflicts-list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th class="tablepadding" scope="col" style="width:24%" id="conflict">
                                                Member</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingType">
                                                Meeting Type</th>
                                            <th class="tablepadding" scope="col" style="width:24%" id="meetingDate">
                                                Meeting Date</th>
                                            <th class="tablepadding" scope="col" style="width:20%" id="agendaItem">
                                                Agenda Item</th>
                                            <th class="tablepadding" scope="col" style="width:8%" class="no-sort" id="viewRegConflict"><span style="visibility: hidden; display:none;">Conflicts Icon</span>Conflict</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-legislation-list" role="region" aria-label="Legislation History" class="col-md-12">
                                <style type="text/css">
                                    #table-legislation-list th {
                                        text-align: left;
                                    }

                                    .LegislationHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .LegislationHeader .searchtable {
                                        position: relative;
                                    }

                                    .LegislationHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                     .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }

                                    .vertical-middle {
                                        vertical-align: middle !important;
                                    }

                                    .txtDocumentType {
                                        border-top-right-radius: 5px;
                                        border-bottom-right-radius: 5px;
                                    }
                                </style>

                                <table id="table-legislation-list-no-longer-use" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="legislation-icon-th" aria-label="file icon" scope="col" style="width: 5%" class="no-sort"><span style="visibility: hidden">legislation icon</span></th>
                                            <th id="legislation-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="legislation-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Legislative Text
                                            </th>
                                            <th id="legislation-department-th" class="legWordWrap tablepadding" scope="col" style="width: 15%">
                                                Department
                                            </th>

                                            <th id="legislation-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="legislation-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="agendaitemhistory-list" role="region" aria-label="Agenda Item History" class="col-md-12">
                                <style type="text/css">
                                    #table-agendaitemhistory-list th {
                                        text-align: left;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        top: 2px !important;
                                    }

                                    .AgendaItemHistoryHeader .searchtable {
                                        position: relative;
                                    }

                                    .AgendaItemHistoryHeader .input-group-append {
                                        position: absolute;
                                        display: block;
                                        top: 8px;
                                        right: 10px;
                                        background: none !important;
                                    }
                                </style>

                                <table id="table-agendaitemhistory-list" class="list" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word;">
                                    <thead>
                                        <tr role="row">
                                            <th id="agendaitemhistory-number-th" class="legWordWrap tablepadding link" scope="col">
                                                Number
                                            </th>
                                            <th id="agendaitemhistory-text-th" class="legWordWrap tablepadding" scope="col" style="width: 33%">
                                                Title
                                            </th>
                                            <th id="agendaitemhistory-department-th" class="legWordWrap tablepadding" scope="col">
                                                Department
                                            </th>
                                            <th id="agendaitemhistory-meetingtype-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Type
                                            </th>
                                            <th id="agendaitemhistory-meetingdate-th" class="legWordWrap tablepadding" scope="col">
                                                Meeting Date
                                            </th>
                                            <th id="agendaitemhistory-stage-th" class="legWordWrap tablepadding" scope="col">
                                                Stage
                                            </th>
                                            <th id="agendaitemhistory-status-th" class="legWordWrap tablepadding" scope="col">
                                                Status
                                            </th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>

                            <div id="all-merged-list" class="col-md-12">
                                <div id="merged-list" class="table-responsive dataTable no-footer" style="width: 100%;">
                                    <div role="region" aria-label="List of Upcoming Meetings" class="upcoming-meetings">
                                        
                                                
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-26-56"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>Committee of Adjustment - Panel 3</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8c647e01-2ebd-4d31-8107-0da6d1ebffc4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl0_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 3 Tuesday, January 16, 2024 @ 9:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 3 14 December 2023' href='VideoStream.aspx?MeetingId=8c647e01-2ebd-4d31-8107-0da6d1ebffc4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 3 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162608' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 3 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8c647e01-2ebd-4d31-8107-0da6d1ebffc4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 3 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D699ccb01-0f7d-4629-95ba-d122cdad4fcb' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl1_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, January 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=699ccb01-0f7d-4629-95ba-d122cdad4fcb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda Cover Page</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162132' class="link " target="_blank" lang='en' aria-label='Agenda Cover Page (PDF) for Built Heritage Committee 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Built Heritage Committee 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=699ccb01-0f7d-4629-95ba-d122cdad4fcb&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Built Heritage Committee 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-25-55"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 2</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8093dd45-3d05-4cc8-8b7c-ff31ed028923' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl2_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 2 Tuesday, January 16, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 2 14 December 2023' href='VideoStream.aspx?MeetingId=8093dd45-3d05-4cc8-8b7c-ff31ed028923' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 2 16 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162741' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 2 16 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=8093dd45-3d05-4cc8-8b7c-ff31ed028923&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 2 16 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-122"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>Accessibility Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Accessibility Advisory Committee 03 January 2024' href='VideoStream.aspx?MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, January 16, 2024 @ 6:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db481ec2a-7fe4-49c2-babc-3edab4c5a047' aria-hidden='true' aria-label='Share Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='Meeting.aspx?Id=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='Meeting.aspx?Id=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl3_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Accessibility Advisory Committee 03 January 2024' href='VideoStream.aspx?MeetingId=b481ec2a-7fe4-49c2-babc-3edab4c5a047' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162335' title="Cancellation French - AAC 16 janvier 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - AAC 16 janvier 2024.pdf Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - AAC 16 janvier 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162336' title="Cancellation English - AAC January 16, 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - AAC January 16, 2024.pdf Accessibility Advisory Committee Tuesday, January 16, 2024 @ 6:00 PM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - AAC January 16, 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D788fff63-2ffc-4b60-b862-8efe1c1c8394' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl4_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=788fff63-2ffc-4b60-b862-8efe1c1c8394' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Planning and Housing Committee 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162264' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Planning and Housing Committee 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=788fff63-2ffc-4b60-b862-8efe1c1c8394&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Planning and Housing Committee 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-23-53"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>Committee of Adjustment - Panel 1</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 17, 2024 @ 1:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D43704983-1cbf-4e90-a405-8c04401b0ce4' aria-hidden='true' aria-label='Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl5_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Committee of Adjustment - Panel 1 Wednesday, January 17, 2024 @ 1:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Committee of Adjustment - Panel 1 14 December 2023' href='VideoStream.aspx?MeetingId=43704983-1cbf-4e90-a405-8c04401b0ce4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="en">Agenda</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=English' class="link " target="_blank" lang='en' aria-label='Agenda (HTML) for Committee of Adjustment - Panel 1 17 January 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                        <li class="resource-link">
                                                                                            <a href='FileStream.ashx?DocumentId=162367' class="link " target="_blank" lang='en' aria-label='Agenda (PDF) for Committee of Adjustment - Panel 1 17 January 2024'>PDF</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                            <li class="packageType">
                                                                                <ul class="inline-package-collection">
                                                                                    <li><i class='las la-file fa-lg'></i>
                                                                                        <span class="packageName" lang="fr">Ordre du jour</span>
                                                                                    </li>
                                                                                
                                                                                        <li class="resource-link">
                                                                                            <a href='Meeting.aspx?Id=43704983-1cbf-4e90-a405-8c04401b0ce4&Agenda=Agenda&lang=French' class="link " target="_blank" lang='fr' aria-label='Ordre du jour (HTML) pour Committee of Adjustment - Panel 1 17 janvier 2024'>HTML</a>
                                                                                        </li>
                                                                                    
                                                                                </ul>
                                                                            </li>
                                                                        
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D101ee98f-e083-4ef5-adad-e6c8613c4b84' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl6_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=101ee98f-e083-4ef5-adad-e6c8613c4b84' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162265' title="Cancellation English - EPPSC 18 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - EPPSC 18 Jan 2024.pdf Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - EPPSC 18 Jan 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162266' title="Cancellation French - EPPSC 18 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - EPPSC 18 Jan 2024.pdf Emergency Preparedness and Protective Services Committee Thursday, January 18, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - EPPSC 18 Jan 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, January 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc952cd54-c94d-4efb-9a03-a08d1b947f6e' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl7_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, January 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=c952cd54-c94d-4efb-9a03-a08d1b947f6e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, January 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D752109c0-f20e-47f7-9b65-158e58be9383' aria-hidden='true' aria-label='Share City Council Wednesday, January 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=752109c0-f20e-47f7-9b65-158e58be9383&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl8_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, January 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=752109c0-f20e-47f7-9b65-158e58be9383' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, January 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D47bf172f-ac10-493b-a67a-092f1c31e415' aria-hidden='true' aria-label='Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl9_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, January 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=47bf172f-ac10-493b-a67a-092f1c31e415' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162235' title="Cancellation English - TRC 25 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation English - TRC 25 Jan 2024.pdf Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation English - TRC 25 Jan 2024</span><span>.pdf</span></a></li>
                                                                            <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162236' title="Cancellation French - TRC 25 Jan 2024.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Cancellation French - TRC 25 Jan 2024.pdf Transportation Committee Thursday, January 25, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Cancellation French - TRC 25 Jan 2024</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, January 31, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='Meeting.aspx?Id=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl10_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, January 31, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=c450f7a9-eaee-4b14-a4ca-e38a9dbf1a2b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df26cd378-b12c-47dd-8775-3a3b0666f996' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl11_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, February 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f26cd378-b12c-47dd-8775-3a3b0666f996' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 06, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0d1c82b0-368e-417e-8ee7-dd3eba9705fd' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl12_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, February 06, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=0d1c82b0-368e-417e-8ee7-dd3eba9705fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' aria-hidden='true' aria-label='Share City Council Wednesday, February 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl13_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=893b6eb0-adc5-46b8-a6ca-5fa30b5190e0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' aria-hidden='true' aria-label='Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl14_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, February 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=3ab1fb0b-3a9f-4699-8ca6-04526f3551aa' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 08, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Def28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='Meeting.aspx?Id=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl15_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, February 08, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=ef28a5a3-aaa1-4703-9a7e-5e0bbd87d55e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, February 12, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadcd00c7-7a9e-4e35-b906-38b3e1da4728' aria-hidden='true' aria-label='Share Board of Health Monday, February 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl16_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, February 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=adcd00c7-7a9e-4e35-b906-38b3e1da4728' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da4ebb9eb-98bf-49fb-a643-1090b681436f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl17_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, February 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a4ebb9eb-98bf-49fb-a643-1090b681436f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc281fabc-edb5-455e-9ec5-ff0101120cc1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl18_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, February 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=c281fabc-edb5-455e-9ec5-ff0101120cc1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4ef2cdcc-33b2-4eed-8634-f997b73fe93a' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl19_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=4ef2cdcc-33b2-4eed-8634-f997b73fe93a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De003fc3e-e8af-400c-83a5-48805aff3e1f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl20_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, February 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=e003fc3e-e8af-400c-83a5-48805aff3e1f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52764a30-cabd-4441-ae93-20f0fa702d5e' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl21_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, February 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=52764a30-cabd-4441-ae93-20f0fa702d5e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, February 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc2ca2ca1-0f18-4133-af9c-5c7f135f1486' aria-hidden='true' aria-label='Share City Council Wednesday, February 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl22_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, February 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=c2ca2ca1-0f18-4133-af9c-5c7f135f1486' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da38ab5e6-e639-43ad-94ee-dd23e7b24a40' aria-hidden='true' aria-label='Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl23_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, February 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a38ab5e6-e639-43ad-94ee-dd23e7b24a40' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-152"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>Planning Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 22, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Colonel By Room, 110 Laurier Avenue West, and by electronic participation'>Colonel By Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db4ca0617-81f9-4f2f-b7d8-bcbed3449324' aria-hidden='true' aria-label='Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='Meeting.aspx?Id=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl24_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning Advisory Committee Thursday, February 22, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning Advisory Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b4ca0617-81f9-4f2f-b7d8-bcbed3449324' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, February 26, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De05ce412-c8dd-4fe8-a4df-2bd509fdc778' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='Meeting.aspx?Id=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='Meeting.aspx?Id=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl25_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, February 26, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=e05ce412-c8dd-4fe8-a4df-2bd509fdc778' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, February 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl26_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, February 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=9f26a721-c42f-4e9b-aaef-6aa72eb4e88d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, February 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dadaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl27_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, February 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=adaf90aa-0652-4fdc-95bf-b5c6a8d9c1ee' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, February 29, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' aria-hidden='true' aria-label='Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='Meeting.aspx?Id=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl28_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Thursday, February 29, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=262ad9b6-2c1b-4e12-9a27-f20b106f0f4a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="additional-doc-list resource-list" style="padding-left: 0;">
                                                                        
                                                                                <li>
                                                                                    <a href='FileStream.ashx?DocumentId=162307' title="Notice of Date Change BIL - Audit Committee.pdf" class="link teaserLink" target="_blank" lang='en' aria-label='Notice of Date Change BIL - Audit Committee.pdf Audit Committee Thursday, February 29, 2024 @ 9:30 AM'>
                                                                                        <i class='las la-file-pdf fa-lg'></i><span class="teaser">Notice of Date Change BIL - Audit Committee</span><span>.pdf</span></a></li>
                                                                            
                                                                            
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df4de9172-b75f-4619-a786-b38398cbdf23' aria-hidden='true' aria-label='Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl29_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Monday, March 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f4de9172-b75f-4619-a786-b38398cbdf23' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D75c92485-bf8d-4475-b76b-6fadf3b5417f' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl30_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, March 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=75c92485-bf8d-4475-b76b-6fadf3b5417f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 06, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8b81219e-148a-4414-a02e-72b1bbbc05eb' aria-hidden='true' aria-label='Share City Council Wednesday, March 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl31_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8b81219e-148a-4414-a02e-72b1bbbc05eb' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl32_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, March 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 07 December 2023' href='VideoStream.aspx?MeetingId=7c51c9ea-b4b0-401c-b4a0-46bb39a4807f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Friday, March 08, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 09 January 2024' href='VideoStream.aspx?MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Friday, March 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c65e15e-0d82-4cea-8c6b-5d38d39398fd' aria-hidden='true' aria-label='Share Audit Committee Friday, March 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Friday, March 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl33_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Friday, March 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 09 January 2024' href='VideoStream.aspx?MeetingId=1c65e15e-0d82-4cea-8c6b-5d38d39398fd' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 12, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8019a378-0e7b-4cf4-9dca-47d907b0ef96' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl34_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, March 12, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8019a378-0e7b-4cf4-9dca-47d907b0ef96' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D58cb7118-858e-49e3-905a-796ab6fe98ca' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl35_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=58cb7118-858e-49e3-905a-796ab6fe98ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, March 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9d2c673d-5283-4469-8b9d-7ddebbb6d318' aria-hidden='true' aria-label='Share Transit Commission Monday, March 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl36_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, March 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=9d2c673d-5283-4469-8b9d-7ddebbb6d318' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5e838400-5511-4a4d-99be-47c4b155f48d' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl37_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, March 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=5e838400-5511-4a4d-99be-47c4b155f48d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, March 20, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 20, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046630df-5ab0-4fcc-820b-53e82cc2027a' aria-hidden='true' aria-label='Share City Council Wednesday, March 20, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='Meeting.aspx?Id=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl38_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, March 20, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=046630df-5ab0-4fcc-820b-53e82cc2027a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd11c4a8a-b1bc-4b53-b87d-241aa5e0683d' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl39_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, March 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d11c4a8a-b1bc-4b53-b87d-241aa5e0683d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, March 25, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D664bd9cb-9171-4171-ab84-3c21476b6495' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl40_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, March 25, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=664bd9cb-9171-4171-ab84-3c21476b6495' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, March 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db203ac6d-5c2a-4752-9b2d-019f2584198a' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl41_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, March 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=b203ac6d-5c2a-4752-9b2d-019f2584198a' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, March 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl42_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, March 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 11 December 2023' href='VideoStream.aspx?MeetingId=28e9d980-9545-4b13-bfc4-4fd58b7ed7c0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, March 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da3954153-cab7-4b0a-bea8-deacdbd8c7a1' aria-hidden='true' aria-label='Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl43_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, March 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=a3954153-cab7-4b0a-bea8-deacdbd8c7a1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D93d69530-d017-48af-a75d-5244692670cc' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=93d69530-d017-48af-a75d-5244692670cc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl44_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, April 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=93d69530-d017-48af-a75d-5244692670cc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 03, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3abc02b-9f54-4127-a5f2-84db8252dbfe' aria-hidden='true' aria-label='Share City Council Wednesday, April 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl45_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3abc02b-9f54-4127-a5f2-84db8252dbfe' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Ded31ac61-39c9-4ae3-8d70-f63d35c4d91d' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl46_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, April 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=ed31ac61-39c9-4ae3-8d70-f63d35c4d91d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd8790ca-ed41-4466-9766-60c56c2fbee6' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl47_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, April 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd8790ca-ed41-4466-9766-60c56c2fbee6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8752a132-2255-4e6b-a6a0-c244fd81cd34' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl48_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, April 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=8752a132-2255-4e6b-a6a0-c244fd81cd34' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D281cf799-d75c-498c-b582-911b96809fa9' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=281cf799-d75c-498c-b582-911b96809fa9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl49_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, April 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=281cf799-d75c-498c-b582-911b96809fa9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' aria-hidden='true' aria-label='Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl50_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, April 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=888e063f-4af1-4a01-bdb3-b4dcbf9cb2c1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, April 15, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 15, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D95b18589-2549-427e-823e-6df486e1106c' aria-hidden='true' aria-label='Share Board of Health Monday, April 15, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='Meeting.aspx?Id=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=95b18589-2549-427e-823e-6df486e1106c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl51_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, April 15, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=95b18589-2549-427e-823e-6df486e1106c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D31eafba8-15fd-4327-a237-7917c789ddf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl52_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, April 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=31eafba8-15fd-4327-a237-7917c789ddf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, April 17, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, April 17, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' aria-hidden='true' aria-label='Share City Council Wednesday, April 17, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='Meeting.aspx?Id=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl53_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, April 17, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=305648d9-c46f-4e0c-b8cc-7bdd7fbee14f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl54_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, April 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=903f0fb4-c1ff-4c8d-84d9-edc73c4994e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=810197f9-4ba1-4196-a975-1afec1e53021' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, April 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D810197f9-4ba1-4196-a975-1afec1e53021' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=810197f9-4ba1-4196-a975-1afec1e53021&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl55_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, April 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=810197f9-4ba1-4196-a975-1afec1e53021' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, April 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D256cb79c-c8ca-4889-b016-665c3ae5d576' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl56_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, April 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=256cb79c-c8ca-4889-b016-665c3ae5d576' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, April 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bc57fb6-cd27-400e-b06b-ed6051a2e40e' aria-hidden='true' aria-label='Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl57_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, April 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bc57fb6-cd27-400e-b06b-ed6051a2e40e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 01, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' aria-hidden='true' aria-label='Share City Council Wednesday, May 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl58_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3a8d2f7c-bb06-453d-9163-2ae3a9ebdef5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 02, 2024 @ 10:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7654692c-e3a3-42db-bfed-52e922dc8acc' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='Meeting.aspx?Id=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl59_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, May 02, 2024 @ 10:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 11 December 2023' href='VideoStream.aspx?MeetingId=7654692c-e3a3-42db-bfed-52e922dc8acc' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 07, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da514d875-4c32-4650-9830-89a7a9a770e2' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='Meeting.aspx?Id=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl60_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, May 07, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=a514d875-4c32-4650-9830-89a7a9a770e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd34f5519-5ad0-4c24-8096-118234a877f8' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl61_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=d34f5519-5ad0-4c24-8096-118234a877f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D057eafda-178d-43a4-beb8-5f3b0b03b3de' aria-hidden='true' aria-label='Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl62_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, May 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=057eafda-178d-43a4-beb8-5f3b0b03b3de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 09, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='Meeting.aspx?Id=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl63_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, May 09, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=42c2c4ab-8d05-46fe-a39c-ac1c6a4a26e8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D52da8377-369d-48f1-b54a-b45b5f0ea020' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='Meeting.aspx?Id=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl64_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, May 14, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=52da8377-369d-48f1-b54a-b45b5f0ea020' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 14, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D235f67b2-ff2b-4112-bf74-3b4b36261ee7' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='Meeting.aspx?Id=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl65_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, May 14, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=235f67b2-ff2b-4112-bf74-3b4b36261ee7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 15, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 15, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf60e77a-6a82-49b7-a765-6f6240ee2c8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 15, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl66_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 15, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bf60e77a-6a82-49b7-a765-6f6240ee2c8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 16, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2c226df6-bdfb-4475-8031-a0401dd0308f' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl67_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, May 16, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=2c226df6-bdfb-4475-8031-a0401dd0308f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D7852ab33-7954-497c-b6ea-a24772f08cf2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl68_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, May 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=7852ab33-7954-497c-b6ea-a24772f08cf2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D42654a53-0d23-4db6-814c-f6d9df0f5b27' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl69_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, May 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=42654a53-0d23-4db6-814c-f6d9df0f5b27' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, May 23, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd0d9ed5-0d37-484f-8f52-8cffc1389856' aria-hidden='true' aria-label='Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl70_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, May 23, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bd0d9ed5-0d37-484f-8f52-8cffc1389856' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, May 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4c900e-8f1e-49c8-857e-d2cdb1758f94' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl71_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, May 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=bf4c900e-8f1e-49c8-857e-d2cdb1758f94' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, May 29, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, May 29, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbd222c97-c027-4c36-8b09-8a66e9dd4d8d' aria-hidden='true' aria-label='Share City Council Wednesday, May 29, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='Meeting.aspx?Id=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl72_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, May 29, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=bd222c97-c027-4c36-8b09-8a66e9dd4d8d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 04, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D821ddb60-febf-47a6-b6af-364553b1bec5' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='Meeting.aspx?Id=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl73_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, June 04, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=821ddb60-febf-47a6-b6af-364553b1bec5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1237110e-b0f6-4b5a-85e7-c586e01804b0' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl74_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=1237110e-b0f6-4b5a-85e7-c586e01804b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 06, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D485b6664-5f06-4a27-8006-6b5ec05fc052' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='Meeting.aspx?Id=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl75_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, June 06, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=485b6664-5f06-4a27-8006-6b5ec05fc052' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, June 10, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' aria-hidden='true' aria-label='Share Audit Committee Monday, June 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl76_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, June 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=cf1c18ff-d8fb-49eb-b694-f15f4c9d19e3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8bac4135-8dfe-4d05-9f59-95e083a8cd88' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl77_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, June 11, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8bac4135-8dfe-4d05-9f59-95e083a8cd88' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 11, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1637c236-791e-4e9e-85f9-a2802a5067ef' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='Meeting.aspx?Id=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl78_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, June 11, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=1637c236-791e-4e9e-85f9-a2802a5067ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 12, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 12, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Daf49c3ed-8099-408c-8f62-6d99ae315dad' aria-hidden='true' aria-label='Share City Council Wednesday, June 12, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='Meeting.aspx?Id=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl79_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 12, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=af49c3ed-8099-408c-8f62-6d99ae315dad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b84f262-1915-4249-8573-4edae7898e71' aria-hidden='true' aria-label='Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b84f262-1915-4249-8573-4edae7898e71&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl80_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, June 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=2b84f262-1915-4249-8573-4edae7898e71' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, June 17, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 17, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dee6d6fc3-62ec-4d7e-8a01-406f0a654467' aria-hidden='true' aria-label='Share Board of Health Monday, June 17, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='Meeting.aspx?Id=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl81_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, June 17, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=ee6d6fc3-62ec-4d7e-8a01-406f0a654467' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D282286b9-da22-4dd9-8ae2-83e9ebbc10f2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl82_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, June 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=282286b9-da22-4dd9-8ae2-83e9ebbc10f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-14-134"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>Planning and Housing Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D90e989c4-5ede-4192-a813-3a71049a7c77' aria-hidden='true' aria-label='Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl83_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Planning and Housing Committee Wednesday, June 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Planning and Housing Committee 12 December 2023' href='VideoStream.aspx?MeetingId=90e989c4-5ede-4192-a813-3a71049a7c77' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 20, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3df51c0-4904-43a7-9699-0960a1084be9' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl84_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, June 20, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f3df51c0-4904-43a7-9699-0960a1084be9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=265ea823-10ee-4428-b01b-729bdef706ce' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, June 24, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D265ea823-10ee-4428-b01b-729bdef706ce' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='Meeting.aspx?Id=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='Meeting.aspx?Id=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=265ea823-10ee-4428-b01b-729bdef706ce&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl85_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, June 24, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=265ea823-10ee-4428-b01b-729bdef706ce' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, June 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2b518b58-f70e-415e-a90a-8b7f614372c2' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl86_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, June 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=2b518b58-f70e-415e-a90a-8b7f614372c2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, June 26, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, June 26, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcc5202bd-d5dd-45e5-ad73-e40e21f14454' aria-hidden='true' aria-label='Share City Council Wednesday, June 26, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl87_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, June 26, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=cc5202bd-d5dd-45e5-ad73-e40e21f14454' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, June 27, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' aria-hidden='true' aria-label='Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='Meeting.aspx?Id=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl88_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, June 27, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=871bf7f2-8b57-4e7a-ad3b-ebf2382573b6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 02, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7c9439-2578-4899-8b3e-d10d430f7ece' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl89_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, July 02, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7c9439-2578-4899-8b3e-d10d430f7ece' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, July 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc4a530ca-196a-44cc-8a34-8bb6f94473d4' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl90_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, July 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=c4a530ca-196a-44cc-8a34-8bb6f94473d4' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbf4bebdf-6117-4ad6-9175-7c62114e62f8' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl91_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, July 09, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bf4bebdf-6117-4ad6-9175-7c62114e62f8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, July 09, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D67587d56-e263-480c-a232-c4e8d1c8b7f1' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='Meeting.aspx?Id=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl92_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, July 09, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=67587d56-e263-480c-a232-c4e8d1c8b7f1' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 10, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 10, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df7927e1b-535a-42d1-9583-6e1fdfacddba' aria-hidden='true' aria-label='Share City Council Wednesday, July 10, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl93_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 10, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f7927e1b-535a-42d1-9583-6e1fdfacddba' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, July 22, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='Meeting.aspx?Id=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl94_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, July 22, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=9c78c9ee-c6e6-4e4a-8b4c-258c34ea84f2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, July 24, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, July 24, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8287fdc8-e07a-401e-8e8d-78bee2ad7c53' aria-hidden='true' aria-label='Share City Council Wednesday, July 24, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl95_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, July 24, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8287fdc8-e07a-401e-8e8d-78bee2ad7c53' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 01, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19b5ae68-597b-4b2e-9a1d-711b572c8a14' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='Meeting.aspx?Id=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl96_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, August 01, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19b5ae68-597b-4b2e-9a1d-711b572c8a14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 07, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D314c2a45-8edf-4abb-8db7-a73d69cb5726' aria-hidden='true' aria-label='Share City Council Wednesday, August 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl97_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=314c2a45-8edf-4abb-8db7-a73d69cb5726' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10ae6291-009f-4e0e-97ea-d206beda8a4d' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='Meeting.aspx?Id=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl98_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, August 13, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=10ae6291-009f-4e0e-97ea-d206beda8a4d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, August 13, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da527e923-da92-4d20-9300-d4f2a947e332' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='Meeting.aspx?Id=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a527e923-da92-4d20-9300-d4f2a947e332&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl99_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, August 13, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=a527e923-da92-4d20-9300-d4f2a947e332' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, August 21, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, August 21, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dae15d54b-7c98-4cbf-8906-3894fce74f8e' aria-hidden='true' aria-label='Share City Council Wednesday, August 21, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='Meeting.aspx?Id=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl100_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, August 21, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=ae15d54b-7c98-4cbf-8906-3894fce74f8e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, August 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5565084e-50ec-4216-ae75-d3c1cf8c5149' aria-hidden='true' aria-label='Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl101_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, August 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5565084e-50ec-4216-ae75-d3c1cf8c5149' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D9258226c-36fd-4cb7-b855-ecda307f6c20' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl102_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, September 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=9258226c-36fd-4cb7-b855-ecda307f6c20' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 04, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 04, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' aria-hidden='true' aria-label='Share City Council Wednesday, September 04, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='Meeting.aspx?Id=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl103_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 04, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=2ea0ca9f-ac7f-42d2-bfb7-529ecbce16d7' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8209cf9f-eba7-42ad-914f-6d9673b994df' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl104_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, September 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=8209cf9f-eba7-42ad-914f-6d9673b994df' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D15045d75-9820-4cf0-b265-cad62c7f5b3f' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl105_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, September 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=15045d75-9820-4cf0-b265-cad62c7f5b3f' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 10, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3De0ce2087-2dd2-407a-8f3b-3253bc2aa944' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='Meeting.aspx?Id=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl106_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, September 10, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=e0ce2087-2dd2-407a-8f3b-3253bc2aa944' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D60f32882-0e46-4dd5-9fe2-6fd9b88547c5' aria-hidden='true' aria-label='Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl107_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, September 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=60f32882-0e46-4dd5-9fe2-6fd9b88547c5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 12, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dc7507766-a2c6-4a6b-8c5a-00b9b098d90c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='Meeting.aspx?Id=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl108_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, September 12, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=c7507766-a2c6-4a6b-8c5a-00b9b098d90c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, September 16, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 16, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D55f50adf-c3f7-4676-a708-62710a1aceae' aria-hidden='true' aria-label='Share Board of Health Monday, September 16, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='Meeting.aspx?Id=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl109_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, September 16, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=55f50adf-c3f7-4676-a708-62710a1aceae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Db0b7668a-64e1-4271-a607-991a68855dc5' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl110_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, September 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=b0b7668a-64e1-4271-a607-991a68855dc5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, September 18, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, September 18, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df3145eb2-e6de-4ae5-946f-637a1c291bc3' aria-hidden='true' aria-label='Share City Council Wednesday, September 18, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='Meeting.aspx?Id=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl111_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, September 18, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=f3145eb2-e6de-4ae5-946f-637a1c291bc3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl112_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, September 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=0e7ee1ca-94fb-479c-ab6d-a71cbebb59ae' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, September 23, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd5e36f83-54fa-4b25-a5a8-57d7c4c45650' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='Meeting.aspx?Id=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='Meeting.aspx?Id=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl113_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, September 23, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=d5e36f83-54fa-4b25-a5a8-57d7c4c45650' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, September 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D40af4304-2061-472b-a4e5-3de677482ea8' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=40af4304-2061-472b-a4e5-3de677482ea8&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl114_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, September 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=40af4304-2061-472b-a4e5-3de677482ea8' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, September 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D77c4478f-0aff-4184-8da5-1e1a67ddade3' aria-hidden='true' aria-label='Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl115_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, September 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=77c4478f-0aff-4184-8da5-1e1a67ddade3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 01, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df8995ccf-86ce-4b30-964c-257ab9f4bb8c' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl116_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, October 01, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=f8995ccf-86ce-4b30-964c-257ab9f4bb8c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 02, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 02, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D534308ac-8f54-4e99-a7ed-5e14200e10e5' aria-hidden='true' aria-label='Share City Council Wednesday, October 02, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='Meeting.aspx?Id=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl117_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 02, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=534308ac-8f54-4e99-a7ed-5e14200e10e5' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 03, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dcb1815a8-edbc-4a26-a4be-51fada9d064b' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='Meeting.aspx?Id=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl118_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, October 03, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=cb1815a8-edbc-4a26-a4be-51fada9d064b' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D020b7719-a8d7-44ef-9eb0-fa383e8a5db3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='Meeting.aspx?Id=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl119_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, October 08, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=020b7719-a8d7-44ef-9eb0-fa383e8a5db3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 08, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D29630604-1862-400a-ab4c-8dee737a21ad' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='Meeting.aspx?Id=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=29630604-1862-400a-ab4c-8dee737a21ad&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl120_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, October 08, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=29630604-1862-400a-ab4c-8dee737a21ad' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' aria-hidden='true' aria-label='Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl121_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Thursday, October 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=5c7e1473-bfc9-4606-b7ff-eb1f20209ae6' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 15, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1710403d-4622-4fd1-b04f-647e4a5a0a06' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl122_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, October 15, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=1710403d-4622-4fd1-b04f-647e4a5a0a06' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 16, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 16, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da2eae498-343f-4085-b829-727d4a885c21' aria-hidden='true' aria-label='Share City Council Wednesday, October 16, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='Meeting.aspx?Id=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a2eae498-343f-4085-b829-727d4a885c21&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl123_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 16, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=a2eae498-343f-4085-b829-727d4a885c21' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 17, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D054f0e31-0ee9-4046-8a7d-02848de2cc35' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='Meeting.aspx?Id=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl124_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, October 17, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=054f0e31-0ee9-4046-8a7d-02848de2cc35' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, October 22, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dec8b1035-e9cc-46c7-b857-8b28f48834ef' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='Meeting.aspx?Id=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl125_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, October 22, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=ec8b1035-e9cc-46c7-b857-8b28f48834ef' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, October 24, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Df14ed038-8584-4af2-8e3f-3255bb3fe92d' aria-hidden='true' aria-label='Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='Meeting.aspx?Id=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl126_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, October 24, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=f14ed038-8584-4af2-8e3f-3255bb3fe92d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, October 28, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10d833d0-cf46-4a65-9ae1-a74d415894e2' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='Meeting.aspx?Id=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='Meeting.aspx?Id=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl127_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, October 28, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=10d833d0-cf46-4a65-9ae1-a74d415894e2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, October 30, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, October 30, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D3efcc478-d9c4-4d92-a0f7-b92814759074' aria-hidden='true' aria-label='Share City Council Wednesday, October 30, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='Meeting.aspx?Id=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl128_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, October 30, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=3efcc478-d9c4-4d92-a0f7-b92814759074' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, November 04, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 04, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dd0371028-c1e9-42c4-ba4b-53a489506757' aria-hidden='true' aria-label='Share Board of Health Monday, November 04, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='Meeting.aspx?Id=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl129_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, November 04, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=d0371028-c1e9-42c4-ba4b-53a489506757' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='Meeting.aspx?Id=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl130_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, November 05, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=2a7928ab-8aa3-4db9-bd0a-2a6c57ae9d29' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 05, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4fbd6684-cad1-4207-a703-82cb54eb0fb9' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='Meeting.aspx?Id=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl131_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, November 05, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=4fbd6684-cad1-4207-a703-82cb54eb0fb9' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 07, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D102002dd-3a94-4e58-bdbb-9dd4453b9121' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='Meeting.aspx?Id=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl132_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, November 07, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=102002dd-3a94-4e58-bdbb-9dd4453b9121' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 12, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dbea244bd-87e5-4161-85d1-29f070625be3' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='Meeting.aspx?Id=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=bea244bd-87e5-4161-85d1-29f070625be3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl133_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, November 12, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=bea244bd-87e5-4161-85d1-29f070625be3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 13, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 13, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8199af2b-2ef9-46e1-8f61-7b494c88c680' aria-hidden='true' aria-label='Share City Council Wednesday, November 13, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='Meeting.aspx?Id=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl134_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 13, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=8199af2b-2ef9-46e1-8f61-7b494c88c680' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-6-126"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>French Language Services Advisory Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 14, 2024 @ 5:30 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D674b9885-cbf4-442c-b6fd-d4fb6b91623c' aria-hidden='true' aria-label='Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='Meeting.aspx?Id=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl135_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for French Language Services Advisory Committee Thursday, November 14, 2024 @ 5:30 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For French Language Services Advisory Committee 07 December 2023' href='VideoStream.aspx?MeetingId=674b9885-cbf4-442c-b6fd-d4fb6b91623c' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-70"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transit Commission Monday, November 18, 2024 @ 9:30 AM'>Transit Commission</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 18, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D8e3dd510-587d-48f4-b958-9eb35d3df1b0' aria-hidden='true' aria-label='Share Transit Commission Monday, November 18, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='Meeting.aspx?Id=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl136_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transit Commission Monday, November 18, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transit Commission 07 December 2023' href='VideoStream.aspx?MeetingId=8e3dd510-587d-48f4-b958-9eb35d3df1b0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-13-133"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>Environment and Climate Change Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 19, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D4b7a582f-5455-4a32-b810-67fa2e98d0a2' aria-hidden='true' aria-label='Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='Meeting.aspx?Id=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl137_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Environment and Climate Change Committee Tuesday, November 19, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Environment and Climate Change Committee 20 December 2023' href='VideoStream.aspx?MeetingId=4b7a582f-5455-4a32-b810-67fa2e98d0a2' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-132"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>Emergency Preparedness and Protective Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 21, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West'>Champlain Room, 110 Laurier Avenue West</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D19a67ea4-2205-4413-83c6-cb5fd95e8ca3' aria-hidden='true' aria-label='Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='Meeting.aspx?Id=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl138_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Emergency Preparedness and Protective Services Committee Thursday, November 21, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Emergency Preparedness and Protective Services Committee 12 December 2023' href='VideoStream.aspx?MeetingId=19a67ea4-2205-4413-83c6-cb5fd95e8ca3' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-2-62"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Audit Committee Monday, November 25, 2024 @ 9:30 AM'>Audit Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D046bf135-3af9-4226-9f0e-16d643f95bcf' aria-hidden='true' aria-label='Share Audit Committee Monday, November 25, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='Meeting.aspx?Id=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl139_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Audit Committee Monday, November 25, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Audit Committee 23 November 2023' href='VideoStream.aspx?MeetingId=046bf135-3af9-4226-9f0e-16d643f95bcf' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, November 25, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D25bc0c93-b53b-4219-8b8d-ee904dd72b14' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='Meeting.aspx?Id=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl140_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, November 25, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=25bc0c93-b53b-4219-8b8d-ee904dd72b14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-11-131"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>Community Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, November 26, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D1c32fa41-8130-4b47-97bc-92a96925e65d' aria-hidden='true' aria-label='Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='Meeting.aspx?Id=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl141_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Community Services Committee Tuesday, November 26, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Community Services Committee 08 December 2023' href='VideoStream.aspx?MeetingId=1c32fa41-8130-4b47-97bc-92a96925e65d' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, November 27, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, November 27, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D20b160a8-7484-4d2d-ad5b-d9b941c66d48' aria-hidden='true' aria-label='Share City Council Wednesday, November 27, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='Meeting.aspx?Id=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl142_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, November 27, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=20b160a8-7484-4d2d-ad5b-d9b941c66d48' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-28-148"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>Transportation Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, November 28, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D681c0a84-aab5-4449-8f5a-c974713190ca' aria-hidden='true' aria-label='Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='Meeting.aspx?Id=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl143_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Transportation Committee Thursday, November 28, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Transportation Committee 12 December 2023' href='VideoStream.aspx?MeetingId=681c0a84-aab5-4449-8f5a-c974713190ca' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-24-24"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Board of Health Monday, December 02, 2024 @ 5:00 PM'>Board of Health</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 02, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' aria-hidden='true' aria-label='Share Board of Health Monday, December 02, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='Meeting.aspx?Id=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl144_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Board of Health Monday, December 02, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Board of Health 11 December 2023' href='VideoStream.aspx?MeetingId=59c8a82c-9f23-4a1b-acf1-bde32de0c7d0' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-9-129"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>Finance and Corporate Services Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D6497d250-c798-46af-a95e-79704e754d14' aria-hidden='true' aria-label='Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='Meeting.aspx?Id=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=6497d250-c798-46af-a95e-79704e754d14&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl145_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Finance and Corporate Services Committee Tuesday, December 03, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Finance and Corporate Services Committee 11 December 2023' href='VideoStream.aspx?MeetingId=6497d250-c798-46af-a95e-79704e754d14' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-12-72"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>Ottawa Public Library Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 03, 2024 @ 5:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D10700da8-db1f-4761-9160-bb2cfeefb063' aria-hidden='true' aria-label='Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='Meeting.aspx?Id=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl146_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Public Library Board Tuesday, December 03, 2024 @ 5:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Public Library Board 13 December 2023' href='VideoStream.aspx?MeetingId=10700da8-db1f-4761-9160-bb2cfeefb063' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-1-61"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>Agriculture and Rural Affairs Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Thursday, December 05, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation'>Ben Franklin Place, The Chamber, Main Floor, 101 Centrepointe Drive, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5d97860d-1141-4f1b-ae54-1bcd1f753030' aria-hidden='true' aria-label='Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl147_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Agriculture and Rural Affairs Committee Thursday, December 05, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Agriculture and Rural Affairs Committee 12 December 2023' href='VideoStream.aspx?MeetingId=5d97860d-1141-4f1b-ae54-1bcd1f753030' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-10-130"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>Built Heritage Committee</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Tuesday, December 10, 2024 @ 9:30 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Champlain Room, 110 Laurier Avenue West, and by electronic participation'>Champlain Room, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Dfe04c767-9a78-48a3-8f4d-aee0e682e1de' aria-hidden='true' aria-label='Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='Meeting.aspx?Id=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl148_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Built Heritage Committee Tuesday, December 10, 2024 @ 9:30 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Built Heritage Committee 12 December 2023' href='VideoStream.aspx?MeetingId=fe04c767-9a78-48a3-8f4d-aee0e682e1de' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-5-5"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='City Council Wednesday, December 11, 2024 @ 10:00 AM'>City Council</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Wednesday, December 11, 2024 @ 10:00 AM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation'>Andrew S. Haydon Hall, 110 Laurier Avenue West, and by electronic participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3D5a93081f-f432-4b19-bf3d-6f1c33750c31' aria-hidden='true' aria-label='Share City Council Wednesday, December 11, 2024 @ 10:00 AM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='Meeting.aspx?Id=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl149_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for City Council Wednesday, December 11, 2024 @ 10:00 AM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For City Council 16 November 2023' href='VideoStream.aspx?MeetingId=5a93081f-f432-4b19-bf3d-6f1c33750c31' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                                <div class="upcoming-meeting-container">

                                                    <div class="calendar-item">
                                                        <div class="marker mt-22-22"></div>
                                                        <div class="meeting-header">
                                                            <div class="meeting-title">
                                                                <h3 class="meeting-title-heading">
                                                                    <span tabIndex='0' aria-label='Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM'>Ottawa Police Services Board</span>
                                                                </h3>
                                                            </div>
                                                            <div class='pull-right wideVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e' target='_blank'>
                                                                <i class="las la-video"></i>
                                                                View Live Stream
                                                                </a>
                                                            </div>
                                                            <div class="meeting-content">
                                                        <div class="date-title">

                                                            <div class="meeting-date">Monday, December 16, 2024 @ 4:00 PM</div>
                                                            <div style="word-break: break-word;" class="startLocation Location-Tooltip" data-toggle="tooltip" data-html="true" data-container="body" data-original-title='Electronic Participation'>Electronic Participation</div>
                                                            <div class="feature-icons">
                                                                <div class="tshare sharing d-none">
                                                                    <a class="sharingIcon" title="Share" href='Sharing.aspx?u=https%3A%2F%2Fpub-ottawa.escribemeetings.com%2FMeeting%3FId%3Da60886b2-8c65-48a5-b384-49b26f798e0e' aria-hidden='true' aria-label='Share Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM'>
                                                                        
                                                                        <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image2" class="imgicon" alt="Share" title="Share" aria-label="Share Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />
                                                                    </a>
                                                                </div>
                                                                <a class="PublicCommentAcitve link d-none" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='Meeting.aspx?Id=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image5" class="imgicon" alt="Open for Comments" title="Open for Comments" aria-label="Public Comment for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="RTSAcitve link d-none"  title="Request to Speak" aria-label="Request to speak for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='Meeting.aspx?Id=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_Image8" class="imgicon" alt="Request to Speak" title="Request to Speak" aria-label="Request to speak for  Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                                                </a>
                                                                <a class="d-none DelegationRequest link" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" href='./DelegationRequest.aspx?PortalId=31cc7ee0-0c69-44af-b8f2-f0f80e9606c3&MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e&lang=English' target="_blank">
                                                                    
                                                                    <img id="ctl00_MainContent_lvUpcomingMeetingList_ctrl150_imgDelegation2" class="imgicon" alt="Delegation Request" title="Delegation Request" aria-label="Delgation request for Ottawa Police Services Board Monday, December 16, 2024 @ 4:00 PM" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                                                </a>
                                                            </div>
                                                            <div class='narrowVideo d-none'>
                                                                <a class='link' aria-label='View Live Stream For Ottawa Police Services Board 03 January 2024' href='VideoStream.aspx?MeetingId=a60886b2-8c65-48a5-b384-49b26f798e0e' target='_blank'>
                                                                <i class="las la-video la-lg"></i>
                                                                View Live Stream</a>
                                                            </div>
                                                        </div>

                                                        <div class="itemResources">
                                                            <div class="attachment-list">
                                                                    <ul class="d-none resource-list" style="padding-left: 0;">
                                                                        
                                                                        <span class="loadMoreAttachments" tabindex="0">See more</span>
                                                                    </ul>
                                                            </div>
                                                            <div class="package-list">
                                                                <ul class="resource-list " style="padding-left: 0;">
                                                                    
                                                                    <li class="packageType d-none" style="padding-left: 0.5em;">
                                                                        <ul class="inline-package-collection">
                                                                            
                                                                        </ul>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </div>
                                                    </div>
                                                        </div>
                                                </div>
                                                </div>
                                            
                                            
                                    </div>
                                </div>

                                <div id="lazyLoadContainer">
                                    <span id="loadMoreMeetings" tabindex="0">Click here to see more meetings</span>
                                </div>

                                <div class="past-meetings-region" role="region" aria-label="List of Past Meetings">
                                    <div class="row">
                                    <div class="col-md-12 xtra-lists">
                                        <h2 id="PastMeetingTitle" class="pull-left">Past Meetings</h2>
                                        <div class ="pull-right" style="margin-bottom: 1.5em">
                                            <select class="YearFilterOption" aria-label="Select Year">
                                                
                                                        
                                                        <option data-year='0'>
                                                            All&nbsp;(2523)
                                                            
                                                        </option>
                                                    
                                                        <option data-year='2024'>
                                                            
                                                            2024&nbsp;(2)
                                                        </option>
                                                    
                                                        <option data-year='2023'>
                                                            
                                                            2023&nbsp;(296)
                                                        </option>
                                                    
                                                        <option data-year='2022'>
                                                            
                                                            2022&nbsp;(292)
                                                        </option>
                                                    
                                                        <option data-year='2021'>
                                                            
                                                            2021&nbsp;(261)
                                                        </option>
                                                    
                                                        <option data-year='2020'>
                                                            
                                                            2020&nbsp;(224)
                                                        </option>
                                                    
                                                        <option data-year='2019'>
                                                            
                                                            2019&nbsp;(255)
                                                        </option>
                                                    
                                                        <option data-year='2018'>
                                                            
                                                            2018&nbsp;(212)
                                                        </option>
                                                    
                                                        <option data-year='2017'>
                                                            
                                                            2017&nbsp;(230)
                                                        </option>
                                                    
                                                        <option data-year='2016'>
                                                            
                                                            2016&nbsp;(233)
                                                        </option>
                                                    
                                                        <option data-year='2015'>
                                                            
                                                            2015&nbsp;(169)
                                                        </option>
                                                    
                                                        <option data-year='2014'>
                                                            
                                                            2014&nbsp;(122)
                                                        </option>
                                                    
                                                        <option data-year='2013'>
                                                            
                                                            2013&nbsp;(158)
                                                        </option>
                                                    
                                                        <option data-year='2012'>
                                                            
                                                            2012&nbsp;(69)
                                                        </option>
                                                    
                                                    
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="past-meetings" id="PastMeetingTypesAccordian">
                                    
                                            
                                            <div class="MeetingTypeList" id='MeetingTypeList0'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Accessibility+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse0">
                                                    <span class="MeetingTypeNameText">Accessibility Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>63</span><span class='Year Year2013'>5</span><span class='Year Year2014'>5</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>7</span><span class='Year Year2021'>7</span><span class='Year Year2022'>7</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse0" aria-labelledby="MeetingTypeList0" data-toggle-id=".collapse0">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl0_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Accessibility Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList1'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse1">
                                                    <span class="MeetingTypeNameText">Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>118</span><span class='Year Year2012'>6</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>11</span><span class='Year Year2016'>10</span><span class='Year Year2017'>9</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>9</span><span class='Year Year2021'>9</span><span class='Year Year2022'>11</span><span class='Year Year2023'>14</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse1" aria-labelledby="MeetingTypeList1" data-toggle-id=".collapse1">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl1_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList2'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse2">
                                                    <span class="MeetingTypeNameText">Arts, Culture and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>3</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse2" aria-labelledby="MeetingTypeList2" data-toggle-id=".collapse2">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl2_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList3'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Arts%2c+Culture%2c+Heritage+and+Recreation+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse3">
                                                    <span class="MeetingTypeNameText">Arts, Culture, Heritage and Recreation Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>19</span><span class='Year Year2013'>4</span><span class='Year Year2014'>1</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse3" aria-labelledby="MeetingTypeList3" data-toggle-id=".collapse3">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl3_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Arts, Culture, Heritage and Recreation Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList4'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse4">
                                                    <span class="MeetingTypeNameText">Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>37</span><span class='Year Year2015'>6</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>6</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse4" aria-labelledby="MeetingTypeList4" data-toggle-id=".collapse4">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl4_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList5'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse5">
                                                    <span class="MeetingTypeNameText">Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>6</span><span class='Year Year2012'>2</span><span class='Year Year2013'>2</span><span class='Year Year2014'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse5" aria-labelledby="MeetingTypeList5" data-toggle-id=".collapse5">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl5_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList6'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Auditor+General+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse6">
                                                    <span class="MeetingTypeNameText">Auditor General Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2013'>3</span><span class='Year Year2020'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse6" aria-labelledby="MeetingTypeList6" data-toggle-id=".collapse6">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl6_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Auditor General Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList7'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Board+of+Health" id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse7">
                                                    <span class="MeetingTypeNameText">Board of Health&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>62</span><span class='Year Year2015'>7</span><span class='Year Year2016'>6</span><span class='Year Year2017'>7</span><span class='Year Year2018'>7</span><span class='Year Year2019'>7</span><span class='Year Year2020'>6</span><span class='Year Year2021'>6</span><span class='Year Year2022'>9</span><span class='Year Year2023'>7</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse7" aria-labelledby="MeetingTypeList7" data-toggle-id=".collapse7">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl7_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Board of Health">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList8'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse8">
                                                    <span class="MeetingTypeNameText">Built Heritage Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>15</span><span class='Year Year2023'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse8" aria-labelledby="MeetingTypeList8" data-toggle-id=".collapse8">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl8_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList9'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Built+Heritage+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse9">
                                                    <span class="MeetingTypeNameText">Built Heritage Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>99</span><span class='Year Year2013'>10</span><span class='Year Year2014'>9</span><span class='Year Year2015'>9</span><span class='Year Year2016'>8</span><span class='Year Year2017'>8</span><span class='Year Year2018'>10</span><span class='Year Year2019'>9</span><span class='Year Year2020'>9</span><span class='Year Year2021'>12</span><span class='Year Year2022'>15</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse9" aria-labelledby="MeetingTypeList9" data-toggle-id=".collapse9">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl9_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Built Heritage Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList10'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Council" id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse10">
                                                    <span class="MeetingTypeNameText">City Council&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>248</span><span class='Year Year2012'>11</span><span class='Year Year2013'>20</span><span class='Year Year2014'>18</span><span class='Year Year2015'>21</span><span class='Year Year2016'>20</span><span class='Year Year2017'>19</span><span class='Year Year2018'>19</span><span class='Year Year2019'>21</span><span class='Year Year2020'>21</span><span class='Year Year2021'>21</span><span class='Year Year2022'>29</span><span class='Year Year2023'>27</span><span class='Year Year2024'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse10" aria-labelledby="MeetingTypeList10" data-toggle-id=".collapse10">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl10_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Council">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList11'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=City+Manager+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse11">
                                                    <span class="MeetingTypeNameText">City Manager Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse11" aria-labelledby="MeetingTypeList11" data-toggle-id=".collapse11">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl11_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="City Manager Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList12'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment" id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse12">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse12" aria-labelledby="MeetingTypeList12" data-toggle-id=".collapse12">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl12_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList13'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+1" id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse13">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 1&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>26</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse13" aria-labelledby="MeetingTypeList13" data-toggle-id=".collapse13">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl13_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 1">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList14'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+2" id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse14">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 2&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2015'>1</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>22</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>25</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse14" aria-labelledby="MeetingTypeList14" data-toggle-id=".collapse14">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl14_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 2">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList15'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Adjustment+-+Panel+3" id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse15">
                                                    <span class="MeetingTypeNameText">Committee of Adjustment - Panel 3&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>176</span><span class='Year Year2016'>22</span><span class='Year Year2017'>22</span><span class='Year Year2018'>21</span><span class='Year Year2019'>22</span><span class='Year Year2020'>18</span><span class='Year Year2021'>22</span><span class='Year Year2022'>27</span><span class='Year Year2023'>22</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse15" aria-labelledby="MeetingTypeList15" data-toggle-id=".collapse15">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl15_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Adjustment - Panel 3">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList16'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Committee+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse16">
                                                    <span class="MeetingTypeNameText">Committee of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2013'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse16" aria-labelledby="MeetingTypeList16" data-toggle-id=".collapse16">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl16_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Committee of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList17'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse17">
                                                    <span class="MeetingTypeNameText">Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>86</span><span class='Year Year2012'>4</span><span class='Year Year2013'>11</span><span class='Year Year2014'>6</span><span class='Year Year2015'>9</span><span class='Year Year2016'>11</span><span class='Year Year2017'>9</span><span class='Year Year2018'>7</span><span class='Year Year2019'>9</span><span class='Year Year2020'>6</span><span class='Year Year2021'>8</span><span class='Year Year2022'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse17" aria-labelledby="MeetingTypeList17" data-toggle-id=".collapse17">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl17_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList18'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Service+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse18">
                                                    <span class="MeetingTypeNameText">Community Service Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2013'>4</span><span class='Year Year2014'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse18" aria-labelledby="MeetingTypeList18" data-toggle-id=".collapse18">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl18_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Service Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList19'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Community+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse19">
                                                    <span class="MeetingTypeNameText">Community Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>8</span><span class='Year Year2023'>8</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse19" aria-labelledby="MeetingTypeList19" data-toggle-id=".collapse19">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl19_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Community Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList20'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Council+Francophone+Caucus" id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse20">
                                                    <span class="MeetingTypeNameText">Council Francophone Caucus&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse20" aria-labelledby="MeetingTypeList20" data-toggle-id=".collapse20">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl20_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Council Francophone Caucus">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList21'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Court+of+Revision" id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse21">
                                                    <span class="MeetingTypeNameText">Court of Revision&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>6</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse21" aria-labelledby="MeetingTypeList21" data-toggle-id=".collapse21">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl21_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Court of Revision">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList22'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Debenture+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse22">
                                                    <span class="MeetingTypeNameText">Debenture Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2012'>1</span><span class='Year Year2013'>2</span><span class='Year Year2021'>1</span><span class='Year Year2022'>4</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse22" aria-labelledby="MeetingTypeList22" data-toggle-id=".collapse22">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl22_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Debenture Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList23'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Election+Compliance+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse23">
                                                    <span class="MeetingTypeNameText">Election Compliance Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>17</span><span class='Year Year2015'>5</span><span class='Year Year2016'>1</span><span class='Year Year2019'>7</span><span class='Year Year2020'>1</span><span class='Year Year2023'>3</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse23" aria-labelledby="MeetingTypeList23" data-toggle-id=".collapse23">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl23_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Election Compliance Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList24'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Emergency+Preparedness+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse24">
                                                    <span class="MeetingTypeNameText">Emergency Preparedness and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse24" aria-labelledby="MeetingTypeList24" data-toggle-id=".collapse24">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl24_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Emergency Preparedness and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList25'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse25">
                                                    <span class="MeetingTypeNameText">Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2023'>9</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse25" aria-labelledby="MeetingTypeList25" data-toggle-id=".collapse25">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl25_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList26'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+and+Climate+Protection+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse26">
                                                    <span class="MeetingTypeNameText">Environment and Climate Protection Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>12</span><span class='Year Year2017'>6</span><span class='Year Year2018'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse26" aria-labelledby="MeetingTypeList26" data-toggle-id=".collapse26">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl26_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment and Climate Protection Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList27'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environment+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse27">
                                                    <span class="MeetingTypeNameText">Environment Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2012'>4</span><span class='Year Year2013'>7</span><span class='Year Year2014'>6</span><span class='Year Year2015'>6</span><span class='Year Year2016'>6</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse27" aria-labelledby="MeetingTypeList27" data-toggle-id=".collapse27">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl27_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environment Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList28'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Environmental+Stewardship+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse28">
                                                    <span class="MeetingTypeNameText">Environmental Stewardship Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>3</span><span class='Year Year2017'>4</span><span class='Year Year2018'>2</span><span class='Year Year2019'>4</span><span class='Year Year2020'>4</span><span class='Year Year2021'>4</span><span class='Year Year2022'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse28" aria-labelledby="MeetingTypeList28" data-toggle-id=".collapse28">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl28_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Environmental Stewardship Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList29'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Corporate+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse29">
                                                    <span class="MeetingTypeNameText">Finance and Corporate Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse29" aria-labelledby="MeetingTypeList29" data-toggle-id=".collapse29">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl29_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Corporate Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList30'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Finance+and+Economic+Development+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse30">
                                                    <span class="MeetingTypeNameText">Finance and Economic Development Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>112</span><span class='Year Year2012'>6</span><span class='Year Year2013'>12</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>13</span><span class='Year Year2017'>10</span><span class='Year Year2018'>8</span><span class='Year Year2019'>11</span><span class='Year Year2020'>9</span><span class='Year Year2021'>14</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse30" aria-labelledby="MeetingTypeList30" data-toggle-id=".collapse30">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl30_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Finance and Economic Development Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList31'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse31">
                                                    <span class="MeetingTypeNameText">French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>36</span><span class='Year Year2013'>3</span><span class='Year Year2014'>4</span><span class='Year Year2015'>4</span><span class='Year Year2016'>4</span><span class='Year Year2017'>4</span><span class='Year Year2018'>3</span><span class='Year Year2019'>3</span><span class='Year Year2020'>3</span><span class='Year Year2021'>4</span><span class='Year Year2022'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse31" aria-labelledby="MeetingTypeList31" data-toggle-id=".collapse31">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl31_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList32'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=General+Manager+of+Planning%2c+Real+Estate+and+Economic+Development+Hiring+Panel" id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse32">
                                                    <span class="MeetingTypeNameText">General Manager of Planning, Real Estate and Economic Development Hiring Panel&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse32" aria-labelledby="MeetingTypeList32" data-toggle-id=".collapse32">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl32_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="General Manager of Planning, Real Estate and Economic Development Hiring Panel">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList33'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Information+Technology+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse33">
                                                    <span class="MeetingTypeNameText">Information Technology Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>33</span><span class='Year Year2012'>4</span><span class='Year Year2013'>5</span><span class='Year Year2014'>3</span><span class='Year Year2015'>4</span><span class='Year Year2016'>2</span><span class='Year Year2017'>2</span><span class='Year Year2018'>1</span><span class='Year Year2019'>4</span><span class='Year Year2020'>2</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse33" aria-labelledby="MeetingTypeList33" data-toggle-id=".collapse33">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl33_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Information Technology Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList34'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Audit+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse34">
                                                    <span class="MeetingTypeNameText">Joint Audit Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse34" aria-labelledby="MeetingTypeList34" data-toggle-id=".collapse34">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl34_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Audit Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList35'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Environment%2c+Water+and+Waste+Management+and+Agriculture+and+Rural+Affairs" id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse35">
                                                    <span class="MeetingTypeNameText">Joint Environment, Water and Waste Management and Agriculture and Rural Affairs&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse35" aria-labelledby="MeetingTypeList35" data-toggle-id=".collapse35">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl35_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Environment, Water and Waste Management and Agriculture and Rural Affairs">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList36'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Corporate+Services+and+Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse36">
                                                    <span class="MeetingTypeNameText">Joint Finance and Corporate Services and Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse36" aria-labelledby="MeetingTypeList36" data-toggle-id=".collapse36">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl36_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Corporate Services and Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList37'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Audit+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse37">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Audit Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2014'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse37" aria-labelledby="MeetingTypeList37" data-toggle-id=".collapse37">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl37_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Audit Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList38'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Finance+and+Economic+Development+Committee+and+Governance+Renewal+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse38">
                                                    <span class="MeetingTypeNameText">Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2012'>2</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse38" aria-labelledby="MeetingTypeList38" data-toggle-id=".collapse38">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl38_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Finance and Economic Development Committee and Governance Renewal Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList39'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Finance+and+Economic+Development+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse39">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse39" aria-labelledby="MeetingTypeList39" data-toggle-id=".collapse39">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl39_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Finance and Economic Development Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList40'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+Planning+Committee+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse40">
                                                    <span class="MeetingTypeNameText">Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>1</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse40" aria-labelledby="MeetingTypeList40" data-toggle-id=".collapse40">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl40_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of Planning Committee and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList41'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+meeting+of+Planning+Committee+and+Built+Heritage+Sub-committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse41">
                                                    <span class="MeetingTypeNameText">Joint meeting of Planning Committee and Built Heritage Sub-committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2021'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse41" aria-labelledby="MeetingTypeList41" data-toggle-id=".collapse41">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl41_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint meeting of Planning Committee and Built Heritage Sub-committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList42'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Accessibility+Advisory+Committee+and+the+French+Language+Services+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse42">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse42" aria-labelledby="MeetingTypeList42" data-toggle-id=".collapse42">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl42_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Accessibility Advisory Committee and the French Language Services Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList43'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Finance+and+Economic+Development+Committee+and+the+Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse43">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2020'>2</span><span class='Year Year2021'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse43" aria-labelledby="MeetingTypeList43" data-toggle-id=".collapse43">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl43_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Finance and Economic Development Committee and the Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList44'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Meeting+of+the+Planning+Committee+and+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse44">
                                                    <span class="MeetingTypeNameText">Joint Meeting of the Planning Committee and Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse44" aria-labelledby="MeetingTypeList44" data-toggle-id=".collapse44">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl44_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Meeting of the Planning Committee and Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList45'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Agriculture+and+Rural+Affairs+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse45">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Agriculture and Rural Affairs Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse45" aria-labelledby="MeetingTypeList45" data-toggle-id=".collapse45">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl45_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Agriculture and Rural Affairs Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList46'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Planning+and+Housing+and+Environment+and+Climate+Change+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse46">
                                                    <span class="MeetingTypeNameText">Joint Planning and Housing and Environment and Climate Change Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2023'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse46" aria-labelledby="MeetingTypeList46" data-toggle-id=".collapse46">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl46_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Planning and Housing and Environment and Climate Change Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList47'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transit+Commission+and+Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse47">
                                                    <span class="MeetingTypeNameText">Joint Transit Commission and Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse47" aria-labelledby="MeetingTypeList47" data-toggle-id=".collapse47">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl47_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transit Commission and Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList48'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Joint+Transportation+Committee+and+Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse48">
                                                    <span class="MeetingTypeNameText">Joint Transportation Committee and Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse48" aria-labelledby="MeetingTypeList48" data-toggle-id=".collapse48">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl48_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Joint Transportation Committee and Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList49'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Light+Rail+Sub-Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse49">
                                                    <span class="MeetingTypeNameText">Light Rail Sub-Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>10</span><span class='Year Year2023'>10</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse49" aria-labelledby="MeetingTypeList49" data-toggle-id=".collapse49">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl49_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Light Rail Sub-Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList50'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Nominating+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse50">
                                                    <span class="MeetingTypeNameText">Nominating Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>3</span><span class='Year Year2014'>1</span><span class='Year Year2018'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse50" aria-labelledby="MeetingTypeList50" data-toggle-id=".collapse50">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl50_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Nominating Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList51'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Built+Heritage+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse51">
                                                    <span class="MeetingTypeNameText">Ottawa Built Heritage Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2012'>6</span><span class='Year Year2013'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse51" aria-labelledby="MeetingTypeList51" data-toggle-id=".collapse51">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl51_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Built Heritage Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList52'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse52">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>131</span><span class='Year Year2015'>12</span><span class='Year Year2016'>12</span><span class='Year Year2017'>14</span><span class='Year Year2018'>11</span><span class='Year Year2019'>15</span><span class='Year Year2020'>15</span><span class='Year Year2021'>12</span><span class='Year Year2022'>21</span><span class='Year Year2023'>19</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse52" aria-labelledby="MeetingTypeList52" data-toggle-id=".collapse52">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl52_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList53'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Police+Services+Board+-+Special+Meeting" id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse53">
                                                    <span class="MeetingTypeNameText">Ottawa Police Services Board - Special Meeting&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>2</span><span class='Year Year2015'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse53" aria-labelledby="MeetingTypeList53" data-toggle-id=".collapse53">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl53_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Police Services Board - Special Meeting">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList54'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Ottawa+Public+Library+Board" id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse54">
                                                    <span class="MeetingTypeNameText">Ottawa Public Library Board&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>106</span><span class='Year Year2014'>11</span><span class='Year Year2015'>11</span><span class='Year Year2016'>12</span><span class='Year Year2017'>10</span><span class='Year Year2018'>10</span><span class='Year Year2019'>10</span><span class='Year Year2020'>10</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>12</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse54" aria-labelledby="MeetingTypeList54" data-toggle-id=".collapse54">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl54_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Ottawa Public Library Board">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList55'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Advisory+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse55">
                                                    <span class="MeetingTypeNameText">Planning Advisory Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>9</span><span class='Year Year2019'>2</span><span class='Year Year2020'>2</span><span class='Year Year2021'>3</span><span class='Year Year2022'>2</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse55" aria-labelledby="MeetingTypeList55" data-toggle-id=".collapse55">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl55_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Advisory Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList56'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+and+Housing+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse56">
                                                    <span class="MeetingTypeNameText">Planning and Housing Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2023'>23</span><span class='Year Year2024'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse56" aria-labelledby="MeetingTypeList56" data-toggle-id=".collapse56">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl56_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning and Housing Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList57'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Planning+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse57">
                                                    <span class="MeetingTypeNameText">Planning Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>208</span><span class='Year Year2012'>10</span><span class='Year Year2013'>20</span><span class='Year Year2014'>17</span><span class='Year Year2015'>19</span><span class='Year Year2016'>18</span><span class='Year Year2017'>20</span><span class='Year Year2018'>16</span><span class='Year Year2019'>18</span><span class='Year Year2020'>15</span><span class='Year Year2021'>26</span><span class='Year Year2022'>29</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse57" aria-labelledby="MeetingTypeList57" data-toggle-id=".collapse57">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl57_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Planning Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList58'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Complaints+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse58">
                                                    <span class="MeetingTypeNameText">Police Services Board Complaints Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>7</span><span class='Year Year2017'>1</span><span class='Year Year2018'>2</span><span class='Year Year2019'>3</span><span class='Year Year2023'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse58" aria-labelledby="MeetingTypeList58" data-toggle-id=".collapse58">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl58_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Complaints Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList59'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Finance+and+Audit+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse59">
                                                    <span class="MeetingTypeNameText">Police Services Board Finance and Audit Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>35</span><span class='Year Year2016'>4</span><span class='Year Year2017'>5</span><span class='Year Year2018'>3</span><span class='Year Year2019'>7</span><span class='Year Year2020'>5</span><span class='Year Year2021'>4</span><span class='Year Year2022'>2</span><span class='Year Year2023'>5</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse59" aria-labelledby="MeetingTypeList59" data-toggle-id=".collapse59">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl59_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Finance and Audit Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList60'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Human+Resources+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse60">
                                                    <span class="MeetingTypeNameText">Police Services Board Human Resources Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>29</span><span class='Year Year2016'>4</span><span class='Year Year2017'>3</span><span class='Year Year2018'>5</span><span class='Year Year2019'>5</span><span class='Year Year2020'>4</span><span class='Year Year2021'>1</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse60" aria-labelledby="MeetingTypeList60" data-toggle-id=".collapse60">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl60_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Human Resources Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList61'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Police+Services+Board+Policy+and+Governance+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse61">
                                                    <span class="MeetingTypeNameText">Police Services Board Policy and Governance Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>24</span><span class='Year Year2016'>1</span><span class='Year Year2017'>4</span><span class='Year Year2018'>5</span><span class='Year Year2019'>2</span><span class='Year Year2020'>3</span><span class='Year Year2021'>2</span><span class='Year Year2022'>3</span><span class='Year Year2023'>4</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse61" aria-labelledby="MeetingTypeList61" data-toggle-id=".collapse61">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl61_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Police Services Board Policy and Governance Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList62'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Special+Joint+Meeting+of+the+Planning+Committee+and+the+Community+and+Protective+Services+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse62">
                                                    <span class="MeetingTypeNameText">Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>1</span><span class='Year Year2022'>1</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse62" aria-labelledby="MeetingTypeList62" data-toggle-id=".collapse62">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl62_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Special Joint Meeting of the Planning Committee and the Community and Protective Services Committee">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList63'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Standing+Committee+on+Environmental+Protection%2c+Water+and+Waste+Management" id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse63">
                                                    <span class="MeetingTypeNameText">Standing Committee on Environmental Protection, Water and Waste Management&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>34</span><span class='Year Year2019'>8</span><span class='Year Year2020'>5</span><span class='Year Year2021'>10</span><span class='Year Year2022'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse63" aria-labelledby="MeetingTypeList63" data-toggle-id=".collapse63">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl63_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Standing Committee on Environmental Protection, Water and Waste Management">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList64'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transit+Commission" id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse64">
                                                    <span class="MeetingTypeNameText">Transit Commission&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>109</span><span class='Year Year2012'>7</span><span class='Year Year2013'>13</span><span class='Year Year2014'>7</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>6</span><span class='Year Year2018'>5</span><span class='Year Year2019'>9</span><span class='Year Year2020'>11</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>11</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse64" aria-labelledby="MeetingTypeList64" data-toggle-id=".collapse64">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl64_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transit Commission">

</div>
                                                </div>
                                            </div>
                                        
                                            <div class="MeetingTypeList" id='MeetingTypeList65'>
                                                <a href="https://pub-ottawa.escribemeetings.com:443/meetingscalendarview.aspx?Expanded=Transportation+Committee" id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_ExpandCollapseLink" class="PastMeetingTypesName collapsed btn" data-toggle="collapse" role="button" aria-expanded="false" data-target=".collapse65">
                                                    <span class="MeetingTypeNameText">Transportation Committee&nbsp;</span>
                                                    <span class='MeetingTypeMeetingCount MeetingTypeNameText'>(<span class='Year Year0'>107</span><span class='Year Year2012'>5</span><span class='Year Year2013'>11</span><span class='Year Year2014'>8</span><span class='Year Year2015'>10</span><span class='Year Year2016'>10</span><span class='Year Year2017'>10</span><span class='Year Year2018'>5</span><span class='Year Year2019'>8</span><span class='Year Year2020'>7</span><span class='Year Year2021'>10</span><span class='Year Year2022'>10</span><span class='Year Year2023'>13</span>)
                                                    </span>
                                                </a>
                                                <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanelContainer" data-parent="#PastMeetingTypesAccordian" class="collapse collapse65" aria-labelledby="MeetingTypeList65" data-toggle-id=".collapse65">
                                                    <div id="ctl00_MainContent_lvPastMeetingTypes_ctrl65_MeetingsPanel" class="panel-contents MeetingTypeContainer" MeetingType="Transportation Committee">

</div>
                                                </div>
                                            </div>
                                        
                                        
                                </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="fullCalModal" aria-hidden="true" aria-label="meeting details popup" role="dialog" class="modal fade">
        <div class="modal-dialog">
              <div class="modal-content">
                <div id="modelHeader" class="modal-header">
                    <button id="closeCalModal" type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close meeting details</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <div class="row calendar-row">
                        <div class="calendar-details">
                            <div class="col-md-6 cal-date-loc">
                                <span id="startDate" class="start-date meeting-date"></span>
                                <div id="desc" class="desc-text" style="word-break:break-word;"></div>
                            </div>
                            <div class="calendar-icons">
                                <span id="shareContainer" class="sharing">
                                    <a title="Share" id="shareLink" data-dismiss="modal">
                                        
                                        <img id="ctl00_MainContent_Image3" class="imgicon" alt="Share" title="Share" src="Content/img/svg/share-alt.svg" height="17" width="23" border="0" />

                                    </a>
                                </span>
                                <a id="commentLink" title="Open for Comments" target="_blank" style="color:#454545;">
                                    
                                    <img id="ctl00_MainContent_Image6" class="imgicon" alt="Open for Comments" title="Open for Comments" src="Content/img/svg/comment-alt.svg" height="26" width="23" border="0" />
                                </a>
                                <a class="RTSAcitve link" title="Request to Speak" target="_blank" style="display: none;">
                                    
                                    <img id="ctl00_MainContent_Image9" class="imgicon" alt="Request to Speak" title="Request to Speak" src="Content/img/svg/microphone-solid.svg" height="26" width="23" border="0" />
                                </a>
                                <a id="delegationRequestLink" title="Delegation Request" target="_blank">
                                    
                                    <img id="ctl00_MainContent_imgDelegation3" class="imgicon" alt="Delegation Request" title="Delegation Request" src="Content/img/DelegationRequests-icon.svg" height="26" width="23" border="0" />
                                </a>
                                <!--<a id="eventLink" class="btn btn-primary" target="_blank"><span class="la la-info-circle"></span>&nbsp;View Meetings</a>-->
                            </div>
                            <div id="video-link"></div>
                        </div>
                        <div class="col-md-6" id="MeetingDocuments" aria-label="Meeting documents"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="conflictsDetailsModal" aria-hidden="true" role="dialog" aria-label="Member in Conflict" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id="modelHeaderconflicts" class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <table id="table-conflicts-details-list" class="table-responsive" role="grid" style="width: 100%; word-wrap: break-word; word-break: break-word; border: 0;">
                    <thead>
                        <tr role="row" style="display: none;">
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
    <div id="LegislationDetailsModal" aria-hidden="true" role="dialog" aria-label="Legislative History" class="modal fade">
        <div class="modal-dialog  LegislationDetailsModal" style="width: 60%">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Details</h2>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
                </div>
                <div class="modal-body">
                    <div>
                        <table class="inputtable" style="width: 100%;">
                            <tr>
                                <th>Number</th>
                                <td class="LegislationNumberLabel"></td>
                            </tr>
                            <tr>
                                <th>Type</th>
                                <td id="LegislationTypeLabel">Legislation</td>
                            </tr>
                            <tr>
                                <th>Stage</th>
                                <td class="LegislationStageLabel"></td>
                            </tr>
                            <tr>
                                <th>Status</th>
                                <td class="LegislationStatusLabel"></td>
                            </tr>
                            <tr>
                                <th>Department</th>
                                <td id="LegislationDepartmentLabel"></td>
                            </tr>
                            <tr>
                                <th>Legislative Text</th>
                                <td id="LegislationRecommendationLabel"></td>
                            </tr>
                            <tr>
                                <th style="vertical-align: top">Attachments</th>
                                <td>
                                    <div>
                                        <span id="LegislationDocumentIcon"></span>
                                        <a id="LegislationDocumentLink"></a>
                                    </div>
                                    <div id="LegislationSupportingDocumentsList">
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <h3>History</h3>
                    <div>
                        <table id="LegislationHistoryTable" class="list dataTable">
                            <thead>
                                <tr>
                                    <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                    <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                    <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                    <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                    <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                </tr>
                            </thead>
                            <tbody class="history"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    


<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />  

<div id="AgendaItemDetailsModal" class="modal fade">
    <div class="modal-dialog AgendaItemDetailsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Details</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div>
                    <div class="inputform">
                        <label>
                            Title
                        </label>
                        <div class="ItemTitle"></div>

                        <label>
                            Description
                        </label>
                        <div class="description"></div>

                        <label>
                            Category
                        </label>
                        <div class="Category"></div>

                        <label>
                            Number
                        </label>
                        <div class="LegislationNumberLabel"></div>

                        <label>Stage</label>
                        <div class="LegislationStageLabel"></div>

                        <label>
                            Department
                        </label>
                        <div id="LegislationDepartmentLabel"></div>

                        <label style="vertical-align: top">
                            Attachments
                        </label>
                        <div style="overflow:hidden">
                            <div>
                                <span id="LegislationDocumentIcon"></span>
                                <a id="LegislationDocumentLink"></a>
                            </div>
                            <div id="LegislationSupportingDocumentsList">
                            </div>
                        </div>
                    </div>
                </div>

                <h4 style="margin-top:0.5em">History</h4>
                <div>
                    <table id="LegislationHistoryTable" class="list dataTable">
                        <thead>
                            <tr>
                                <th id="legislationhistory-index-th" class="leg-no-break tablepadding"></th>
                                <th id="legislationhistory-meetingtype-th" class="leg-no-break tablepadding">Meeting Type</th>
                                <th id="legislationhistory-meetingdate-th" class="leg-no-break tablepadding">Meeting Date</th>
                                <th id="legislationhistory-stage-th" class="leg-no-break tablepadding">Stage</th>
                                <th id="legislationhistory-status-th" class="leg-no-break tablepadding">Status</th>
                                <th id="legislationhistory-number-th" class="leg-no-break tablepadding">Number</th>
                                <th id="legislationhistory-vote-th" class="leg-no-break tablepadding">Vote</th>
                            </tr>
                        </thead>
                        <tbody class="history"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="VoteResultsModal" class="modal fade">
    <div class="modal-dialog VoteResultsModal" style="width: 60%">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Vote Result</h3>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">close</span></button>
            </div>
            <div class="modal-body">
                <div class="Text"></div>
                <div class="Banner"></div>
                <div class="Votes"></div>
            </div>
            <div class="modal-footer">
                <div class="dataTables_wrapper" style="margin:auto">
                    <div class="dataTables_paginate paging_simple_numbers">
                        <span>
                            <a class="paginate_button current" aria-controls="table-conflicts-details-list" data-dt-idx="1" tabindex="0">1</a>
                        </span>
                    </div>
                </div> 
            </div>
        </div>
    </div>
</div>
 
<script type="text/javascript">
    function FillVoteResultsDialog(motions, index) {
        var dialog = $("#VoteResultsModal");
        var motion = motions[index];

        // paging //
        {
            var paging = dialog.find(".dataTables_paginate").empty();

            // back links //
            {
                // first link
                var firstlink = $('<a class="paginate_button first">&lt;&lt;</a>')
                    .attr("id", "VoteResultsModal-First")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to First Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 0);

                // previous link //
                var previouslink = $('<a class="paginate_button previous" "">&lt;</a>')
                    .attr("id", "VoteResultsModal-Previous")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Previous Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", 1);


                if (index == 0) {
                    firstlink.addClass('disabled');
                    firstlink.attr("aria-disabled", "true");

                    previouslink.addClass('disabled');
                    previouslink.attr("aria-disabled", "true");
                }
                else {
                    firstlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, 0);
                        });
                    
                    previouslink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index-1);
                        });
                }

                paging.append(firstlink);
                paging.append(previouslink);                
            }

            // pages //
            {
                var pages = $("<span>");
                for (var i=0; i<motions.length; i++) {
                    let buttonindex = i;

                    var link = $('<a class="paginate_button">')
                        .attr("aria-controls", "VoteResultsModal")
                        .attr("data-dt-idx", i+2)
                        .attr("tabindex", 0)
                        .text(i+1)
                        .click(function(e) {
                            FillVoteResultsDialog(motions, buttonindex);
                        })

                    if (i == index) {
                        link.addClass("current")
                    }

                    pages.append(link);
                }

                paging.append(pages);
            }

            // forward links //
            {
                // next link 
                var nextlink = $('<a class="paginate_button next">&gt;</a>')
                    .attr("id", "VoteResultsModal-Next")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Next Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 2);

                // last link
                var lastlink = $('<a class="paginate_button last">&gt;&gt;</a>')
                    .attr("id", "VoteResultsModal-Last")
                    .attr("aria-controls", "VoteResultsModal")
                    .attr("aria-label", "Navigate to Last Vote")
                    .attr("tabindex", 0)
                    .attr("data-dt-idx", motions.length + 3);


                if (index == motions.length - 1) {
                    nextlink.addClass('disabled');
                    nextlink.attr("aria-disabled", "true");

                    lastlink.addClass('disabled');
                    lastlink.attr("aria-disabled", "true");
                }
                else {
                    nextlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, index+1);
                        });
                    
                    lastlink
                        .click(function(e) {
                            e.preventDefault();

                            FillVoteResultsDialog(motions, motions.length-1);
                        });
                }

                paging.append(nextlink);
                paging.append(lastlink);
            }
        }


        


        // render motion //

        dialog.find(".Text").text(motion.Text);
                                        
        var banner = dialog.find(".Banner");
        banner.text(motion.BannerText);

        switch (motion.BannerColor) {
            case 'green':
                banner.css("background-color", '#21AE52');
                banner.css("color", 'white');
                break;

            case 'red':
                banner.css("background-color", 'red');
                banner.css("color", 'black');
                break;

            default:
                banner.css("background-color", '');
                banner.css("color", '');
                break;
        }


        dialog.find(".Votes").empty()

        // add votes to dialog //
        var votes = {};
        var voteorder = ["Yes", "No", "Abstain", "Absent"];

        $.each(motion.Votes, function(imv, motionvote) {
            if (!votes.hasOwnProperty(motionvote.Vote)) {
                votes[motionvote.Vote] = [];
            }

            if (voteorder.indexOf(motionvote.Vote) == -1) {
                voteorder.push(motionvote.Vote);
            }

            votes[motionvote.Vote].push(
                $("<span>").text(motionvote.UserName)
            );
        });

        $.each(voteorder, function(iv, vote) {
            var container = $("#VoteContainerTemplate").clone();

            if (votes.hasOwnProperty(vote)) {
                container.find(".VoteHeader .count").text(votes[vote].length);
                container.find(".Voters").append(...(votes[vote]));
            }

            container.find(".VoteHeader .Vote").text(vote);
            dialog.find(".Votes").append(container.children());
        });
    }

    // fix for nested motals //
    $(document).ready(function () {
        $(document).on({
            'show.bs.modal': function () {
                var zIndex = 1040 + (10 * $('.modal:visible').length);
                $(this).css('z-index', zIndex);
                setTimeout(function () { $('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack'); }, 0);
            },
            'hidden.bs.modal': function () {
                if ($('.modal:visible').length > 0) {
                    // restore the modal-open class to the body element, so that scrolling works
                    // properly after de-stacking a modal.
                    setTimeout(function () { $(document.body).addClass('modal-open'); }, 0);
                }
            }
        }, '.modal');
    });
</script>

<style type="text/css">
    /* flex-grid classes */
    .inputform {
	    font-size:1em;
	    display:grid;
	    grid-template-columns:0fr 1fr;
	    grid-gap:10px 10px;
	    align-items:baseline;
    }
			
    @media (max-width: 575px) {
        .inputform {
            grid-template-columns: 1fr;
            grid-gap:0px;
        }

        .inputform > label,
        .inputform > .row > label {
            margin-top:20px;
        }
    }

    .inputform > label,
    .inputform > .row > label {
	    white-space:nowrap;
	    font-size:1em;
	    font-weight:bold;
    }

    .inputform > .row {
	    display:contents;
    }
			
    .inputform > .row > div {
	    grid-column : 1 / 3;
    }
			
    .inputform > .row > label+div {
	    grid-column: 2 / 3;
    }

    .inputform label+div > div+div {
	    margin-top:4px;
    }

    /* modal styles */
    .modal-dialog.AgendaItemDetailsModal {
        max-width: 1000px;
    }

    .AgendaItemDetailsModal .modal-content {
        max-height:90vh;
        overflow:hidden;
    }

    .AgendaItemDetailsModal .modal-content .modal-body {
        overflow-y:auto;
    }

    .AgendaItemDetailsModal .description {
        max-height:10em;
        overflow-y:auto;
    }

    .VoteResultsModal .Text {
        padding: 2px 0 18px;
    }

    .VoteResultsModal .Banner {
        font-weight:bold;
        padding:5px;
        text-align: center;
    }

    .Votes .VoteHeader {
        font-weight: bold;
        text-align: center;
        padding: 10px;
    }

    .Votes .Voters {
        display: grid;
        grid-template-columns: 33% minmax(0, 34%) 33%;
        grid-gap: 10px;
        align-items: baseline;
        text-align: center;
        border: 1px solid #f7f7f7;
    }

    h3.modal-title {
        font-size:17px;
    }

    #LegislationSupportingDocumentsList > div {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    #LegislationHistoryTable td {
        cursor:pointer;
    }

    #LegislationHistoryTable tr.selected td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    #LegislationHistoryTable tr.selected > :first-child {
        border-left:1px solid black;
    }

    #LegislationHistoryTable tr.selected > :last-child {
        border-right:1px solid black;
    }
</style>

<div id="VoteContainerTemplate" style="display:none">
    <div>
        <div class="VoteHeader"><span class="Vote"></span> ( <span class="count">0</span> )</div>
        <div class="Voters"></div>
    </div>
</div>

<script type="text/javascript">
    var AgendaItemswithHistory = [];

    $("document").ready(function() {
        // add agenda item history links dynamically to the agenda //
        $.each(AgendaItemswithHistory, function(i, v) {
            // remove old icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").find(".AgendaItemHistoryLink").remove();

            // add icon //
            $(".AgendaItem" + v + " .AgendaItemIcons").append(
                $('<a href="">')
                    .addClass("AgendaItemHistoryLink")
                    .attr("itemid", v)
                    .append('<i class="las la-history"></i>')
            );
        });

        $(".AgendaItemHistoryLink").click(function(e){
            e.preventDefault();

            AgendaItemHistory.Dialog.Open('', $(this).attr("itemid"));
        });
    });
</script>



    <!-- Bootstrap Modal -->
    <div id='bootstrapModal' class='modal fade in' role="dialog" aria-hidden="true" style='display: none;'>
        <div class='modal-dialog modal-dialog-scrollable'>
            <div class='modal-content'>
                <div class='modal-header'>
                    <h2 id='bootstrapModalTitle' class='modal-title' style='font-size: 17px'>Title</h2>
                    <button type='button' class='close' data-dismiss='modal'><span aria-hidden='true'>×</span> <span class='sr-only'>close share meeting popup</span></button>
                </div>
                <div id='bootstrapModalBody' class='modal-body' style="padding: 0px">
                    <div class='embed-responsive z-depth-1-half' id="modalIframeDiv">
                        <iframe id="modalIframe" title="Share Content Options" class='embed-responsive-item' src='' allowfullscreen></iframe>
                    </div>
                </div>
                <div class='modal-footer' id="bootstrapModalFooter" style='margin-top: 0;'>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" style="display:none;" form="aspnetForm" value="Submit">Submit</button>
    </main>

    </div>

    <!--<script type='text/javascript' src='Scripts\fullcalendar\lib\main.js'></script>-->
    
    <script>

        var mincount = 20;
        var maxcount = 40;
        var lastScrollTop = 0;
        var isReachMaxRecord = false;
        //comment out fake lazy loading code
        //$(".meetingDetails").slice(40).hide();

        // IsListView.ClientId values //
        var View = {
            set Current(id) {
                $('#ctl00_MainContent_IsListView').val(id);
            },
            get Current() {
                return $('#ctl00_MainContent_IsListView').val();
            }
        }

        var Views = {
            "Calendar" : "0",
            "List" : "1",
            "Conflicts" : "2",
            "Merged" : "3",
            "Legislation" : "4",
            "AgendaItemHistory" : "5"
        }

        function iframeLoaded(iframeHeight) {
            var windowHeight = $(window).height();

            if (iframeHeight > windowHeight) {
                var newHeight = (windowHeight - 185) + "px";
                $('#modalIframeDiv').height(newHeight);
            }
            else {
                var newHeight = iframeHeight + "px";
                $('#modalIframeDiv').height(newHeight);
            }
        }

        $(window).scroll(function () {
            stickyHeader();

            if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                if ($('#btnListView').hasClass("fc-state-active")) {
                    var btnShowMoreId = 'ctl00_MainContent_btnShowMore';
                    var scrollTop = $(window).scrollTop();

                    if (scrollTop > lastScrollTop & !isReachMaxRecord) {
                        $('#masterPageHeader').css("overflow-y", "hidden");
                        document.getElementById(btnShowMoreId).click();
                        //comment out fake lazy loading code
                        //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                        //mincount = mincount + 20;
                        //maxcount = maxcount + 20;
                    }
                    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
                }
            }
        });
        $(window).resize(function () {
            var parentwidth = $(".parent").width();
            $(".child").width(parentwidth);
        });

        var cachedMeetingsByType = {};
        var SelectedYear = 0;
        var text = {
            View: 'View',
            Cancelled: 'Meeting Cancelled'
        };

        $('.skip-to-content-link').click(function(event){
            event.preventDefault();
            document.location = window.location.href + "#maincontent";
            let getID = window.location.href;
            history.pushState(null, null, getID.replace('#maincontent', ''));
        });

        function SelectYearOption () {
            var optionSelected = $("option:selected", this);
            //console.log(optionSelected[0].getAttribute("data-year"));
            if(optionSelected.length > 0){
                var SelectedYearItem = optionSelected[0].getAttribute("data-year");
                SelectedYear = SelectedYearItem;
            } else {
                $("option[data-year=" + SelectedYear + "]").prop("selected", true);
            }

            var emptyYear = true;
            $.each($(".MeetingTypeList"), function (i, v) {
                emptyYear = ($(this).find(".Year" + SelectedYear).text() != '0' ? false : emptyYear);
                if(!emptyYear){ return false; }
            });

            if (emptyYear){
                SelectedYear = "0";
            }

            $(".Year, .Year0").hide();

            $(".Year" + SelectedYear).show();
            /*
            if (SelectedYearItem == null || SelectedYearItem.length == 0) {
                $(".SelectedYear").html(SelectedYear + "&nbsp;(0)");
            }
            else {
                $(".SelectedYear").html(SelectedYearItem.text());
            }*/

            $.each($(".MeetingTypeList"), function (i, v) {
                var mt = $(this);
                var head = mt.find(".Year" + SelectedYear);

                if (head == null || head.length == 0 || head.text() == "0") {
                    mt.hide();
                }
                else {
                    mt.show();
                }
            });

            var url = window.location.href;
            if (SelectedYear == null || SelectedYear == 0) {
                url = UpdateQuery("Year", '');
            }
            else {
                url = UpdateQuery("Year", SelectedYear);
            }

            if (window.location.href != url) {
                window.history.pushState('', '', url);
            }
            $("#YearFilterList").hide();
        }

        $(".YearFilterOption").on('change', SelectYearOption);
        $('#PastMeetingTypesAccordian').on('hidden.bs.collapse', function () {
            Size_Changed();
            $('#PastMeetingTypesAccordian .collapse.show').removeClass("show");
        });

        $('#PastMeetingTypesAccordian').on('shown.bs.collapse', function (e) {
            Size_Changed();
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            window.history.pushState('', '', UpdateQuery('Expanded', mt));
        });

        $('#PastMeetingTypesAccordian').on('show.bs.collapse', function (e) {
            var mt = $(e.target).find(".panel-contents").attr("MeetingType");
            LoadMeetingType(mt, true);
            $("#PastMeetingTypesAccordian .collapse.in").collapse("hide");
        });

        $('#PastMeetingTypesAccordian').on('hide.bs.collapse', function (e) {
            window.history.pushState('', '', UpdateQuery('Expanded', ''));
        });

        $(".PastMeetingTypesName").click(function (e) {
            e.preventDefault();
        });

        $("[data-toggle-id]").on("shown.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.removeClass("collapsed");
        });

        $("[data-toggle-id]").on("hidden.bs.collapse",function(){
            target=$("[data-target='" + $(this).attr("data-toggle-id") + "']");
            target.addClass("collapsed");
        });

        function ShowDownIcon()
        {
            $("#RightIcon").hide();
            $("#DownIcon").show();

        }

        function ShowRightIcon()
        {
            $("#RightIcon").show();
            $("#DownIcon").hide();
            $("#DownIcon").css("display", block);
        }


        function LoadMeetingType(mt, render, cb) {
            //$('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var container = $("[MeetingType='" + mt.replace(/'/g, '\\\'') + "']");

            if (!container.hasClass("Loaded" + SelectedYear) && !container.hasClass("Loading" + SelectedYear)) {
                container.addClass("Loading" + SelectedYear);

                $.ajax({
                    type: "POST",
                    url: "MeetingsCalendarView.aspx/PastMeetings" + window.location.search,
                    data: "{type: '" + mt.replace(/'/g, '\\\'') + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (msg) {
                        cachedMeetingsByType[mt] = GetMergedMeetings(msg.d, container);
                        if (render) {
                            container.append(cachedMeetingsByType[mt]);
                            lazyLoadAttachments();
                            shortenLinkNames();
                            container.addClass("Rendered" + SelectedYear);
                            SelectYearOption();
                        }

                        container.addClass("Loaded" + SelectedYear);
                        container.removeClass("Loading" + SelectedYear);
                        LoadingOverlay.Hide(container.parent());

                        if (cb) {
                            cb();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
            else if (render && !container.hasClass("Rendered" + SelectedYear)) {
                container.append(cachedMeetingsByType[mt]);
                container.addClass("Rendered" + SelectedYear);
                SelectYearOption();
            }
            else {
                if (cb) {
                    window.setTimeout(cb, 100);
                }
            }
            //$('#ctl00_MainContent_MeetingListUpdateProgress').hide();
        }
        $(window).on("resize", function () {Size_Changed(); })

        function UpdateQuery(parameter, value) {
            var loc = window.location.search;

            if (loc.length == 0) {
                if (value != null && value.toString().length > 0) {
                    return window.location.href + "?" + parameter + "=" + encodeURIComponent(value);
                }
            }
            else {
                var found = false;
                if (loc[0] == '?') {
                    loc = loc.substring(1);
                }

                var params = loc.split('&');

                for (var i = 0; i < params.length; i++) {
                    if (params[i].startsWith(parameter + '=')) {
                        found = true;

                        if (value != null && value.toString().length > 0) {
                            params[i] = parameter + '=' + encodeURIComponent(value);
                        }
                        else {
                            params[i] = '';
                        }
                    }
                }

                if (found == false && value != null && value.toString().length > 0) {
                    params.push(parameter + '=' + value);
                }

                var qs = '';
                for (var i = 0; i < params.length; i++) {
                    if (params[i].length > 0) {
                        if (qs.length == 0) {
                            qs = "?" + params[i];
                        }
                        else {
                            qs += "&" + params[i];
                        }
                    }
                }
                return window.location.href.replace("?" + loc, qs);
            }
            return window.location.href;
        }

        SelectYearOption();

        var LoadingOverlay = {
            Show: function (Element) {
                var LoadingDiv = $("<div/>").addClass("LoadingDivOverlay");
                var LoadingDivImage = $("<img src='_layouts/images/gears_anv4.gif'/>").addClass("LoadingDivImage");

                $(Element).append(LoadingDiv, LoadingDivImage);
            },
            Hide: function (Element) {
                $(Element).find(".LoadingDivOverlay, .LoadingDivImage").remove();
            }
        };

        function LoadMeetingTypes(containers) {
            if (containers.length > 0) {
                var mt = $(containers.shift()).attr("MeetingType");
                LoadMeetingType(mt, false, function () { LoadMeetingTypes(containers); });
            }
        }

        //var mts = $.makeArray($("[MeetingType]"));
        //LoadMeetingTypes(mts);

        function stickyHeader() {
            var sticky = $(".child")[0].offsetTop;
            if (window.pageYOffset > sticky) {
                var parentwidth = $(".parent").width();
                $(".child").width(parentwidth);
                $(".child").addClass("fixed");
            } else {
                $(".child").removeClass("fixed");
                $(".child").removeAttr("style");
            }
        }

        $('.has-clear input[type="text"]').on('input propertychange', function () {
            var $this = $(this);
            var visible = Boolean($this.val());
            $this.siblings('.form-control-clear').toggleClass('hidden', !visible);
        }).trigger('propertychange');

        $('.form-control-clear').click(function () {
            $(this).siblings('input[type="text"]').val('')
              .trigger('propertychange').focus();
            $('#table-conflicts-list').DataTable().search($(this).val()).draw();
        });

        $('.control-clear').click(function () {
            if ($(this).siblings('input[type="text"]')[0].id == 'ctl00_MainContent_FilterByDate') {
                $("#ctl00_MainContent_IsDateFilter").val("0");
            }
            if ($(this).siblings('input[type="text"]').val() != "") {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            }
            $(this).siblings('input[type="text"]').val('');
        });

        function ResetFilters() {
            deleteCookie("FilterDate");
            deleteCookie("MeetingTypeFilter");
            deleteCookie("Keyword");
            deleteCookie("ConflictMember");
            deleteCookie("ItemHistoryStage");
            deleteCookie("ItemHistoryStatus");
            deleteCookie("ItemHistoryDepartments");
            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
            var url = "";
            if (!location.search || location.search.length <= 0){
                url = window.location.href;
            } else {
                url = location.search;
            }
            window.open(url,'_self');
        }
        function ChangeFilterFlag() {
            $("#ctl00_MainContent_IsChangeFilter").val("1");
        }
        function ApplyFilterChanges() {
            var selectedTab = getCookie('CurrentTab');

            if ($('#ctl00_MainContent_txtSearch').val() != "" && View.Current != "2") {
                $("#btnFilterResults").click();
            }
            else if (selectedTab == "conflict") {
                $("#btnFunnelFilterResults").click();
            }
            else if (selectedTab == 'agendaItemHistory') {
                loadAgendaItemHistoryData(true);
            }
            else {
                document.getElementById('FilterResults').click();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            lazyLoadAttachments();
            shortenLinkNames();
        }
    </script>

    <script type="text/javascript">
        function postbackButtonClick() {
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var meetingType = [];
            $(".MeetingTypeListbox * .ss-value-text").each(function () {
                 meetingType.push($(this).text());
            });

            setCookie("MeetingTypeFilter", meetingType.join("|"));

            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            

            if (getCookie('CurrentTab') == 'calendar') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'list') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnListView").addClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").show();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'mergedlist') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnPastView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'past') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }
            else if (getCookie('CurrentTab') == 'conflict') {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#all-legislation-list").hide();
                $("#all-merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();

                loadConflictData(true);
            }
            else if (getCookie('CurrentTab') == 'legislation') {
                NavigationTab_Click($("#btnLegislationView"));
            }
            else if (getCookie('CurrentTab') == 'agendaItemHistory') {
                NavigationTab_Click($("#AgendaItemHistoryViewButton"));
            }

            $("#ctl00_MainContent_IsChangeFilter").val("0");

            $("#btnListView").addClass("fc-state-active");
            $("#btnMergedListView").removeClass("fc-state-active");
            $("#btnPastView").removeClass("fc-state-active");
            $("#btnCalendarView").removeClass("fc-state-active");

            lazyLoadAttachments();
            shortenLinkNames();

            return true;
        }

        function postbackTabClick(View) {

            $(".fc-toolbar-chunk > .fc-button, #btnListView, #btnCalendarView, #btnConflictsView, #btnLegislationView, #btnMergedListView, #AgendaItemHistoryViewButton, #btnPastView")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-merged-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();
            $("#searchresults").hide();

            $("#mergedListHeader").hide();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#pastHeader").hide();

            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $("#ctl00_MainContent_MonthMenu").hide();

            $("#btnFilter").show();
            deleteCookie("MeetingTypeFilter");

            if (View == Views.Calendar) {
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");
            }
            else if (View == Views.List) {
                $("#cal-list").show();
                $("#all-list").show();
                $("#mergedListHeader").show();
                $("#btnListView").addClass("fc-state-active");
                $("#btnListView").attr("aria-pressed", "true");

            }
            else if (View == Views.Conflicts) {
                $("#cal-list").show();
                $("#all-conflicts-list").show();
                $("#FilterByConflictMember").show();
                $("#FilterByKeyword").show();
                $("#btnConflictsView").addClass("fc-state-active");
                $("#btnConflictsView").attr("aria-pressed", "true");
            }
            else if (View == Views.Legislation) {
                $("#cal-list").show();
                $("#btnFilter").hide();
                $("#all-legislation-list").show();
                $("#btnLegislationView").addClass("fc-state-active");
                $("#btnLegislationView").attr("aria-pressed", "true");
                $(".LegislationHeader").show();
            }
            else if(View == Views.AgendaItemHistory) {
                $("#cal-list").show();
                $("#agendaitemhistory-list").show();
                $("#AgendaItemHistoryViewButton").addClass("fc-state-active");
                $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                $(".AgendaItemHistoryHeader").show();
                $("#FilterByStatus").show();
                $("#FilterByStage").show();
                $("#FilterByDepartment").show();
            }
            else if (View == Views.Merged) {
                $("#cal-list").show();
                $("#all-list").show();

                $("#all-merged-list").show();
                $("#merged-list").show();
                $("#btnMergedListView").addClass("fc-state-active");
                $("#btnMergedListView").attr("aria-pressed", "true");
                $("#mergedListHeader").show();
                $("#PastMeetingTitle").show();
            }
            else if (View == Views.Past) {
                $("#calendar").hide();
                $("#cal-list").show();
                $("#all-list").show();
                $("#all-conflicts-list").hide();
                $("#all-legislation-list").hide();
                $("#all-merged-list").show();
                $("#merged-list").hide();
                $("#searchresults").hide();
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnCalendarView").removeClass("fc-state-active");
                $("#btnListView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#btnMergedListView").removeClass("fc-state-active");
                $("#btnPastView").addClass("fc-state-active");
                $("#btnPastView").attr("aria-pressed", "true");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#pastHeader").show();
                $(".xtra-lists").css("margin-top", "unset");
                $("#PastMeetingTitle").hide();
                $(".LegislationHeader").hide();
            }

            if (View == Views.List || Views.Merged || Views.Past){
                $("#btnFilter").show();
                $("#FilterByKeyword").hide();
                $("#FilterByConflictMember").hide();

                var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
                var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();

                if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByDate != null && filterByDate !== "")){
                    $("#btnFilter").append("<span class='dot'></span>");
                } else {
                    $(".dot").remove();
                }
            }

        $("#ctl00_MainContent_IsChangeFilter").val("0");

        shortenLinkNames();
        return true;
    }

    function searchEnter(event) {
        if (event.keyCode === 13 && $('#ctl00_MainContent_txtSearch').val() != '') {
                event.preventDefault();
                searchData();
                return true;
            }
            else
                return event.keyCode != 13;
        }

    function setCookie(cname, cvalue) {
        document.cookie = cname + "=" + cvalue + ";SameSite=None; Secure";
    }

    function setLongCookie(cname, cvalue) {
        var d = new Date();
        d.setTime(d.getTime() + (3600 * 1000 * 24 * 365 * 10));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;SameSite=None; Secure";
    }
    function getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function deleteCookie(name) {
        document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            // If no cookie for CurrentTab, set it to DefaultTab. If DefaultTab is not available, then default tab will be calendar
            var cookie = getCookie('CurrentTab').trim().toLowerCase();

            var expanded = getParameterByName("Expanded");

            if (expanded) {
                $(".MeetingTypeNameText").each(function(i,v){
                    if (expanded == v.innerText.trim()) {
                        v.click();
                    }
                });
            }

            if (cookie == "") {
                var defaultTab = 'mergedlist';
                const queryString = window.location.search;
                const urlParams = new URLSearchParams(queryString);

                if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                    cookie = defaultTab.toLowerCase();
                } else {
                    cookie = urlParams.get("CurrentTab");
                }

                setCookie('CurrentTab', defaultTab);

            }

            switch(cookie) {
                case "list":
                    postbackTabClick(Views.List);
                    break;
                case "conflict":
                    loadConflictData(true);
                    postbackTabClick(Views.Conflicts);
                    break;
                case "legislation":
                    loadLegislationData(false);
                    postbackTabClick(Views.Legislation);

                    // legislation filter field //
                    $(".LegislationLibrarySearchField input").keyup(function () {
                        if (Legislation.DataTable != null) {
                            Legislation.DataTable.search($(".LegislationLibrarySearchField input").val()).draw();
                        }
                    });
                    break;
                case "agendaitemhistory":
                    loadAgendaItemHistoryData(false);
                    postbackTabClick(Views.AgendaItemHistory);

                    // agenda item history filter field //
                    $(".AgendaItemHistorySearchField input").keyup(function () {
                        if (AgendaItemHistory.DataTable != null) {
                            AgendaItemHistory.DataTable.search($(".AgendaItemHistorySearchField input").val()).draw();
                        }
                    });
                    break;
                case "mergedlist":
                    postbackTabClick(Views.Merged);
                    break;
                case "past":
                    postbackTabClick(Views.Past);
                    break;
                case "calendar":
                default:
                    // calendar view, default
                    loadCalendarMeetings();
                    break;
            }

            Size_Changed();

            if(getCookie('CurrentTab').trim().toLowerCase() == "mergedlist"){
                loadAdditionalItems(5, ".upcoming-meetings", "#loadMoreMeetings", ".meeting-title > *");
            } else {
                $('#lazyLoadContainer').hide();
                $('#loadMoreMeetings').hide();
            }
            RetrieveFilterOptions();
        });

        function getParameterByName(name) {
            var url = window.location.href
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }


        function loadLegislationData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
            };

            Legislation.LoadLegislationData(filtered, language);
        }

        function loadAgendaItemHistoryData(filtered) {
            language = {
                "sEmptyTable": "No data available in table",
                "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                "sInfoFiltered": "(filtered from _MAX_ total entries)",
                "sZeroRecords": "No matching records found",
                paginate: {
                    previous: '<',
                    next: '>',
                    first: '<<',
                    last: '>>'
                },
                processing: '<div class="loaderPosition"><i class="la la-spinner la-spin loaderDesign"></i></div>'
            };

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType) {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var filterByStage = ""; //lbFilterByStage
            if ($("#ctl00_MainContent_lbFilterByStage").val()) {
                filterByStage = $("#ctl00_MainContent_lbFilterByStage").val().join(',');
            }

            var filterByStatus = ""; //lbFilterByStatus
            if ($("#ctl00_MainContent_lbFilterByStatus").val()) {
                filterByStatus = $("#ctl00_MainContent_lbFilterByStatus").val().join(',');
            }

            var filterByDepartmentNames = ""; //lbFilterByDepartment
            if ($("#ctl00_MainContent_lbFilterByDepartment").val()) {
                filterByDepartmentNames = $("#ctl00_MainContent_lbFilterByDepartment").val().join(',');
            }

            if (filterByDate || filterbyMeetingTypeIds || filterByStage || filterByStatus || filterByDepartmentNames){
                $("#btnFilter").append("<span class='dot'></span>");
                $('.dropdown-toggle i').addClass('filtered');
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            } else {
                $(".dot").remove();
                $('.dropdown-toggle i').removeClass('filtered');
            }

            $('.dropdown-toggle').next().css("display", "none");

            AgendaItemHistory.AgendaItemHistoryView(filtered, language, filterByDate, filterbyMeetingTypeIds, filterbyMeetingTypeNames, filterByStage, filterByStatus, filterByDepartmentNames);
        }

        function loadCalendarMeetings() {
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();
            $("#FilterByStatus").hide();
            $("#FilterByStage").hide();
            $("#FilterByDepartment").hide();
            $(".AgendaItemHistoryHeader").hide();
            $("#table-agendaitemhistory-list").hide();

            var currentMonStart = "";
            var currentMonEnd = "";
            var calendarEl = document.getElementById('calendar')
            var calButtons = 'month mergedListViewButton '
            var calendar = new FullCalendar.Calendar(calendarEl, {
                eventDisplay: 'block',
                showNonCurrentDates: false,
                fixedWeekCount: false,
                locale: 'en',
                customButtons: {
                    month: {
                        text: 'Calendar'
                    },
                    myCustomButton: {
                        text: 'Upcoming'
                    },
                    myCustomConflictsButton: {
                        text: 'Conflicts Registry'
                    },
                    myCustomAgendaItemHistoryButton: {
                        text: "Agenda Item History"
                    },
                    mergedListViewButton: {
                        text: 'List'
                    },
                    pastViewButton: {
                        text: 'Past'
                    },
                    myCustomLegislationButton: {
                        text: 'Legislation'
                    }
                },
                headerToolbar: {
                    left: 'prev,title,next',
                    center: '',
                    right: calButtons.trimEnd()
                },
                dayHeaderFormat: { weekday: 'long'},
                initialView: 'dayGridMonth',
                dayMaxEventRows: 4,
                moreLinkContent: function(args){return (window.location.href.toLowerCase().includes("french") ? "Cliquez pour agrandir (" + args.num + " plus)": "Click to expand (" + args.num + " more)");},
                moreLinkDidMount: function(args){
                    $(args.el).attr("tabIndex", "0");
                },
                contentHeight:800,
                handleWindowResize:true,
                datesSet: function (dateInfo) {
                    $(".fc-prev-button").attr("aria-label", "Previous Month");
                    $(".fc-next-button").attr("aria-label", "Next Month");

                    if ($('#ctl00_MainContent_StartMonthDate').val() != "" && $('#ctl00_MainContent_EndMonthDate').val() != "") {
                        var minDate = moment($('#ctl00_MainContent_StartMonthDate').val()),
                            maxDate = moment($('#ctl00_MainContent_EndMonthDate').val());

                        if (minDate >= dateInfo.view.start && minDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-prev-button").prop('disabled', true);
                            $(".fc-prev-button").addClass('fc-state-disabled');
                            $(".fc-prev-button").css("cursor", "default");
                        }
                        else {
                            $(".fc-prev-button").removeClass('fc-state-disabled');
                            $(".fc-prev-button").prop('disabled', false);
                            $(".fc-prev-button").css("cursor", "pointer");
                        }

                        if (maxDate >= dateInfo.view.start && maxDate <= dateInfo.view.end && $('#ctl00_MainContent_IsFilterList').val() == "1") {
                            $(".fc-next-button").prop('disabled', true);
                            $(".fc-next-button").addClass('fc-state-disabled');
                            $(".fc-next-button").css("cursor", "default");
                        } else {
                            $(".fc-next-button").removeClass('fc-state-disabled');
                            $(".fc-next-button").prop('disabled', false);
                            $(".fc-next-button").css("cursor", "pointer");
                        }
                    }
                },
                events: function (info, successCallback, failureCallback) {
                    $.ajax({
                        type: "POST",
                        contentType: "application/json",
                        data: "{'calendarStartDate':'" + info.startStr + "','calendarEndDate':'" + info.endStr + "'}",
                        url: "/MeetingsCalendarView.aspx/GetAllMeetings" + window.location.search,
                        dataType: "json",
                        success: function (data) {
                            var events = [];
                            $.map(data.d, function (item, i) {
                                var event = new Object();
                                event.id = item.ID;
                                event.allday = false;
                                event.start = new Date(item.StartDate);
                                event.end = new Date(item.EndDate);
                                event.title = decodeHTML(item.MeetingName);
                                event.url1 = item.Url;
                                event.description = item.Description;
                                event.location = item.Location;
                                event.shareUrl = item.ShareUrl;
                                event.meetingType = item.MeetingType;
                                event.className = item.ClassName;
                                event.languageName = item.LanguageName;
                                event.sharing = item.Sharing;
                                event.hasAgenda = item.HasAgenda;
                                event.MeetingDocumentLink = item.MeetingDocumentLink;
                                event.portalId = item.PortalId;
                                event.HasLiveVideo = item.HasLiveVideo;
                                event.HasVideo = item.HasVideo;
                                event.LiveVideoStandAloneLink = item.LiveVideoStandAloneLink;
                                event.HasVideoLivePassed = item.HasVideoLivePassed;
                                event.DelegationRequestLink = item.DelegationRequestLink;
                                event.MeetingPassed = item.MeetingPassed;
                                event.AllowPublicComments = item.AllowPublicComments;
                                event.FormattedStart = item.FormattedStart;
                                event.TimeOverride = item.TimeOverride;
                                event.TimeOverrideFR = item.TimeOverrideFR;
                                event.IsMP3 = item.IsMP3;
                                events.push(event);
                                setTimeout(function(){
                                    $(".fc-daygrid-more-link").each(function(i,v){
                                        $(v).keypress(function(e){
                                            if(e.which == 13 || e.which == 32){
                                                $(".fc-daygrid-more-link")[i].click();
                                                setTimeout(function(){
                                                    tabIndexLoop(document.querySelector(".fc-more-popover") ,true, $(v));
                                                    setTimeout(function () {
                                                        $(".fc-more-popover").first().find(".fc-daygrid-event").first().focus();
                                                    }, 350);
                                                }, 300);
                                            }
                                        });
                                    });
                                }, 500);
                            });
                            successCallback && successCallback(events);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                },
                eventClick: function (eventClickInfo) {
                    showCalEvent(eventClickInfo.event, eventClickInfo.el);
                },
                eventDidMount: function (args) {
                    var timeSelector = $(args.el).children(".fc-event-main").children(".fc-event-main-frame").children(".fc-event-time");
                    $(args.el).popover({
                        title: args.event.title,
                        content: args.event.extendedProps.FormattedStart,
                        trigger: 'hover',
                        placement: 'top',
                        container: 'body',
                    });
                    $(args.el).attr("tabIndex", "0");
                    $(args.el).attr("aria-label", args.event.extendedProps.FormattedStart + " " + args.event.title);
                    $(args.el).attr("role", "button");
                    $(args.el).find(".fc-event-time").attr("aria-hidden", "true");
                    $(args.el).find(".fc-event-title").attr("aria-hidden", "true");
                    $(args.el).keypress(function(e){
                        if(e.which == 13 || e.which == 32){
                            showCalEvent(args.event, args.el);
                        }
                    });

                    var eventTime = timeSelector.text();
                    timeSelector.text(eventTime.substr(0, eventTime.length - 2) + " " + eventTime.substr(eventTime.length - 2).toUpperCase());
                },
                eventTimeFormat: {
                    hour12: 'True',
                    hour: 'numeric',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                loading: function (bool) {
                    if (getCookie('CurrentTab') == 'list') {
                        if ($('#all-list').text().indexOf('There are no meetings') > -1) {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        } else {
                            $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                        }
                    } else {
                        if (bool) $('#ctl00_MainContent_MeetingListUpdateProgress').show();
                        else $('#ctl00_MainContent_MeetingListUpdateProgress').hide();
                    }
                }
            });

            calendar.render();
            $('#calendar').prepend("<h1 class='visuallyhidden'>Calendar View</h1>");
            $(".fc-dayGridMonth-view > table").prepend("<caption class='visuallyhidden'>Calendar containing meetings</caption>");
            $(".fc-toolbar-chunk").first().attr("aria-live", "polite");
            $(".fc-toolbar-chunk").last().attr("role", "group");
            $(".fc-toolbar-chunk").last().attr("aria-label", "event views");
            $('#calendar').show();
            $("#FilterByKeyword").hide();
            $("#FilterByConflictMember").hide();

            $("#calendar > .fc-toolbar > .fc-left > h2").attr("aria-hidden", "true");
            $("#calendar > .fc-toolbar > .fc-left > h2").css("display", "none");
            $("#calendar > .fc-toolbar > .fc-left > h2").before("<h1>" + $("#calendar > .fc-toolbar > .fc-left > h2").text() +"</h1>");
            $(".fc-button-primary").each(function(i,v){
                $(v).removeClass("fc-button-primary");
                $(v).addClass("fc-state-default");
            });

            $(".fc-month-button").addClass("fc-state-active");
            $(".fc-month-button").attr("aria-pressed", "true");

            $(".fc-mergedListViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomButton-button").attr("aria-pressed", "false");
            $(".fc-pastViewButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomConflictsButton-button").attr("aria-pressed", "false");
            $(".fc-myCustomAgendaItemHistoryButton").attr("aria-pressed", "false");
            $(".fc-myCustomLegislationButton").attr("aria-pressed", "false");

        }

        function showCalEvent(event, calEntry){
            var startDate = new Date(event.start);
            var modalContainer = document.querySelector(".modal-dialog");
            var eventAria = event.title + " " + event.extendedProps.FormattedStart;
            startDate = startDate.format("ddd, MMMM dd, yyyy @ h:mm tt");
            if($('#modelHeader' > " h2:has('#modalTitle')").length > 0) {
                $('#modalTitle').remove();
            }
            $('#modelHeader').prepend("<h2 id='modalTitle' tabIndex='0' style='font-size: 17px'></h2>");
            $('#modalTitle').html(event.title);
            $("#closeCalModal").on("click", function(){
                calEntry.focus();
            });
            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    calEntry.focus();
                }
            });
            $('#startDate').text(event.extendedProps.FormattedStart);
            $('#desc').html(event.extendedProps.description);
            if (event.extendedProps.hasAgenda && event.extendedProps.sharing) {
                $('#eventLink').show();
                $('#eventLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                var shareAria = "Share " + eventAria;
                $('#shareContainer').show();
                $('#shareLink').attr('href', event.extendedProps.shareUrl);
                $('#shareLink').attr('aria-label', shareAria);
                $('#shareLink > img').attr('aria-label', shareAria);
                if (event.extendedProps.AllowPublicComments){
                    var commentAria = "Comment on " + eventAria + ". Opens in a new tab/window";
                    $('#commentLink').show();
                    $('#commentLink').attr('href', href = 'Meeting.aspx?Id=' + event.id + '&lang=' + event.extendedProps.languageName);
                    $('#commentLink').attr('aria-label', commentAria);
                    $('#commentLink > img').attr('aria-label', commentAria);
                } else {
                    $('#commentLink').hide();
                }
            }
            else {
                $('#eventLink').hide();
                $('#shareContainer').hide();
                $('#shareLink').removeAttr("href");
                $('#commentLink').hide();
                $('#commentLink').removeAttr("href");
            }
            $('#meeting-type').text(event.extendedProps.meetingType);

            if (event.extendedProps.MeetingDocumentLink.length > 0) {
                var lang = window.location.href.toLowerCase().includes("french");
                var meetingDocuments = (event != undefined && event != null ? GetCategorizedMeetingLinks(event, lang, event.extendedProps.MeetingDocumentLink, false) : "");
                $('#MeetingDocuments').html(meetingDocuments);
                $('#MeetingDocuments').show();
                shortenLinkNames();
            }
            else {
                $('#MeetingDocuments').html("");
            }
            if(event.extendedProps.HasLiveVideo && !event.extendedProps.MeetingPassed && !event.extendedProps.IsMP3){
                var meetingDocuments = event.extendedProps.LiveVideoStandAloneLink + "<i class='las la-video la-lg'></i>"  + "  View Live Stream" + "</a>";
                $('#video-link').html(meetingDocuments);
                $('#video-link').show();
            } else {
                $('#video-link').hide();
            }

            if (event.extendedProps.DelegationRequestLink != "") {
                var delegationAria = "Delegation request for " + eventAria + ". Opens in a new tab/window";
                $('#delegationRequestLink').show();
                $('#delegationRequestLink').attr('href', event.extendedProps.DelegationRequestLink);
                $('#delegationRequestLink').attr('aria-label', delegationAria);
                $('#delegationRequestLink > img').attr('aria-label', delegationAria);
            }
            else {
                $('#delegationRequestLink').hide();
                $('#delegationRequestLink').removeAttr("href");
            }
            $('#fullCalModal').modal('show');
            $('#fullCalModal').removeAttr('aria-hidden', 'true');
            tabIndexLoop(modalContainer, false, null);
            setTimeout(function () {
                $("#closeCalModal").focus();
            }, 350);
        }

        $(".PastMeetingTypesName").each(function(i,v){
            $(v).keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38){
                    e.preventDefault();
                    $(v).parent().prevAll(":visible:first").children(":first").focus();
                } else if (keyCode == 40){
                    e.preventDefault();
                    $(v).parent().nextAll(":visible:first").children(":first").focus();
                }
                else if (keyCode == 32){
                    e.preventDefault();
                    $(v).click();
                }
            });
        });

        lazyLoadAttachments();

        setTimeout(function(){
            $('#searchMeetingType').attr("placeholder", "Optional Filter by Meeting Type search field");
            //$('#searchMeetingType').removeAttr("aria-labelledby");
            $('#searchMeetingType').keydown(function(e){
                var keyCode = e.keyCode || e.which;
                if (keyCode == 38 || keyCode == 40){
                    $('#searchMeetingType').val($(".ss-highlighted").text());
                }
            });
        }, 1000);

        function lazyLoadAttachments(){
            $(".additional-doc-list").each(function(i,v){
                if ($($(v).children()).length > 11 ){
                    loadAdditionalItems(10, v, $(v).find(".loadMoreAttachments"), ".teaserLink");
                } else {
                    $(v).find(".loadMoreAttachments").hide();
                }
            });
        }
        function shortenLinkNames(){
            setTimeout(function(){
                $(".teaser").each(function(i,v){
                    var min = 12;
                    var parentWidth = $(v).parents('div').width();
                    var limit = 0;
                    if (parentWidth > 0){
                        limit = $(v).parents('div').width()/11;
                    } else {
                        limit = $(".attachment-list").first().width()/11;
                    }

                    limit = (limit >= min ? limit : min);
                    teaserLink(v, limit);
                });
            },150);
        }

        function teaserLink(v, maxlen){
            var txt=$(v).text().replace("...", "");
            if(txt.length>maxlen){
                var shortText=txt.substring(0, maxlen)+
                "<span onclick='$(this).hide();$(this).next().toggle();'>"+
                    "..."+
                "</span>"+
                "<span  style='display:none'>"+
                    txt.substring(maxlen, txt.length)+
                "</span>";

                $(v).html(shortText);
            }
        }

        function loadAdditionalItems(itemsToLoad, container, trigger, postFocus){
            $(trigger).hide();
            var size_cont = $($(container).children()).length;
            if (size_cont > itemsToLoad){
                $(container).children().hide();
                $(trigger).show();
                var increment = itemsToLoad;
                $(container).children().slice(0,itemsToLoad).show();
                $(trigger).keypress(function(e){
                    if(e.which == 13){
                        $(trigger).click();
                    }
                });
                $(trigger).click(function () {
                    itemsToLoad += increment;
                    $(container).children().slice(0,itemsToLoad).show();
                    if(postFocus){
                        setTimeout(function(){
                            $(container).children().eq(itemsToLoad - increment).find(postFocus).focus();
                        }, 100);
                    }
                    if (itemsToLoad>=size_cont){
                        $(trigger).hide();
                    } else {
                        $(trigger).show();
                    }
                });
            }
        }

        function loadConflictData(isFiltered) {
            if ($.fn.DataTable.isDataTable('#table-conflicts-list')) {
                $('#table-conflicts-list').dataTable().fnClearTable();
                $('#table-conflicts-list').dataTable().fnDestroy();
                $('#table-conflicts-list tbody').remove();
            }
            var searchText = $("#ctl00_MainContent_txtFilterByKeyword").val().trim();

            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterbyMeetingTypeIds = "";
            if (filterbyMeetingType != null && filterbyMeetingType != "") {
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterByConflictMember = $("#ctl00_MainContent_lbFilterByConflictMember").val();
            var filterByConflictMemberIds = "";
            if (filterByConflictMember != null && filterByConflictMember != "") {
                filterByConflictMemberIds = filterByConflictMember.join(',');
            }

            if ((filterbyMeetingType != null && filterbyMeetingType.length > 0) || (filterByConflictMember != null && filterByConflictMember.length > 0) || (filterByDate != null && filterByDate !== "")){
                $("#btnFilter").append("<span class='dot'></span>");
            } else {
                $(".dot").remove();
            }

            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            })

            var conflictsTable = $('#table-conflicts-list').DataTable({
                "fnDrawCallback": function( oSettings ) {
                    $('#viewRegConflict').attr("aria-label", "Member in Conflict");
                    $('.dataTables_empty').removeAttr("valign");
                    $('.dataTables_empty').css("vertical-align", "top");
                    $('.paginate_button:not(.current)').removeAttr('aria-current');
                    $('.paginate_button.current').attr("aria-current", "page");
                    $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                },
                "dom": 'rtip',
                "bProcessing": true,
                "stateSave": false,
                "bServerSide": true,
                "autoWidth": false,
                "pagingType": "full_numbers",
                "sAjaxSource": window.location.origin+"/GetSearchData.asmx/GetConflictsData" + window.location.search,
                "fnServerParams": function (aoData) {
                    aoData.push({ "name": "searchText", "value": searchText });
                    aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                    aoData.push({ "name": "filterByDate", "value": filterByDate });
                    aoData.push({ "name": "filterByConflictMemberIds", "value": filterByConflictMemberIds });
                    aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                },
                "columns": [
                    { "data": "ConflictMember", "orderable": true },
                    { "data": "MeetingTypeName", "orderable": true },
                    { "data": "MeetingStart", "orderable": true },
                    { "data": "AgendaItem", "orderable": true },
                    { "data": 'FileIcon', "orderable": false }
                ],
                "order": [[0, "asc"]],
                "columnDefs": [
                    {
                        "targets": 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'conflict');
                        }
                    },
                    {
                        "targets": 1,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingType');
                        }
                    },
                    {
                        "targets": 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'meetingDate');
                        }
                    },
                    {
                        "targets": 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'agendaItem');
                        }
                    },
                    {
                        "targets": 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'viewRegConflict');
                        }
                    }
                ],
                language: {
                    "sEmptyTable": "No data available in table",
                    "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                    "sInfoFiltered": "(filtered from _MAX_ total entries)",
                    "sZeroRecords": "No matching records found",
                    paginate: {
                        previous: '<',
                        next: '>',
                        first: '<<',
                        last: '>>'
                    },
                    aria: {
                        paginate: {
                            previous: 'previous page',
                            next: 'next page',
                            first: 'first page',
                            last: 'last page'
                        }
                    },
                    processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                }
            });

            $('#viewRegConflict').attr("aria-label", "View all registered conflicts for the agenda item");

            if (searchText != "" || filterByDate != "" || filterbyMeetingTypeIds != "" || filterByConflictMemberIds != "") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");
            if (isFiltered && getCookie('CurrentTab') == 'list') {
                document.getElementById('FilterResults').click();
                $("#ctl00_MainContent_IsChangeFilter").val("0");
            }
            else {
                $("#all-list").hide();
                $("#all-conflicts-list").show();
                $("#searchresults").hide();
            }
        }
        $(window).on('load', function(){ shortenLinkNames(); });
        $(window).resize(function(){ shortenLinkNames(); });
    </script>

    
    <script type="text/javascript">
        $(".DelegationRequest").click(function (e) {
            e.preventDefault();

            var a = $(this);
            var width = 500;
            var height = 600;
            var left = (screen.width - width) / 2;
            var top = (screen.height - height) / 2;
            window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
        });
        function closeDateRangeFilter()
        {
            filterbyDepartmentSelect.close()
            filterbyStatusSelect.close()
            filterbyStageSelect.close()
            filterbyConflictMemberSelect.close()
            filterbyMeetingTypeSelect.close()
        }
        //stop calener to misbehave in IE browser
        $("#divDateRangeFilterPopup").click(function (e) {
            e.stopImmediatePropagation();
            closeDateRangeFilter();
        });


    </script>
    <script>
        function NavigationTab_Click() {
            console.log("NavigationTab_Click()");

            $("#btnCalendarView, #btnListView, #btnConflictsView, #btnLegislationView, #btnMergedListView, .fc-myCustomLegislationButton-button, .fc-myCustomAgendaItemHistoryButton-button")
                .removeClass("fc-state-active")
                .attr("aria-pressed", "false");

            $("#calendar").hide();
            $("#cal-list").hide();
            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-merged-list").hide();
            $("#all-legislation-list").hide();
            $("#agendaitemhistory-list").hide();

            $("#searchresults").hide();
            $("#downloadIconConflictsList").hide();
            $("#mergedListHeader").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $(".fc-left").hide();
            $("#searchresults").hide();
            $("#FilterByKeyword").hide();
            $("#FilterResults").hide();
            $("#FilterByConflictMember").hide();
            $("#downloadIconConflictsList").hide();
            $("#FilterResults").hide();
            $("#btnFunnelFilterResults").hide();
            $("#ctl00_MainContent_MonthMenu").hide();
            $("#mergedListHeader").hide();
            $("#filterIcon").show();
            $(".LegislationHeader").hide();
            $(".AgendaItemHistoryHeader").hide();
            var tab = $(this);


            switch (tab.text().trim()) {
                case "Agenda Item History":
                    setCookie('CurrentTab', 'agendaItemHistory');
                    View.Current = Views.AgendaItemHistory;

                    $("#AgendaItemHistoryViewButton, .fc-myCustomAgendaItemHistoryButton-button")
                        .addClass("fc-state-active");

                    $("#AgendaItemHistoryViewButton").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    $("#agendaitemhistory-list").show();
                    $(".AgendaItemHistoryHeader").show();
                    $("#FilterByKeyword").show();

                    break;
                case "Legislation":
                    setCookie('CurrentTab', 'legislation');
                    View.Current = Views.Legislation;

                    $("#btnLegislationView, .fc-myCustomLegislationButton-button")
                        .addClass("fc-state-active");

                    $("#btnLegislationView").attr("aria-pressed", "true");
                    $("#cal-list").show();
                    //$("#all-legislation-list").show();
                    $("#agendaitemhistory-list").show();
                    $("#FilterByKeyword").show();
                    //$(".LegislationHeader").show();
                    $(".AgendaItemHistoryHeader").show();

                    break;

                case 'Upcoming':
                    // show list tab elements //
                    $("#cal-list").show();
                    $("#all-list").show();

                    $("#btnListView").addClass("fc-state-active");
                    $("#btnListView").attr("aria-pressed", "true")
                    $("#cal-list").show();

                    View.Current = Views.List;
                    setCookie('CurrentTab', 'list');
                    $("#ctl00_MainContent_MonthMenu").show();
                    if ($("#ctl00_MainContent_IsMonthChange").val() == "1") {
                        $("#ctl00_MainContent_IsMonthChange").val("0");
                        document.getElementById('FilterResults').click();
                    }

                    $("#filterIcon").show();
                    $("#FilterResults").show();

                    //Set focus on the search bar - no longer need with new accessibility guide
                    //document.getElementById('ctl00_MainContent_txtSearch').focus();

                    break;
                default:
                    $("#filterIcon").show();
            }
        }

        $(".FilterByDate").keydown(function (e) {
            if (e.which != 9){
                return false;
            }
        });

        $(document).ready(function(){

            var datePickerMessage = (window.location.href.toLowerCase().includes("french") ? "Appuyez sur l'espace pour ouvrir. Veuillez sélectionner une date de début et de fin. Retour arrière pour effacer" : "Press space to open. Please select a start and end date. Backspace to clear");
            var daterangepicker = new ej.calendars.DateRangePicker({
                placeholder: datePickerMessage,
                dayHeaderFormat: "Abbreviated",
                keyConfigs:{
                    altDownArrow: "space"
                },
                format: 'M/d/yyyy',
                close: function() {
                    setTimeout(function(){
                        $('.dropdown-toggle').next().toggle();
                    }, 50);
                },
                open: function() {
                    setTimeout(function(){
                        $('.e-left-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your start date </caption>');
                        $('.e-right-calendar > .e-content > table').prepend('<caption class="sr-only"> Select your end date </caption>');
                    }, 50);
                }
            });

            $( window ).resize(function() {
                if ($(window).width() >= 499) {
                    daterangepicker.isMobile = false;
                } else {
                    daterangepicker.isMobile = true;
                }
            });

            daterangepicker.appendTo('input[id="ctl00_MainContent_FilterByDate"]');

            $(".daterangepicker").click(function(event){
                event.preventDefault();
            });

            setTimeout(function(){
                $(".e-input-group-icon.e-range-icon.e-icons").attr("tabIndex", "0");
                $(".e-input-group-icon.e-range-icon.e-icons").attr("aria-label", "Filter by date button");
                $(".e-input-group-icon.e-range-icon.e-icons").keydown(function (e) {
                    if (e.which == 13 || e.which == 32){
                        daterangepicker.show();
                    } else if (e.keyCode == 27){
                        $('.dropdown-toggle').next().toggle();
                    }
                });
                var syncFusionFormLabel = "Date picker icon"
                $(".e-daterange-hidden").each(function(i,v){
                    $(v).attr("id", "datePickerIcon" + i);
                    $(v).after('<label for="datePickerIcon' + i + '" class="visuallyhidden">' + syncFusionFormLabel + ' ' + i + '</label>');
                });
            }, 300);

            $(".FilterByDate").keydown(function (e) {
                if (e.which == 8){
                    $(".FilterByDate").val("");
                }
            });
            $('input[id="ctl00_MainContent_FilterByDate"]').keydown(function(e){
                if (e.keyCode == 27){
                    $('.dropdown-toggle').next().toggle();
                }
            });
            $("body").tooltip({ placement: 'top', selector: ".Location-Tooltip" });
            $('.dropdown-toggle').on('click', function (e) {
                $(this).next().toggle();
            });
            $("body").click(function (e) {

                if (!$(e.target).closest(".dropdown-toggle, .dropdown-toggle i,.dropdown-menu, .daterangepicker, .prev, .next").length > 0 && !$('[id^=ctl00_MainContent_FilterByDate_popup]').length) {
                    $('.dropdown-toggle').next().css("display", "none");
                    if ($("#ctl00_MainContent_IsChangeFilter").val() == "1") {
                        ApplyFilterChanges();
                    }
                }
            });

            function getTab() {
               var cookie = getCookie('CurrentTab');
               if (cookie == "") {
                    var defaultTab = 'mergedlist';
                    const queryString = window.location.search;
                    const urlParams = new URLSearchParams(queryString);

                    if (urlParams.get("CurrentTab") == null) {//this is a backup for when cookies don't work for a client
                        cookie = defaultTab.toLowerCase();
                    } else {
                        cookie = urlParams.get("CurrentTab");
                    }

               }
                return cookie;
            }

            var tabCookie = getTab();

            {
                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($('#ctl00_MainContent_txtSearch').val() != "" && tabCookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (tabCookie == "conflict" || tabCookie == "agendaItemHistory") {
                    $("#btnFunnelFilterResults").show();
                    $("#btnFunnelFilterResults").on('click', function () {
                        if(tabCookie == "agendaItemHistory") {
                            loadAgendaItemHistoryData(true);
                        }
                        else {
                            loadConflictData(true);
                        }

                    });
                }
                else {
                    $("#FilterResults").show();
                }
            }

            $('#ctl00_MainContent_txtSearch').on('input propertychange', function () {
                var cookie = getTab();

                $("#FilterResults").hide();
                $("#btnFilterResults").hide();
                $("#btnFunnelFilterResults").hide();

                if ($(this).val() != "" && cookie != "conflict") {
                    $("#btnFilterResults").show();
                }
                else if (cookie == "conflict") {
                    $("#btnFunnelFilterResults").show();
                }
                else {
                    $("#FilterResults").show();
                }
            });

            $('#ctl00_MainContent_txtFilterByKeyword').on('input propertychange', function () {
                $("#ctl00_MainContent_IsChangeFilter").val("1");
            });

            if($(".ss-search").length > 0){
                $(".ss-search > input").first().attr("id","searchMeetingType").attr("aria-labelledby","searchMeetingType");
                $(".ss-search").first().prepend("<label for='searchMeetingType' class='sr-only'>Optional filter by Meeting Type Search</label>");

                $(".ss-search > input").last().attr("id","searchConflictMember").attr("aria-labelledby","searchConflictMember");
                $(".ss-search").last().prepend("<label for='searchConflictMember' hidden>Search </label>");
            }

            //for enabled searching the focus - no longer need with new accessibility guide
            //document.getElementById('ctl00_MainContent_txtSearch').focus();
        });

        //List Functions
        //$("#btnListView").click(NavigationTab_Click);


        $("#all-list .fc-myCustomButton-button").click(function () {
            //$("#cal-list .fc-month-button").click();
            //$("#calendar .fc-myCustomButton-button").click();
        });
        /*
        $("#calendar .fthtfhftf").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").show();
            $("#all-legislation-list").hide();
            $("#all-merged-list").hide();
            $(".fc-left").show();
        });*/

        //$(".fc-myCustomLegislationButton-button").click(NavigationTab_Click);
        /*
        $("#calendar .yh4554h45h45h").click(function () {
            NavigationTab_Click();

            $("#all-list").hide();
            $("#all-conflicts-list").hide();
            $("#all-legislation-list").hide();
            $("#all-merged-list").show();
            $(".fc-left").show();
        });*/


        ////$("#all-list .fc-myCustomButton-button").click(function () {
        ////    NavigationTab_Click();

        ////    $("#all-list").show();
        ////    $("#all-conflicts-list").hide();
        ////    $("#all-legislation-list").hide();
        ////    $("#all-merged-list").hide();
        ////    $("#searchresults").hide();
        ////});

        function searchData() {
            SaveFilterOptions();
            $("#searchTableTemp").hide();
            var searchText = $('#ctl00_MainContent_txtSearch').val();
            var filterbyMeetingType = $("#ctl00_MainContent_lblMultiSelect").val();
            var filterByDate = $('#ctl00_MainContent_FilterByDate').val();
            var filterbyMeetingTypeIds = "";
            if ((filterbyMeetingType != null && filterbyMeetingType != null) || (filterByDate != null && filterByDate !== "" )) {
                $("#btnFilter").append("<span class='dot'></span>");
                filterbyMeetingTypeIds = filterbyMeetingType.join(',');
            }
            var filterbyMeetingTypeNames = "";
            var filterbyMeetingTypeName = $("[id*=lblMultiSelect] option:selected");
            filterbyMeetingTypeName.each(function () {
                filterbyMeetingTypeNames += $(this).html()+ ",";
            });

            var filterByMeetingDocumentTypes = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".chkMeetingDocuments").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocumentTypes += $(this).val() + ",";
                }
            });

            $(".chkDocumentTypes").each(function () {
                if ($(this).is(":checked")) {
                    filterByExtensions += $(this).val() + ",";
                }
            });

            if ($("#hdnIsLanguageFilterOn").val() == "true") {
                $("#languageFilterDv").show();
                $(".chkLanguage").each(function () {
                    if ($(this).is(":checked")) {
                        filterByLanguage += $(this).val() + ",";
                    }
                });
            }
            else {
                $("#languageFilterDv").hide();
                $(".chkLanguage").each(function () {
                    filterByLanguage += $(this).val() + ",";
                });
            }

            if (searchText.trim() != "") {
                NavigationTab_Click();
                $("#searchTable > thead > tr").append("<th></th>");

                if ($.fn.DataTable.isDataTable('#searchTable')) {
                    $('#searchTable').dataTable().fnClearTable();
                    $('#searchTable').dataTable().fnDestroy();
                    $("#searchTable tbody").remove();
                }

                var searchTable =  $('#searchTable').dataTable({
                    "dom": '<"top"i>rt<"bottom"p><"clear">',
                    "pagingType": "full_numbers",
                    searching: false,
                    "bProcessing": true,
                    "bSort": false,
                    "drawCallback": function (settings) {
                        $("#searchTable thead").remove();
                        $("#searchTableTemp").show();
                        $("#searchTable_info").closest("#searchTable_wrapper").find("#searchTableTemp").remove();
                        $("#searchTable_info").parent().after($("#searchTableTemp")[0].outerHTML);
                        $("#searchTableTemp").hide();

                        if (!$("#filter-options").is(":visible")) {
                            $("#filter-options").show();
                            //  $("#filter-meeting-collapse").click();
                            // removed condition for filter default behaviour
                        }
                        $(".srch-grp-table:last").css("border-bottom", "1px solid darkgray");

                        if ($("#searchTable tr td:first").hasClass("dataTables_empty")) {
                            $("#searchTable_wrapper #searchTableTemp").hide();
                        }
                    },
                    "bServerSide": true,
                    "sAjaxSource":  "/GetSearchData.asmx/GetSearchMeetingData" + window.location.search,
                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "searchText", "value": searchText });
                        aoData.push({ "name": "filterbyMeetingTypeIds", "value": filterbyMeetingTypeIds });
                        aoData.push({ "name": "filterbyMeetingTypeNames", "value": filterbyMeetingTypeNames });
                        aoData.push({ "name": "filterByDate", "value": filterByDate });

                        aoData.push({ "name": "filterByMeetingDocumentTypes", "value": filterByMeetingDocumentTypes });
                        aoData.push({ "name": "filterByExtensions", "value": filterByExtensions });
                        aoData.push({ "name": "filterByLanguage", "value": filterByLanguage });
                        aoData.push({ "name": "includeConflicts", "value": $("#chkConflicts").prop("checked") });
                        aoData.push({ "name": "includeComments", "value": $("#chkComments").prop("checked") });
                    },

                    "sServerMethod": "post",
                    "aoColumns": [{ mData: {} }],
                    language: {
                        "sEmptyTable": "No data available in table",
                        "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
                        "sInfoEmpty": "Showing 0 to 0 of 0 entries",
                        "sInfoFiltered": "(filtered from _MAX_ total entries)",
                        "sZeroRecords": "No matching records found",
                        paginate: {
                            last: '>',
                            first: '<'
                        },
                        processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                    }
                });

                $("#calendar").hide();
                $("#all-list").hide();
                $("#all-conflicts-list").hide();
                $("#all-merged-list").hide();
                $("#all-legislation-list").hide();
                $("#cal-list").show();
                $("#btnListView").removeClass("fc-state-active");
                $("#btnConflictsView").removeClass("fc-state-active");
                $("#btnLegislationView").removeClass("fc-state-active");
                $("#searchresults").show();
                if (filterbyMeetingTypeIds != "" || filterByDate != "") {
                    $('.dropdown-toggle i').addClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('1');
                }
                else {
                    $('.dropdown-toggle i').removeClass('filtered');
                    $("#ctl00_MainContent_IsFilter").val('0');
                }
                $('.dropdown-toggle').next().css("display", "none");
                $("#ctl00_MainContent_MonthMenu").hide();
                $("#mergedListHeader").hide();
                $("#filterIcon").show();
            }
            else {
                $("#searchresults").hide();
            }
            $("#ctl00_MainContent_IsChangeFilter").val("0");

            return false;
        }

        $(function () {
            Sys.WebForms.PageRequestManager.getInstance().add_endRequest(bindDataTable); // bind data table on every UpdatePanel refresh
        });

        //https://stackoverflow.com/questions/16941104/remove-a-parameter-to-the-url-with-javascript
        function RemoveParam(key, sourceURL) {
            var returnURL = sourceURL.split("?")[0],
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    var param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                        break;
                    }
                }
                if (params_arr.length) returnURL = returnURL + "?" + params_arr.join("&");
            }
            return returnURL;
        }

        function UpdateQueryString(key, value, url) {
            if (!url) url = window.location.href;
            var re = new RegExp("([?&])" + key + "=.*?(&|#|$)(.*)", "gi"),
                hash;

            if (re.test(url)) {
                if (typeof value !== 'undefined' && value !== null) {
                    return url.replace(re, '$1' + key + "=" + value + '$2$3');
                }
                else {
                    hash = url.split('#');
                    url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
            }
            else {
                if (typeof value !== 'undefined' && value !== null) {
                    var separator = url.indexOf('?') !== -1 ? '&' : '?';
                    hash = url.split('#');
                    url = hash[0] + separator + key + '=' + value;
                    if (typeof hash[1] !== 'undefined' && hash[1] !== null) {
                        url += '#' + hash[1];
                    }
                    return url;
                }
                else {
                    return url;
                }
            }
        }

        $(document).ready(function () {
            $( ".fc-month-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                window.parent.postMessage(jQuery('body').height() + 5, "*");

            });

            $("button[data-dismiss='modal']").on( "click", function() {
                $('#bootstrapModal').attr('aria-hidden', 'true');
                $('#fullCalModal').attr('aria-hidden', 'true');
                $("#conflictsDetailsModal").attr('aria-hidden', 'true');
                $('#LegislationDetailsModal').attr('aria-hidden', 'true');
                $('#MeetingTypeName').remove();
                $('#modalTitle').remove();
            });

            $(document).keydown(function(event) {
                if (event.keyCode == 27) {
                    $('#bootstrapModal').modal('hide').attr('aria-hidden', 'true');
                    $('#fullCalModal').modal('hide').attr('aria-hidden', 'true');
                    $('#conflictsDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#LegislationDetailsModal').modal('hide').attr('aria-hidden', 'true');
                    $('#MeetingTypeName').remove();
                    $('#modalTitle').remove();
                }
                else if (event.keyCode == 13) {
                    event.preventDefault(); // to fix the issue occuring on select/unselect checkbox and hiting enter will refresh the page(site)
                }
            });

            $( ".fc-month-button" ).on( "click", function() {
                setCookie('CurrentTab', 'calendar');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "calendar", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'list');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "list", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomConflictsButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'conflict');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "conflict", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-mergedListViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'mergedlist');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "mergedlist", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-pastViewButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'past');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "past", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomLegislationButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'legislation');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "legislation", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            $( ".fc-myCustomAgendaItemHistoryButton-button" ).on( "click", function() {
                setCookie('CurrentTab', 'agendaItemHistory');
                var cleanURL = RemoveParam("Expanded",window.location.href);
                if (getCookie("CurrentTab") == "") {
                    document.location.href = UpdateQueryString("CurrentTab", "agendaItemHistory", cleanURL);
                } else {
                    document.location.href = cleanURL;
                }

            });

            bindDataTable(); // bind data table on first page load

            $("a[target='_blank']").each(function(i,v){
                $(v).append("<i class='las la-external-link-alt'></i>");
                $(v).attr("aria-label", function(index, val) {
                    return val + '. Opens in a new tab/window'; //i == index, val == original attribute, the id
                });
            })
        });

        function onFilterMeetingDocument(ele) {
            if ($("#filter-meeting-docment").hasClass("show")) {
                $("#filter-meeting-collapse").removeClass("fa fa-caret-down");
                $("#filter-meeting-collapse").addClass("fa fa-caret-right");
            }
            else {

                $("#filter-meeting-collapse").removeClass("fa fa-caret-right");
                $("#filter-meeting-collapse").addClass("fa fa-caret-down");
            }
        }

        function SaveFilterOptions() {
            var filterByMeetingDocument = "";
            var filterByExtensions = "";
            var filterByLanguage = "";
            $(".common-filter").each(function () {
                if ($(this).is(":checked")) {
                    filterByMeetingDocument += $(this).val() + ",";
                }
            });

            $(".chkLanguage").each(function () {
                if ($(this).is(":checked")) {
                    filterByLanguage += $(this).val().replace(".", "") + ",";
                }
            });

            var filterCriteria = { filterByMeetingDocument, filterByLanguage };
            deleteCookie("MeetingFilterOptions");
            setCookie("MeetingFilterOptions", JSON.stringify(filterCriteria));
            //sessionStorage.removeItem("MeetingFilterOptions");
            //sessionStorage.setItem("MeetingFilterOptions", JSON.stringify(filterCriteria));
            $("#dvSuccessMessage").show();
            $("#dvSuccessMessage").fadeOut(3000);
            return false;
        }

        function RetrieveFilterOptions() {
            var allFilterOptions = getCookie("MeetingFilterOptions");
            //var allFilterOptions = sessionStorage.getItem("MeetingFilterOptions");
            if (typeof allFilterOptions != "undefined" && allFilterOptions != null && allFilterOptions != "") {
                allFilterOptions = JSON.parse(allFilterOptions)
                var meetingDocumentFilter = allFilterOptions.filterByMeetingDocument;
                meetingDocumentFilter = meetingDocumentFilter.split(',');
                for (var i = 0; i < meetingDocumentFilter.length; i++) {
                    var meetingDocumentOptionValue = meetingDocumentFilter[i];
                    $(".common-filter").each(function () {
                        if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });

                }
                var languageFilter = allFilterOptions.filterByLanguage;
                languageFilter = languageFilter.split(',');
                for (var i = 0; i < languageFilter.length; i++) {
                    var languageOptionValue = languageFilter[i];
                    $(".chkLanguage").each(function () {
                        if ($(this).val().replace("0,", "") == languageOptionValue) {
                            $(this).prop("checked", true);
                            return false;
                        }
                    });
                }

            }
            else {
                if ($("#hdnMeetingDocumentFilter").val() != "") {
                    var meetingDocumentFilter = $("#hdnMeetingDocumentFilter").val();
                    meetingDocumentFilter = meetingDocumentFilter.split(',');
                    for (var i = 0; i < meetingDocumentFilter.length; i++) {
                        var meetingDocumentOptionValue = meetingDocumentFilter[i];
                        if (meetingDocumentOptionValue != "") {
                            $(".common-filter").each(function () {
                                if ($(this).val().toLowerCase() == meetingDocumentOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnDocumentTypeFilter").val() != "") {
                    var documentTypeFilter = $("#hdnDocumentTypeFilter").val();
                    documentTypeFilter = documentTypeFilter.split(',');
                    for (var i = 0; i < documentTypeFilter.length; i++) {
                        var documentTypeOptionValue = documentTypeFilter[i];
                        if (documentTypeOptionValue != "") {
                            $(".chkDocumentTypes").each(function () {
                                var chkValue = $(this).val().toLowerCase();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue == documentTypeOptionValue.toLowerCase()) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
                if ($("#hdnLanguageFilter").val() != "") {
                    var languageFilter = $("#hdnLanguageFilter").val();
                    languageFilter = languageFilter.split(',');
                    for (var i = 0; i < languageFilter.length; i++) {
                        var languageOptionValue = languageFilter[i];
                        if (languageOptionValue != "") {
                            $(".chkLanguage").each(function () {
                                var chkValue = $(this).val();
                                chkValue = chkValue.replace(".", "");
                                if (chkValue.indexOf(languageOptionValue) != -1) {
                                    $(this).prop("checked", true);
                                    return false;
                                }
                            });
                        }
                    }
                }
            }
        }

        function bindDataTable() {
            {

                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide();
                    $("#meetingList .dataTables_empty").removeAttr("valign");
                    $("#meetingList .dataTables_empty").css("vertical-align", "top");
                    
                }
            }

            if ($("#ctl00_MainContent_IsFilter").val() == "1") {
                $('.dropdown-toggle i').addClass('filtered');
            }
            else {
                $('.dropdown-toggle i').removeClass('filtered');
            }
            $('.dropdown-toggle').next().css("display", "none");

            if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                $('#btnPreviousMonth').hide();
                $('#btnNextMonth').hide();
                //$('#monthText').css('margin', '0');
            }
            else {
                $('#btnPreviousMonth').show();
                $('#btnNextMonth').show();
                $('#btnPreviousMonth').css('margin', '0');
            }

            $("#btnPreviousMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $("#btnNextMonth").click(function () {
                var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                CurrentDate.setDate(1);
                CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                $("#btnFunnelFilterResults").click();
                document.getElementById('FilterResults').click();
                $('#ctl00_MainContent_LastDay').val(lastDay);
            });

            $(".fc-prev-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });

            $(".fc-next-button").click(function () {
                $("#calendar > .fc-toolbar > .fc-left > h1").text($("#calendar > .fc-toolbar > .fc-left > h2").text());
                if ($("#ctl00_MainContent_CurrentMonth").val() != "") {
                    var CurrentDate = new Date($("#calendar").fullCalendar('getDate').format());
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);

                    $("#ctl00_MainContent_IsMonthChange").val("1");
                }
            });
        }
        var prm = Sys.WebForms.PageRequestManager.getInstance();
        if (prm != null) {
            prm.add_endRequest(function (sender, e) {


                $(".DelegationRequest").click(function (e) {
                    e.preventDefault();

                    var a = $(this);
                    var width = 500;
                    var height = 600;
                    var left = (screen.width - width) / 2;
                    var top = (screen.height - height) / 2;
                    window.open(a.attr("href"), '', 'scrollbars=yes,menubar=no,width=' + width + ',height=' + height + ',resizable=yes,toolbar=no,location=no,status=no,top=' + top + ', left=' + left);
                });
                if ($('#all-list tbody tr').length > 1) {
                    $("#table-list > thead > tr").append("<th scope='col'></th>");
                    if ($.fn.DataTable.isDataTable('#table-list')) {
                        $('#table-list').dataTable().fnClearTable();
                        $('#table-list').dataTable().fnDestroy();
                    }
                    var meetingsTable = $('#table-list').DataTable({
                        "drawCallback": function (settings) {
                            $("#table-list thead").remove();
                        },
                        "dom": '<"clear">',
                    });
                    $("#meetingList .dataTables_empty").hide()
                }
                var mincount = 20;
                var maxcount = 40;
                //comment out fake lazy loading code
               // $(".meetingDetails").slice(40).hide();

                $(window).scroll(function () {
                    stickyHeader();
                    if ($(window).scrollTop() + window.innerHeight >= $(document).height() - 50) {
                        if (View.Current == Views.List ) {
                            //comment out fake lazy loading code
                            //$(".meetingDetails").slice(mincount, maxcount).fadeIn(1000);
                            //mincount = mincount + 20;
                            //maxcount = maxcount + 20;
                        }
                    }
                });
                if ($("#ctl00_MainContent_IsDateFilter").val() == "0") {

                    //$("#ctl00_MainContent_FilterByDate").val("");
                }

                if ($('#ctl00_MainContent_CurrentMonth').val() == '') {
                    $('#btnPreviousMonth').hide();
                    $('#btnNextMonth').hide();
                    //$('#monthText').css('margin', '0');
                }
                else {
                    $('#btnPreviousMonth').show();
                    $('#btnNextMonth').show();
                    $('#btnPreviousMonth').css('margin', '0');
                }
                $("#btnPreviousMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() - 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    //console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });

                $("#btnNextMonth").click(function () {

                    var CurrentDate = new Date($('#ctl00_MainContent_CurrentMonth').val());
                    CurrentDate.setDate(1);
                    CurrentDate.setMonth(CurrentDate.getMonth() + 1);
                    var firstDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth(), 1);
                    var lastDay = new Date(CurrentDate.getFullYear(), CurrentDate.getMonth() + 1, 0);
                    console.log(firstDay.format("MM/dd/yyyy") + " - " + lastDay.format("MM/dd/yyyy"));

                    $("#btnFunnelFilterResults").click();
                    document.getElementById('FilterResults').click();
                    $('#ctl00_MainContent_LastDay').val(lastDay);
                });
            });
        };
        var filterbyMeetingTypeSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lblMultiSelect',
            placeholder: 'Select Data'
        });
        var filterbyConflictMemberSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByConflictMember',
            placeholder: 'Select Data'
        });
        var filterbyStageSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStage',
            placeholder: 'Select Data'
        });
        var filterbyStatusSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByStatus',
            placeholder: 'Select Data'
        });
        var filterbyDepartmentSelect =
        new SlimSelect({
            select: '#ctl00_MainContent_lbFilterByDepartment',
            placeholder: 'Select Data'
        });

        function openConflictDetails(agendaItemId, meetingId, meetingTypeName) {
            $("#modelHeaderconflicts").prepend("<h2 id='MeetingTypeName' tabIndex='0' class='modal-title' aria-hidden='true' style='font-size: 17px'></h2>")
            $("#MeetingTypeName").html(meetingTypeName);

            $.ajax({
                type: "POST",
                contentType: "application/json",
                data: "{'AgendaItemId':'" + agendaItemId + "','MeetingId':'" + meetingId + "'}",
                url: "/MeetingsCalendarView.aspx/AgendaItemConflictsGetAll",
                dataType: "json",
                success: function (data) {
                    if (data.d != null && data.d != undefined) {
                        $("#table-conflicts-details-list > thead > tr").append("<th scope='col'></th>");
                        if ($.fn.DataTable.isDataTable('#table-conflicts-details-list')) {
                            $('#table-conflicts-details-list').dataTable().fnClearTable();
                            $('#table-conflicts-details-list').dataTable().fnDestroy();
                        }

                        var conflictDetailsTable = $('#table-conflicts-details-list').DataTable({
                            "dom": '<"modal-body"t><"modal-footer"p>',
                            "pagingType": "simple_numbers",
                            "pageLength": 1,
                            "ordering": false,
                            "drawCallback": function (settings) {
                                $("#table-conflicts-details-list thead").remove();
                                $('.paginate_button:not(.current)').removeAttr('aria-current');
                                $('.paginate_button.current').attr("aria-current", "page");
                                $('.dataTables_paginate').attr('role', 'region').attr('aria-label', 'pagination');
                            },
                            language: {
                                paginate: {
                                    previous: '<',
                                    next: '>'
                                },
                                processing: '<div class="loaderPosition"><span class="la la-spinner la-spin loaderDesign"></span></div>'
                            }
                        });
                        var tblRow = "";
                        for (var i = 0; i < data.d.length; i++) {
                            var element = data.d[i];
                            tblRow = '<table id="AgendaItemConflicts"><tr><td style="width:25%;"><strong>Agenda Item:</strong> </td><td style="width:75%;">' + element.ItemTitle + '</td></tr><tr><td><strong>Member in Conflict:</strong> </td><td>' + element.ConflictMember + '</td></tr><tr><td style="vertical-align: top;"><strong>Reason:</strong> </td><td>' + element.Reason + '</td></tr></table>';
                            conflictDetailsTable.row.add([tblRow]).draw();
                        }

                        $("#conflictsDetailsModal").modal('show');
                        $("#conflictsDetailsModal").removeAttr('aria-hidden');
                        $("#table-conflicts-details-list_previous").attr("aria-label", "Navigate to Previous Conflict");
                        if($("#table-conflicts-details-list_previous").hasClass("disabled")) {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_previous").attr("aria-disabled", "false");
                        }
                        $("#table-conflicts-details-list_next").attr("aria-label", "Navigate to Next Conflict");
                        if($("#table-conflicts-details-list_next").hasClass("disabled")) {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "true");
                        }
                        else {
                            $("#table-conflicts-details-list_next").attr("aria-disabled", "false");
                        }
                    }
                    tabIndexLoop(document.querySelector("#conflictsDetailsModal"), false, null);
                    setTimeout(function(){
                        $("#modelHeaderconflicts > button").focus();
                    }, 350);

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                }
            });
        }
    </script>
    

    

    <style>
        .sharing {
            display:none;;
            float: none !important;
        }

        .conflicts {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            display:none !important;;
        }

        .listView {
			display:none !important;;
        }

        .mergedListView {
            /*need to use !important here. Since, the mobile view from @media override this style for the button*/
            ;
        }

        .calendarView {
            ;
        }

        .pastView {
            display:none !important;;
        }
    </style>
    <input type="hidden" name="ctl00$MainContent$IsListView" id="ctl00_MainContent_IsListView" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsDateFilter" id="ctl00_MainContent_IsDateFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsConflicts" id="ctl00_MainContent_IsConflicts" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsMonthChange" id="ctl00_MainContent_IsMonthChange" value="0" />
    <input type="hidden" name="ctl00$MainContent$IsChangeFilter" id="ctl00_MainContent_IsChangeFilter" value="0" />
    <input type="hidden" name="ctl00$MainContent$hdnMeetingDocumentFilter" id="hdnMeetingDocumentFilter" value="agenda,AgendaCover,Addendum,Merged,PostAgenda,PostMinutes,AdditionalDocuments,MergedCover,PublicComments,Conflicts,PublicComments" />
    <input type="hidden" name="ctl00$MainContent$hdnDocumentTypeFilter" id="hdnDocumentTypeFilter" value="html,pdf" />
    <input type="hidden" name="ctl00$MainContent$hdnLanguageFilter" id="hdnLanguageFilter" value="9,12" />
    <input type="hidden" name="ctl00$MainContent$hdnIsLanguageFilterOn" id="hdnIsLanguageFilterOn" value="true" />
    <script>
        function Size_Changed() {
            CurrentHeight_Send();
        }

        function CurrentHeight_Send() {
            if (window.parent !== window.self) {
                window.parent.postMessage($('body').height(), "*");
            }
        }

        function Message_Recieved(event) {
            CurrentHeight_Send();
        }

        // Setup the listener.
        if (window.addEventListener) {
            addEventListener("message", Message_Recieved, false);
        }
        else {
            attachEvent("onmessage", Message_Recieved);
        }
    </script>

            <footer id="footer" style="display: none;">
                <div class="copyright">eSCRIBE Version : 50301700</div>
            </footer>
        </div>
    </form>
</body>
</html>

  recorded_at: Mon, 15 Jan 2024 03:34:45 GMT
recorded_with: VCR 6.1.0
